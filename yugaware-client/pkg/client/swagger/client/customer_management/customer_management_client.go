// Code generated by go-swagger; DO NOT EDIT.

package customer_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CustomerDetail(params *CustomerDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerDetailOK, error)

	ListOfCustomers(params *ListOfCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOfCustomersOK, error)

	UpdateCustomer(params *UpdateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomerOK, error)

	DeleteCustomer(params *DeleteCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerOK, error)

	GetHostInfo(params *GetHostInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHostInfoOK, error)

	Metrics(params *MetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MetricsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CustomerDetail gets a customer s details
*/
func (a *Client) CustomerDetail(params *CustomerDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CustomerDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CustomerDetail",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOfCustomers lists customers
*/
func (a *Client) ListOfCustomers(params *ListOfCustomersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOfCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOfCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListOfCustomers",
		Method:             "GET",
		PathPattern:        "/api/v1/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListOfCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOfCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListOfCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCustomer updates a customer
*/
func (a *Client) UpdateCustomer(params *UpdateCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCustomer",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCustomer deletes a customer
*/
func (a *Client) DeleteCustomer(params *DeleteCustomerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCustomer",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHostInfo gets a customer s host info
*/
func (a *Client) GetHostInfo(params *GetHostInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHostInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHostInfo",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/host_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetHostInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHostInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Metrics adds metrics to a customer
*/
func (a *Client) Metrics(params *MetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "metrics",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for metrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
