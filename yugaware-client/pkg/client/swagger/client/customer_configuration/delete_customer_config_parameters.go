// Code generated by go-swagger; DO NOT EDIT.

package customer_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteCustomerConfigParams creates a new DeleteCustomerConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteCustomerConfigParams() *DeleteCustomerConfigParams {
	return &DeleteCustomerConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteCustomerConfigParamsWithTimeout creates a new DeleteCustomerConfigParams object
// with the ability to set a timeout on a request.
func NewDeleteCustomerConfigParamsWithTimeout(timeout time.Duration) *DeleteCustomerConfigParams {
	return &DeleteCustomerConfigParams{
		timeout: timeout,
	}
}

// NewDeleteCustomerConfigParamsWithContext creates a new DeleteCustomerConfigParams object
// with the ability to set a context for a request.
func NewDeleteCustomerConfigParamsWithContext(ctx context.Context) *DeleteCustomerConfigParams {
	return &DeleteCustomerConfigParams{
		Context: ctx,
	}
}

// NewDeleteCustomerConfigParamsWithHTTPClient creates a new DeleteCustomerConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteCustomerConfigParamsWithHTTPClient(client *http.Client) *DeleteCustomerConfigParams {
	return &DeleteCustomerConfigParams{
		HTTPClient: client,
	}
}

/*
DeleteCustomerConfigParams contains all the parameters to send to the API endpoint

	for the delete customer config operation.

	Typically these are written to a http.Request.
*/
type DeleteCustomerConfigParams struct {

	// CUUID.
	//
	// Format: uuid
	CUUID strfmt.UUID

	// ConfigUUID.
	//
	// Format: uuid
	ConfigUUID strfmt.UUID

	// IsDeleteBackups.
	IsDeleteBackups *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete customer config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteCustomerConfigParams) WithDefaults() *DeleteCustomerConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete customer config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteCustomerConfigParams) SetDefaults() {
	var (
		isDeleteBackupsDefault = bool(false)
	)

	val := DeleteCustomerConfigParams{
		IsDeleteBackups: &isDeleteBackupsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete customer config params
func (o *DeleteCustomerConfigParams) WithTimeout(timeout time.Duration) *DeleteCustomerConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete customer config params
func (o *DeleteCustomerConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete customer config params
func (o *DeleteCustomerConfigParams) WithContext(ctx context.Context) *DeleteCustomerConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete customer config params
func (o *DeleteCustomerConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete customer config params
func (o *DeleteCustomerConfigParams) WithHTTPClient(client *http.Client) *DeleteCustomerConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete customer config params
func (o *DeleteCustomerConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCUUID adds the cUUID to the delete customer config params
func (o *DeleteCustomerConfigParams) WithCUUID(cUUID strfmt.UUID) *DeleteCustomerConfigParams {
	o.SetCUUID(cUUID)
	return o
}

// SetCUUID adds the cUuid to the delete customer config params
func (o *DeleteCustomerConfigParams) SetCUUID(cUUID strfmt.UUID) {
	o.CUUID = cUUID
}

// WithConfigUUID adds the configUUID to the delete customer config params
func (o *DeleteCustomerConfigParams) WithConfigUUID(configUUID strfmt.UUID) *DeleteCustomerConfigParams {
	o.SetConfigUUID(configUUID)
	return o
}

// SetConfigUUID adds the configUuid to the delete customer config params
func (o *DeleteCustomerConfigParams) SetConfigUUID(configUUID strfmt.UUID) {
	o.ConfigUUID = configUUID
}

// WithIsDeleteBackups adds the isDeleteBackups to the delete customer config params
func (o *DeleteCustomerConfigParams) WithIsDeleteBackups(isDeleteBackups *bool) *DeleteCustomerConfigParams {
	o.SetIsDeleteBackups(isDeleteBackups)
	return o
}

// SetIsDeleteBackups adds the isDeleteBackups to the delete customer config params
func (o *DeleteCustomerConfigParams) SetIsDeleteBackups(isDeleteBackups *bool) {
	o.IsDeleteBackups = isDeleteBackups
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteCustomerConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cUUID
	if err := r.SetPathParam("cUUID", o.CUUID.String()); err != nil {
		return err
	}

	// path param configUUID
	if err := r.SetPathParam("configUUID", o.ConfigUUID.String()); err != nil {
		return err
	}

	if o.IsDeleteBackups != nil {

		// query param isDeleteBackups
		var qrIsDeleteBackups bool

		if o.IsDeleteBackups != nil {
			qrIsDeleteBackups = *o.IsDeleteBackups
		}
		qIsDeleteBackups := swag.FormatBool(qrIsDeleteBackups)
		if qIsDeleteBackups != "" {

			if err := r.SetQueryParam("isDeleteBackups", qIsDeleteBackups); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
