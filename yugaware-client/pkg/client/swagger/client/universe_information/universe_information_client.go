// Code generated by go-swagger; DO NOT EDIT.

package universe_information

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new universe information API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universe information API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DownloadNodeLogs(params *DownloadNodeLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadNodeLogsOK, error)

	GetLiveQueries(params *GetLiveQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLiveQueriesOK, error)

	GetMasterLeaderIP(params *GetMasterLeaderIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMasterLeaderIPOK, error)

	GetSlowQueries(params *GetSlowQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSlowQueriesOK, error)

	GetUniverseCost(params *GetUniverseCostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseCostOK, error)

	GetUniverseCostForAll(params *GetUniverseCostForAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseCostForAllOK, error)

	HealthCheckUniverse(params *HealthCheckUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckUniverseOK, error)

	ResetSlowQueries(params *ResetSlowQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetSlowQueriesOK, error)

	TriggerHealthCheck(params *TriggerHealthCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerHealthCheckOK, error)

	UniverseStatus(params *UniverseStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UniverseStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DownloadNodeLogs downloads a node s logs

Downloads the log files from a given node.
*/
func (a *Client) DownloadNodeLogs(params *DownloadNodeLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DownloadNodeLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadNodeLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadNodeLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/{nodeName}/download_logs",
		ProducesMediaTypes: []string{"application/x-compressed"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DownloadNodeLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadNodeLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for downloadNodeLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLiveQueries gets live queries for a universe
*/
func (a *Client) GetLiveQueries(params *GetLiveQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLiveQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLiveQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLiveQueries",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/live_queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLiveQueriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLiveQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLiveQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMasterLeaderIP gets IP address of a universe s master leader
*/
func (a *Client) GetMasterLeaderIP(params *GetMasterLeaderIPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMasterLeaderIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMasterLeaderIPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMasterLeaderIP",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/leader",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMasterLeaderIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMasterLeaderIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMasterLeaderIP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSlowQueries gets slow queries for a universe
*/
func (a *Client) GetSlowQueries(params *GetSlowQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSlowQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSlowQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSlowQueries",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/slow_queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSlowQueriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSlowQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSlowQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUniverseCost gets a cost estimate for a universe
*/
func (a *Client) GetUniverseCost(params *GetUniverseCostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseCostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseCostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUniverseCost",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUniverseCostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseCostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUniverseCost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUniverseCostForAll gets a cost estimate for all universes
*/
func (a *Client) GetUniverseCostForAll(params *GetUniverseCostForAllParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseCostForAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseCostForAllParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUniverseCostForAll",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/cost",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUniverseCostForAllReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseCostForAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUniverseCostForAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HealthCheckUniverse runs a universe health check

Checks the health of all tablet servers and masters in the universe, as well as certain conditions on the machines themselves, including disk utilization, presence of FATAL or core files, and more.
*/
func (a *Client) HealthCheckUniverse(params *HealthCheckUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HealthCheckUniverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckUniverseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "healthCheckUniverse",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/health_check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HealthCheckUniverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthCheckUniverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthCheckUniverse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResetSlowQueries resets slow queries for a universe
*/
func (a *Client) ResetSlowQueries(params *ResetSlowQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetSlowQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetSlowQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetSlowQueries",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/slow_queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResetSlowQueriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetSlowQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetSlowQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TriggerHealthCheck triggers a universe health check

Trigger a universe health check and return the trigger time.
*/
func (a *Client) TriggerHealthCheck(params *TriggerHealthCheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerHealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerHealthCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerHealthCheck",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/trigger_health_check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TriggerHealthCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerHealthCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for triggerHealthCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UniverseStatus gets a universe s status

This will return a Map of node name to its status in json format
*/
func (a *Client) UniverseStatus(params *UniverseStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UniverseStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUniverseStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "universeStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UniverseStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UniverseStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for universeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
