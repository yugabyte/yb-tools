// Code generated by go-swagger; DO NOT EDIT.

package table_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new table management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for table management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AlterTable(params *AlterTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AlterTableOK, error)

	BulkImportData(params *BulkImportDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkImportDataOK, error)

	CreateSingleTableBackup(params *CreateSingleTableBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSingleTableBackupOK, error)

	CreateTable(params *CreateTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTableOK, error)

	CreateTableSpaces(params *CreateTableSpacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTableSpacesOK, error)

	DescribeTable(params *DescribeTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeTableOK, error)

	DropTable(params *DropTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DropTableOK, error)

	GetAllTableSpaces(params *GetAllTableSpacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTableSpacesOK, error)

	GetAllTables(params *GetAllTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTablesOK, error)

	GetYQLDataTypes(params *GetYQLDataTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYQLDataTypesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AlterTable alters a yugabyte d b table
*/
func (a *Client) AlterTable(params *AlterTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AlterTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAlterTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "alterTable",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AlterTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AlterTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for alterTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BulkImportData bulks import data

Bulk import data into the specified table. This is currently AWS-only.
*/
func (a *Client) BulkImportData(params *BulkImportDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BulkImportDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkImportDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bulkImportData",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}/bulk_import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BulkImportDataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BulkImportDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bulkImportData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSingleTableBackup creates a single table backup
*/
func (a *Client) CreateSingleTableBackup(params *CreateSingleTableBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSingleTableBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSingleTableBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSingleTableBackup",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}/create_backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSingleTableBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSingleTableBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSingleTableBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTable creates a yugabyte d b table
*/
func (a *Client) CreateTable(params *CreateTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTable",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTableSpaces creates table spaces
*/
func (a *Client) CreateTableSpaces(params *CreateTableSpacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTableSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTableSpacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTableSpaces",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tablespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTableSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTableSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTableSpaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DescribeTable describes a table
*/
func (a *Client) DescribeTable(params *DescribeTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DescribeTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "describeTable",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DescribeTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for describeTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DropTable drops a yugabyte d b table
*/
func (a *Client) DropTable(params *DropTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DropTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDropTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "dropTable",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables/{tableUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DropTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DropTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dropTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllTableSpaces lists all tablespaces

Get a list of all tablespaces of a given universe
*/
func (a *Client) GetAllTableSpaces(params *GetAllTableSpacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTableSpacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTableSpacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTableSpaces",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tablespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllTableSpacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTableSpacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTableSpaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllTables lists all tables

Get a list of all tables in the specified universe
*/
func (a *Client) GetAllTables(params *GetAllTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTables",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllTablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetYQLDataTypes lists column types

Get a list of all defined column types.
*/
func (a *Client) GetYQLDataTypes(params *GetYQLDataTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYQLDataTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYQLDataTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getYQLDataTypes",
		Method:             "GET",
		PathPattern:        "/api/v1/metadata/yql_data_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetYQLDataTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYQLDataTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getYQLDataTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
