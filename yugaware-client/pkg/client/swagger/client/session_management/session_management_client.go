// Code generated by go-swagger; DO NOT EDIT.

package session_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new session management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for session management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppVersion(params *AppVersionParams, opts ...ClientOption) (*AppVersionOK, error)

	CustomerCount(params *CustomerCountParams, opts ...ClientOption) (*CustomerCountOK, error)

	GetFilteredLogs(params *GetFilteredLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilteredLogsOK, error)

	GetLogs(params *GetLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogsOK, error)

	GetSessionInfo(params *GetSessionInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionInfoOK, error)

	RegisterCustomer(params *RegisterCustomerParams, opts ...ClientOption) (*RegisterCustomerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AppVersion apps version
*/
func (a *Client) AppVersion(params *AppVersionParams, opts ...ClientOption) (*AppVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "appVersion",
		Method:             "GET",
		PathPattern:        "/api/v1/app_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AppVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for appVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerCount customers count
*/
func (a *Client) CustomerCount(params *CustomerCountParams, opts ...ClientOption) (*CustomerCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "customerCount",
		Method:             "GET",
		PathPattern:        "/api/v1/customer_count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CustomerCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for customerCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFilteredLogs gets filtered logs

PLAT-3091: Adds security key (missing in upstream swagger.json)
*/
func (a *Client) GetFilteredLogs(params *GetFilteredLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilteredLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilteredLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilteredLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/logs",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFilteredLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilteredLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilteredLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLogs gets logs

PLAT-3091: Adds security key (missing in upstream swagger.json)
*/
func (a *Client) GetLogs(params *GetLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/logs/{maxLines}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSessionInfo gets current user customer uuid auth api token
*/
func (a *Client) GetSessionInfo(params *GetSessionInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSessionInfo",
		Method:             "GET",
		PathPattern:        "/api/v1/session_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSessionInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSessionInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterCustomer registers a customer

Creates new customer and user
*/
func (a *Client) RegisterCustomer(params *RegisterCustomerParams, opts ...ClientOption) (*RegisterCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterCustomerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerCustomer",
		Method:             "POST",
		PathPattern:        "/api/v1/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
