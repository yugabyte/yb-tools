// Code generated by go-swagger; DO NOT EDIT.

package session_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFilteredLogsParams creates a new GetFilteredLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFilteredLogsParams() *GetFilteredLogsParams {
	return &GetFilteredLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFilteredLogsParamsWithTimeout creates a new GetFilteredLogsParams object
// with the ability to set a timeout on a request.
func NewGetFilteredLogsParamsWithTimeout(timeout time.Duration) *GetFilteredLogsParams {
	return &GetFilteredLogsParams{
		timeout: timeout,
	}
}

// NewGetFilteredLogsParamsWithContext creates a new GetFilteredLogsParams object
// with the ability to set a context for a request.
func NewGetFilteredLogsParamsWithContext(ctx context.Context) *GetFilteredLogsParams {
	return &GetFilteredLogsParams{
		Context: ctx,
	}
}

// NewGetFilteredLogsParamsWithHTTPClient creates a new GetFilteredLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFilteredLogsParamsWithHTTPClient(client *http.Client) *GetFilteredLogsParams {
	return &GetFilteredLogsParams{
		HTTPClient: client,
	}
}

/*
GetFilteredLogsParams contains all the parameters to send to the API endpoint

	for the get filtered logs operation.

	Typically these are written to a http.Request.
*/
type GetFilteredLogsParams struct {

	// MaxLines.
	//
	// Format: int32
	// Default: 10000
	MaxLines *int32

	// QueryRegex.
	//
	// Default: "null"
	QueryRegex *string

	// UniverseName.
	//
	// Default: "null"
	UniverseName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get filtered logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilteredLogsParams) WithDefaults() *GetFilteredLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get filtered logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilteredLogsParams) SetDefaults() {
	var (
		maxLinesDefault = int32(10000)

		queryRegexDefault = string("null")

		universeNameDefault = string("null")
	)

	val := GetFilteredLogsParams{
		MaxLines:     &maxLinesDefault,
		QueryRegex:   &queryRegexDefault,
		UniverseName: &universeNameDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get filtered logs params
func (o *GetFilteredLogsParams) WithTimeout(timeout time.Duration) *GetFilteredLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get filtered logs params
func (o *GetFilteredLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get filtered logs params
func (o *GetFilteredLogsParams) WithContext(ctx context.Context) *GetFilteredLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get filtered logs params
func (o *GetFilteredLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get filtered logs params
func (o *GetFilteredLogsParams) WithHTTPClient(client *http.Client) *GetFilteredLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get filtered logs params
func (o *GetFilteredLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxLines adds the maxLines to the get filtered logs params
func (o *GetFilteredLogsParams) WithMaxLines(maxLines *int32) *GetFilteredLogsParams {
	o.SetMaxLines(maxLines)
	return o
}

// SetMaxLines adds the maxLines to the get filtered logs params
func (o *GetFilteredLogsParams) SetMaxLines(maxLines *int32) {
	o.MaxLines = maxLines
}

// WithQueryRegex adds the queryRegex to the get filtered logs params
func (o *GetFilteredLogsParams) WithQueryRegex(queryRegex *string) *GetFilteredLogsParams {
	o.SetQueryRegex(queryRegex)
	return o
}

// SetQueryRegex adds the queryRegex to the get filtered logs params
func (o *GetFilteredLogsParams) SetQueryRegex(queryRegex *string) {
	o.QueryRegex = queryRegex
}

// WithUniverseName adds the universeName to the get filtered logs params
func (o *GetFilteredLogsParams) WithUniverseName(universeName *string) *GetFilteredLogsParams {
	o.SetUniverseName(universeName)
	return o
}

// SetUniverseName adds the universeName to the get filtered logs params
func (o *GetFilteredLogsParams) SetUniverseName(universeName *string) {
	o.UniverseName = universeName
}

// WriteToRequest writes these params to a swagger request
func (o *GetFilteredLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaxLines != nil {

		// query param maxLines
		var qrMaxLines int32

		if o.MaxLines != nil {
			qrMaxLines = *o.MaxLines
		}
		qMaxLines := swag.FormatInt32(qrMaxLines)
		if qMaxLines != "" {

			if err := r.SetQueryParam("maxLines", qMaxLines); err != nil {
				return err
			}
		}
	}

	if o.QueryRegex != nil {

		// query param queryRegex
		var qrQueryRegex string

		if o.QueryRegex != nil {
			qrQueryRegex = *o.QueryRegex
		}
		qQueryRegex := qrQueryRegex
		if qQueryRegex != "" {

			if err := r.SetQueryParam("queryRegex", qQueryRegex); err != nil {
				return err
			}
		}
	}

	if o.UniverseName != nil {

		// query param universeName
		var qrUniverseName string

		if o.UniverseName != nil {
			qrUniverseName = *o.UniverseName
		}
		qUniverseName := qrUniverseName
		if qUniverseName != "" {

			if err := r.SetQueryParam("universeName", qUniverseName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
