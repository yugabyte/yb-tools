// Code generated by go-swagger; DO NOT EDIT.

package schedule_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new schedule management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schedule management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSchedule(params *DeleteScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleOK, error)

	DeleteScheduleV2(params *DeleteScheduleV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleV2OK, error)

	EditBackupScheduleV2(params *EditBackupScheduleV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditBackupScheduleV2OK, error)

	GetSchedule(params *GetScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleOK, error)

	ListSchedules(params *ListSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSchedulesOK, error)

	ListSchedulesV2(params *ListSchedulesV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSchedulesV2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteSchedule deletes a schedule
*/
func (a *Client) DeleteSchedule(params *DeleteScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSchedule",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/schedules/{sUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScheduleV2 deletes a schedule v2
*/
func (a *Client) DeleteScheduleV2(params *DeleteScheduleV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduleV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScheduleV2",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/schedules/{sUUID}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteScheduleV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScheduleV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScheduleV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditBackupScheduleV2 edits a backup schedule v2
*/
func (a *Client) EditBackupScheduleV2(params *EditBackupScheduleV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditBackupScheduleV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditBackupScheduleV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "editBackupScheduleV2",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/schedules/{sUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditBackupScheduleV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditBackupScheduleV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editBackupScheduleV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchedule gets schedule
*/
func (a *Client) GetSchedule(params *GetScheduleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSchedule",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/schedules/{sUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSchedules lists schedules
*/
func (a *Client) ListSchedules(params *ListSchedulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSchedules",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListSchedulesV2 lists schedules v2
*/
func (a *Client) ListSchedulesV2(params *ListSchedulesV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSchedulesV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSchedulesV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSchedulesV2",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/schedules/page",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSchedulesV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSchedulesV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSchedulesV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
