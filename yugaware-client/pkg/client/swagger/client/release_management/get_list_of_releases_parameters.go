// Code generated by go-swagger; DO NOT EDIT.

package release_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetListOfReleasesParams creates a new GetListOfReleasesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetListOfReleasesParams() *GetListOfReleasesParams {
	return &GetListOfReleasesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetListOfReleasesParamsWithTimeout creates a new GetListOfReleasesParams object
// with the ability to set a timeout on a request.
func NewGetListOfReleasesParamsWithTimeout(timeout time.Duration) *GetListOfReleasesParams {
	return &GetListOfReleasesParams{
		timeout: timeout,
	}
}

// NewGetListOfReleasesParamsWithContext creates a new GetListOfReleasesParams object
// with the ability to set a context for a request.
func NewGetListOfReleasesParamsWithContext(ctx context.Context) *GetListOfReleasesParams {
	return &GetListOfReleasesParams{
		Context: ctx,
	}
}

// NewGetListOfReleasesParamsWithHTTPClient creates a new GetListOfReleasesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetListOfReleasesParamsWithHTTPClient(client *http.Client) *GetListOfReleasesParams {
	return &GetListOfReleasesParams{
		HTTPClient: client,
	}
}

/*
GetListOfReleasesParams contains all the parameters to send to the API endpoint

	for the get list of releases operation.

	Typically these are written to a http.Request.
*/
type GetListOfReleasesParams struct {

	// CUUID.
	//
	// Format: uuid
	CUUID strfmt.UUID

	// IncludeMetadata.
	IncludeMetadata *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get list of releases params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListOfReleasesParams) WithDefaults() *GetListOfReleasesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get list of releases params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListOfReleasesParams) SetDefaults() {
	var (
		includeMetadataDefault = bool(false)
	)

	val := GetListOfReleasesParams{
		IncludeMetadata: &includeMetadataDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get list of releases params
func (o *GetListOfReleasesParams) WithTimeout(timeout time.Duration) *GetListOfReleasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get list of releases params
func (o *GetListOfReleasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get list of releases params
func (o *GetListOfReleasesParams) WithContext(ctx context.Context) *GetListOfReleasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get list of releases params
func (o *GetListOfReleasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get list of releases params
func (o *GetListOfReleasesParams) WithHTTPClient(client *http.Client) *GetListOfReleasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get list of releases params
func (o *GetListOfReleasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCUUID adds the cUUID to the get list of releases params
func (o *GetListOfReleasesParams) WithCUUID(cUUID strfmt.UUID) *GetListOfReleasesParams {
	o.SetCUUID(cUUID)
	return o
}

// SetCUUID adds the cUuid to the get list of releases params
func (o *GetListOfReleasesParams) SetCUUID(cUUID strfmt.UUID) {
	o.CUUID = cUUID
}

// WithIncludeMetadata adds the includeMetadata to the get list of releases params
func (o *GetListOfReleasesParams) WithIncludeMetadata(includeMetadata *bool) *GetListOfReleasesParams {
	o.SetIncludeMetadata(includeMetadata)
	return o
}

// SetIncludeMetadata adds the includeMetadata to the get list of releases params
func (o *GetListOfReleasesParams) SetIncludeMetadata(includeMetadata *bool) {
	o.IncludeMetadata = includeMetadata
}

// WriteToRequest writes these params to a swagger request
func (o *GetListOfReleasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cUUID
	if err := r.SetPathParam("cUUID", o.CUUID.String()); err != nil {
		return err
	}

	if o.IncludeMetadata != nil {

		// query param includeMetadata
		var qrIncludeMetadata bool

		if o.IncludeMetadata != nil {
			qrIncludeMetadata = *o.IncludeMetadata
		}
		qIncludeMetadata := swag.FormatBool(qrIncludeMetadata)
		if qIncludeMetadata != "" {

			if err := r.SetQueryParam("includeMetadata", qIncludeMetadata); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
