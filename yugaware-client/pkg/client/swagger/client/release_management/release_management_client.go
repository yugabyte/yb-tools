// Code generated by go-swagger; DO NOT EDIT.

package release_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new release management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for release management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRelease(params *CreateReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReleaseOK, error)

	DeleteRelease(params *DeleteReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReleaseOK, error)

	GetListOfRegionReleases(params *GetListOfRegionReleasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListOfRegionReleasesOK, error)

	GetListOfReleases(params *GetListOfReleasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListOfReleasesOK, error)

	Refresh(params *RefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshOK, error)

	UpdateRelease(params *UpdateReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReleaseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRelease creates a release
*/
func (a *Client) CreateRelease(params *CreateReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRelease",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRelease deletes a release
*/
func (a *Client) DeleteRelease(params *DeleteReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRelease",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/releases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetListOfRegionReleases lists all releases valid in region
*/
func (a *Client) GetListOfRegionReleases(params *GetListOfRegionReleasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListOfRegionReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfRegionReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getListOfRegionReleases",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/providers/{pUUID}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetListOfRegionReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListOfRegionReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListOfRegionReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetListOfReleases lists all releases
*/
func (a *Client) GetListOfReleases(params *GetListOfReleasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListOfReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getListOfReleases",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetListOfReleasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListOfReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListOfReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Refresh refreshes a release
*/
func (a *Client) Refresh(params *RefreshParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RefreshReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refresh: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRelease updates a release
*/
func (a *Client) UpdateRelease(params *UpdateReleaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReleaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRelease",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/releases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateReleaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReleaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
