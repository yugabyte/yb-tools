// Code generated by go-swagger; DO NOT EDIT.

package certificate_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificate info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificate info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSelfSignedCert(params *CreateSelfSignedCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSelfSignedCertOK, error)

	DeleteCertificate(params *DeleteCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCertificateOK, error)

	EditCertificate(params *EditCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditCertificateOK, error)

	GetCertificate(params *GetCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateOK, error)

	GetClientCert(params *GetClientCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientCertOK, error)

	GetListOfCertificate(params *GetListOfCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListOfCertificateOK, error)

	GetRootCert(params *GetRootCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRootCertOK, error)

	UpdateEmptyCustomCert(params *UpdateEmptyCustomCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmptyCustomCertOK, error)

	Upload(params *UploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSelfSignedCert creates a self signed certificate
*/
func (a *Client) CreateSelfSignedCert(params *CreateSelfSignedCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSelfSignedCertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSelfSignedCertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSelfSignedCert",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates/create_self_signed_cert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSelfSignedCertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSelfSignedCertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSelfSignedCert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCertificate deletes a certificate
*/
func (a *Client) DeleteCertificate(params *DeleteCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCertificate",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates/{rUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditCertificate edits TLS certificate config details
*/
func (a *Client) EditCertificate(params *EditCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editCertificate",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates/{rUUID}/edit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCertificate gets a certificate s UUID
*/
func (a *Client) GetCertificate(params *GetCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCertificate",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientCert adds a client certificate
*/
func (a *Client) GetClientCert(params *GetClientCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientCertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientCertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClientCert",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates/{rUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClientCertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientCertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClientCert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetListOfCertificate lists a customer s certificates
*/
func (a *Client) GetListOfCertificate(params *GetListOfCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetListOfCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getListOfCertificate",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetListOfCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetListOfCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getListOfCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRootCert gets a customer s root certificate

UNOFFICIAL ADDITION: Add root certificate to return value
*/
func (a *Client) GetRootCert(params *GetRootCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRootCertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootCertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRootCert",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates/{rUUID}/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRootCertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRootCertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRootCert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEmptyCustomCert updates an empty certificate
*/
func (a *Client) UpdateEmptyCustomCert(params *UpdateEmptyCustomCertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateEmptyCustomCertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmptyCustomCertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEmptyCustomCert",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates/{rUUID}/update_empty_cert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateEmptyCustomCertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEmptyCustomCertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEmptyCustomCert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Upload restores a certificate from backup
*/
func (a *Client) Upload(params *UploadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upload",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upload: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
