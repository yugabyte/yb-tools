// Code generated by go-swagger; DO NOT EDIT.

package asynchronous_replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new asynchronous replication API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for asynchronous replication API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateXClusterConfig(params *CreateXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateXClusterConfigOK, error)

	DeleteXClusterConfig(params *DeleteXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteXClusterConfigOK, error)

	EditXClusterConfig(params *EditXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditXClusterConfigOK, error)

	GetXClusterConfig(params *GetXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetXClusterConfigOK, error)

	SyncXClusterConfig(params *SyncXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncXClusterConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateXClusterConfig creates xcluster config
*/
func (a *Client) CreateXClusterConfig(params *CreateXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateXClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateXClusterConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createXClusterConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/xcluster_configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateXClusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateXClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createXClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteXClusterConfig deletes xcluster config
*/
func (a *Client) DeleteXClusterConfig(params *DeleteXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteXClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteXClusterConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteXClusterConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteXClusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteXClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteXClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditXClusterConfig edits xcluster config
*/
func (a *Client) EditXClusterConfig(params *EditXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditXClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditXClusterConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editXClusterConfig",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditXClusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditXClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editXClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetXClusterConfig gets xcluster config
*/
func (a *Client) GetXClusterConfig(params *GetXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetXClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetXClusterConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getXClusterConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/xcluster_configs/{xccUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetXClusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetXClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getXClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SyncXClusterConfig syncs xcluster config

Changes from upstream: Changes default value of targetUniverseUUID to null
*/
func (a *Client) SyncXClusterConfig(params *SyncXClusterConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncXClusterConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncXClusterConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncXClusterConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/xcluster_configs/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncXClusterConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncXClusterConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncXClusterConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
