// Code generated by go-swagger; DO NOT EDIT.

package access_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new access keys API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access keys API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAccesskey(params *CreateAccesskeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAccesskeyOK, error)

	DeleteAccesskey(params *DeleteAccesskeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccesskeyOK, error)

	Index(params *IndexParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IndexOK, error)

	List(params *ListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAccesskey creates an access key
*/
func (a *Client) CreateAccesskey(params *CreateAccesskeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAccesskeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccesskeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_accesskey",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/providers/{pUUID}/access_keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAccesskeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccesskeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_accesskey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccesskey deletes an access key
*/
func (a *Client) DeleteAccesskey(params *DeleteAccesskeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccesskeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccesskeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_accesskey",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/providers/{pUUID}/access_keys/{keyCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAccesskeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccesskeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_accesskey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Index gets an access key
*/
func (a *Client) Index(params *IndexParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IndexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "index",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/providers/{pUUID}/access_keys/{keyCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IndexReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for index: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
List lists access keys for a specific provider
*/
func (a *Client) List(params *ListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "list",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/providers/{pUUID}/access_keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
