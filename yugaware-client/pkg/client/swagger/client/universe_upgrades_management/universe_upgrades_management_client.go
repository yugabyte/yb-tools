// Code generated by go-swagger; DO NOT EDIT.

package universe_upgrades_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new universe upgrades management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universe upgrades management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ResizeNode(params *ResizeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResizeNodeOK, error)

	RestartUniverse(params *RestartUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartUniverseOK, error)

	UpgradeCerts(params *UpgradeCertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeCertsOK, error)

	UpgradeGFlags(params *UpgradeGFlagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeGFlagsOK, error)

	UpgradeSoftware(params *UpgradeSoftwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeSoftwareOK, error)

	UpgradeSystemd(params *UpgradeSystemdParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeSystemdOK, error)

	UpgradeThirdpartySoftware(params *UpgradeThirdpartySoftwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeThirdpartySoftwareOK, error)

	UpgradeTLS(params *UpgradeTLSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeTLSOK, error)

	UpgradeVMImage(params *UpgradeVMImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeVMImageOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ResizeNode resizes node

Queues a task to perform node resize and rolling restart in a universe.
*/
func (a *Client) ResizeNode(params *ResizeNodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResizeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResizeNodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resizeNode",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/resize_node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResizeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResizeNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resizeNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestartUniverse restarts universe

Queues a task to perform a rolling restart in a universe.
*/
func (a *Client) RestartUniverse(params *RestartUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartUniverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartUniverseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restartUniverse",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestartUniverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartUniverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restartUniverse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeCerts upgrades certs

Queues a task to perform certificate rotation and rolling restart in a universe.
*/
func (a *Client) UpgradeCerts(params *UpgradeCertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeCertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeCerts",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/certs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeCertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeCertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeCerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeGFlags upgrades g flags

Queues a task to perform gflags upgrade and rolling restart in a universe.
*/
func (a *Client) UpgradeGFlags(params *UpgradeGFlagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeGFlagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeGFlagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeGFlags",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/gflags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeGFlagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeGFlagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeGFlags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeSoftware upgrades software

Queues a task to perform software upgrade and rolling restart in a universe.
*/
func (a *Client) UpgradeSoftware(params *UpgradeSoftwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeSoftwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeSoftwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeSoftware",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/software",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeSoftwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeSoftwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeSoftware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeSystemd upgrades systemd

Queues a task to perform systemd upgrade and rolling restart in a universe.
*/
func (a *Client) UpgradeSystemd(params *UpgradeSystemdParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeSystemdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeSystemdParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeSystemd",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/systemd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeSystemdReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeSystemdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeSystemd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeThirdpartySoftware upgrades third party software

Queues a task to perform upgrade third-party software in a universe.
*/
func (a *Client) UpgradeThirdpartySoftware(params *UpgradeThirdpartySoftwareParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeThirdpartySoftwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeThirdpartySoftwareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeThirdpartySoftware",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/thirdparty_software",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeThirdpartySoftwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeThirdpartySoftwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeThirdpartySoftware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeTLS upgrades TLS

Queues a task to perform TLS ugprade and rolling restart in a universe.
*/
func (a *Client) UpgradeTLS(params *UpgradeTLSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeTLSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeTLSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeTls",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/tls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeTLSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeTLSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeTls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpgradeVMImage upgrades VM image

Queues a task to perform VM Image upgrade and rolling restart in a universe.
*/
func (a *Client) UpgradeVMImage(params *UpgradeVMImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpgradeVMImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeVMImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upgradeVMImage",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/upgrade/vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeVMImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradeVMImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upgradeVMImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
