// Code generated by go-swagger; DO NOT EDIT.

package encryption_at_rest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new encryption at rest API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for encryption at rest API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateKMSConfig(params *CreateKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKMSConfigOK, error)

	DeleteKMSConfig(params *DeleteKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKMSConfigOK, error)

	EditKMSConfig(params *EditKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditKMSConfigOK, error)

	GetCurrentKeyRef(params *GetCurrentKeyRefParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentKeyRefOK, error)

	GetKMSConfig(params *GetKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKMSConfigOK, error)

	GetKeyRefHistory(params *GetKeyRefHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKeyRefHistoryOK, error)

	ListKMSConfigs(params *ListKMSConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListKMSConfigsOK, error)

	RemoveKeyRefHistory(params *RemoveKeyRefHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveKeyRefHistoryOK, error)

	RetrieveKey(params *RetrieveKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveKeyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateKMSConfig creates a k m s configuration
*/
func (a *Client) CreateKMSConfig(params *CreateKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateKMSConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKMSConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createKMSConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/kms_configs/{kmsProvider}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKMSConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKMSConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createKMSConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteKMSConfig deletes a k m s configuration
*/
func (a *Client) DeleteKMSConfig(params *DeleteKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteKMSConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKMSConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteKMSConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/kms_configs/{configUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKMSConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKMSConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteKMSConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EditKMSConfig edits a k m s configuration
*/
func (a *Client) EditKMSConfig(params *EditKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EditKMSConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditKMSConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "editKMSConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/kms_configs/{configUUID}/edit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EditKMSConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EditKMSConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for editKMSConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCurrentKeyRef gets a universe s key reference
*/
func (a *Client) GetCurrentKeyRef(params *GetCurrentKeyRefParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentKeyRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentKeyRefParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentKeyRef",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms/key_ref",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCurrentKeyRefReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentKeyRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentKeyRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKMSConfig gets details of a k m s configuration
*/
func (a *Client) GetKMSConfig(params *GetKMSConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKMSConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKMSConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKMSConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/kms_configs/{configUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKMSConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKMSConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKMSConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetKeyRefHistory gets a universe s key reference history
*/
func (a *Client) GetKeyRefHistory(params *GetKeyRefHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetKeyRefHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyRefHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getKeyRefHistory",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKeyRefHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKeyRefHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getKeyRefHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListKMSConfigs lists k m s configurations
*/
func (a *Client) ListKMSConfigs(params *ListKMSConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListKMSConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListKMSConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listKMSConfigs",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/kms_configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListKMSConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListKMSConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listKMSConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveKeyRefHistory removes a universe s key reference history
*/
func (a *Client) RemoveKeyRefHistory(params *RemoveKeyRefHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveKeyRefHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveKeyRefHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeKeyRefHistory",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveKeyRefHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveKeyRefHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeKeyRefHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetrieveKey retrives a universe s k m s key
*/
func (a *Client) RetrieveKey(params *RetrieveKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetrieveKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retrieveKey",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/kms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetrieveKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retrieveKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
