// Code generated by go-swagger; DO NOT EDIT.

package universe_node_metadata_metamaster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new universe node metadata metamaster API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universe node metadata metamaster API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetMasterAddresses(params *GetMasterAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMasterAddressesOK, error)

	GetRedisServerAddresses(params *GetRedisServerAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRedisServerAddressesOK, error)

	GetUniverseMasterNodes(params *GetUniverseMasterNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseMasterNodesOK, error)

	GetYQLServerAddresses(params *GetYQLServerAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYQLServerAddressesOK, error)

	GetYSQLServerAddresses(params *GetYSQLServerAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYSQLServerAddressesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetMasterAddresses lists a master node s addresses
*/
func (a *Client) GetMasterAddresses(params *GetMasterAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMasterAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMasterAddressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMasterAddresses",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/masters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMasterAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMasterAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMasterAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRedisServerAddresses lists a r e d i s server s addresses
*/
func (a *Client) GetRedisServerAddresses(params *GetRedisServerAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRedisServerAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRedisServerAddressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRedisServerAddresses",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/redisservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRedisServerAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRedisServerAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRedisServerAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUniverseMasterNodes lists a universe s master nodes
*/
func (a *Client) GetUniverseMasterNodes(params *GetUniverseMasterNodesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseMasterNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseMasterNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUniverseMasterNodes",
		Method:             "GET",
		PathPattern:        "/metamaster/universe/{universeUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUniverseMasterNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseMasterNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUniverseMasterNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetYQLServerAddresses lists a y q l server s addresses
*/
func (a *Client) GetYQLServerAddresses(params *GetYQLServerAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYQLServerAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYQLServerAddressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getYQLServerAddresses",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/yqlservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetYQLServerAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYQLServerAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getYQLServerAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetYSQLServerAddresses lists a y SQL server s addresses
*/
func (a *Client) GetYSQLServerAddresses(params *GetYSQLServerAddressesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetYSQLServerAddressesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetYSQLServerAddressesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getYSQLServerAddresses",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/ysqlservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetYSQLServerAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetYSQLServerAddressesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getYSQLServerAddresses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
