// Code generated by go-swagger; DO NOT EDIT.

package customer_tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new customer tasks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer tasks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AbortTask(params *AbortTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortTaskOK, error)

	FailedSubtasks(params *FailedSubtasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FailedSubtasksOK, error)

	RetryTask(params *RetryTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetryTaskOK, error)

	TaskStatus(params *TaskStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskStatusOK, error)

	TasksList(params *TasksListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TasksListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AbortTask aborts a task

Aborts a running task
*/
func (a *Client) AbortTask(params *AbortTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AbortTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAbortTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "abortTask",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/tasks/{tUUID}/abort",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AbortTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AbortTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for abortTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FailedSubtasks gets a task s failed subtasks
*/
func (a *Client) FailedSubtasks(params *FailedSubtasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FailedSubtasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailedSubtasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "failedSubtasks",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/tasks/{tUUID}/failed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FailedSubtasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FailedSubtasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for failedSubtasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RetryTask retries a universe task

Retry a Universe task.
*/
func (a *Client) RetryTask(params *RetryTaskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RetryTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "retryTask",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/tasks/{tUUID}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetryTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetryTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retryTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TaskStatus gets a task s status
*/
func (a *Client) TaskStatus(params *TaskStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TaskStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "taskStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/tasks/{tUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TaskStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaskStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for taskStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TasksList lists task
*/
func (a *Client) TasksList(params *TasksListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TasksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTasksListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tasksList",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/tasks_list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TasksListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TasksListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tasksList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
