// Code generated by go-swagger; DO NOT EDIT.

package universe_cluster_mutations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteReadonlyClusterParams creates a new DeleteReadonlyClusterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteReadonlyClusterParams() *DeleteReadonlyClusterParams {
	return &DeleteReadonlyClusterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteReadonlyClusterParamsWithTimeout creates a new DeleteReadonlyClusterParams object
// with the ability to set a timeout on a request.
func NewDeleteReadonlyClusterParamsWithTimeout(timeout time.Duration) *DeleteReadonlyClusterParams {
	return &DeleteReadonlyClusterParams{
		timeout: timeout,
	}
}

// NewDeleteReadonlyClusterParamsWithContext creates a new DeleteReadonlyClusterParams object
// with the ability to set a context for a request.
func NewDeleteReadonlyClusterParamsWithContext(ctx context.Context) *DeleteReadonlyClusterParams {
	return &DeleteReadonlyClusterParams{
		Context: ctx,
	}
}

// NewDeleteReadonlyClusterParamsWithHTTPClient creates a new DeleteReadonlyClusterParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteReadonlyClusterParamsWithHTTPClient(client *http.Client) *DeleteReadonlyClusterParams {
	return &DeleteReadonlyClusterParams{
		HTTPClient: client,
	}
}

/*
DeleteReadonlyClusterParams contains all the parameters to send to the API endpoint

	for the delete readonly cluster operation.

	Typically these are written to a http.Request.
*/
type DeleteReadonlyClusterParams struct {

	// CUUID.
	//
	// Format: uuid
	CUUID strfmt.UUID

	// ClustUUID.
	//
	// Format: uuid
	ClustUUID strfmt.UUID

	// IsForceDelete.
	IsForceDelete *bool

	// UniUUID.
	//
	// Format: uuid
	UniUUID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete readonly cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteReadonlyClusterParams) WithDefaults() *DeleteReadonlyClusterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete readonly cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteReadonlyClusterParams) SetDefaults() {
	var (
		isForceDeleteDefault = bool(false)
	)

	val := DeleteReadonlyClusterParams{
		IsForceDelete: &isForceDeleteDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) WithTimeout(timeout time.Duration) *DeleteReadonlyClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) WithContext(ctx context.Context) *DeleteReadonlyClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) WithHTTPClient(client *http.Client) *DeleteReadonlyClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCUUID adds the cUUID to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) WithCUUID(cUUID strfmt.UUID) *DeleteReadonlyClusterParams {
	o.SetCUUID(cUUID)
	return o
}

// SetCUUID adds the cUuid to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) SetCUUID(cUUID strfmt.UUID) {
	o.CUUID = cUUID
}

// WithClustUUID adds the clustUUID to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) WithClustUUID(clustUUID strfmt.UUID) *DeleteReadonlyClusterParams {
	o.SetClustUUID(clustUUID)
	return o
}

// SetClustUUID adds the clustUuid to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) SetClustUUID(clustUUID strfmt.UUID) {
	o.ClustUUID = clustUUID
}

// WithIsForceDelete adds the isForceDelete to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) WithIsForceDelete(isForceDelete *bool) *DeleteReadonlyClusterParams {
	o.SetIsForceDelete(isForceDelete)
	return o
}

// SetIsForceDelete adds the isForceDelete to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) SetIsForceDelete(isForceDelete *bool) {
	o.IsForceDelete = isForceDelete
}

// WithUniUUID adds the uniUUID to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) WithUniUUID(uniUUID strfmt.UUID) *DeleteReadonlyClusterParams {
	o.SetUniUUID(uniUUID)
	return o
}

// SetUniUUID adds the uniUuid to the delete readonly cluster params
func (o *DeleteReadonlyClusterParams) SetUniUUID(uniUUID strfmt.UUID) {
	o.UniUUID = uniUUID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteReadonlyClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cUUID
	if err := r.SetPathParam("cUUID", o.CUUID.String()); err != nil {
		return err
	}

	// path param clustUUID
	if err := r.SetPathParam("clustUUID", o.ClustUUID.String()); err != nil {
		return err
	}

	if o.IsForceDelete != nil {

		// query param isForceDelete
		var qrIsForceDelete bool

		if o.IsForceDelete != nil {
			qrIsForceDelete = *o.IsForceDelete
		}
		qIsForceDelete := swag.FormatBool(qrIsForceDelete)
		if qIsForceDelete != "" {

			if err := r.SetQueryParam("isForceDelete", qIsForceDelete); err != nil {
				return err
			}
		}
	}

	// path param uniUUID
	if err := r.SetPathParam("uniUUID", o.UniUUID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
