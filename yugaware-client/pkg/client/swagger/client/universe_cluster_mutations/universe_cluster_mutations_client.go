// Code generated by go-swagger; DO NOT EDIT.

package universe_cluster_mutations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new universe cluster mutations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universe cluster mutations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAllClusters(params *CreateAllClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllClustersOK, error)

	CreateReadOnlyCluster(params *CreateReadOnlyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReadOnlyClusterOK, error)

	DeleteReadonlyCluster(params *DeleteReadonlyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReadonlyClusterOK, error)

	UpdatePrimaryCluster(params *UpdatePrimaryClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePrimaryClusterOK, error)

	UpdateReadOnlyCluster(params *UpdateReadOnlyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReadOnlyClusterOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAllClusters creates universe clusters

This will configure and create universe with (optionally) multiple clusters. Just fill in the userIntent for PRIMARY and (optionally) an ASYNC cluster
*/
func (a *Client) CreateAllClusters(params *CreateAllClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAllClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAllClusters",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAllClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAllClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAllClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateReadOnlyCluster creates read only cluster

This will add a readonly cluster to existing universe. Just fill in the userIntent for ASYNC cluster.
*/
func (a *Client) CreateReadOnlyCluster(params *CreateReadOnlyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReadOnlyClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReadOnlyClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createReadOnlyCluster",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/clusters/read_only",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReadOnlyClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReadOnlyClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReadOnlyCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteReadonlyCluster deletes readonly cluster

This will delete readonly cluster of existing universe.
*/
func (a *Client) DeleteReadonlyCluster(params *DeleteReadonlyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReadonlyClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReadonlyClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteReadonlyCluster",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/clusters/read_only/{clustUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteReadonlyClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReadonlyClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteReadonlyCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePrimaryCluster updates primary cluster

This will update primary cluster of existing universe.Use API to GET current universe. Lookup universeDetails attribute of the universe resource returned. Update the necessary field (e.g. numNodes) Use this updated universeDetails as request body. See https://github.com/yugabyte/yugabyte-db/blob/master/managed/api-examples/python-simple/edit-universe.ipynb
*/
func (a *Client) UpdatePrimaryCluster(params *UpdatePrimaryClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdatePrimaryClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePrimaryClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePrimaryCluster",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/clusters/primary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePrimaryClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePrimaryClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePrimaryCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateReadOnlyCluster updates readonly cluster

This will update readonly cluster of existing universe.Use API to GET current universe. Lookup universeDetails attribute of the universe resource returned. Update the necessary field (e.g. numNodes) Use this updated universeDetails as request body. See https://github.com/yugabyte/yugabyte-db/blob/master/managed/api-examples/python-simple/edit-universe.ipynb
*/
func (a *Client) UpdateReadOnlyCluster(params *UpdateReadOnlyClusterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReadOnlyClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReadOnlyClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateReadOnlyCluster",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/clusters/read_only",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateReadOnlyClusterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReadOnlyClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateReadOnlyCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
