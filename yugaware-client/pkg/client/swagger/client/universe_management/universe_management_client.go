// Code generated by go-swagger; DO NOT EDIT.

package universe_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new universe management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for universe management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfigureUniverseAlerts(params *ConfigureUniverseAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigureUniverseAlertsOK, error)

	DeleteUniverse(params *DeleteUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUniverseOK, error)

	GetUniverse(params *GetUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseOK, error)

	ListUniverses(params *ListUniversesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUniversesOK, error)

	PauseUniverse(params *PauseUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseUniverseOK, error)

	ResetUniverseVersion(params *ResetUniverseVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetUniverseVersionOK, error)

	ResumeUniverse(params *ResumeUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeUniverseOK, error)

	SetUniverseBackupFlag(params *SetUniverseBackupFlagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUniverseBackupFlagOK, error)

	SetUniverseHelm3Compatible(params *SetUniverseHelm3CompatibleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUniverseHelm3CompatibleOK, error)

	SetUniverseKey(params *SetUniverseKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUniverseKeyOK, error)

	ToggleUniverseTLS(params *ToggleUniverseTLSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleUniverseTLSOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ConfigureUniverseAlerts configures alerts for a universe
*/
func (a *Client) ConfigureUniverseAlerts(params *ConfigureUniverseAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConfigureUniverseAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigureUniverseAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "configureUniverseAlerts",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/config_alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigureUniverseAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfigureUniverseAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for configureUniverseAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUniverse deletes a universe
*/
func (a *Client) DeleteUniverse(params *DeleteUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUniverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUniverseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUniverse",
		Method:             "DELETE",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUniverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUniverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUniverse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUniverse gets a universe
*/
func (a *Client) GetUniverse(params *GetUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUniverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUniverseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUniverse",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUniverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUniverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUniverse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListUniverses lists universes
*/
func (a *Client) ListUniverses(params *ListUniversesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUniversesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUniversesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUniverses",
		Method:             "GET",
		PathPattern:        "/api/v1/customers/{cUUID}/universes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListUniversesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUniversesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listUniverses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseUniverse pauses a universe
*/
func (a *Client) PauseUniverse(params *PauseUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseUniverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseUniverseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pauseUniverse",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PauseUniverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PauseUniverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pauseUniverse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResetUniverseVersion resets universe version

Requires a DUMMY body to work around issue https://yugabyte.atlassian.net/browse/PLAT-2076
*/
func (a *Client) ResetUniverseVersion(params *ResetUniverseVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResetUniverseVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetUniverseVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetUniverseVersion",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/setup_universe_2dc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResetUniverseVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetUniverseVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resetUniverseVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeUniverse resumes a paused universe
*/
func (a *Client) ResumeUniverse(params *ResumeUniverseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeUniverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeUniverseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeUniverse",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResumeUniverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeUniverseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeUniverse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetUniverseBackupFlag sets a universe s backup flag
*/
func (a *Client) SetUniverseBackupFlag(params *SetUniverseBackupFlagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUniverseBackupFlagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUniverseBackupFlagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUniverseBackupFlag",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/update_backup_state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetUniverseBackupFlagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUniverseBackupFlagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUniverseBackupFlag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetUniverseHelm3Compatible flags a universe as helm 3 compatible
*/
func (a *Client) SetUniverseHelm3Compatible(params *SetUniverseHelm3CompatibleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUniverseHelm3CompatibleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUniverseHelm3CompatibleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUniverseHelm3Compatible",
		Method:             "PUT",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/mark_helm3_compatible",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetUniverseHelm3CompatibleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUniverseHelm3CompatibleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUniverseHelm3Compatible: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetUniverseKey sets a universe s key
*/
func (a *Client) SetUniverseKey(params *SetUniverseKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetUniverseKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUniverseKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUniverseKey",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/set_key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetUniverseKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUniverseKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUniverseKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ToggleUniverseTLS toggles a universe s TLS state

Enable or disable node-to-node and client-to-node encryption. Supports rolling and non-rolling universe upgrades.
*/
func (a *Client) ToggleUniverseTLS(params *ToggleUniverseTLSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ToggleUniverseTLSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleUniverseTLSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "toggleUniverseTLS",
		Method:             "POST",
		PathPattern:        "/api/v1/customers/{cUUID}/universes/{uniUUID}/toggle_tls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ToggleUniverseTLSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleUniverseTLSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for toggleUniverseTLS: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
