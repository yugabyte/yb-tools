// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/tablet/operations.proto

package tablet

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	docdb "github.com/yugabyte/yb-tools/yugatool/api/yb/docdb"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionStatePB struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	TransactionId []byte                    `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Status        *common.TransactionStatus `protobuf:"varint,2,opt,name=status,enum=yb.TransactionStatus" json:"status,omitempty"`
	// tablets has different meaning, depending on status:
	// PENDING - list of involved tablets, if FLAGS_disable_heartbeat_send_involved_tablets = false.
	// COMMITTED - list of involved tablets
	// APPLYING - single entry, status tablet of this transaction
	// PROMOTING - single entry, new status tablet of this transaction
	// APPLIED - single entry, tablet that applied this transaction
	// Not used is other cases.
	Tablets [][]byte `protobuf:"bytes,3,rep,name=tablets" json:"tablets,omitempty"`
	// Relevant only in SEALED state.
	// Number of batches that should be replicated at appropriate tablet to interpret transaction as
	// committed.
	TabletBatches []int64 `protobuf:"varint,5,rep,name=tablet_batches,json=tabletBatches" json:"tablet_batches,omitempty"`
	// Relevant only in APPLYING state.
	CommitHybridTime *uint64 `protobuf:"fixed64,4,opt,name=commit_hybrid_time,json=commitHybridTime" json:"commit_hybrid_time,omitempty"`
	// Relevant only in CLEANUP and APPLYING status, true when we perform request
	// for a transaction that was previously sealed.
	Sealed *bool `protobuf:"varint,6,opt,name=sealed" json:"sealed,omitempty"`
	// Set of subtransaction IDs which are aborted.
	Aborted *common.SubtxnSetPB `protobuf:"bytes,7,opt,name=aborted" json:"aborted,omitempty"`
	// The time at which this transaction started at the client.
	StartTime *uint64 `protobuf:"fixed64,10,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Stores the uuid of the node hosting the transaction at the query layer.
	HostNodeUuid *string `protobuf:"bytes,11,opt,name=host_node_uuid,json=hostNodeUuid" json:"host_node_uuid,omitempty"`
	// Status containing deadlock info if the transaction was aborted due to deadlock.
	DeadlockReason *common.AppStatusPB `protobuf:"bytes,12,opt,name=deadlock_reason,json=deadlockReason" json:"deadlock_reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TransactionStatePB) Reset() {
	*x = TransactionStatePB{}
	mi := &file_yb_tablet_operations_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatePB) ProtoMessage() {}

func (x *TransactionStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatePB.ProtoReflect.Descriptor instead.
func (*TransactionStatePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionStatePB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionStatePB) GetStatus() common.TransactionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.TransactionStatus(1)
}

func (x *TransactionStatePB) GetTablets() [][]byte {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *TransactionStatePB) GetTabletBatches() []int64 {
	if x != nil {
		return x.TabletBatches
	}
	return nil
}

func (x *TransactionStatePB) GetCommitHybridTime() uint64 {
	if x != nil && x.CommitHybridTime != nil {
		return *x.CommitHybridTime
	}
	return 0
}

func (x *TransactionStatePB) GetSealed() bool {
	if x != nil && x.Sealed != nil {
		return *x.Sealed
	}
	return false
}

func (x *TransactionStatePB) GetAborted() *common.SubtxnSetPB {
	if x != nil {
		return x.Aborted
	}
	return nil
}

func (x *TransactionStatePB) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *TransactionStatePB) GetHostNodeUuid() string {
	if x != nil && x.HostNodeUuid != nil {
		return *x.HostNodeUuid
	}
	return ""
}

func (x *TransactionStatePB) GetDeadlockReason() *common.AppStatusPB {
	if x != nil {
		return x.DeadlockReason
	}
	return nil
}

type TruncatePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TruncatePB) Reset() {
	*x = TruncatePB{}
	mi := &file_yb_tablet_operations_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruncatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncatePB) ProtoMessage() {}

func (x *TruncatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncatePB.ProtoReflect.Descriptor instead.
func (*TruncatePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{1}
}

type WritePB struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	UnusedTabletId []byte                      `protobuf:"bytes,1,opt,name=unused_tablet_id,json=unusedTabletId" json:"unused_tablet_id,omitempty"`
	WriteBatch     *docdb.KeyValueWriteBatchPB `protobuf:"bytes,7,opt,name=write_batch,json=writeBatch" json:"write_batch,omitempty"`
	// Use 2 int64 to represent UUID.
	ClientId1           *uint64 `protobuf:"fixed64,14,opt,name=client_id1,json=clientId1" json:"client_id1,omitempty"`
	ClientId2           *uint64 `protobuf:"fixed64,15,opt,name=client_id2,json=clientId2" json:"client_id2,omitempty"`
	RequestId           *int64  `protobuf:"varint,16,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	MinRunningRequestId *int64  `protobuf:"varint,17,opt,name=min_running_request_id,json=minRunningRequestId" json:"min_running_request_id,omitempty"`
	ExternalHybridTime  *uint64 `protobuf:"fixed64,19,opt,name=external_hybrid_time,json=externalHybridTime" json:"external_hybrid_time,omitempty"`
	BatchIdx            *uint64 `protobuf:"varint,20,opt,name=batch_idx,json=batchIdx" json:"batch_idx,omitempty"`
	StartTimeMicros     *uint64 `protobuf:"varint,21,opt,name=start_time_micros,json=startTimeMicros" json:"start_time_micros,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WritePB) Reset() {
	*x = WritePB{}
	mi := &file_yb_tablet_operations_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WritePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePB) ProtoMessage() {}

func (x *WritePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePB.ProtoReflect.Descriptor instead.
func (*WritePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{2}
}

func (x *WritePB) GetUnusedTabletId() []byte {
	if x != nil {
		return x.UnusedTabletId
	}
	return nil
}

func (x *WritePB) GetWriteBatch() *docdb.KeyValueWriteBatchPB {
	if x != nil {
		return x.WriteBatch
	}
	return nil
}

func (x *WritePB) GetClientId1() uint64 {
	if x != nil && x.ClientId1 != nil {
		return *x.ClientId1
	}
	return 0
}

func (x *WritePB) GetClientId2() uint64 {
	if x != nil && x.ClientId2 != nil {
		return *x.ClientId2
	}
	return 0
}

func (x *WritePB) GetRequestId() int64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *WritePB) GetMinRunningRequestId() int64 {
	if x != nil && x.MinRunningRequestId != nil {
		return *x.MinRunningRequestId
	}
	return 0
}

func (x *WritePB) GetExternalHybridTime() uint64 {
	if x != nil && x.ExternalHybridTime != nil {
		return *x.ExternalHybridTime
	}
	return 0
}

func (x *WritePB) GetBatchIdx() uint64 {
	if x != nil && x.BatchIdx != nil {
		return *x.BatchIdx
	}
	return 0
}

func (x *WritePB) GetStartTimeMicros() uint64 {
	if x != nil && x.StartTimeMicros != nil {
		return *x.StartTimeMicros
	}
	return 0
}

type ChangeMetadataRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,5,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// TODO: Replace with the table descriptor
	// (Schema, Column IDs, Column Attributes)
	Schema               *common.SchemaPB      `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	Indexes              []*common.IndexInfoPB `protobuf:"bytes,7,rep,name=indexes" json:"indexes,omitempty"`
	SchemaVersion        *uint32               `protobuf:"varint,3,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	NewTableName         *string               `protobuf:"bytes,4,opt,name=new_table_name,json=newTableName" json:"new_table_name,omitempty"`
	PropagatedHybridTime *uint64               `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	AddTable             *TableInfoPB          `protobuf:"bytes,8,opt,name=add_table,json=addTable" json:"add_table,omitempty"`
	// For batching multiple adds.
	AddMultipleTables []*TableInfoPB `protobuf:"bytes,17,rep,name=add_multiple_tables,json=addMultipleTables" json:"add_multiple_tables,omitempty"`
	WalRetentionSecs  *uint32        `protobuf:"varint,9,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	RemoveTableId     []byte         `protobuf:"bytes,10,opt,name=remove_table_id,json=removeTableId" json:"remove_table_id,omitempty"`
	// Note that we don't use the value of this and just check has_mark_backfill_done.
	MarkBackfillDone *bool `protobuf:"varint,11,opt,name=mark_backfill_done,json=markBackfillDone" json:"mark_backfill_done,omitempty"`
	// Used for alter schema on a non-primary table (e.g. colocated user table).
	AlterTableId []byte `protobuf:"bytes,12,opt,name=alter_table_id,json=alterTableId" json:"alter_table_id,omitempty"`
	// Used to update schema of a colocated user table upon backfill completion.
	BackfillDoneTableId []byte `protobuf:"bytes,13,opt,name=backfill_done_table_id,json=backfillDoneTableId" json:"backfill_done_table_id,omitempty"`
	// Transactions will be aborted except the one with this id which triggered the AlterTable.
	TransactionId []byte `protobuf:"bytes,14,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"` // 16 byte uuid
	// Used for AlterTable to determine if active transactions on the tablet needs to be aborted.
	ShouldAbortActiveTxns *bool `protobuf:"varint,16,opt,name=should_abort_active_txns,json=shouldAbortActiveTxns,def=0" json:"should_abort_active_txns,omitempty"`
	// For CDCSDK Stream creation with consistent snapshot
	RetentionRequesterId       []byte `protobuf:"bytes,18,opt,name=retention_requester_id,json=retentionRequesterId" json:"retention_requester_id,omitempty"`
	CdcSdkRequireHistoryCutoff *bool  `protobuf:"varint,19,opt,name=cdc_sdk_require_history_cutoff,json=cdcSdkRequireHistoryCutoff" json:"cdc_sdk_require_history_cutoff,omitempty"`
	// Will insert the new schema into historical packing schema with schema version
	// [schema_version - 1], and then reinsert the current packing schema with [schema_version].
	// Schema version must be bumped by 2 before this call is made.
	InsertPackedSchema *bool `protobuf:"varint,20,opt,name=insert_packed_schema,json=insertPackedSchema" json:"insert_packed_schema,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for ChangeMetadataRequestPB fields.
const (
	Default_ChangeMetadataRequestPB_ShouldAbortActiveTxns = bool(false)
)

func (x *ChangeMetadataRequestPB) Reset() {
	*x = ChangeMetadataRequestPB{}
	mi := &file_yb_tablet_operations_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeMetadataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMetadataRequestPB) ProtoMessage() {}

func (x *ChangeMetadataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMetadataRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeMetadataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{3}
}

func (x *ChangeMetadataRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetNewTableName() string {
	if x != nil && x.NewTableName != nil {
		return *x.NewTableName
	}
	return ""
}

func (x *ChangeMetadataRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetAddTable() *TableInfoPB {
	if x != nil {
		return x.AddTable
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetAddMultipleTables() []*TableInfoPB {
	if x != nil {
		return x.AddMultipleTables
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetRemoveTableId() []byte {
	if x != nil {
		return x.RemoveTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetMarkBackfillDone() bool {
	if x != nil && x.MarkBackfillDone != nil {
		return *x.MarkBackfillDone
	}
	return false
}

func (x *ChangeMetadataRequestPB) GetAlterTableId() []byte {
	if x != nil {
		return x.AlterTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetBackfillDoneTableId() []byte {
	if x != nil {
		return x.BackfillDoneTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetShouldAbortActiveTxns() bool {
	if x != nil && x.ShouldAbortActiveTxns != nil {
		return *x.ShouldAbortActiveTxns
	}
	return Default_ChangeMetadataRequestPB_ShouldAbortActiveTxns
}

func (x *ChangeMetadataRequestPB) GetRetentionRequesterId() []byte {
	if x != nil {
		return x.RetentionRequesterId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetCdcSdkRequireHistoryCutoff() bool {
	if x != nil && x.CdcSdkRequireHistoryCutoff != nil {
		return *x.CdcSdkRequireHistoryCutoff
	}
	return false
}

func (x *ChangeMetadataRequestPB) GetInsertPackedSchema() bool {
	if x != nil && x.InsertPackedSchema != nil {
		return *x.InsertPackedSchema
	}
	return false
}

type SplitTabletRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid             []byte  `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TabletId             []byte  `protobuf:"bytes,3,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	NewTablet1Id         []byte  `protobuf:"bytes,4,req,name=new_tablet1_id,json=newTablet1Id" json:"new_tablet1_id,omitempty"`
	NewTablet2Id         []byte  `protobuf:"bytes,5,req,name=new_tablet2_id,json=newTablet2Id" json:"new_tablet2_id,omitempty"`
	SplitPartitionKey    []byte  `protobuf:"bytes,6,req,name=split_partition_key,json=splitPartitionKey" json:"split_partition_key,omitempty"`
	SplitEncodedKey      []byte  `protobuf:"bytes,7,req,name=split_encoded_key,json=splitEncodedKey" json:"split_encoded_key,omitempty"`
	// Parent tablet leader UUID from SPLIT_OP term.
	SplitParentLeaderUuid *string `protobuf:"bytes,8,opt,name=split_parent_leader_uuid,json=splitParentLeaderUuid" json:"split_parent_leader_uuid,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SplitTabletRequestPB) Reset() {
	*x = SplitTabletRequestPB{}
	mi := &file_yb_tablet_operations_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletRequestPB) ProtoMessage() {}

func (x *SplitTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletRequestPB.ProtoReflect.Descriptor instead.
func (*SplitTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{4}
}

func (x *SplitTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *SplitTabletRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *SplitTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *SplitTabletRequestPB) GetNewTablet1Id() []byte {
	if x != nil {
		return x.NewTablet1Id
	}
	return nil
}

func (x *SplitTabletRequestPB) GetNewTablet2Id() []byte {
	if x != nil {
		return x.NewTablet2Id
	}
	return nil
}

func (x *SplitTabletRequestPB) GetSplitPartitionKey() []byte {
	if x != nil {
		return x.SplitPartitionKey
	}
	return nil
}

func (x *SplitTabletRequestPB) GetSplitEncodedKey() []byte {
	if x != nil {
		return x.SplitEncodedKey
	}
	return nil
}

func (x *SplitTabletRequestPB) GetSplitParentLeaderUuid() string {
	if x != nil && x.SplitParentLeaderUuid != nil {
		return *x.SplitParentLeaderUuid
	}
	return ""
}

type CloneTabletRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid             []byte  `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Not called source_tablet_id because some templated functions use req->tablet_id().
	TabletId                      *string                   `protobuf:"bytes,3,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TargetTabletId                *string                   `protobuf:"bytes,4,opt,name=target_tablet_id,json=targetTabletId" json:"target_tablet_id,omitempty"`
	SourceSnapshotId              []byte                    `protobuf:"bytes,5,opt,name=source_snapshot_id,json=sourceSnapshotId" json:"source_snapshot_id,omitempty"`
	TargetSnapshotId              []byte                    `protobuf:"bytes,6,opt,name=target_snapshot_id,json=targetSnapshotId" json:"target_snapshot_id,omitempty"`
	TargetTableId                 *string                   `protobuf:"bytes,7,opt,name=target_table_id,json=targetTableId" json:"target_table_id,omitempty"`
	TargetNamespaceName           *string                   `protobuf:"bytes,8,opt,name=target_namespace_name,json=targetNamespaceName" json:"target_namespace_name,omitempty"`
	CloneRequestSeqNo             *uint32                   `protobuf:"varint,9,opt,name=clone_request_seq_no,json=cloneRequestSeqNo" json:"clone_request_seq_no,omitempty"`
	TargetPgTableId               *string                   `protobuf:"bytes,10,opt,name=target_pg_table_id,json=targetPgTableId" json:"target_pg_table_id,omitempty"`
	TargetIndexInfo               *common.IndexInfoPB       `protobuf:"bytes,11,opt,name=target_index_info,json=targetIndexInfo" json:"target_index_info,omitempty"`
	TargetSchema                  *common.SchemaPB          `protobuf:"bytes,12,opt,name=target_schema,json=targetSchema" json:"target_schema,omitempty"`
	TargetPartitionSchema         *common.PartitionSchemaPB `protobuf:"bytes,13,opt,name=target_partition_schema,json=targetPartitionSchema" json:"target_partition_schema,omitempty"`
	TargetSkipTableTombstoneCheck *bool                     `protobuf:"varint,14,opt,name=target_skip_table_tombstone_check,json=targetSkipTableTombstoneCheck" json:"target_skip_table_tombstone_check,omitempty"`
	// If set, checkout the active rocksdb folder to the target snapshot.
	// This is set for tablets that were hidden before the snapshot that covers the clone time was
	// taken (we do not take snapshots after hiding a tablet).
	CloneFromActiveRocksdb *bool `protobuf:"varint,15,opt,name=clone_from_active_rocksdb,json=cloneFromActiveRocksdb" json:"clone_from_active_rocksdb,omitempty"`
	// The colocated tables' infos used to build the superblock of the parent tablet. The colocated
	// tables' info cannot be copied from the source tablet becuase:
	// 1- The colocated tables don't have the same table ids in both source and target databases.
	// 2- The colocated tables on the target can have different schemas than the tables on the source
	// tablet. i.e when cloning to a time before DDl operations happened on the source tablet.
	ColocatedTables []*TableInfoPB `protobuf:"bytes,16,rep,name=colocated_tables,json=colocatedTables" json:"colocated_tables,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CloneTabletRequestPB) Reset() {
	*x = CloneTabletRequestPB{}
	mi := &file_yb_tablet_operations_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneTabletRequestPB) ProtoMessage() {}

func (x *CloneTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneTabletRequestPB.ProtoReflect.Descriptor instead.
func (*CloneTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{5}
}

func (x *CloneTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *CloneTabletRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *CloneTabletRequestPB) GetTabletId() string {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return ""
}

func (x *CloneTabletRequestPB) GetTargetTabletId() string {
	if x != nil && x.TargetTabletId != nil {
		return *x.TargetTabletId
	}
	return ""
}

func (x *CloneTabletRequestPB) GetSourceSnapshotId() []byte {
	if x != nil {
		return x.SourceSnapshotId
	}
	return nil
}

func (x *CloneTabletRequestPB) GetTargetSnapshotId() []byte {
	if x != nil {
		return x.TargetSnapshotId
	}
	return nil
}

func (x *CloneTabletRequestPB) GetTargetTableId() string {
	if x != nil && x.TargetTableId != nil {
		return *x.TargetTableId
	}
	return ""
}

func (x *CloneTabletRequestPB) GetTargetNamespaceName() string {
	if x != nil && x.TargetNamespaceName != nil {
		return *x.TargetNamespaceName
	}
	return ""
}

func (x *CloneTabletRequestPB) GetCloneRequestSeqNo() uint32 {
	if x != nil && x.CloneRequestSeqNo != nil {
		return *x.CloneRequestSeqNo
	}
	return 0
}

func (x *CloneTabletRequestPB) GetTargetPgTableId() string {
	if x != nil && x.TargetPgTableId != nil {
		return *x.TargetPgTableId
	}
	return ""
}

func (x *CloneTabletRequestPB) GetTargetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.TargetIndexInfo
	}
	return nil
}

func (x *CloneTabletRequestPB) GetTargetSchema() *common.SchemaPB {
	if x != nil {
		return x.TargetSchema
	}
	return nil
}

func (x *CloneTabletRequestPB) GetTargetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.TargetPartitionSchema
	}
	return nil
}

func (x *CloneTabletRequestPB) GetTargetSkipTableTombstoneCheck() bool {
	if x != nil && x.TargetSkipTableTombstoneCheck != nil {
		return *x.TargetSkipTableTombstoneCheck
	}
	return false
}

func (x *CloneTabletRequestPB) GetCloneFromActiveRocksdb() bool {
	if x != nil && x.CloneFromActiveRocksdb != nil {
		return *x.CloneFromActiveRocksdb
	}
	return false
}

func (x *CloneTabletRequestPB) GetColocatedTables() []*TableInfoPB {
	if x != nil {
		return x.ColocatedTables
	}
	return nil
}

var File_yb_tablet_operations_proto protoreflect.FileDescriptor

var file_yb_tablet_operations_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f,
	0x64, 0x6f, 0x63, 0x64, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x03,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65,
	0x74, 0x50, 0x42, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0e, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x08, 0x10,
	0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x14, 0x0a, 0x0a, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x42, 0x3a, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x22, 0x81, 0x03,
	0x0a, 0x07, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f,
	0x63, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x42, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x22, 0x96, 0x07, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x08, 0x61, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x46, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x11, 0x61, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x6e, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x18, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x64,
	0x63, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xe7, 0x02, 0x0a, 0x14, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x31, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x32, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xcd, 0x06, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f,
	0x12, 0x2b, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x67, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x4d, 0x0a,
	0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x48, 0x0a, 0x21,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x6b, 0x69, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x63, 0x6b,
	0x73, 0x64, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x64,
	0x62, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74,
})

var (
	file_yb_tablet_operations_proto_rawDescOnce sync.Once
	file_yb_tablet_operations_proto_rawDescData []byte
)

func file_yb_tablet_operations_proto_rawDescGZIP() []byte {
	file_yb_tablet_operations_proto_rawDescOnce.Do(func() {
		file_yb_tablet_operations_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_tablet_operations_proto_rawDesc), len(file_yb_tablet_operations_proto_rawDesc)))
	})
	return file_yb_tablet_operations_proto_rawDescData
}

var file_yb_tablet_operations_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yb_tablet_operations_proto_goTypes = []any{
	(*TransactionStatePB)(nil),         // 0: yb.tablet.TransactionStatePB
	(*TruncatePB)(nil),                 // 1: yb.tablet.TruncatePB
	(*WritePB)(nil),                    // 2: yb.tablet.WritePB
	(*ChangeMetadataRequestPB)(nil),    // 3: yb.tablet.ChangeMetadataRequestPB
	(*SplitTabletRequestPB)(nil),       // 4: yb.tablet.SplitTabletRequestPB
	(*CloneTabletRequestPB)(nil),       // 5: yb.tablet.CloneTabletRequestPB
	(common.TransactionStatus)(0),      // 6: yb.TransactionStatus
	(*common.SubtxnSetPB)(nil),         // 7: yb.SubtxnSetPB
	(*common.AppStatusPB)(nil),         // 8: yb.AppStatusPB
	(*docdb.KeyValueWriteBatchPB)(nil), // 9: yb.docdb.KeyValueWriteBatchPB
	(*common.SchemaPB)(nil),            // 10: yb.SchemaPB
	(*common.IndexInfoPB)(nil),         // 11: yb.IndexInfoPB
	(*TableInfoPB)(nil),                // 12: yb.tablet.TableInfoPB
	(*common.PartitionSchemaPB)(nil),   // 13: yb.PartitionSchemaPB
}
var file_yb_tablet_operations_proto_depIdxs = []int32{
	6,  // 0: yb.tablet.TransactionStatePB.status:type_name -> yb.TransactionStatus
	7,  // 1: yb.tablet.TransactionStatePB.aborted:type_name -> yb.SubtxnSetPB
	8,  // 2: yb.tablet.TransactionStatePB.deadlock_reason:type_name -> yb.AppStatusPB
	9,  // 3: yb.tablet.WritePB.write_batch:type_name -> yb.docdb.KeyValueWriteBatchPB
	10, // 4: yb.tablet.ChangeMetadataRequestPB.schema:type_name -> yb.SchemaPB
	11, // 5: yb.tablet.ChangeMetadataRequestPB.indexes:type_name -> yb.IndexInfoPB
	12, // 6: yb.tablet.ChangeMetadataRequestPB.add_table:type_name -> yb.tablet.TableInfoPB
	12, // 7: yb.tablet.ChangeMetadataRequestPB.add_multiple_tables:type_name -> yb.tablet.TableInfoPB
	11, // 8: yb.tablet.CloneTabletRequestPB.target_index_info:type_name -> yb.IndexInfoPB
	10, // 9: yb.tablet.CloneTabletRequestPB.target_schema:type_name -> yb.SchemaPB
	13, // 10: yb.tablet.CloneTabletRequestPB.target_partition_schema:type_name -> yb.PartitionSchemaPB
	12, // 11: yb.tablet.CloneTabletRequestPB.colocated_tables:type_name -> yb.tablet.TableInfoPB
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yb_tablet_operations_proto_init() }
func file_yb_tablet_operations_proto_init() {
	if File_yb_tablet_operations_proto != nil {
		return
	}
	file_yb_tablet_metadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_tablet_operations_proto_rawDesc), len(file_yb_tablet_operations_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_tablet_operations_proto_goTypes,
		DependencyIndexes: file_yb_tablet_operations_proto_depIdxs,
		MessageInfos:      file_yb_tablet_operations_proto_msgTypes,
	}.Build()
	File_yb_tablet_operations_proto = out.File
	file_yb_tablet_operations_proto_goTypes = nil
	file_yb_tablet_operations_proto_depIdxs = nil
}
