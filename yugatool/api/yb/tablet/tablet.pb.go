// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/tablet/tablet.proto

package tablet

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TabletStatusPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TabletId        *string                `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	NamespaceName   *string                `protobuf:"bytes,15,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	TableName       *string                `protobuf:"bytes,2,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId         *string                `protobuf:"bytes,10,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	State           *RaftGroupStatePB      `protobuf:"varint,3,opt,name=state,enum=yb.tablet.RaftGroupStatePB,def=999" json:"state,omitempty"`
	TabletDataState *TabletDataState       `protobuf:"varint,8,opt,name=tablet_data_state,json=tabletDataState,enum=yb.tablet.TabletDataState,def=999" json:"tablet_data_state,omitempty"`
	LastStatus      *string                `protobuf:"bytes,4,req,name=last_status,json=lastStatus" json:"last_status,omitempty"`
	// DEPRECATED.
	StartKey []byte `protobuf:"bytes,5,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	// DEPRECATED.
	EndKey                       []byte              `protobuf:"bytes,6,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	EstimatedOnDiskSize          *int64              `protobuf:"varint,7,opt,name=estimated_on_disk_size,json=estimatedOnDiskSize" json:"estimated_on_disk_size,omitempty"`
	ConsensusMetadataDiskSize    *int64              `protobuf:"varint,11,opt,name=consensus_metadata_disk_size,json=consensusMetadataDiskSize" json:"consensus_metadata_disk_size,omitempty"`
	WalFilesDiskSize             *int64              `protobuf:"varint,12,opt,name=wal_files_disk_size,json=walFilesDiskSize" json:"wal_files_disk_size,omitempty"`
	SstFilesDiskSize             *int64              `protobuf:"varint,13,opt,name=sst_files_disk_size,json=sstFilesDiskSize" json:"sst_files_disk_size,omitempty"`
	UncompressedSstFilesDiskSize *int64              `protobuf:"varint,14,opt,name=uncompressed_sst_files_disk_size,json=uncompressedSstFilesDiskSize" json:"uncompressed_sst_files_disk_size,omitempty"`
	Partition                    *common.PartitionPB `protobuf:"bytes,9,opt,name=partition" json:"partition,omitempty"`
	TableType                    *common.TableType   `protobuf:"varint,16,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	// Is the tablet hidden.
	IsHidden            *bool `protobuf:"varint,17,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
	ParentDataCompacted *bool `protobuf:"varint,18,opt,name=parent_data_compacted,json=parentDataCompacted" json:"parent_data_compacted,omitempty"` // See KvStoreInfoPB.
	// A list of all tables that are colocated on this tablet.
	ColocatedTableIds [][]byte `protobuf:"bytes,19,rep,name=colocated_table_ids,json=colocatedTableIds" json:"colocated_table_ids,omitempty"`
	PgschemaName      *string  `protobuf:"bytes,20,opt,name=pgschema_name,json=pgschemaName" json:"pgschema_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for TabletStatusPB fields.
const (
	Default_TabletStatusPB_State           = RaftGroupStatePB_UNKNOWN
	Default_TabletStatusPB_TabletDataState = TabletDataState_TABLET_DATA_UNKNOWN
)

func (x *TabletStatusPB) Reset() {
	*x = TabletStatusPB{}
	mi := &file_yb_tablet_tablet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletStatusPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletStatusPB) ProtoMessage() {}

func (x *TabletStatusPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_tablet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletStatusPB.ProtoReflect.Descriptor instead.
func (*TabletStatusPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_tablet_proto_rawDescGZIP(), []int{0}
}

func (x *TabletStatusPB) GetTabletId() string {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return ""
}

func (x *TabletStatusPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *TabletStatusPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TabletStatusPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *TabletStatusPB) GetState() RaftGroupStatePB {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_TabletStatusPB_State
}

func (x *TabletStatusPB) GetTabletDataState() TabletDataState {
	if x != nil && x.TabletDataState != nil {
		return *x.TabletDataState
	}
	return Default_TabletStatusPB_TabletDataState
}

func (x *TabletStatusPB) GetLastStatus() string {
	if x != nil && x.LastStatus != nil {
		return *x.LastStatus
	}
	return ""
}

func (x *TabletStatusPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *TabletStatusPB) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *TabletStatusPB) GetEstimatedOnDiskSize() int64 {
	if x != nil && x.EstimatedOnDiskSize != nil {
		return *x.EstimatedOnDiskSize
	}
	return 0
}

func (x *TabletStatusPB) GetConsensusMetadataDiskSize() int64 {
	if x != nil && x.ConsensusMetadataDiskSize != nil {
		return *x.ConsensusMetadataDiskSize
	}
	return 0
}

func (x *TabletStatusPB) GetWalFilesDiskSize() int64 {
	if x != nil && x.WalFilesDiskSize != nil {
		return *x.WalFilesDiskSize
	}
	return 0
}

func (x *TabletStatusPB) GetSstFilesDiskSize() int64 {
	if x != nil && x.SstFilesDiskSize != nil {
		return *x.SstFilesDiskSize
	}
	return 0
}

func (x *TabletStatusPB) GetUncompressedSstFilesDiskSize() int64 {
	if x != nil && x.UncompressedSstFilesDiskSize != nil {
		return *x.UncompressedSstFilesDiskSize
	}
	return 0
}

func (x *TabletStatusPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *TabletStatusPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType(2)
}

func (x *TabletStatusPB) GetIsHidden() bool {
	if x != nil && x.IsHidden != nil {
		return *x.IsHidden
	}
	return false
}

func (x *TabletStatusPB) GetParentDataCompacted() bool {
	if x != nil && x.ParentDataCompacted != nil {
		return *x.ParentDataCompacted
	}
	return false
}

func (x *TabletStatusPB) GetColocatedTableIds() [][]byte {
	if x != nil {
		return x.ColocatedTableIds
	}
	return nil
}

func (x *TabletStatusPB) GetPgschemaName() string {
	if x != nil && x.PgschemaName != nil {
		return *x.PgschemaName
	}
	return ""
}

// Used to present the maintenance manager's internal state.
type MaintenanceManagerStatusPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The next operation that would run.
	BestOp *MaintenanceManagerStatusPB_MaintenanceOpPB `protobuf:"bytes,1,opt,name=best_op,json=bestOp" json:"best_op,omitempty"`
	// List of all the operations.
	RegisteredOperations []*MaintenanceManagerStatusPB_MaintenanceOpPB `protobuf:"bytes,2,rep,name=registered_operations,json=registeredOperations" json:"registered_operations,omitempty"`
	// This list is not guaranteed to be in any particular order. Can contain the same operation
	// multiple times.
	CompletedOperations []*MaintenanceManagerStatusPB_CompletedOpPB `protobuf:"bytes,3,rep,name=completed_operations,json=completedOperations" json:"completed_operations,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MaintenanceManagerStatusPB) Reset() {
	*x = MaintenanceManagerStatusPB{}
	mi := &file_yb_tablet_tablet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaintenanceManagerStatusPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceManagerStatusPB) ProtoMessage() {}

func (x *MaintenanceManagerStatusPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_tablet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceManagerStatusPB.ProtoReflect.Descriptor instead.
func (*MaintenanceManagerStatusPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_tablet_proto_rawDescGZIP(), []int{1}
}

func (x *MaintenanceManagerStatusPB) GetBestOp() *MaintenanceManagerStatusPB_MaintenanceOpPB {
	if x != nil {
		return x.BestOp
	}
	return nil
}

func (x *MaintenanceManagerStatusPB) GetRegisteredOperations() []*MaintenanceManagerStatusPB_MaintenanceOpPB {
	if x != nil {
		return x.RegisteredOperations
	}
	return nil
}

func (x *MaintenanceManagerStatusPB) GetCompletedOperations() []*MaintenanceManagerStatusPB_CompletedOpPB {
	if x != nil {
		return x.CompletedOperations
	}
	return nil
}

type MaintenanceManagerStatusPB_MaintenanceOpPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Number of times this operation is currently running.
	Running           *uint32  `protobuf:"varint,2,req,name=running" json:"running,omitempty"`
	Runnable          *bool    `protobuf:"varint,3,req,name=runnable" json:"runnable,omitempty"`
	RamAnchoredBytes  *uint64  `protobuf:"varint,4,req,name=ram_anchored_bytes,json=ramAnchoredBytes" json:"ram_anchored_bytes,omitempty"`
	LogsRetainedBytes *int64   `protobuf:"varint,5,req,name=logs_retained_bytes,json=logsRetainedBytes" json:"logs_retained_bytes,omitempty"`
	PerfImprovement   *float64 `protobuf:"fixed64,6,req,name=perf_improvement,json=perfImprovement" json:"perf_improvement,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) Reset() {
	*x = MaintenanceManagerStatusPB_MaintenanceOpPB{}
	mi := &file_yb_tablet_tablet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceManagerStatusPB_MaintenanceOpPB) ProtoMessage() {}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_tablet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceManagerStatusPB_MaintenanceOpPB.ProtoReflect.Descriptor instead.
func (*MaintenanceManagerStatusPB_MaintenanceOpPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_tablet_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) GetRunning() uint32 {
	if x != nil && x.Running != nil {
		return *x.Running
	}
	return 0
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) GetRunnable() bool {
	if x != nil && x.Runnable != nil {
		return *x.Runnable
	}
	return false
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) GetRamAnchoredBytes() uint64 {
	if x != nil && x.RamAnchoredBytes != nil {
		return *x.RamAnchoredBytes
	}
	return 0
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) GetLogsRetainedBytes() int64 {
	if x != nil && x.LogsRetainedBytes != nil {
		return *x.LogsRetainedBytes
	}
	return 0
}

func (x *MaintenanceManagerStatusPB_MaintenanceOpPB) GetPerfImprovement() float64 {
	if x != nil && x.PerfImprovement != nil {
		return *x.PerfImprovement
	}
	return 0
}

type MaintenanceManagerStatusPB_CompletedOpPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	DurationMillis *int32                 `protobuf:"varint,2,req,name=duration_millis,json=durationMillis" json:"duration_millis,omitempty"`
	// Number of seconds since this operation started.
	SecsSinceStart *int32 `protobuf:"varint,3,req,name=secs_since_start,json=secsSinceStart" json:"secs_since_start,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MaintenanceManagerStatusPB_CompletedOpPB) Reset() {
	*x = MaintenanceManagerStatusPB_CompletedOpPB{}
	mi := &file_yb_tablet_tablet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaintenanceManagerStatusPB_CompletedOpPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaintenanceManagerStatusPB_CompletedOpPB) ProtoMessage() {}

func (x *MaintenanceManagerStatusPB_CompletedOpPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_tablet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaintenanceManagerStatusPB_CompletedOpPB.ProtoReflect.Descriptor instead.
func (*MaintenanceManagerStatusPB_CompletedOpPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_tablet_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MaintenanceManagerStatusPB_CompletedOpPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MaintenanceManagerStatusPB_CompletedOpPB) GetDurationMillis() int32 {
	if x != nil && x.DurationMillis != nil {
		return *x.DurationMillis
	}
	return 0
}

func (x *MaintenanceManagerStatusPB_CompletedOpPB) GetSecsSinceStart() int32 {
	if x != nil && x.SecsSinceStart != nil {
		return *x.SecsSinceStart
	}
	return 0
}

var File_yb_tablet_tablet_proto protoreflect.FileDescriptor

var file_yb_tablet_tablet_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x07, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x42, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x13, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x20,
	0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x11, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x67, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x67, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x05, 0x0a, 0x1a, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x12, 0x4e, 0x0a, 0x07, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x50, 0x42, 0x52, 0x06,
	0x62, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x12, 0x6a, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x50, 0x42, 0x52, 0x14, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x4f, 0x70, 0x50, 0x42, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe4, 0x01, 0x0a, 0x0f, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x50, 0x42, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x6d, 0x5f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x10, 0x72, 0x61, 0x6d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x69,
	0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x1a, 0x76, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4f, 0x70,
	0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x73, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
})

var (
	file_yb_tablet_tablet_proto_rawDescOnce sync.Once
	file_yb_tablet_tablet_proto_rawDescData []byte
)

func file_yb_tablet_tablet_proto_rawDescGZIP() []byte {
	file_yb_tablet_tablet_proto_rawDescOnce.Do(func() {
		file_yb_tablet_tablet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_tablet_tablet_proto_rawDesc), len(file_yb_tablet_tablet_proto_rawDesc)))
	})
	return file_yb_tablet_tablet_proto_rawDescData
}

var file_yb_tablet_tablet_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_yb_tablet_tablet_proto_goTypes = []any{
	(*TabletStatusPB)(nil),                             // 0: yb.tablet.TabletStatusPB
	(*MaintenanceManagerStatusPB)(nil),                 // 1: yb.tablet.MaintenanceManagerStatusPB
	(*MaintenanceManagerStatusPB_MaintenanceOpPB)(nil), // 2: yb.tablet.MaintenanceManagerStatusPB.MaintenanceOpPB
	(*MaintenanceManagerStatusPB_CompletedOpPB)(nil),   // 3: yb.tablet.MaintenanceManagerStatusPB.CompletedOpPB
	(RaftGroupStatePB)(0),                              // 4: yb.tablet.RaftGroupStatePB
	(TabletDataState)(0),                               // 5: yb.tablet.TabletDataState
	(*common.PartitionPB)(nil),                         // 6: yb.PartitionPB
	(common.TableType)(0),                              // 7: yb.TableType
}
var file_yb_tablet_tablet_proto_depIdxs = []int32{
	4, // 0: yb.tablet.TabletStatusPB.state:type_name -> yb.tablet.RaftGroupStatePB
	5, // 1: yb.tablet.TabletStatusPB.tablet_data_state:type_name -> yb.tablet.TabletDataState
	6, // 2: yb.tablet.TabletStatusPB.partition:type_name -> yb.PartitionPB
	7, // 3: yb.tablet.TabletStatusPB.table_type:type_name -> yb.TableType
	2, // 4: yb.tablet.MaintenanceManagerStatusPB.best_op:type_name -> yb.tablet.MaintenanceManagerStatusPB.MaintenanceOpPB
	2, // 5: yb.tablet.MaintenanceManagerStatusPB.registered_operations:type_name -> yb.tablet.MaintenanceManagerStatusPB.MaintenanceOpPB
	3, // 6: yb.tablet.MaintenanceManagerStatusPB.completed_operations:type_name -> yb.tablet.MaintenanceManagerStatusPB.CompletedOpPB
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_yb_tablet_tablet_proto_init() }
func file_yb_tablet_tablet_proto_init() {
	if File_yb_tablet_tablet_proto != nil {
		return
	}
	file_yb_tablet_tablet_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_tablet_tablet_proto_rawDesc), len(file_yb_tablet_tablet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_tablet_tablet_proto_goTypes,
		DependencyIndexes: file_yb_tablet_tablet_proto_depIdxs,
		MessageInfos:      file_yb_tablet_tablet_proto_msgTypes,
	}.Build()
	File_yb_tablet_tablet_proto = out.File
	file_yb_tablet_tablet_proto_goTypes = nil
	file_yb_tablet_tablet_proto_depIdxs = nil
}
