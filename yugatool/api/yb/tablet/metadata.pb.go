// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/tablet/metadata.proto

package tablet

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	dockv "github.com/yugabyte/yb-tools/yugatool/api/yb/dockv"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Table information.
type TableInfoPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table id, name, and type.
	TableId       []byte            `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	NamespaceName *string           `protobuf:"bytes,10,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	NamespaceId   *string           `protobuf:"bytes,13,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	TableName     *string           `protobuf:"bytes,2,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableType     *common.TableType `protobuf:"varint,3,opt,name=table_type,json=tableType,enum=yb.TableType,def=2" json:"table_type,omitempty"`
	// In case the table was rewritten, explicitly store the TableId containing the PG table OID
	// (as the table's TableId no longer matches).
	PgTableId *string `protobuf:"bytes,14,opt,name=pg_table_id,json=pgTableId" json:"pg_table_id,omitempty"`
	// Table schema and version.
	Schema        *common.SchemaPB `protobuf:"bytes,4,opt,name=schema" json:"schema,omitempty"`
	SchemaVersion *uint32          `protobuf:"varint,5,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	// Table's partitioning schema.
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,6,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	// Secondary indexes of the table.
	Indexes []*common.IndexInfoPB `protobuf:"bytes,7,rep,name=indexes" json:"indexes,omitempty"`
	// For index table: information about this index.
	IndexInfo *common.IndexInfoPB `protobuf:"bytes,8,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// Deleted column IDs with timestamps so that memory can be cleaned up.
	DeletedCols       []*common.DeletedColumnPB `protobuf:"bytes,9,rep,name=deleted_cols,json=deletedCols" json:"deleted_cols,omitempty"`
	OldSchemaPackings []*dockv.SchemaPackingPB  `protobuf:"bytes,11,rep,name=old_schema_packings,json=oldSchemaPackings" json:"old_schema_packings,omitempty"`
	// CDC WAL retention time in secs of the table.
	WalRetentionSecs *uint32 `protobuf:"varint,12,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	// Whether we can skip table tombstone check for this table
	// (only applies to colocated tables).
	SkipTableTombstoneCheck *bool `protobuf:"varint,15,opt,name=skip_table_tombstone_check,json=skipTableTombstoneCheck" json:"skip_table_tombstone_check,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for TableInfoPB fields.
const (
	Default_TableInfoPB_TableType = common.TableType(2) // common.TableType_DEFAULT_TABLE_TYPE
)

func (x *TableInfoPB) Reset() {
	*x = TableInfoPB{}
	mi := &file_yb_tablet_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfoPB) ProtoMessage() {}

func (x *TableInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfoPB.ProtoReflect.Descriptor instead.
func (*TableInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *TableInfoPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TableInfoPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *TableInfoPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *TableInfoPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TableInfoPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return Default_TableInfoPB_TableType
}

func (x *TableInfoPB) GetPgTableId() string {
	if x != nil && x.PgTableId != nil {
		return *x.PgTableId
	}
	return ""
}

func (x *TableInfoPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *TableInfoPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *TableInfoPB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *TableInfoPB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *TableInfoPB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *TableInfoPB) GetDeletedCols() []*common.DeletedColumnPB {
	if x != nil {
		return x.DeletedCols
	}
	return nil
}

func (x *TableInfoPB) GetOldSchemaPackings() []*dockv.SchemaPackingPB {
	if x != nil {
		return x.OldSchemaPackings
	}
	return nil
}

func (x *TableInfoPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *TableInfoPB) GetSkipTableTombstoneCheck() bool {
	if x != nil && x.SkipTableTombstoneCheck != nil {
		return *x.SkipTableTombstoneCheck
	}
	return false
}

// KV-store meta data. Single KV-store is backed by one or two RocksDB instances, depending on
// whether distributed transactions are enabled for the table. KV-store for sys catalog could
// contain multiple tables.
type KvStoreInfoPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// KV-store id. For more convenient logs browsing and investigation, by default set to
	// raft_group_id for the KV-store which was created first in the Raft group.
	KvStoreId []byte `protobuf:"bytes,1,req,name=kv_store_id,json=kvStoreId" json:"kv_store_id,omitempty"`
	// The RocksDB directory for this KV-store.
	RocksdbDir *string `protobuf:"bytes,2,opt,name=rocksdb_dir,json=rocksdbDir" json:"rocksdb_dir,omitempty"`
	// List of RocksDB SST files.
	RocksdbFiles []*FilePB `protobuf:"bytes,3,rep,name=rocksdb_files,json=rocksdbFiles" json:"rocksdb_files,omitempty"`
	// List of Snapshot files.
	SnapshotFiles []*SnapshotFilePB `protobuf:"bytes,4,rep,name=snapshot_files,json=snapshotFiles" json:"snapshot_files,omitempty"`
	// List of tables sharing this KV-store. Primary table always goes first.
	Tables []*TableInfoPB `protobuf:"bytes,5,rep,name=tables" json:"tables,omitempty"`
	// Optional inclusive lower bound and exclusive upper bound for keys served by this KV-store.
	// See docdb::KeyBounds.
	LowerBoundKey []byte `protobuf:"bytes,6,opt,name=lower_bound_key,json=lowerBoundKey" json:"lower_bound_key,omitempty"`
	UpperBoundKey []byte `protobuf:"bytes,7,opt,name=upper_bound_key,json=upperBoundKey" json:"upper_bound_key,omitempty"`
	// Whether KV-store regular DB parent files have been compacted since creation.
	// We don't split post-split tablets which have uncompacted parent data as of 2020-06-23, since
	// detecting effective middle key and tablet size for such tablets is not yet implemented.
	ParentDataCompacted *bool    `protobuf:"varint,8,opt,name=parent_data_compacted,json=parentDataCompacted" json:"parent_data_compacted,omitempty"`
	SnapshotSchedules   [][]byte `protobuf:"bytes,9,rep,name=snapshot_schedules,json=snapshotSchedules" json:"snapshot_schedules,omitempty"`
	// Uint64 representation of a HybridTime indicating the last time the tablet was fully
	// compacted. Defaults to 0 (i.e. HybridTime::kMin).
	LastFullCompactionTime *uint64 `protobuf:"varint,10,opt,name=last_full_compaction_time,json=lastFullCompactionTime" json:"last_full_compaction_time,omitempty"`
	// Indicates the upper bound for a set of files, which should be included into post-split
	// compaction. In this case post-split compaction picks a subset of files whose file number is
	// limited by post_split_compaction_file_number_upper_bound exclusively and whose total size is
	// less or equal than FLAGS_post_split_compaction_input_size_threshold_bytes. The parameter is
	// not taken into account if FLAGS_post_split_compaction_input_size_threshold_bytes is set to 0.
	// The value of post_split_compaction_file_number_upper_bound is set to 0 when post-split
	// compaction is done for all the files in the selected subset.
	PostSplitCompactionFileNumberUpperBound *uint64 `protobuf:"varint,11,opt,name=post_split_compaction_file_number_upper_bound,json=postSplitCompactionFileNumberUpperBound" json:"post_split_compaction_file_number_upper_bound,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *KvStoreInfoPB) Reset() {
	*x = KvStoreInfoPB{}
	mi := &file_yb_tablet_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KvStoreInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvStoreInfoPB) ProtoMessage() {}

func (x *KvStoreInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvStoreInfoPB.ProtoReflect.Descriptor instead.
func (*KvStoreInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *KvStoreInfoPB) GetKvStoreId() []byte {
	if x != nil {
		return x.KvStoreId
	}
	return nil
}

func (x *KvStoreInfoPB) GetRocksdbDir() string {
	if x != nil && x.RocksdbDir != nil {
		return *x.RocksdbDir
	}
	return ""
}

func (x *KvStoreInfoPB) GetRocksdbFiles() []*FilePB {
	if x != nil {
		return x.RocksdbFiles
	}
	return nil
}

func (x *KvStoreInfoPB) GetSnapshotFiles() []*SnapshotFilePB {
	if x != nil {
		return x.SnapshotFiles
	}
	return nil
}

func (x *KvStoreInfoPB) GetTables() []*TableInfoPB {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *KvStoreInfoPB) GetLowerBoundKey() []byte {
	if x != nil {
		return x.LowerBoundKey
	}
	return nil
}

func (x *KvStoreInfoPB) GetUpperBoundKey() []byte {
	if x != nil {
		return x.UpperBoundKey
	}
	return nil
}

func (x *KvStoreInfoPB) GetParentDataCompacted() bool {
	if x != nil && x.ParentDataCompacted != nil {
		return *x.ParentDataCompacted
	}
	return false
}

func (x *KvStoreInfoPB) GetSnapshotSchedules() [][]byte {
	if x != nil {
		return x.SnapshotSchedules
	}
	return nil
}

func (x *KvStoreInfoPB) GetLastFullCompactionTime() uint64 {
	if x != nil && x.LastFullCompactionTime != nil {
		return *x.LastFullCompactionTime
	}
	return 0
}

func (x *KvStoreInfoPB) GetPostSplitCompactionFileNumberUpperBound() uint64 {
	if x != nil && x.PostSplitCompactionFileNumberUpperBound != nil {
		return *x.PostSplitCompactionFileNumberUpperBound
	}
	return 0
}

// The super-block keeps track of the Raft group.
type RaftGroupReplicaSuperBlockPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table ID of the primary table in this Raft group. For now we can only have more than one
	// tables in master Raft group and sys catalog table is the primary table in this case.
	PrimaryTableId []byte `protobuf:"bytes,1,req,name=primary_table_id,json=primaryTableId" json:"primary_table_id,omitempty"`
	RaftGroupId    []byte `protobuf:"bytes,2,req,name=raft_group_id,json=raftGroupId" json:"raft_group_id,omitempty"`
	// The partition of the table.
	Partition *common.PartitionPB `protobuf:"bytes,13,opt,name=partition" json:"partition,omitempty"`
	// The latest schema
	// TODO: maybe this should be TableSchemaPB? Need to actually put those attributes
	// into use throughout the code. Using the simpler one for now.
	OBSOLETETableName     *string           `protobuf:"bytes,7,opt,name=OBSOLETE_table_name,json=OBSOLETETableName" json:"OBSOLETE_table_name,omitempty"`
	OBSOLETETableType     *common.TableType `protobuf:"varint,15,opt,name=OBSOLETE_table_type,json=OBSOLETETableType,enum=yb.TableType,def=2" json:"OBSOLETE_table_type,omitempty"`
	OBSOLETESchema        *common.SchemaPB  `protobuf:"bytes,8,opt,name=OBSOLETE_schema,json=OBSOLETESchema" json:"OBSOLETE_schema,omitempty"`
	OBSOLETESchemaVersion *uint32           `protobuf:"varint,9,opt,name=OBSOLETE_schema_version,json=OBSOLETESchemaVersion" json:"OBSOLETE_schema_version,omitempty"`
	// The partition schema of the table.
	OBSOLETEPartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,14,opt,name=OBSOLETE_partition_schema,json=OBSOLETEPartitionSchema" json:"OBSOLETE_partition_schema,omitempty"`
	// The current state of the Raft group's data.
	TabletDataState *TabletDataState `protobuf:"varint,10,opt,name=tablet_data_state,json=tabletDataState,enum=yb.tablet.TabletDataState,def=999" json:"tablet_data_state,omitempty"`
	// The write-ahead log directory for this Raft group.
	WalDir *string `protobuf:"bytes,18,opt,name=wal_dir,json=walDir" json:"wal_dir,omitempty"`
	// For tablets that have been tombstoned, stores the last OpId stored in the
	// WAL before tombstoning.
	// Only relevant for TOMBSTONED tablets.
	TombstoneLastLoggedOpid *common.OpIdPB `protobuf:"bytes,12,opt,name=tombstone_last_logged_opid,json=tombstoneLastLoggedOpid" json:"tombstone_last_logged_opid,omitempty"`
	// KV-store for this Raft group.
	KvStore *KvStoreInfoPB `protobuf:"bytes,24,opt,name=kv_store,json=kvStore" json:"kv_store,omitempty"`
	// The RocksDB directory for this tablet.
	OBSOLETERocksdbDir *string `protobuf:"bytes,16,opt,name=OBSOLETE_rocksdb_dir,json=OBSOLETERocksdbDir" json:"OBSOLETE_rocksdb_dir,omitempty"`
	// List of RocksDB SST files.
	OBSOLETERocksdbFiles []*FilePB `protobuf:"bytes,17,rep,name=OBSOLETE_rocksdb_files,json=OBSOLETERocksdbFiles" json:"OBSOLETE_rocksdb_files,omitempty"`
	// List of Snapshot files.
	OBSOLETESnapshotFiles []*SnapshotFilePB `protobuf:"bytes,20,rep,name=OBSOLETE_snapshot_files,json=OBSOLETESnapshotFiles" json:"OBSOLETE_snapshot_files,omitempty"`
	// Deleted column IDs with timestamps so that memory can be cleaned up.
	OBSOLETEDeletedCols []*common.DeletedColumnPB `protobuf:"bytes,19,rep,name=OBSOLETE_deleted_cols,json=OBSOLETEDeletedCols" json:"OBSOLETE_deleted_cols,omitempty"`
	// Secondary indexes of the table.
	OBSOLETEIndexes []*common.IndexInfoPB `protobuf:"bytes,21,rep,name=OBSOLETE_indexes,json=OBSOLETEIndexes" json:"OBSOLETE_indexes,omitempty"`
	// For index table: information about this index.
	OBSOLETEIndexInfo *common.IndexInfoPB `protobuf:"bytes,22,opt,name=OBSOLETE_index_info,json=OBSOLETEIndexInfo" json:"OBSOLETE_index_info,omitempty"`
	// Tables co-located in this tablet.
	OBSOLETETables []*TableInfoPB `protobuf:"bytes,23,rep,name=OBSOLETE_tables,json=OBSOLETETables" json:"OBSOLETE_tables,omitempty"`
	// True if the raft group is for a colocated tablet.
	Colocated *bool `protobuf:"varint,25,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// Minimum replicated op id index for cdc streams. This value is used to retain log files
	// that contain any entries with indices larger than this one. By default max int64 to avoid
	// retaining any log files unnecessarily.
	CdcMinReplicatedIndex *int64 `protobuf:"varint,26,opt,name=cdc_min_replicated_index,json=cdcMinReplicatedIndex,def=9223372036854775807" json:"cdc_min_replicated_index,omitempty"`
	// Is this tablet currently a consumer tablet for xcluster replication.
	IsUnderXclusterReplication *bool `protobuf:"varint,27,opt,name=is_under_xcluster_replication,json=isUnderXclusterReplication" json:"is_under_xcluster_replication,omitempty"`
	// Reject client queries (read and write) to this tablet like it does not present.
	Hidden *bool `protobuf:"varint,28,opt,name=hidden" json:"hidden,omitempty"`
	// Picked at master while enabling writes after restoration.
	RestorationHybridTime *uint64 `protobuf:"fixed64,32,opt,name=restoration_hybrid_time,json=restorationHybridTime" json:"restoration_hybrid_time,omitempty"`
	// SPLIT_OP ID designated for this tablet (so child tablets will have this unset until they've
	// been split themselves).
	SplitOpId           *common.OpIdPB `protobuf:"bytes,29,opt,name=split_op_id,json=splitOpId" json:"split_op_id,omitempty"`
	SplitChildTabletIds [][]byte       `protobuf:"bytes,30,rep,name=split_child_tablet_ids,json=splitChildTabletIds" json:"split_child_tablet_ids,omitempty"`
	ActiveRestorations  [][]byte       `protobuf:"bytes,31,rep,name=active_restorations,json=activeRestorations" json:"active_restorations,omitempty"`
	// Minimum checkpoint op id for cdcsdk streams. This value is used to retain intents
	// with op id larger than this one.
	CdcSdkMinCheckpointOpId *common.OpIdPB `protobuf:"bytes,33,opt,name=cdc_sdk_min_checkpoint_op_id,json=cdcSdkMinCheckpointOpId" json:"cdc_sdk_min_checkpoint_op_id,omitempty"`
	CdcSdkSafeTime          *uint64        `protobuf:"fixed64,34,opt,name=cdc_sdk_safe_time,json=cdcSdkSafeTime" json:"cdc_sdk_safe_time,omitempty"`
	// List of stateful services hosted by this tablet.
	HostedStatefulServices []common.StatefulServiceKind `protobuf:"varint,35,rep,name=hosted_stateful_services,json=hostedStatefulServices,enum=yb.StatefulServiceKind" json:"hosted_stateful_services,omitempty"`
	// Is this tablet currently a being replicated with cdc.
	IsUnderCdcSdkReplication *bool `protobuf:"varint,36,opt,name=is_under_cdc_sdk_replication,json=isUnderCdcSdkReplication" json:"is_under_cdc_sdk_replication,omitempty"`
	// OpId of the last change metadata operation performed on this tablet that has been flushed to
	// disk. This value is used to determine if a particular raft op should be replayed
	// during local tablet bootstrap of the tablet.
	LastFlushedChangeMetadataOpId *common.OpIdPB `protobuf:"bytes,37,opt,name=last_flushed_change_metadata_op_id,json=lastFlushedChangeMetadataOpId" json:"last_flushed_change_metadata_op_id,omitempty"`
	// The highest seq_no clone op that this tablet has applied. The clone was not necessarily
	// successful. The master is responsible for not sending multiple clone requests with different
	// sequence_numbers until the previous one is complete or aborted on all tablets.
	LastAttemptedCloneSeqNo *uint32 `protobuf:"varint,38,opt,name=last_attempted_clone_seq_no,json=lastAttemptedCloneSeqNo" json:"last_attempted_clone_seq_no,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for RaftGroupReplicaSuperBlockPB fields.
const (
	Default_RaftGroupReplicaSuperBlockPB_OBSOLETETableType     = common.TableType(2) // common.TableType_DEFAULT_TABLE_TYPE
	Default_RaftGroupReplicaSuperBlockPB_TabletDataState       = TabletDataState_TABLET_DATA_UNKNOWN
	Default_RaftGroupReplicaSuperBlockPB_Colocated             = bool(false)
	Default_RaftGroupReplicaSuperBlockPB_CdcMinReplicatedIndex = int64(9223372036854775807)
)

func (x *RaftGroupReplicaSuperBlockPB) Reset() {
	*x = RaftGroupReplicaSuperBlockPB{}
	mi := &file_yb_tablet_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftGroupReplicaSuperBlockPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftGroupReplicaSuperBlockPB) ProtoMessage() {}

func (x *RaftGroupReplicaSuperBlockPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftGroupReplicaSuperBlockPB.ProtoReflect.Descriptor instead.
func (*RaftGroupReplicaSuperBlockPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *RaftGroupReplicaSuperBlockPB) GetPrimaryTableId() []byte {
	if x != nil {
		return x.PrimaryTableId
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetRaftGroupId() []byte {
	if x != nil {
		return x.RaftGroupId
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETETableName() string {
	if x != nil && x.OBSOLETETableName != nil {
		return *x.OBSOLETETableName
	}
	return ""
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETETableType() common.TableType {
	if x != nil && x.OBSOLETETableType != nil {
		return *x.OBSOLETETableType
	}
	return Default_RaftGroupReplicaSuperBlockPB_OBSOLETETableType
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETESchema() *common.SchemaPB {
	if x != nil {
		return x.OBSOLETESchema
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETESchemaVersion() uint32 {
	if x != nil && x.OBSOLETESchemaVersion != nil {
		return *x.OBSOLETESchemaVersion
	}
	return 0
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETEPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.OBSOLETEPartitionSchema
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetTabletDataState() TabletDataState {
	if x != nil && x.TabletDataState != nil {
		return *x.TabletDataState
	}
	return Default_RaftGroupReplicaSuperBlockPB_TabletDataState
}

func (x *RaftGroupReplicaSuperBlockPB) GetWalDir() string {
	if x != nil && x.WalDir != nil {
		return *x.WalDir
	}
	return ""
}

func (x *RaftGroupReplicaSuperBlockPB) GetTombstoneLastLoggedOpid() *common.OpIdPB {
	if x != nil {
		return x.TombstoneLastLoggedOpid
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetKvStore() *KvStoreInfoPB {
	if x != nil {
		return x.KvStore
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETERocksdbDir() string {
	if x != nil && x.OBSOLETERocksdbDir != nil {
		return *x.OBSOLETERocksdbDir
	}
	return ""
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETERocksdbFiles() []*FilePB {
	if x != nil {
		return x.OBSOLETERocksdbFiles
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETESnapshotFiles() []*SnapshotFilePB {
	if x != nil {
		return x.OBSOLETESnapshotFiles
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETEDeletedCols() []*common.DeletedColumnPB {
	if x != nil {
		return x.OBSOLETEDeletedCols
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETEIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.OBSOLETEIndexes
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETEIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.OBSOLETEIndexInfo
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetOBSOLETETables() []*TableInfoPB {
	if x != nil {
		return x.OBSOLETETables
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_RaftGroupReplicaSuperBlockPB_Colocated
}

func (x *RaftGroupReplicaSuperBlockPB) GetCdcMinReplicatedIndex() int64 {
	if x != nil && x.CdcMinReplicatedIndex != nil {
		return *x.CdcMinReplicatedIndex
	}
	return Default_RaftGroupReplicaSuperBlockPB_CdcMinReplicatedIndex
}

func (x *RaftGroupReplicaSuperBlockPB) GetIsUnderXclusterReplication() bool {
	if x != nil && x.IsUnderXclusterReplication != nil {
		return *x.IsUnderXclusterReplication
	}
	return false
}

func (x *RaftGroupReplicaSuperBlockPB) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *RaftGroupReplicaSuperBlockPB) GetRestorationHybridTime() uint64 {
	if x != nil && x.RestorationHybridTime != nil {
		return *x.RestorationHybridTime
	}
	return 0
}

func (x *RaftGroupReplicaSuperBlockPB) GetSplitOpId() *common.OpIdPB {
	if x != nil {
		return x.SplitOpId
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetSplitChildTabletIds() [][]byte {
	if x != nil {
		return x.SplitChildTabletIds
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetActiveRestorations() [][]byte {
	if x != nil {
		return x.ActiveRestorations
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetCdcSdkMinCheckpointOpId() *common.OpIdPB {
	if x != nil {
		return x.CdcSdkMinCheckpointOpId
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetCdcSdkSafeTime() uint64 {
	if x != nil && x.CdcSdkSafeTime != nil {
		return *x.CdcSdkSafeTime
	}
	return 0
}

func (x *RaftGroupReplicaSuperBlockPB) GetHostedStatefulServices() []common.StatefulServiceKind {
	if x != nil {
		return x.HostedStatefulServices
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetIsUnderCdcSdkReplication() bool {
	if x != nil && x.IsUnderCdcSdkReplication != nil {
		return *x.IsUnderCdcSdkReplication
	}
	return false
}

func (x *RaftGroupReplicaSuperBlockPB) GetLastFlushedChangeMetadataOpId() *common.OpIdPB {
	if x != nil {
		return x.LastFlushedChangeMetadataOpId
	}
	return nil
}

func (x *RaftGroupReplicaSuperBlockPB) GetLastAttemptedCloneSeqNo() uint32 {
	if x != nil && x.LastAttemptedCloneSeqNo != nil {
		return *x.LastAttemptedCloneSeqNo
	}
	return 0
}

type FilePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Sometimes includes path.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required.
	SizeBytes *uint64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	// Used to avoid copying same files over network, so we could hardlink them.
	Inode         *uint64 `protobuf:"varint,3,opt,name=inode" json:"inode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilePB) Reset() {
	*x = FilePB{}
	mi := &file_yb_tablet_metadata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePB) ProtoMessage() {}

func (x *FilePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_metadata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePB.ProtoReflect.Descriptor instead.
func (*FilePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *FilePB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FilePB) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *FilePB) GetInode() uint64 {
	if x != nil && x.Inode != nil {
		return *x.Inode
	}
	return 0
}

type SnapshotFilePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          *FilePB                `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	SnapshotId    []byte                 `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotFilePB) Reset() {
	*x = SnapshotFilePB{}
	mi := &file_yb_tablet_metadata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotFilePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotFilePB) ProtoMessage() {}

func (x *SnapshotFilePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_metadata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotFilePB.ProtoReflect.Descriptor instead.
func (*SnapshotFilePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *SnapshotFilePB) GetFile() *FilePB {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SnapshotFilePB) GetSnapshotId() []byte {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

var File_yb_tablet_metadata_proto protoreflect.FileDescriptor

var file_yb_tablet_metadata_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79,
	0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x76, 0x2f, 0x64, 0x6f, 0x63, 0x6b,
	0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x05, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x70,
	0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x42,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x49, 0x0a,
	0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e,
	0x64, 0x6f, 0x63, 0x6b, 0x76, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x42, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x6b, 0x69, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x22, 0xc8, 0x04, 0x0a, 0x0d, 0x4b, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x76, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x6b, 0x76, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x63, 0x6b,
	0x73, 0x64, 0x62, 0x44, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64,
	0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x42,
	0x52, 0x0c, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x42, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x27, 0x70, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xf7,
	0x0f, 0x0a, 0x1c, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x75, 0x70, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x66,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x0b, 0x72, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x13,
	0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x11, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x0f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0e, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x19, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x17, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45,
	0x54, 0x45, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x5b, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x13, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x61, 0x6c, 0x44, 0x69, 0x72, 0x12, 0x47, 0x0a, 0x1a, 0x74, 0x6f, 0x6d, 0x62, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62,
	0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x17, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x70, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x6b, 0x76, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x4b,
	0x76, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x6b, 0x76,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x52, 0x6f, 0x63,
	0x6b, 0x73, 0x64, 0x62, 0x44, 0x69, 0x72, 0x12, 0x47, 0x0a, 0x16, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x42, 0x52, 0x14, 0x4f, 0x42, 0x53, 0x4f,
	0x4c, 0x45, 0x54, 0x45, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x51, 0x0a, 0x17, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x42, 0x52, 0x15, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x15, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x42, 0x52, 0x13, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x10,
	0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x4f, 0x42, 0x53, 0x4f,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x11, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0f, 0x4f, 0x42, 0x53,
	0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0e, 0x4f, 0x42, 0x53, 0x4f,
	0x4c, 0x45, 0x54, 0x45, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x18, 0x63, 0x64, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x3a, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37, 0x32, 0x30, 0x33, 0x36, 0x38, 0x35, 0x34,
	0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x52, 0x15, 0x63, 0x64, 0x63, 0x4d, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a,
	0x1d, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x58, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50,
	0x42, 0x52, 0x09, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x1c, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70,
	0x49, 0x64, 0x50, 0x42, 0x52, 0x17, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x4d, 0x69, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x11, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b,
	0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x18, 0x68, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x64, 0x63, 0x53, 0x64, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x22, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49,
	0x64, 0x50, 0x42, 0x52, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x70,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e,
	0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x6f,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x51, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a, 0x0e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x42, 0x12, 0x25, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x42, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
})

var (
	file_yb_tablet_metadata_proto_rawDescOnce sync.Once
	file_yb_tablet_metadata_proto_rawDescData []byte
)

func file_yb_tablet_metadata_proto_rawDescGZIP() []byte {
	file_yb_tablet_metadata_proto_rawDescOnce.Do(func() {
		file_yb_tablet_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_tablet_metadata_proto_rawDesc), len(file_yb_tablet_metadata_proto_rawDesc)))
	})
	return file_yb_tablet_metadata_proto_rawDescData
}

var file_yb_tablet_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_yb_tablet_metadata_proto_goTypes = []any{
	(*TableInfoPB)(nil),                  // 0: yb.tablet.TableInfoPB
	(*KvStoreInfoPB)(nil),                // 1: yb.tablet.KvStoreInfoPB
	(*RaftGroupReplicaSuperBlockPB)(nil), // 2: yb.tablet.RaftGroupReplicaSuperBlockPB
	(*FilePB)(nil),                       // 3: yb.tablet.FilePB
	(*SnapshotFilePB)(nil),               // 4: yb.tablet.SnapshotFilePB
	(common.TableType)(0),                // 5: yb.TableType
	(*common.SchemaPB)(nil),              // 6: yb.SchemaPB
	(*common.PartitionSchemaPB)(nil),     // 7: yb.PartitionSchemaPB
	(*common.IndexInfoPB)(nil),           // 8: yb.IndexInfoPB
	(*common.DeletedColumnPB)(nil),       // 9: yb.DeletedColumnPB
	(*dockv.SchemaPackingPB)(nil),        // 10: yb.dockv.SchemaPackingPB
	(*common.PartitionPB)(nil),           // 11: yb.PartitionPB
	(TabletDataState)(0),                 // 12: yb.tablet.TabletDataState
	(*common.OpIdPB)(nil),                // 13: yb.OpIdPB
	(common.StatefulServiceKind)(0),      // 14: yb.StatefulServiceKind
}
var file_yb_tablet_metadata_proto_depIdxs = []int32{
	5,  // 0: yb.tablet.TableInfoPB.table_type:type_name -> yb.TableType
	6,  // 1: yb.tablet.TableInfoPB.schema:type_name -> yb.SchemaPB
	7,  // 2: yb.tablet.TableInfoPB.partition_schema:type_name -> yb.PartitionSchemaPB
	8,  // 3: yb.tablet.TableInfoPB.indexes:type_name -> yb.IndexInfoPB
	8,  // 4: yb.tablet.TableInfoPB.index_info:type_name -> yb.IndexInfoPB
	9,  // 5: yb.tablet.TableInfoPB.deleted_cols:type_name -> yb.DeletedColumnPB
	10, // 6: yb.tablet.TableInfoPB.old_schema_packings:type_name -> yb.dockv.SchemaPackingPB
	3,  // 7: yb.tablet.KvStoreInfoPB.rocksdb_files:type_name -> yb.tablet.FilePB
	4,  // 8: yb.tablet.KvStoreInfoPB.snapshot_files:type_name -> yb.tablet.SnapshotFilePB
	0,  // 9: yb.tablet.KvStoreInfoPB.tables:type_name -> yb.tablet.TableInfoPB
	11, // 10: yb.tablet.RaftGroupReplicaSuperBlockPB.partition:type_name -> yb.PartitionPB
	5,  // 11: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_table_type:type_name -> yb.TableType
	6,  // 12: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_schema:type_name -> yb.SchemaPB
	7,  // 13: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_partition_schema:type_name -> yb.PartitionSchemaPB
	12, // 14: yb.tablet.RaftGroupReplicaSuperBlockPB.tablet_data_state:type_name -> yb.tablet.TabletDataState
	13, // 15: yb.tablet.RaftGroupReplicaSuperBlockPB.tombstone_last_logged_opid:type_name -> yb.OpIdPB
	1,  // 16: yb.tablet.RaftGroupReplicaSuperBlockPB.kv_store:type_name -> yb.tablet.KvStoreInfoPB
	3,  // 17: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_rocksdb_files:type_name -> yb.tablet.FilePB
	4,  // 18: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_snapshot_files:type_name -> yb.tablet.SnapshotFilePB
	9,  // 19: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_deleted_cols:type_name -> yb.DeletedColumnPB
	8,  // 20: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_indexes:type_name -> yb.IndexInfoPB
	8,  // 21: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_index_info:type_name -> yb.IndexInfoPB
	0,  // 22: yb.tablet.RaftGroupReplicaSuperBlockPB.OBSOLETE_tables:type_name -> yb.tablet.TableInfoPB
	13, // 23: yb.tablet.RaftGroupReplicaSuperBlockPB.split_op_id:type_name -> yb.OpIdPB
	13, // 24: yb.tablet.RaftGroupReplicaSuperBlockPB.cdc_sdk_min_checkpoint_op_id:type_name -> yb.OpIdPB
	14, // 25: yb.tablet.RaftGroupReplicaSuperBlockPB.hosted_stateful_services:type_name -> yb.StatefulServiceKind
	13, // 26: yb.tablet.RaftGroupReplicaSuperBlockPB.last_flushed_change_metadata_op_id:type_name -> yb.OpIdPB
	3,  // 27: yb.tablet.SnapshotFilePB.file:type_name -> yb.tablet.FilePB
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_yb_tablet_metadata_proto_init() }
func file_yb_tablet_metadata_proto_init() {
	if File_yb_tablet_metadata_proto != nil {
		return
	}
	file_yb_tablet_tablet_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_tablet_metadata_proto_rawDesc), len(file_yb_tablet_metadata_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_tablet_metadata_proto_goTypes,
		DependencyIndexes: file_yb_tablet_metadata_proto_depIdxs,
		MessageInfos:      file_yb_tablet_metadata_proto_msgTypes,
	}.Build()
	File_yb_tablet_metadata_proto = out.File
	file_yb_tablet_metadata_proto_goTypes = nil
	file_yb_tablet_metadata_proto_depIdxs = nil
}
