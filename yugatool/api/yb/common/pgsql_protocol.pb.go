// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/common/pgsql_protocol.proto

package common

import (
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Make sure this is in sync with YBCPgMetricsCaptureType in ybc_pg_typedefs.h.
type PgsqlMetricsCaptureType int32

const (
	PgsqlMetricsCaptureType_PGSQL_METRICS_CAPTURE_NONE PgsqlMetricsCaptureType = 0
	PgsqlMetricsCaptureType_PGSQL_METRICS_CAPTURE_ALL  PgsqlMetricsCaptureType = 1
)

// Enum value maps for PgsqlMetricsCaptureType.
var (
	PgsqlMetricsCaptureType_name = map[int32]string{
		0: "PGSQL_METRICS_CAPTURE_NONE",
		1: "PGSQL_METRICS_CAPTURE_ALL",
	}
	PgsqlMetricsCaptureType_value = map[string]int32{
		"PGSQL_METRICS_CAPTURE_NONE": 0,
		"PGSQL_METRICS_CAPTURE_ALL":  1,
	}
)

func (x PgsqlMetricsCaptureType) Enum() *PgsqlMetricsCaptureType {
	p := new(PgsqlMetricsCaptureType)
	*p = x
	return p
}

func (x PgsqlMetricsCaptureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PgsqlMetricsCaptureType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_pgsql_protocol_proto_enumTypes[0].Descriptor()
}

func (PgsqlMetricsCaptureType) Type() protoreflect.EnumType {
	return &file_yb_common_pgsql_protocol_proto_enumTypes[0]
}

func (x PgsqlMetricsCaptureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PgsqlMetricsCaptureType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PgsqlMetricsCaptureType(num)
	return nil
}

// Deprecated: Use PgsqlMetricsCaptureType.Descriptor instead.
func (PgsqlMetricsCaptureType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{0}
}

// Statement types
type PgsqlWriteRequestPB_PgsqlStmtType int32

const (
	PgsqlWriteRequestPB_PGSQL_INSERT             PgsqlWriteRequestPB_PgsqlStmtType = 1
	PgsqlWriteRequestPB_PGSQL_UPDATE             PgsqlWriteRequestPB_PgsqlStmtType = 2
	PgsqlWriteRequestPB_PGSQL_DELETE             PgsqlWriteRequestPB_PgsqlStmtType = 3
	PgsqlWriteRequestPB_PGSQL_UPSERT             PgsqlWriteRequestPB_PgsqlStmtType = 4
	PgsqlWriteRequestPB_PGSQL_TRUNCATE_COLOCATED PgsqlWriteRequestPB_PgsqlStmtType = 5
	PgsqlWriteRequestPB_PGSQL_FETCH_SEQUENCE     PgsqlWriteRequestPB_PgsqlStmtType = 6
)

// Enum value maps for PgsqlWriteRequestPB_PgsqlStmtType.
var (
	PgsqlWriteRequestPB_PgsqlStmtType_name = map[int32]string{
		1: "PGSQL_INSERT",
		2: "PGSQL_UPDATE",
		3: "PGSQL_DELETE",
		4: "PGSQL_UPSERT",
		5: "PGSQL_TRUNCATE_COLOCATED",
		6: "PGSQL_FETCH_SEQUENCE",
	}
	PgsqlWriteRequestPB_PgsqlStmtType_value = map[string]int32{
		"PGSQL_INSERT":             1,
		"PGSQL_UPDATE":             2,
		"PGSQL_DELETE":             3,
		"PGSQL_UPSERT":             4,
		"PGSQL_TRUNCATE_COLOCATED": 5,
		"PGSQL_FETCH_SEQUENCE":     6,
	}
)

func (x PgsqlWriteRequestPB_PgsqlStmtType) Enum() *PgsqlWriteRequestPB_PgsqlStmtType {
	p := new(PgsqlWriteRequestPB_PgsqlStmtType)
	*p = x
	return p
}

func (x PgsqlWriteRequestPB_PgsqlStmtType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PgsqlWriteRequestPB_PgsqlStmtType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_pgsql_protocol_proto_enumTypes[1].Descriptor()
}

func (PgsqlWriteRequestPB_PgsqlStmtType) Type() protoreflect.EnumType {
	return &file_yb_common_pgsql_protocol_proto_enumTypes[1]
}

func (x PgsqlWriteRequestPB_PgsqlStmtType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PgsqlWriteRequestPB_PgsqlStmtType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PgsqlWriteRequestPB_PgsqlStmtType(num)
	return nil
}

// Deprecated: Use PgsqlWriteRequestPB_PgsqlStmtType.Descriptor instead.
func (PgsqlWriteRequestPB_PgsqlStmtType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{12, 0}
}

// Response status
type PgsqlResponsePB_RequestStatus int32

const (
	PgsqlResponsePB_PGSQL_STATUS_OK                      PgsqlResponsePB_RequestStatus = 0
	PgsqlResponsePB_PGSQL_STATUS_SCHEMA_VERSION_MISMATCH PgsqlResponsePB_RequestStatus = 1
	PgsqlResponsePB_PGSQL_STATUS_RUNTIME_ERROR           PgsqlResponsePB_RequestStatus = 2
	PgsqlResponsePB_PGSQL_STATUS_USAGE_ERROR             PgsqlResponsePB_RequestStatus = 3
	PgsqlResponsePB_PGSQL_STATUS_RESTART_REQUIRED_ERROR  PgsqlResponsePB_RequestStatus = 4
	PgsqlResponsePB_PGSQL_STATUS_DUPLICATE_KEY_ERROR     PgsqlResponsePB_RequestStatus = 5
)

// Enum value maps for PgsqlResponsePB_RequestStatus.
var (
	PgsqlResponsePB_RequestStatus_name = map[int32]string{
		0: "PGSQL_STATUS_OK",
		1: "PGSQL_STATUS_SCHEMA_VERSION_MISMATCH",
		2: "PGSQL_STATUS_RUNTIME_ERROR",
		3: "PGSQL_STATUS_USAGE_ERROR",
		4: "PGSQL_STATUS_RESTART_REQUIRED_ERROR",
		5: "PGSQL_STATUS_DUPLICATE_KEY_ERROR",
	}
	PgsqlResponsePB_RequestStatus_value = map[string]int32{
		"PGSQL_STATUS_OK":                      0,
		"PGSQL_STATUS_SCHEMA_VERSION_MISMATCH": 1,
		"PGSQL_STATUS_RUNTIME_ERROR":           2,
		"PGSQL_STATUS_USAGE_ERROR":             3,
		"PGSQL_STATUS_RESTART_REQUIRED_ERROR":  4,
		"PGSQL_STATUS_DUPLICATE_KEY_ERROR":     5,
	}
)

func (x PgsqlResponsePB_RequestStatus) Enum() *PgsqlResponsePB_RequestStatus {
	p := new(PgsqlResponsePB_RequestStatus)
	*p = x
	return p
}

func (x PgsqlResponsePB_RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PgsqlResponsePB_RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_pgsql_protocol_proto_enumTypes[2].Descriptor()
}

func (PgsqlResponsePB_RequestStatus) Type() protoreflect.EnumType {
	return &file_yb_common_pgsql_protocol_proto_enumTypes[2]
}

func (x PgsqlResponsePB_RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PgsqlResponsePB_RequestStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PgsqlResponsePB_RequestStatus(num)
	return nil
}

// Deprecated: Use PgsqlResponsePB_RequestStatus.Descriptor instead.
func (PgsqlResponsePB_RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{21, 0}
}

// --------------------------------------------------------------------------------------------------
// Expressions.
// --------------------------------------------------------------------------------------------------
// Builtin call expression. There are 3 different calls.
//   - Builtin operators such as '>', '<', '=', ...
//     These operators can be executed anywhere.
//   - Builtin functions such as Now().
//     These functions can be executed anywhere.
//   - Server builtin functions.
//     Only tablet servers can execute these functions.
//
// TODO(neil) Regular builtin operators. This message can be executed anywhere.
// - This is more efficient than builtin call as it avoids most overheads of calling builtin lib.
// - Merge the current condition operator execution with this.
// - To optimize certain operation (such as +), replace it builtin function with builtin op.
type PgsqlBCallPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Opcode        *int32                 `protobuf:"varint,1,opt,name=opcode" json:"opcode,omitempty"`
	Operands      []*PgsqlExpressionPB   `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlBCallPB) Reset() {
	*x = PgsqlBCallPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlBCallPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlBCallPB) ProtoMessage() {}

func (x *PgsqlBCallPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlBCallPB.ProtoReflect.Descriptor instead.
func (*PgsqlBCallPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *PgsqlBCallPB) GetOpcode() int32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *PgsqlBCallPB) GetOperands() []*PgsqlExpressionPB {
	if x != nil {
		return x.Operands
	}
	return nil
}

// A logical condition that evaluates to true/false. Used in the WHERE clause.
type PgsqlConditionPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Op            *QLOperator            `protobuf:"varint,1,opt,name=op,enum=yb.QLOperator" json:"op,omitempty"`
	Operands      []*PgsqlExpressionPB   `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlConditionPB) Reset() {
	*x = PgsqlConditionPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlConditionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlConditionPB) ProtoMessage() {}

func (x *PgsqlConditionPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlConditionPB.ProtoReflect.Descriptor instead.
func (*PgsqlConditionPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *PgsqlConditionPB) GetOp() QLOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return QLOperator_QL_OP_NOOP
}

func (x *PgsqlConditionPB) GetOperands() []*PgsqlExpressionPB {
	if x != nil {
		return x.Operands
	}
	return nil
}

// An expression in a WHERE condition.
//   - Bind values would be given by client and grouped into a repeated field that can be accessed
//     by their indexes.
//   - Alias values would be computed by server and grouped into repeated field that can be accessed
//     by their indexes.
//   - Code generator write indexes as ref. Executor deref indexes to get actual values.
type PgsqlExpressionPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Expr:
	//
	//	*PgsqlExpressionPB_Value
	//	*PgsqlExpressionPB_ColumnId
	//	*PgsqlExpressionPB_BindId
	//	*PgsqlExpressionPB_AliasId
	//	*PgsqlExpressionPB_Bfcall
	//	*PgsqlExpressionPB_Tscall
	//	*PgsqlExpressionPB_Bocall
	//	*PgsqlExpressionPB_Condition
	//	*PgsqlExpressionPB_Tuple
	Expr          isPgsqlExpressionPB_Expr `protobuf_oneof:"expr"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlExpressionPB) Reset() {
	*x = PgsqlExpressionPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlExpressionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlExpressionPB) ProtoMessage() {}

func (x *PgsqlExpressionPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlExpressionPB.ProtoReflect.Descriptor instead.
func (*PgsqlExpressionPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *PgsqlExpressionPB) GetExpr() isPgsqlExpressionPB_Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *PgsqlExpressionPB) GetValue() *QLValuePB {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_Value); ok {
			return x.Value
		}
	}
	return nil
}

func (x *PgsqlExpressionPB) GetColumnId() int32 {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_ColumnId); ok {
			return x.ColumnId
		}
	}
	return 0
}

func (x *PgsqlExpressionPB) GetBindId() int32 {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_BindId); ok {
			return x.BindId
		}
	}
	return 0
}

func (x *PgsqlExpressionPB) GetAliasId() int32 {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_AliasId); ok {
			return x.AliasId
		}
	}
	return 0
}

func (x *PgsqlExpressionPB) GetBfcall() *PgsqlBCallPB {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_Bfcall); ok {
			return x.Bfcall
		}
	}
	return nil
}

func (x *PgsqlExpressionPB) GetTscall() *PgsqlBCallPB {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_Tscall); ok {
			return x.Tscall
		}
	}
	return nil
}

func (x *PgsqlExpressionPB) GetBocall() *PgsqlBCallPB {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_Bocall); ok {
			return x.Bocall
		}
	}
	return nil
}

func (x *PgsqlExpressionPB) GetCondition() *PgsqlConditionPB {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_Condition); ok {
			return x.Condition
		}
	}
	return nil
}

func (x *PgsqlExpressionPB) GetTuple() *QLTupleExpressionPB {
	if x != nil {
		if x, ok := x.Expr.(*PgsqlExpressionPB_Tuple); ok {
			return x.Tuple
		}
	}
	return nil
}

type isPgsqlExpressionPB_Expr interface {
	isPgsqlExpressionPB_Expr()
}

type PgsqlExpressionPB_Value struct {
	Value *QLValuePB `protobuf:"bytes,1,opt,name=value,oneof"`
}

type PgsqlExpressionPB_ColumnId struct {
	ColumnId int32 `protobuf:"varint,2,opt,name=column_id,json=columnId,oneof"`
}

type PgsqlExpressionPB_BindId struct {
	BindId int32 `protobuf:"varint,3,opt,name=bind_id,json=bindId,oneof"` // Bind variable index.
}

type PgsqlExpressionPB_AliasId struct {
	AliasId int32 `protobuf:"varint,4,opt,name=alias_id,json=aliasId,oneof"` // Alias index.
}

type PgsqlExpressionPB_Bfcall struct {
	Bfcall *PgsqlBCallPB `protobuf:"bytes,5,opt,name=bfcall,oneof"` // Regular builtin calls.
}

type PgsqlExpressionPB_Tscall struct {
	Tscall *PgsqlBCallPB `protobuf:"bytes,6,opt,name=tscall,oneof"` // Tablet server builtin calls.
}

type PgsqlExpressionPB_Bocall struct {
	Bocall *PgsqlBCallPB `protobuf:"bytes,7,opt,name=bocall,oneof"` // Builtin operator calls.
}

type PgsqlExpressionPB_Condition struct {
	Condition *PgsqlConditionPB `protobuf:"bytes,8,opt,name=condition,oneof"` // Logical condition that evaluates to true/false.
}

type PgsqlExpressionPB_Tuple struct {
	Tuple *QLTupleExpressionPB `protobuf:"bytes,9,opt,name=tuple,oneof"` // Tuple expression in LHS.
}

func (*PgsqlExpressionPB_Value) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_ColumnId) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_BindId) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_AliasId) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_Bfcall) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_Tscall) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_Bocall) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_Condition) isPgsqlExpressionPB_Expr() {}

func (*PgsqlExpressionPB_Tuple) isPgsqlExpressionPB_Expr() {}

// This message defines an argument in a batch request from PgGate to DocDB. Instead of sending
// many requests of different arguments, a batch request would send one request that contains
// an array of independent arguments. DocDB will iterate the array to execute.
//
//	DML_request(arg) [n] ---> DML_request ( PgsqlBatchArgument args[n] )
type PgsqlBatchArgumentPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The order number of this argument in a batch.
	// Currently, this is only used for debugging, but it might be needed in the future.
	Order *int64 `protobuf:"varint,1,opt,name=order" json:"order,omitempty"`
	// This attribute is used when fetching by rowid (ybctid). PgGate fetches "base_ctid" from
	// SecondaryIndex and use it to select Targets from UserTable.
	//
	//	SELECT <Targets> FROM <UserTable>
	//	  WHERE ybctid IN (SELECT base_ybctid FROM <SecondaryIndex> WHERE <key_condition>)
	Ybctid *PgsqlExpressionPB `protobuf:"bytes,2,opt,name=ybctid" json:"ybctid,omitempty"`
	// Hash codes.
	HashCode    *uint32 `protobuf:"varint,3,opt,name=hash_code,json=hashCode" json:"hash_code,omitempty"`
	MaxHashCode *uint32 `protobuf:"varint,4,opt,name=max_hash_code,json=maxHashCode" json:"max_hash_code,omitempty"`
	// Partition values.
	PartitionColumnValues []*PgsqlExpressionPB `protobuf:"bytes,5,rep,name=partition_column_values,json=partitionColumnValues" json:"partition_column_values,omitempty"`
	// Range values.
	RangeColumnValues []*PgsqlExpressionPB `protobuf:"bytes,6,rep,name=range_column_values,json=rangeColumnValues" json:"range_column_values,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PgsqlBatchArgumentPB) Reset() {
	*x = PgsqlBatchArgumentPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlBatchArgumentPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlBatchArgumentPB) ProtoMessage() {}

func (x *PgsqlBatchArgumentPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlBatchArgumentPB.ProtoReflect.Descriptor instead.
func (*PgsqlBatchArgumentPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *PgsqlBatchArgumentPB) GetOrder() int64 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *PgsqlBatchArgumentPB) GetYbctid() *PgsqlExpressionPB {
	if x != nil {
		return x.Ybctid
	}
	return nil
}

func (x *PgsqlBatchArgumentPB) GetHashCode() uint32 {
	if x != nil && x.HashCode != nil {
		return *x.HashCode
	}
	return 0
}

func (x *PgsqlBatchArgumentPB) GetMaxHashCode() uint32 {
	if x != nil && x.MaxHashCode != nil {
		return *x.MaxHashCode
	}
	return 0
}

func (x *PgsqlBatchArgumentPB) GetPartitionColumnValues() []*PgsqlExpressionPB {
	if x != nil {
		return x.PartitionColumnValues
	}
	return nil
}

func (x *PgsqlBatchArgumentPB) GetRangeColumnValues() []*PgsqlExpressionPB {
	if x != nil {
		return x.RangeColumnValues
	}
	return nil
}

// --------------------------------------------------------------------------------------------------
// Column messages.
// --------------------------------------------------------------------------------------------------
// ColumnRefs is a list of columns to be read by DocDB before a PGSQL request can be executed.
// DEPRECATED, new code should use col_refs field of type PgsqlColRefPB instead
type PgsqlColumnRefsPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int32                `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlColumnRefsPB) Reset() {
	*x = PgsqlColumnRefsPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlColumnRefsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlColumnRefsPB) ProtoMessage() {}

func (x *PgsqlColumnRefsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlColumnRefsPB.ProtoReflect.Descriptor instead.
func (*PgsqlColumnRefsPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *PgsqlColumnRefsPB) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Represents a column referenced by a PGSQL request.
// - column_id is a DocDB identifier of the column and used to locate a value within a row
// - attno is a Postgres identifier, must be specified if column is referenced by a PG expression
// - typid, typmod are needed to convert DocDB values to Postgres format (Datum and isnull pair).
// They must be specified if used in an expression evaluated by PGgate.
// - collid is for future collations support
type PgsqlColRefPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnId      *int32                 `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	Attno         *int32                 `protobuf:"varint,2,opt,name=attno" json:"attno,omitempty"`
	Typid         *int32                 `protobuf:"varint,3,opt,name=typid" json:"typid,omitempty"`
	Typmod        *int32                 `protobuf:"varint,4,opt,name=typmod" json:"typmod,omitempty"`
	Collid        *int32                 `protobuf:"varint,5,opt,name=collid" json:"collid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlColRefPB) Reset() {
	*x = PgsqlColRefPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlColRefPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlColRefPB) ProtoMessage() {}

func (x *PgsqlColRefPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlColRefPB.ProtoReflect.Descriptor instead.
func (*PgsqlColRefPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *PgsqlColRefPB) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *PgsqlColRefPB) GetAttno() int32 {
	if x != nil && x.Attno != nil {
		return *x.Attno
	}
	return 0
}

func (x *PgsqlColRefPB) GetTypid() int32 {
	if x != nil && x.Typid != nil {
		return *x.Typid
	}
	return 0
}

func (x *PgsqlColRefPB) GetTypmod() int32 {
	if x != nil && x.Typmod != nil {
		return *x.Typmod
	}
	return 0
}

func (x *PgsqlColRefPB) GetCollid() int32 {
	if x != nil && x.Collid != nil {
		return *x.Collid
	}
	return 0
}

// ColumnValue is a value to be assigned to a table column by DocDB while executing a PGSQL request.
// Currently, this is used for SET clause.
//
//	SET column-of-given-id = expr
type PgsqlColumnValuePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnId      *int32                 `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	Expr          *PgsqlExpressionPB     `protobuf:"bytes,2,opt,name=expr" json:"expr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlColumnValuePB) Reset() {
	*x = PgsqlColumnValuePB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlColumnValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlColumnValuePB) ProtoMessage() {}

func (x *PgsqlColumnValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlColumnValuePB.ProtoReflect.Descriptor instead.
func (*PgsqlColumnValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *PgsqlColumnValuePB) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *PgsqlColumnValuePB) GetExpr() *PgsqlExpressionPB {
	if x != nil {
		return x.Expr
	}
	return nil
}

// PgsqlRSColDesc is the descriptor of a selected column in a ResultSet (RS), which can be any
// expression and not just table columns.
type PgsqlRSColDescPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QlType        *QLTypePB              `protobuf:"bytes,2,opt,name=ql_type,json=qlType" json:"ql_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlRSColDescPB) Reset() {
	*x = PgsqlRSColDescPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlRSColDescPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlRSColDescPB) ProtoMessage() {}

func (x *PgsqlRSColDescPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlRSColDescPB.ProtoReflect.Descriptor instead.
func (*PgsqlRSColDescPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *PgsqlRSColDescPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PgsqlRSColDescPB) GetQlType() *QLTypePB {
	if x != nil {
		return x.QlType
	}
	return nil
}

// Descriptor of a row in a resultset (RS).
type PgsqlRSRowDescPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RscolDescs    []*PgsqlRSColDescPB    `protobuf:"bytes,1,rep,name=rscol_descs,json=rscolDescs" json:"rscol_descs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlRSRowDescPB) Reset() {
	*x = PgsqlRSRowDescPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlRSRowDescPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlRSRowDescPB) ProtoMessage() {}

func (x *PgsqlRSRowDescPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlRSRowDescPB.ProtoReflect.Descriptor instead.
func (*PgsqlRSRowDescPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *PgsqlRSRowDescPB) GetRscolDescs() []*PgsqlRSColDescPB {
	if x != nil {
		return x.RscolDescs
	}
	return nil
}

// Boundary value.
type PgsqlPartitionBound struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Boundary partition key.
	Key []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Indicate whether or not the boundary is inclusive.
	IsInclusive   *bool `protobuf:"varint,2,opt,name=is_inclusive,json=isInclusive" json:"is_inclusive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlPartitionBound) Reset() {
	*x = PgsqlPartitionBound{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlPartitionBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlPartitionBound) ProtoMessage() {}

func (x *PgsqlPartitionBound) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlPartitionBound.ProtoReflect.Descriptor instead.
func (*PgsqlPartitionBound) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *PgsqlPartitionBound) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PgsqlPartitionBound) GetIsInclusive() bool {
	if x != nil && x.IsInclusive != nil {
		return *x.IsInclusive
	}
	return false
}

// Random sampling state
type PgsqlSamplingStatePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// target number of rows to collect
	Targrows *int32 `protobuf:"varint,1,opt,name=targrows" json:"targrows,omitempty"`
	// number of rows collected so far across all blocks
	Numrows *int32 `protobuf:"varint,2,opt,name=numrows" json:"numrows,omitempty"`
	// number of rows considered for sample across all blocks
	Samplerows *float64 `protobuf:"fixed64,3,opt,name=samplerows" json:"samplerows,omitempty"`
	// current number of rows to skip
	Rowstoskip *float64 `protobuf:"fixed64,4,opt,name=rowstoskip" json:"rowstoskip,omitempty"`
	// reservoir state W
	RstateW *float64 `protobuf:"fixed64,5,opt,name=rstate_w,json=rstateW" json:"rstate_w,omitempty"`
	// 48 bits of sampler random state
	RandState     *uint64 `protobuf:"varint,6,opt,name=rand_state,json=randState" json:"rand_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlSamplingStatePB) Reset() {
	*x = PgsqlSamplingStatePB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlSamplingStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlSamplingStatePB) ProtoMessage() {}

func (x *PgsqlSamplingStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlSamplingStatePB.ProtoReflect.Descriptor instead.
func (*PgsqlSamplingStatePB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *PgsqlSamplingStatePB) GetTargrows() int32 {
	if x != nil && x.Targrows != nil {
		return *x.Targrows
	}
	return 0
}

func (x *PgsqlSamplingStatePB) GetNumrows() int32 {
	if x != nil && x.Numrows != nil {
		return *x.Numrows
	}
	return 0
}

func (x *PgsqlSamplingStatePB) GetSamplerows() float64 {
	if x != nil && x.Samplerows != nil {
		return *x.Samplerows
	}
	return 0
}

func (x *PgsqlSamplingStatePB) GetRowstoskip() float64 {
	if x != nil && x.Rowstoskip != nil {
		return *x.Rowstoskip
	}
	return 0
}

func (x *PgsqlSamplingStatePB) GetRstateW() float64 {
	if x != nil && x.RstateW != nil {
		return *x.RstateW
	}
	return 0
}

func (x *PgsqlSamplingStatePB) GetRandState() uint64 {
	if x != nil && x.RandState != nil {
		return *x.RandState
	}
	return 0
}

type PgsqlFetchSequenceParamsPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FetchCount    *uint32                `protobuf:"varint,1,opt,name=fetch_count,json=fetchCount" json:"fetch_count,omitempty"`
	IncBy         *int64                 `protobuf:"varint,2,opt,name=inc_by,json=incBy" json:"inc_by,omitempty"`
	MinValue      *int64                 `protobuf:"varint,3,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue      *int64                 `protobuf:"varint,4,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	Cycle         *bool                  `protobuf:"varint,5,opt,name=cycle" json:"cycle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlFetchSequenceParamsPB) Reset() {
	*x = PgsqlFetchSequenceParamsPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlFetchSequenceParamsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlFetchSequenceParamsPB) ProtoMessage() {}

func (x *PgsqlFetchSequenceParamsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlFetchSequenceParamsPB.ProtoReflect.Descriptor instead.
func (*PgsqlFetchSequenceParamsPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *PgsqlFetchSequenceParamsPB) GetFetchCount() uint32 {
	if x != nil && x.FetchCount != nil {
		return *x.FetchCount
	}
	return 0
}

func (x *PgsqlFetchSequenceParamsPB) GetIncBy() int64 {
	if x != nil && x.IncBy != nil {
		return *x.IncBy
	}
	return 0
}

func (x *PgsqlFetchSequenceParamsPB) GetMinValue() int64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *PgsqlFetchSequenceParamsPB) GetMaxValue() int64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *PgsqlFetchSequenceParamsPB) GetCycle() bool {
	if x != nil && x.Cycle != nil {
		return *x.Cycle
	}
	return false
}

// Instruction.
type PgsqlWriteRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Client info
	Client *QLClient `protobuf:"varint,1,opt,name=client,enum=yb.QLClient" json:"client,omitempty"` // required
	// Statement info
	StmtId   *uint64                            `protobuf:"varint,2,opt,name=stmt_id,json=stmtId" json:"stmt_id,omitempty"`                                                 // client request id.
	StmtType *PgsqlWriteRequestPB_PgsqlStmtType `protobuf:"varint,3,opt,name=stmt_type,json=stmtType,enum=yb.PgsqlWriteRequestPB_PgsqlStmtType" json:"stmt_type,omitempty"` // required
	// Table id.
	TableId []byte `protobuf:"bytes,4,opt,name=table_id,json=tableId" json:"table_id,omitempty"` // required
	// Table schema version.
	SchemaVersion *uint32 `protobuf:"varint,5,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"` // required
	// ------------------------------------------------------------------------------------------------
	// Row Identifiers provides information for the row that the server INSERTs, DELETEs, or UPDATEs.
	//   - hash_code, if provided, helps locating the row. It is used by the proxy to find tablet server
	//     and by DocDB to find a set of matching rows.
	//   - partition_column_values are for partition columns,
	//     e.g. for h1 = 1 AND h2 = 2 partition_column_values would be [1, 2].
	//   - range_column_values are for range columns.
	//   - column_values are for non-primary columns. They are used to further identify the row to be
	//     inserted, deleted, or updated.
	//
	// NOTE: Primary columns are defined when creating tables. These columns are different from
	//
	//	those columns that are used as part of an INDEX.
	HashCode              *uint32              `protobuf:"varint,6,opt,name=hash_code,json=hashCode" json:"hash_code,omitempty"`
	PartitionColumnValues []*PgsqlExpressionPB `protobuf:"bytes,7,rep,name=partition_column_values,json=partitionColumnValues" json:"partition_column_values,omitempty"`
	RangeColumnValues     []*PgsqlExpressionPB `protobuf:"bytes,8,rep,name=range_column_values,json=rangeColumnValues" json:"range_column_values,omitempty"`
	YbctidColumnValue     *PgsqlExpressionPB   `protobuf:"bytes,9,opt,name=ybctid_column_value,json=ybctidColumnValue" json:"ybctid_column_value,omitempty"`
	// Not used with UPDATEs. Use column_new_values to UPDATE a value.
	ColumnValues []*PgsqlColumnValuePB `protobuf:"bytes,10,rep,name=column_values,json=columnValues" json:"column_values,omitempty"`
	// Inserted rows in packed format.
	// Even indexes are used to encode keys, odd indexes are used to encode values.
	// partition_column_values, range_column_values, ybctid_column_value are ignored if packed rows
	// are specified.
	PackedRows [][]byte `protobuf:"bytes,26,rep,name=packed_rows,json=packedRows" json:"packed_rows,omitempty"`
	// If this attribute is present, this request is a batch request.
	BatchArguments []*PgsqlBatchArgumentPB `protobuf:"bytes,18,rep,name=batch_arguments,json=batchArguments" json:"batch_arguments,omitempty"`
	// ------------------------------------------------------------------------------------------------
	// Column New Values.
	// - Columns to be overwritten (UPDATE SET clause). It shouldn't contain primary-key columns.
	ColumnNewValues []*PgsqlColumnValuePB `protobuf:"bytes,11,rep,name=column_new_values,json=columnNewValues" json:"column_new_values,omitempty"`
	// ------------------------------------------------------------------------------------------------
	// Tuple descriptor for RETURNING clause.
	//
	// For now, we sent rsrow descriptor from proxy to tablet server for every request. RSRow is just
	// a selected row. We call it rsrow to distinguish a selected row from a row of a table in the
	// database in our coding.
	RsrowDesc *PgsqlRSRowDescPB    `protobuf:"bytes,12,opt,name=rsrow_desc,json=rsrowDesc" json:"rsrow_desc,omitempty"`
	Targets   []*PgsqlExpressionPB `protobuf:"bytes,13,rep,name=targets" json:"targets,omitempty"` // required for a RETURNING clause.
	// ------------------------------------------------------------------------------------------------
	// Where clause condition
	WhereExpr *PgsqlExpressionPB `protobuf:"bytes,14,opt,name=where_expr,json=whereExpr" json:"where_expr,omitempty"`
	// Listing of all columns that this write operation is referencing.
	// TServers will need to read these columns when processing the write request.
	// DEPRECATED in favor of col_refs;
	ColumnRefs *PgsqlColumnRefsPB `protobuf:"bytes,15,opt,name=column_refs,json=columnRefs" json:"column_refs,omitempty"`
	// The version of the ysql system catalog this query was prepared against.
	// Used when per-db catalog version mode is disabled.
	YsqlCatalogVersion *uint64 `protobuf:"varint,16,opt,name=ysql_catalog_version,json=ysqlCatalogVersion" json:"ysql_catalog_version,omitempty"`
	// The version of the ysql per-db system catalog this query was prepared against.
	// Used when per-db catalog version mode is enabled.
	YsqlDbCatalogVersion *uint64 `protobuf:"varint,23,opt,name=ysql_db_catalog_version,json=ysqlDbCatalogVersion" json:"ysql_db_catalog_version,omitempty"`
	// The oid of the database of the Postgres session where this query was issued.
	// Used when per-db catalog version mode is enabled.
	YsqlDbOid *uint32 `protobuf:"varint,24,opt,name=ysql_db_oid,json=ysqlDbOid" json:"ysql_db_oid,omitempty"`
	// True only if this changes a system catalog table (or index).
	IsYsqlCatalogChangeUsingProtobuf *bool `protobuf:"varint,17,opt,name=is_ysql_catalog_change_using_protobuf,json=isYsqlCatalogChangeUsingProtobuf,def=0" json:"is_ysql_catalog_change_using_protobuf,omitempty"`
	// Does this request correspond to backfilling an index table?
	IsBackfill *bool `protobuf:"varint,19,opt,name=is_backfill,json=isBackfill,def=0" json:"is_backfill,omitempty"`
	// For DELETE requests, do they need to be persisted in regular rocksdb?
	//
	// This is currently only used for DELETEs to the index when the index is getting created with
	// index backfill enabled.
	IsDeletePersistNeeded *bool `protobuf:"varint,20,opt,name=is_delete_persist_needed,json=isDeletePersistNeeded,def=0" json:"is_delete_persist_needed,omitempty"`
	// Columns refereced by this write operation.
	// Provides mapping between DocDB and Postgres identifiers, and provides Postgres type information
	// to convert between DocDB and Postgres formats.
	// One entry per column referenced.
	ColRefs []*PgsqlColRefPB `protobuf:"bytes,21,rep,name=col_refs,json=colRefs" json:"col_refs,omitempty"`
	// Used only in pg client.
	PartitionKey        []byte                      `protobuf:"bytes,22,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	FetchSequenceParams *PgsqlFetchSequenceParamsPB `protobuf:"bytes,25,opt,name=fetch_sequence_params,json=fetchSequenceParams" json:"fetch_sequence_params,omitempty"`
	// During ysql major catalog upgrades, we block pg from updating the catalog
	// data. Bypass this check when we know its safe.
	// Valid cases are InitDB, pg_upgrade, and temp tables.
	ForceCatalogModifications *bool `protobuf:"varint,27,opt,name=force_catalog_modifications,json=forceCatalogModifications" json:"force_catalog_modifications,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for PgsqlWriteRequestPB fields.
const (
	Default_PgsqlWriteRequestPB_IsYsqlCatalogChangeUsingProtobuf = bool(false)
	Default_PgsqlWriteRequestPB_IsBackfill                       = bool(false)
	Default_PgsqlWriteRequestPB_IsDeletePersistNeeded            = bool(false)
)

func (x *PgsqlWriteRequestPB) Reset() {
	*x = PgsqlWriteRequestPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlWriteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlWriteRequestPB) ProtoMessage() {}

func (x *PgsqlWriteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlWriteRequestPB.ProtoReflect.Descriptor instead.
func (*PgsqlWriteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *PgsqlWriteRequestPB) GetClient() QLClient {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return QLClient_YQL_CLIENT_CQL
}

func (x *PgsqlWriteRequestPB) GetStmtId() uint64 {
	if x != nil && x.StmtId != nil {
		return *x.StmtId
	}
	return 0
}

func (x *PgsqlWriteRequestPB) GetStmtType() PgsqlWriteRequestPB_PgsqlStmtType {
	if x != nil && x.StmtType != nil {
		return *x.StmtType
	}
	return PgsqlWriteRequestPB_PGSQL_INSERT
}

func (x *PgsqlWriteRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *PgsqlWriteRequestPB) GetHashCode() uint32 {
	if x != nil && x.HashCode != nil {
		return *x.HashCode
	}
	return 0
}

func (x *PgsqlWriteRequestPB) GetPartitionColumnValues() []*PgsqlExpressionPB {
	if x != nil {
		return x.PartitionColumnValues
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetRangeColumnValues() []*PgsqlExpressionPB {
	if x != nil {
		return x.RangeColumnValues
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetYbctidColumnValue() *PgsqlExpressionPB {
	if x != nil {
		return x.YbctidColumnValue
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetColumnValues() []*PgsqlColumnValuePB {
	if x != nil {
		return x.ColumnValues
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetPackedRows() [][]byte {
	if x != nil {
		return x.PackedRows
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetBatchArguments() []*PgsqlBatchArgumentPB {
	if x != nil {
		return x.BatchArguments
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetColumnNewValues() []*PgsqlColumnValuePB {
	if x != nil {
		return x.ColumnNewValues
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetRsrowDesc() *PgsqlRSRowDescPB {
	if x != nil {
		return x.RsrowDesc
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetTargets() []*PgsqlExpressionPB {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetWhereExpr() *PgsqlExpressionPB {
	if x != nil {
		return x.WhereExpr
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetColumnRefs() *PgsqlColumnRefsPB {
	if x != nil {
		return x.ColumnRefs
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetYsqlCatalogVersion() uint64 {
	if x != nil && x.YsqlCatalogVersion != nil {
		return *x.YsqlCatalogVersion
	}
	return 0
}

func (x *PgsqlWriteRequestPB) GetYsqlDbCatalogVersion() uint64 {
	if x != nil && x.YsqlDbCatalogVersion != nil {
		return *x.YsqlDbCatalogVersion
	}
	return 0
}

func (x *PgsqlWriteRequestPB) GetYsqlDbOid() uint32 {
	if x != nil && x.YsqlDbOid != nil {
		return *x.YsqlDbOid
	}
	return 0
}

func (x *PgsqlWriteRequestPB) GetIsYsqlCatalogChangeUsingProtobuf() bool {
	if x != nil && x.IsYsqlCatalogChangeUsingProtobuf != nil {
		return *x.IsYsqlCatalogChangeUsingProtobuf
	}
	return Default_PgsqlWriteRequestPB_IsYsqlCatalogChangeUsingProtobuf
}

func (x *PgsqlWriteRequestPB) GetIsBackfill() bool {
	if x != nil && x.IsBackfill != nil {
		return *x.IsBackfill
	}
	return Default_PgsqlWriteRequestPB_IsBackfill
}

func (x *PgsqlWriteRequestPB) GetIsDeletePersistNeeded() bool {
	if x != nil && x.IsDeletePersistNeeded != nil {
		return *x.IsDeletePersistNeeded
	}
	return Default_PgsqlWriteRequestPB_IsDeletePersistNeeded
}

func (x *PgsqlWriteRequestPB) GetColRefs() []*PgsqlColRefPB {
	if x != nil {
		return x.ColRefs
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetPartitionKey() []byte {
	if x != nil {
		return x.PartitionKey
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetFetchSequenceParams() *PgsqlFetchSequenceParamsPB {
	if x != nil {
		return x.FetchSequenceParams
	}
	return nil
}

func (x *PgsqlWriteRequestPB) GetForceCatalogModifications() bool {
	if x != nil && x.ForceCatalogModifications != nil {
		return *x.ForceCatalogModifications
	}
	return false
}

// Paging state for continuing a read request.
//
// For a SELECT statement that returns many rows, the client may specify how many rows to return at
// most in each fetch. This paging state maintains the state for returning the next set of rows of
// the statement. This paging state is opaque to the client.
//
// When there should be more rows to return from the same tablet in the next fetch, "next_row_key"
// is populated in DocDB (PgsqlReadOperation) with the DocKey of the next row to read. We also
// embed a hybrid-time which is the clean snapshot time for read consistency. We also populate the
// "next_partition_key" for the next row, which is the hash code of the hash portion of the DocKey.
// This next partition key is needed by YBClient (Batcher) to locate the tablet to send the request
// to and it doesn't have access to the DocDB function to decode and extract from the DocKey.
//
// When we are done returning rows from the current tablet and the next fetch should continue in
// the next tablet (possible only for full-table query across tablets), "next_partition_key" is
// populated by the current tablet with its exclusive partition-end key, which is the start key of
// next tablet's partition. "next_row_key" is empty in this case which means we will start from the
// very beginning of the next tablet. (TODO: we need to return the clean snapshot time in this case
// also).
type PgsqlPagingStatePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table UUID to verify the same table still exists when continuing in the next fetch.
	TableId []byte `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Partition key to find the tablet server of the next row to read.
	NextPartitionKey []byte `protobuf:"bytes,2,opt,name=next_partition_key,json=nextPartitionKey" json:"next_partition_key,omitempty"`
	// The row key (SubDocKey = [DocKey + HybridTimestamp]) of the next row to read.
	NextRowKey []byte `protobuf:"bytes,3,opt,name=next_row_key,json=nextRowKey" json:"next_row_key,omitempty"`
	// Running total number of rows read across fetches so far. Needed to ensure we read up to the
	// number of rows in the SELECT's LIMIT clause across fetches.
	TotalNumRowsRead *uint64 `protobuf:"varint,4,opt,name=total_num_rows_read,json=totalNumRowsRead" json:"total_num_rows_read,omitempty"`
	// For selects with IN condition on the hash columns there are multiple partitions that need to be
	// queried, one for each combination of allowed values for the hash columns.
	// This holds the index of the next partition and is used to resume the read from the right place.
	NextPartitionIndex *uint64 `protobuf:"varint,5,opt,name=next_partition_index,json=nextPartitionIndex" json:"next_partition_index,omitempty"`
	// Used read time.
	ReadTime *ReadHybridTimePB `protobuf:"bytes,6,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	// Paging state fields for geometric indexes.
	Distance *float64 `protobuf:"fixed64,7,opt,name=distance" json:"distance,omitempty"`
	// Value of the next geometric index row that can be used as a key into the
	// main RocksDB store.
	MainKey       []byte `protobuf:"bytes,8,opt,name=main_key,json=mainKey" json:"main_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlPagingStatePB) Reset() {
	*x = PgsqlPagingStatePB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlPagingStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlPagingStatePB) ProtoMessage() {}

func (x *PgsqlPagingStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlPagingStatePB.ProtoReflect.Descriptor instead.
func (*PgsqlPagingStatePB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{13}
}

func (x *PgsqlPagingStatePB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgsqlPagingStatePB) GetNextPartitionKey() []byte {
	if x != nil {
		return x.NextPartitionKey
	}
	return nil
}

func (x *PgsqlPagingStatePB) GetNextRowKey() []byte {
	if x != nil {
		return x.NextRowKey
	}
	return nil
}

func (x *PgsqlPagingStatePB) GetTotalNumRowsRead() uint64 {
	if x != nil && x.TotalNumRowsRead != nil {
		return *x.TotalNumRowsRead
	}
	return 0
}

func (x *PgsqlPagingStatePB) GetNextPartitionIndex() uint64 {
	if x != nil && x.NextPartitionIndex != nil {
		return *x.NextPartitionIndex
	}
	return 0
}

func (x *PgsqlPagingStatePB) GetReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

func (x *PgsqlPagingStatePB) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *PgsqlPagingStatePB) GetMainKey() []byte {
	if x != nil {
		return x.MainKey
	}
	return nil
}

// Given: master --chunk--> tserver --batch--> postgres --page--> tserver
// The backfill spec is updated and passed around for each batch and page.
type PgsqlBackfillSpecPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// [batch] Minimum number of table rows to backfill in this batch (see issue #10649).  Stays
	// constant for each batch and all of its pages.  -1 means no limit.
	Limit *int64 `protobuf:"varint,1,opt,name=limit,def=-1" json:"limit,omitempty"`
	// [page] Number of table rows backfilled so far in this batch.  Updated every page.
	Count *int64 `protobuf:"varint,2,opt,name=count,def=0" json:"count,omitempty"`
	// [batch] The next row key to read for a backfill batch.  Defined/used similar to how it is used
	// in paging state.  All the intermediate pages of the batch have this unset.  An example is
	// easier to understand:
	// - tserver --batch--> postgres: next_row_key = FOO
	//   - postgres --page--> tserver: next_row_key = FOO
	//   - postgres <--page-- tserver: next_row_key = unset; PgsqlPagingStatePB.next_row_key = BAR
	//   - postgres --page--> tserver: next_row_key = unset; PgsqlPagingStatePB.next_row_key = BAR
	//   - postgres <--page-- tserver: next_row_key = unset; PgsqlPagingStatePB.next_row_key = BAZ
	//   - postgres --page--> tserver: next_row_key = unset; PgsqlPagingStatePB.next_row_key = BAZ
	//   - postgres <--page-- tserver: next_row_key = QUX; PgsqlPagingStatePB.next_row_key = QUX
	//
	// - tserver <--batch-- postgres: next_row_key = QUX
	NextRowKey    []byte `protobuf:"bytes,3,opt,name=next_row_key,json=nextRowKey" json:"next_row_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for PgsqlBackfillSpecPB fields.
const (
	Default_PgsqlBackfillSpecPB_Limit = int64(-1)
	Default_PgsqlBackfillSpecPB_Count = int64(0)
)

func (x *PgsqlBackfillSpecPB) Reset() {
	*x = PgsqlBackfillSpecPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlBackfillSpecPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlBackfillSpecPB) ProtoMessage() {}

func (x *PgsqlBackfillSpecPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlBackfillSpecPB.ProtoReflect.Descriptor instead.
func (*PgsqlBackfillSpecPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{14}
}

func (x *PgsqlBackfillSpecPB) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return Default_PgsqlBackfillSpecPB_Limit
}

func (x *PgsqlBackfillSpecPB) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_PgsqlBackfillSpecPB_Count
}

func (x *PgsqlBackfillSpecPB) GetNextRowKey() []byte {
	if x != nil {
		return x.NextRowKey
	}
	return nil
}

// TODO(get_table_key_ranges): deprecate after/if separate GetTabletKeyRanges RPC to the tablet
// leader is used.
type GetTabletKeyRangesEmbeddedRequestPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LowerBoundKey  []byte                 `protobuf:"bytes,1,opt,name=lower_bound_key,json=lowerBoundKey" json:"lower_bound_key,omitempty"`
	UpperBoundKey  []byte                 `protobuf:"bytes,2,opt,name=upper_bound_key,json=upperBoundKey" json:"upper_bound_key,omitempty"`
	RangeSizeBytes *uint64                `protobuf:"varint,3,opt,name=range_size_bytes,json=rangeSizeBytes" json:"range_size_bytes,omitempty"`
	MaxKeyLength   *uint32                `protobuf:"varint,4,opt,name=max_key_length,json=maxKeyLength" json:"max_key_length,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetTabletKeyRangesEmbeddedRequestPB) Reset() {
	*x = GetTabletKeyRangesEmbeddedRequestPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletKeyRangesEmbeddedRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletKeyRangesEmbeddedRequestPB) ProtoMessage() {}

func (x *GetTabletKeyRangesEmbeddedRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletKeyRangesEmbeddedRequestPB.ProtoReflect.Descriptor instead.
func (*GetTabletKeyRangesEmbeddedRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{15}
}

func (x *GetTabletKeyRangesEmbeddedRequestPB) GetLowerBoundKey() []byte {
	if x != nil {
		return x.LowerBoundKey
	}
	return nil
}

func (x *GetTabletKeyRangesEmbeddedRequestPB) GetUpperBoundKey() []byte {
	if x != nil {
		return x.UpperBoundKey
	}
	return nil
}

func (x *GetTabletKeyRangesEmbeddedRequestPB) GetRangeSizeBytes() uint64 {
	if x != nil && x.RangeSizeBytes != nil {
		return *x.RangeSizeBytes
	}
	return 0
}

func (x *GetTabletKeyRangesEmbeddedRequestPB) GetMaxKeyLength() uint32 {
	if x != nil && x.MaxKeyLength != nil {
		return *x.MaxKeyLength
	}
	return 0
}

// TODO(neil) The protocol for select needs to be changed accordingly when we introduce and cache
// execution plan in tablet server.
type PgsqlReadRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Client info
	Client *QLClient `protobuf:"varint,1,opt,name=client,enum=yb.QLClient" json:"client,omitempty"` // required
	// Statement info. There's only SELECT, so we don't need different request type.
	StmtId *uint64 `protobuf:"varint,2,opt,name=stmt_id,json=stmtId" json:"stmt_id,omitempty"` // required
	// Table id.
	TableId []byte `protobuf:"bytes,19,opt,name=table_id,json=tableId" json:"table_id,omitempty"` // required
	// Table schema version
	SchemaVersion *uint32 `protobuf:"varint,3,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"` // required
	// Hash Code: A hash code is used to locate efficiently a group of data of the same hash code.
	// - First, it is used to find tablet server.
	// - Then, it is used again by DocDB to narrow the search within a tablet.
	// - In general, hash_code should be set by PgGate, but for some reasons, when the field
	// "ybctid_column_value" is used, hash_code is set by "common" lib.
	HashCode          *uint32            `protobuf:"varint,4,opt,name=hash_code,json=hashCode" json:"hash_code,omitempty"`
	YbctidColumnValue *PgsqlExpressionPB `protobuf:"bytes,20,opt,name=ybctid_column_value,json=ybctidColumnValue" json:"ybctid_column_value,omitempty"`
	// Primary key.
	//   - Partition columns are used to compute the hash code,
	//     e.g. for h1 = 1 AND h2 = 2 partition_column_values would be [1, 2].
	//   - Range columns combining with partition columns are used for indexing.
	PartitionColumnValues []*PgsqlExpressionPB `protobuf:"bytes,5,rep,name=partition_column_values,json=partitionColumnValues" json:"partition_column_values,omitempty"`
	RangeColumnValues     []*PgsqlExpressionPB `protobuf:"bytes,18,rep,name=range_column_values,json=rangeColumnValues" json:"range_column_values,omitempty"`
	// For select using local secondary index: this request selects the ybbasectids to fetch the rows
	// in place of the primary key above.
	IndexRequest *PgsqlReadRequestPB `protobuf:"bytes,21,opt,name=index_request,json=indexRequest" json:"index_request,omitempty"`
	// Where clause condition
	// DEPRECATED in favor of where_clauses
	WhereExpr *PgsqlExpressionPB `protobuf:"bytes,8,opt,name=where_expr,json=whereExpr" json:"where_expr,omitempty"`
	// TODO(alex): This should be renamed to make it clear that it's ONLY related to range columns!
	// Conditions for range columns.
	ConditionExpr *PgsqlExpressionPB `protobuf:"bytes,22,opt,name=condition_expr,json=conditionExpr" json:"condition_expr,omitempty"`
	// If this attribute is present, this request is a batch request.
	BatchArguments []*PgsqlBatchArgumentPB `protobuf:"bytes,24,rep,name=batch_arguments,json=batchArguments" json:"batch_arguments,omitempty"`
	// ------------------------------------------------------------------------------------------------
	// Output Argument Specification (Tuple descriptor).
	//
	// For now, we sent rsrow descriptor from proxy to tablet server for every request. RSRow is just
	// a selected row. We call it rsrow to distinguish a selected row from a row of a table in the
	// database in our coding.
	RsrowDesc *PgsqlRSRowDescPB    `protobuf:"bytes,6,opt,name=rsrow_desc,json=rsrowDesc" json:"rsrow_desc,omitempty"`
	Targets   []*PgsqlExpressionPB `protobuf:"bytes,7,rep,name=targets" json:"targets,omitempty"` // required.
	// ------------------------------------------------------------------------------------------------
	// Database Arguments - To be read from the DataBase.
	// Listing of all columns that this operation is referencing. TServers will need to read these
	// columns when processing this read request.
	// DEPRECATED in favor of col_refs;
	ColumnRefs *PgsqlColumnRefsPB `protobuf:"bytes,9,opt,name=column_refs,json=columnRefs" json:"column_refs,omitempty"`
	// ------------------------------------------------------------------------------------------------
	// Query options.
	IsForwardScan *bool `protobuf:"varint,10,opt,name=is_forward_scan,json=isForwardScan,def=1" json:"is_forward_scan,omitempty"`
	// Reading distinct columns?
	Distinct *bool `protobuf:"varint,11,opt,name=distinct,def=0" json:"distinct,omitempty"`
	// Current only used on SELECT DISTINCT scan. If the value is greater than 0, use the specified
	// prefix length to scan the table.
	PrefixLength *uint64 `protobuf:"varint,39,opt,name=prefix_length,json=prefixLength,def=0" json:"prefix_length,omitempty"`
	// Flag for reading aggregate values.
	IsAggregate *bool `protobuf:"varint,12,opt,name=is_aggregate,json=isAggregate,def=0" json:"is_aggregate,omitempty"`
	// Limit number of rows to return. For SELECT, this limit is the smaller of the page size (max
	// (max number of rows to return per fetch) & the LIMIT clause if present in the SELECT statement.
	Limit     *uint64 `protobuf:"varint,13,opt,name=limit" json:"limit,omitempty"`
	SizeLimit *uint64 `protobuf:"varint,40,opt,name=size_limit,json=sizeLimit" json:"size_limit,omitempty"`
	// ------------------------------------------------------------------------------------------------
	// Paging state retrieved from the last response.
	PagingState *PgsqlPagingStatePB `protobuf:"bytes,14,opt,name=paging_state,json=pagingState" json:"paging_state,omitempty"`
	// Return paging state when "limit" number of rows are returned? In case when "limit" is the
	// page size, this is set for PgsqlResponsePB to return the paging state for the next fetch.
	ReturnPagingState *bool `protobuf:"varint,15,opt,name=return_paging_state,json=returnPagingState,def=0" json:"return_paging_state,omitempty"`
	// the upper limit for partition (hash) key when paging.
	MaxHashCode *uint32 `protobuf:"varint,17,opt,name=max_hash_code,json=maxHashCode" json:"max_hash_code,omitempty"`
	// The version of the ysql system catalog this query was prepared against.
	// Used when per-db catalog version mode is disabled.
	YsqlCatalogVersion *uint64 `protobuf:"varint,16,opt,name=ysql_catalog_version,json=ysqlCatalogVersion" json:"ysql_catalog_version,omitempty"`
	// The version of the ysql per-db system catalog this query was prepared against.
	// Used when per-db catalog version mode is enabled.
	YsqlDbCatalogVersion *uint64 `protobuf:"varint,36,opt,name=ysql_db_catalog_version,json=ysqlDbCatalogVersion" json:"ysql_db_catalog_version,omitempty"`
	// The oid of the database of the Postgres session where this query was issued.
	// Used when per-db catalog version mode is enabled.
	YsqlDbOid *uint32 `protobuf:"varint,37,opt,name=ysql_db_oid,json=ysqlDbOid" json:"ysql_db_oid,omitempty"`
	// Row mark as used by postgres for row locking.
	RowMarkType *RowMarkType `protobuf:"varint,23,opt,name=row_mark_type,json=rowMarkType,enum=yb.RowMarkType" json:"row_mark_type,omitempty"`
	// Used only for explicit row-locking to identify 3 possibilities: WAIT_BLOCK, WAIT_SKIP, or
	// WAIT_ERROR.
	// See WaitPolicy for detailed information.
	WaitPolicy *WaitPolicy `protobuf:"varint,32,opt,name=wait_policy,json=waitPolicy,enum=yb.WaitPolicy,def=2" json:"wait_policy,omitempty"`
	// Scan partition boundary.
	// NOTE
	//   - Boundaries indicate the scan range that are given by SQL statement. This should be set by
	//     PgGate when it processed query specification.
	//   - paging_state indicates the current position of a scan. This should be set ONLY by DocDB
	//     who scans the table.
	//   - Don't overload these fields for different purposes to avoid confusion.
	LowerBound *PgsqlPartitionBound `protobuf:"bytes,27,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	UpperBound *PgsqlPartitionBound `protobuf:"bytes,28,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	// Deprecated fields.
	// Field "max_partition_key" is replaced by "lower_bound" and "upper_bound". This field is only
	// available in beta version for SPLIT_AT feature. The release version for SPLIT AT does not need
	// to be compatible with the beta version as SPLIT AT feature were not used.
	DEPRECATEDMaxPartitionKey []byte `protobuf:"bytes,25,opt,name=DEPRECATED_max_partition_key,json=DEPRECATEDMaxPartitionKey" json:"DEPRECATED_max_partition_key,omitempty"`
	// Does this request correspond to scanning the indexed table for backfill?
	IsForBackfill *bool `protobuf:"varint,29,opt,name=is_for_backfill,json=isForBackfill,def=0" json:"is_for_backfill,omitempty"`
	// If present, the request is to collect random sample
	SamplingState *PgsqlSamplingStatePB `protobuf:"bytes,30,opt,name=sampling_state,json=samplingState" json:"sampling_state,omitempty"`
	// Instruction for BACKFILL operation from the tablet server.
	// This is the serialized-string of "message PgsqlBackfillSpecPB" which will be used by
	// the tablet server handling the PgsqlRead to terminate the scan and checkpoint the paging
	// state as desired.
	BackfillSpec []byte `protobuf:"bytes,31,opt,name=backfill_spec,json=backfillSpec" json:"backfill_spec,omitempty"`
	// Pushed down Postgres conditions. Like in Postgres, conditions are implicitly ANDed.
	// Per scanned row, expressions are evaluated by PGgate one by one, and if any is evaluated to
	// false the row is skipped.
	WhereClauses []*PgsqlExpressionPB `protobuf:"bytes,33,rep,name=where_clauses,json=whereClauses" json:"where_clauses,omitempty"`
	// Columns referenced by this write operation.
	// Provides mapping between DocDB and Postgres identifiers, and provides Postgres type information
	// to convert between DocDB and Postgres formats.
	// One entry per column referenced.
	ColRefs []*PgsqlColRefPB `protobuf:"bytes,34,rep,name=col_refs,json=colRefs" json:"col_refs,omitempty"`
	// Used only in pg client.
	PartitionKey []byte `protobuf:"bytes,35,opt,name=partition_key,json=partitionKey" json:"partition_key,omitempty"`
	// What metric changes to return in response.
	MetricsCapture *PgsqlMetricsCaptureType `protobuf:"varint,38,opt,name=metrics_capture,json=metricsCapture,enum=yb.PgsqlMetricsCaptureType" json:"metrics_capture,omitempty"`
	// TODO(get_table_key_ranges): deprecate this field after separate separate GetTabletKeyRanges
	// RPC to the tablet leader is used.
	GetTabletKeyRangesRequest *GetTabletKeyRangesEmbeddedRequestPB `protobuf:"bytes,41,opt,name=get_tablet_key_ranges_request,json=getTabletKeyRangesRequest" json:"get_tablet_key_ranges_request,omitempty"`
	VectorIdxOptions          *PgVectorReadOptionsPB               `protobuf:"bytes,42,opt,name=vector_idx_options,json=vectorIdxOptions" json:"vector_idx_options,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for PgsqlReadRequestPB fields.
const (
	Default_PgsqlReadRequestPB_IsForwardScan     = bool(true)
	Default_PgsqlReadRequestPB_Distinct          = bool(false)
	Default_PgsqlReadRequestPB_PrefixLength      = uint64(0)
	Default_PgsqlReadRequestPB_IsAggregate       = bool(false)
	Default_PgsqlReadRequestPB_ReturnPagingState = bool(false)
	Default_PgsqlReadRequestPB_WaitPolicy        = WaitPolicy_WAIT_ERROR
	Default_PgsqlReadRequestPB_IsForBackfill     = bool(false)
)

func (x *PgsqlReadRequestPB) Reset() {
	*x = PgsqlReadRequestPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlReadRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlReadRequestPB) ProtoMessage() {}

func (x *PgsqlReadRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlReadRequestPB.ProtoReflect.Descriptor instead.
func (*PgsqlReadRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{16}
}

func (x *PgsqlReadRequestPB) GetClient() QLClient {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return QLClient_YQL_CLIENT_CQL
}

func (x *PgsqlReadRequestPB) GetStmtId() uint64 {
	if x != nil && x.StmtId != nil {
		return *x.StmtId
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetHashCode() uint32 {
	if x != nil && x.HashCode != nil {
		return *x.HashCode
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetYbctidColumnValue() *PgsqlExpressionPB {
	if x != nil {
		return x.YbctidColumnValue
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetPartitionColumnValues() []*PgsqlExpressionPB {
	if x != nil {
		return x.PartitionColumnValues
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetRangeColumnValues() []*PgsqlExpressionPB {
	if x != nil {
		return x.RangeColumnValues
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetIndexRequest() *PgsqlReadRequestPB {
	if x != nil {
		return x.IndexRequest
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetWhereExpr() *PgsqlExpressionPB {
	if x != nil {
		return x.WhereExpr
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetConditionExpr() *PgsqlExpressionPB {
	if x != nil {
		return x.ConditionExpr
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetBatchArguments() []*PgsqlBatchArgumentPB {
	if x != nil {
		return x.BatchArguments
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetRsrowDesc() *PgsqlRSRowDescPB {
	if x != nil {
		return x.RsrowDesc
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetTargets() []*PgsqlExpressionPB {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetColumnRefs() *PgsqlColumnRefsPB {
	if x != nil {
		return x.ColumnRefs
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetIsForwardScan() bool {
	if x != nil && x.IsForwardScan != nil {
		return *x.IsForwardScan
	}
	return Default_PgsqlReadRequestPB_IsForwardScan
}

func (x *PgsqlReadRequestPB) GetDistinct() bool {
	if x != nil && x.Distinct != nil {
		return *x.Distinct
	}
	return Default_PgsqlReadRequestPB_Distinct
}

func (x *PgsqlReadRequestPB) GetPrefixLength() uint64 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return Default_PgsqlReadRequestPB_PrefixLength
}

func (x *PgsqlReadRequestPB) GetIsAggregate() bool {
	if x != nil && x.IsAggregate != nil {
		return *x.IsAggregate
	}
	return Default_PgsqlReadRequestPB_IsAggregate
}

func (x *PgsqlReadRequestPB) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetSizeLimit() uint64 {
	if x != nil && x.SizeLimit != nil {
		return *x.SizeLimit
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetPagingState() *PgsqlPagingStatePB {
	if x != nil {
		return x.PagingState
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetReturnPagingState() bool {
	if x != nil && x.ReturnPagingState != nil {
		return *x.ReturnPagingState
	}
	return Default_PgsqlReadRequestPB_ReturnPagingState
}

func (x *PgsqlReadRequestPB) GetMaxHashCode() uint32 {
	if x != nil && x.MaxHashCode != nil {
		return *x.MaxHashCode
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetYsqlCatalogVersion() uint64 {
	if x != nil && x.YsqlCatalogVersion != nil {
		return *x.YsqlCatalogVersion
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetYsqlDbCatalogVersion() uint64 {
	if x != nil && x.YsqlDbCatalogVersion != nil {
		return *x.YsqlDbCatalogVersion
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetYsqlDbOid() uint32 {
	if x != nil && x.YsqlDbOid != nil {
		return *x.YsqlDbOid
	}
	return 0
}

func (x *PgsqlReadRequestPB) GetRowMarkType() RowMarkType {
	if x != nil && x.RowMarkType != nil {
		return *x.RowMarkType
	}
	return RowMarkType_ROW_MARK_EXCLUSIVE
}

func (x *PgsqlReadRequestPB) GetWaitPolicy() WaitPolicy {
	if x != nil && x.WaitPolicy != nil {
		return *x.WaitPolicy
	}
	return Default_PgsqlReadRequestPB_WaitPolicy
}

func (x *PgsqlReadRequestPB) GetLowerBound() *PgsqlPartitionBound {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetUpperBound() *PgsqlPartitionBound {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetDEPRECATEDMaxPartitionKey() []byte {
	if x != nil {
		return x.DEPRECATEDMaxPartitionKey
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetIsForBackfill() bool {
	if x != nil && x.IsForBackfill != nil {
		return *x.IsForBackfill
	}
	return Default_PgsqlReadRequestPB_IsForBackfill
}

func (x *PgsqlReadRequestPB) GetSamplingState() *PgsqlSamplingStatePB {
	if x != nil {
		return x.SamplingState
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetBackfillSpec() []byte {
	if x != nil {
		return x.BackfillSpec
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetWhereClauses() []*PgsqlExpressionPB {
	if x != nil {
		return x.WhereClauses
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetColRefs() []*PgsqlColRefPB {
	if x != nil {
		return x.ColRefs
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetPartitionKey() []byte {
	if x != nil {
		return x.PartitionKey
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetMetricsCapture() PgsqlMetricsCaptureType {
	if x != nil && x.MetricsCapture != nil {
		return *x.MetricsCapture
	}
	return PgsqlMetricsCaptureType_PGSQL_METRICS_CAPTURE_NONE
}

func (x *PgsqlReadRequestPB) GetGetTabletKeyRangesRequest() *GetTabletKeyRangesEmbeddedRequestPB {
	if x != nil {
		return x.GetTabletKeyRangesRequest
	}
	return nil
}

func (x *PgsqlReadRequestPB) GetVectorIdxOptions() *PgVectorReadOptionsPB {
	if x != nil {
		return x.VectorIdxOptions
	}
	return nil
}

type PgsqlRequestGaugeMetricPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metric        *uint64                `protobuf:"varint,1,opt,name=metric" json:"metric,omitempty"`
	Value         *int64                 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlRequestGaugeMetricPB) Reset() {
	*x = PgsqlRequestGaugeMetricPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlRequestGaugeMetricPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlRequestGaugeMetricPB) ProtoMessage() {}

func (x *PgsqlRequestGaugeMetricPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlRequestGaugeMetricPB.ProtoReflect.Descriptor instead.
func (*PgsqlRequestGaugeMetricPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{17}
}

func (x *PgsqlRequestGaugeMetricPB) GetMetric() uint64 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *PgsqlRequestGaugeMetricPB) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type PgsqlRequestCounterMetricPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metric        *uint64                `protobuf:"varint,1,opt,name=metric" json:"metric,omitempty"`
	Value         *uint64                `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlRequestCounterMetricPB) Reset() {
	*x = PgsqlRequestCounterMetricPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlRequestCounterMetricPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlRequestCounterMetricPB) ProtoMessage() {}

func (x *PgsqlRequestCounterMetricPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlRequestCounterMetricPB.ProtoReflect.Descriptor instead.
func (*PgsqlRequestCounterMetricPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{18}
}

func (x *PgsqlRequestCounterMetricPB) GetMetric() uint64 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *PgsqlRequestCounterMetricPB) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type PgsqlRequestEventMetricPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metric        *uint64                `protobuf:"varint,1,opt,name=metric" json:"metric,omitempty"`
	Sum           *int64                 `protobuf:"varint,2,opt,name=sum" json:"sum,omitempty"`
	Count         *uint64                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgsqlRequestEventMetricPB) Reset() {
	*x = PgsqlRequestEventMetricPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlRequestEventMetricPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlRequestEventMetricPB) ProtoMessage() {}

func (x *PgsqlRequestEventMetricPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlRequestEventMetricPB.ProtoReflect.Descriptor instead.
func (*PgsqlRequestEventMetricPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{19}
}

func (x *PgsqlRequestEventMetricPB) GetMetric() uint64 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *PgsqlRequestEventMetricPB) GetSum() int64 {
	if x != nil && x.Sum != nil {
		return *x.Sum
	}
	return 0
}

func (x *PgsqlRequestEventMetricPB) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type PgsqlRequestMetricsPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gauge metrics changes as a result of processing the request.
	GaugeMetrics []*PgsqlRequestGaugeMetricPB `protobuf:"bytes,1,rep,name=gauge_metrics,json=gaugeMetrics" json:"gauge_metrics,omitempty"`
	// Counter metrics changes as a result of processing the request.
	CounterMetrics []*PgsqlRequestCounterMetricPB `protobuf:"bytes,2,rep,name=counter_metrics,json=counterMetrics" json:"counter_metrics,omitempty"`
	// Event stats metrics changes as a result of processing the request.
	EventMetrics []*PgsqlRequestEventMetricPB `protobuf:"bytes,3,rep,name=event_metrics,json=eventMetrics" json:"event_metrics,omitempty"`
	// Count of table rows scanned as a result of processing the request.
	ScannedTableRows *int64 `protobuf:"varint,4,opt,name=scanned_table_rows,json=scannedTableRows" json:"scanned_table_rows,omitempty"`
	// Count of secondary index rows scanned as a result of processing the request.
	ScannedIndexRows *int64 `protobuf:"varint,5,opt,name=scanned_index_rows,json=scannedIndexRows" json:"scanned_index_rows,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PgsqlRequestMetricsPB) Reset() {
	*x = PgsqlRequestMetricsPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlRequestMetricsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlRequestMetricsPB) ProtoMessage() {}

func (x *PgsqlRequestMetricsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlRequestMetricsPB.ProtoReflect.Descriptor instead.
func (*PgsqlRequestMetricsPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{20}
}

func (x *PgsqlRequestMetricsPB) GetGaugeMetrics() []*PgsqlRequestGaugeMetricPB {
	if x != nil {
		return x.GaugeMetrics
	}
	return nil
}

func (x *PgsqlRequestMetricsPB) GetCounterMetrics() []*PgsqlRequestCounterMetricPB {
	if x != nil {
		return x.CounterMetrics
	}
	return nil
}

func (x *PgsqlRequestMetricsPB) GetEventMetrics() []*PgsqlRequestEventMetricPB {
	if x != nil {
		return x.EventMetrics
	}
	return nil
}

func (x *PgsqlRequestMetricsPB) GetScannedTableRows() int64 {
	if x != nil && x.ScannedTableRows != nil {
		return *x.ScannedTableRows
	}
	return 0
}

func (x *PgsqlRequestMetricsPB) GetScannedIndexRows() int64 {
	if x != nil && x.ScannedIndexRows != nil {
		return *x.ScannedIndexRows
	}
	return 0
}

// Response from tablet server for both read and write.
type PgsqlResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Internal Status information
	Status *PgsqlResponsePB_RequestStatus `protobuf:"varint,1,opt,name=status,enum=yb.PgsqlResponsePB_RequestStatus,def=0" json:"status,omitempty"` // required
	// True if this operation was not actually applied, for instance update to the same value.
	Skipped *bool `protobuf:"varint,6,opt,name=skipped" json:"skipped,omitempty"`
	// User readable error message associated with Internal & External Status
	// DEPRECATED: please use error_status instead
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Sidecar of rows data returned
	RowsDataSidecar *int32 `protobuf:"varint,4,opt,name=rows_data_sidecar,json=rowsDataSidecar" json:"rows_data_sidecar,omitempty"`
	// Paging state for continuing the read in the next QLReadRequestPB fetch.
	PagingState *PgsqlPagingStatePB `protobuf:"bytes,5,opt,name=paging_state,json=pagingState" json:"paging_state,omitempty"`
	// When client sends a request that has a batch of many arguments, server might process only a
	// subset of the arguments. Attribute "batch_arg_count" is to indicate how many arguments have
	// been processed by server.
	//
	// NOTE: This variable could have been inside "paging state", but due to rolling upgrade I have
	// to place it here, separated from paging status for singular request.
	BatchArgCount *int64  `protobuf:"varint,10,opt,name=batch_arg_count,json=batchArgCount,def=1" json:"batch_arg_count,omitempty"`
	BatchOrders   []int64 `protobuf:"varint,12,rep,name=batch_orders,json=batchOrders" json:"batch_orders,omitempty"`
	// For use with geometric indexes. The nth value here is the distance of the
	// nth returned row from the query point/vector.
	Distances []float64 `protobuf:"fixed64,18,rep,name=distances" json:"distances,omitempty"`
	// Number of rows affected by the operation. Currently only used for update and delete.
	RowsAffectedCount *int32 `protobuf:"varint,7,opt,name=rows_affected_count,json=rowsAffectedCount" json:"rows_affected_count,omitempty"`
	// PostgreSQL error code encoded as in errcodes.h or yb_pg_errcodes.h.
	// See https://www.postgresql.org/docs/11/errcodes-appendix.html
	// DEPRECATED: please use error_status instead
	PgErrorCode *uint64 `protobuf:"varint,8,opt,name=pg_error_code,json=pgErrorCode" json:"pg_error_code,omitempty"`
	// Transaction error code, obtained by static_cast of TransactionErrorTag::Decode
	// of Status::ErrorData(TransactionErrorTag::kCategory)
	// DEPRECATED: please use error_status instead
	TxnErrorCode *uint32 `protobuf:"varint,9,opt,name=txn_error_code,json=txnErrorCode" json:"txn_error_code,omitempty"`
	// Random sample state to hand over to the next block
	SamplingState *PgsqlSamplingStatePB `protobuf:"bytes,11,opt,name=sampling_state,json=samplingState" json:"sampling_state,omitempty"`
	// Instruction for BACKFILL operation from master/table server.
	// This is the serialized-string of "message PgsqlBackfillSpecPB".
	//
	// If 'is_backfill_batch_done' == true, Postgres will return this 'backfill_spec' to tablet server
	// that sent out the 'BACKFILL' request statement.
	BackfillSpec        []byte `protobuf:"bytes,13,opt,name=backfill_spec,json=backfillSpec" json:"backfill_spec,omitempty"`
	IsBackfillBatchDone *bool  `protobuf:"varint,14,opt,name=is_backfill_batch_done,json=isBackfillBatchDone" json:"is_backfill_batch_done,omitempty"`
	// Table's partition list version obtained from YBTable during response preparation.
	// Table cache should be invalidated on partition list version mismatch detected.
	PartitionListVersion *uint32 `protobuf:"varint,15,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	// Encapsulates data from a Status instance
	// Repeated field provides support for multiple Statuses per response, allowing to return
	// not only detailed error, but also warnings and notices.
	ErrorStatus []*AppStatusPB `protobuf:"bytes,16,rep,name=error_status,json=errorStatus" json:"error_status,omitempty"`
	// Metrics changes as a result of processing the request.
	Metrics       *PgsqlRequestMetricsPB `protobuf:"bytes,17,opt,name=metrics" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for PgsqlResponsePB fields.
const (
	Default_PgsqlResponsePB_Status        = PgsqlResponsePB_PGSQL_STATUS_OK
	Default_PgsqlResponsePB_BatchArgCount = int64(1)
)

func (x *PgsqlResponsePB) Reset() {
	*x = PgsqlResponsePB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgsqlResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgsqlResponsePB) ProtoMessage() {}

func (x *PgsqlResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgsqlResponsePB.ProtoReflect.Descriptor instead.
func (*PgsqlResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{21}
}

func (x *PgsqlResponsePB) GetStatus() PgsqlResponsePB_RequestStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_PgsqlResponsePB_Status
}

func (x *PgsqlResponsePB) GetSkipped() bool {
	if x != nil && x.Skipped != nil {
		return *x.Skipped
	}
	return false
}

func (x *PgsqlResponsePB) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *PgsqlResponsePB) GetRowsDataSidecar() int32 {
	if x != nil && x.RowsDataSidecar != nil {
		return *x.RowsDataSidecar
	}
	return 0
}

func (x *PgsqlResponsePB) GetPagingState() *PgsqlPagingStatePB {
	if x != nil {
		return x.PagingState
	}
	return nil
}

func (x *PgsqlResponsePB) GetBatchArgCount() int64 {
	if x != nil && x.BatchArgCount != nil {
		return *x.BatchArgCount
	}
	return Default_PgsqlResponsePB_BatchArgCount
}

func (x *PgsqlResponsePB) GetBatchOrders() []int64 {
	if x != nil {
		return x.BatchOrders
	}
	return nil
}

func (x *PgsqlResponsePB) GetDistances() []float64 {
	if x != nil {
		return x.Distances
	}
	return nil
}

func (x *PgsqlResponsePB) GetRowsAffectedCount() int32 {
	if x != nil && x.RowsAffectedCount != nil {
		return *x.RowsAffectedCount
	}
	return 0
}

func (x *PgsqlResponsePB) GetPgErrorCode() uint64 {
	if x != nil && x.PgErrorCode != nil {
		return *x.PgErrorCode
	}
	return 0
}

func (x *PgsqlResponsePB) GetTxnErrorCode() uint32 {
	if x != nil && x.TxnErrorCode != nil {
		return *x.TxnErrorCode
	}
	return 0
}

func (x *PgsqlResponsePB) GetSamplingState() *PgsqlSamplingStatePB {
	if x != nil {
		return x.SamplingState
	}
	return nil
}

func (x *PgsqlResponsePB) GetBackfillSpec() []byte {
	if x != nil {
		return x.BackfillSpec
	}
	return nil
}

func (x *PgsqlResponsePB) GetIsBackfillBatchDone() bool {
	if x != nil && x.IsBackfillBatchDone != nil {
		return *x.IsBackfillBatchDone
	}
	return false
}

func (x *PgsqlResponsePB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *PgsqlResponsePB) GetErrorStatus() []*AppStatusPB {
	if x != nil {
		return x.ErrorStatus
	}
	return nil
}

func (x *PgsqlResponsePB) GetMetrics() *PgsqlRequestMetricsPB {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type PgTxnSnapshotPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DbOid          *uint32                `protobuf:"varint,1,opt,name=db_oid,json=dbOid" json:"db_oid,omitempty"`
	IsolationLevel *uint32                `protobuf:"varint,2,opt,name=isolation_level,json=isolationLevel" json:"isolation_level,omitempty"`
	ReadOnly       *bool                  `protobuf:"varint,3,opt,name=read_only,json=readOnly" json:"read_only,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgTxnSnapshotPB) Reset() {
	*x = PgTxnSnapshotPB{}
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTxnSnapshotPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTxnSnapshotPB) ProtoMessage() {}

func (x *PgTxnSnapshotPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_pgsql_protocol_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTxnSnapshotPB.ProtoReflect.Descriptor instead.
func (*PgTxnSnapshotPB) Descriptor() ([]byte, []int) {
	return file_yb_common_pgsql_protocol_proto_rawDescGZIP(), []int{22}
}

func (x *PgTxnSnapshotPB) GetDbOid() uint32 {
	if x != nil && x.DbOid != nil {
		return *x.DbOid
	}
	return 0
}

func (x *PgTxnSnapshotPB) GetIsolationLevel() uint32 {
	if x != nil && x.IsolationLevel != nil {
		return *x.IsolationLevel
	}
	return 0
}

func (x *PgTxnSnapshotPB) GetReadOnly() bool {
	if x != nil && x.ReadOnly != nil {
		return *x.ReadOnly
	}
	return false
}

var File_yb_common_pgsql_protocol_proto protoreflect.FileDescriptor

var file_yb_common_pgsql_protocol_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x67, 0x73, 0x71,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x79, 0x62, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79,
	0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x59, 0x0a, 0x0c, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x42, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x10, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x1e,
	0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e,
	0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x31,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x22, 0x84, 0x03, 0x0a, 0x11, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x62, 0x66, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x42, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x42, 0x48, 0x00, 0x52, 0x06, 0x62, 0x66, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x42, 0x48, 0x00, 0x52, 0x06, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2a, 0x0a,
	0x06, 0x62, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x42, 0x48,
	0x00, 0x52, 0x06, 0x62, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x42, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x48, 0x00, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x50, 0x67, 0x73,
	0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x42, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x79, 0x62, 0x63, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73,
	0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x06,
	0x79, 0x62, 0x63, 0x74, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x25, 0x0a,
	0x11, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x73,
	0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x52, 0x65, 0x66, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x61, 0x74, 0x74, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x79, 0x70, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x22,
	0x5c, 0x0a, 0x12, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x4d, 0x0a,
	0x10, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x53, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x50,
	0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x71, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x42, 0x52, 0x06, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x10,
	0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x53, 0x52, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x0b, 0x72, 0x73, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x52, 0x53, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x50, 0x42, 0x52, 0x0a, 0x72, 0x73, 0x63,
	0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x73, 0x22, 0x4a, 0x0a, 0x13, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x61, 0x72, 0x67, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x72, 0x6f,
	0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x6f,
	0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x73, 0x6b, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x57, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa4, 0x01, 0x0a,
	0x1a, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x6e, 0x63, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e,
	0x63, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x22, 0xcf, 0x0c, 0x0a, 0x13, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79, 0x62,
	0x2e, 0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x6d, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x74,
	0x6d, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x6d, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a,
	0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x13,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x79, 0x62, 0x63, 0x74, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x11, 0x79, 0x62, 0x63, 0x74, 0x69, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x0e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x72, 0x73, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x53,
	0x52, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x50, 0x42, 0x52, 0x09, 0x72, 0x73, 0x72, 0x6f, 0x77,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x09, 0x77, 0x68, 0x65, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x65, 0x66, 0x73, 0x50, 0x42, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x62,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b,
	0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x25,
	0x69, 0x73, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x20, 0x69, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x12, 0x26, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0a, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x18,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x50,
	0x42, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x52, 0x0a, 0x15, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x42, 0x52, 0x13,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x6d,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x49,
	0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x47, 0x53, 0x51, 0x4c,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x47, 0x53,
	0x51, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x47, 0x53, 0x51, 0x4c, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x47, 0x53, 0x51, 0x4c, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x06, 0x22, 0xca, 0x02, 0x0a, 0x12, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x52, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x42, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x22, 0x6a, 0x0a, 0x13, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x22, 0xc5,
	0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x83, 0x11, 0x0a, 0x12, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x24, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x79, 0x62, 0x2e, 0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x6d, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x79,
	0x62, 0x63, 0x74, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x42,
	0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x11, 0x79, 0x62, 0x63, 0x74, 0x69, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62,
	0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x09, 0x77, 0x68, 0x65, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3c, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x0e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0a,
	0x72, 0x73, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x53, 0x52, 0x6f, 0x77,
	0x44, 0x65, 0x73, 0x63, 0x50, 0x42, 0x52, 0x09, 0x72, 0x73, 0x72, 0x6f, 0x77, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73,
	0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x50, 0x42, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42,
	0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x79, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x79, 0x73, 0x71,
	0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0d, 0x72, 0x6f, 0x77,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x72, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x3a, 0x0a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x52,
	0x0a, 0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e,
	0x50, 0x67, 0x73, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12,
	0x47, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73,
	0x71, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a,
	0x0d, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0c, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62,
	0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x50, 0x42, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x0f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x69, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x52, 0x19, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x12, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x78, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x52, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x78, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x22, 0x49, 0x0a, 0x19,
	0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x61, 0x75, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x19, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50,
	0x42, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x12, 0x42, 0x0a, 0x0d, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x61, 0x75, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50,
	0x42, 0x52, 0x0c, 0x67, 0x61, 0x75, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x42, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x42, 0x52,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x91, 0x08, 0x0a, 0x0f, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x0f, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4b, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x77, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x50, 0x67, 0x73, 0x71, 0x6c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x61, 0x72, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x31, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x41, 0x72, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x67, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x78, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x42,
	0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62,
	0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0xdb, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x27,
	0x0a, 0x23, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x47, 0x53, 0x51, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0x6e, 0x0a,
	0x0f, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x42,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x2a, 0x58, 0x0a,
	0x17, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x47, 0x53, 0x51,
	0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x47, 0x53, 0x51,
	0x4c, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x2e, 0x79,
	0x62,
})

var (
	file_yb_common_pgsql_protocol_proto_rawDescOnce sync.Once
	file_yb_common_pgsql_protocol_proto_rawDescData []byte
)

func file_yb_common_pgsql_protocol_proto_rawDescGZIP() []byte {
	file_yb_common_pgsql_protocol_proto_rawDescOnce.Do(func() {
		file_yb_common_pgsql_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_common_pgsql_protocol_proto_rawDesc), len(file_yb_common_pgsql_protocol_proto_rawDesc)))
	})
	return file_yb_common_pgsql_protocol_proto_rawDescData
}

var file_yb_common_pgsql_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yb_common_pgsql_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yb_common_pgsql_protocol_proto_goTypes = []any{
	(PgsqlMetricsCaptureType)(0),                // 0: yb.PgsqlMetricsCaptureType
	(PgsqlWriteRequestPB_PgsqlStmtType)(0),      // 1: yb.PgsqlWriteRequestPB.PgsqlStmtType
	(PgsqlResponsePB_RequestStatus)(0),          // 2: yb.PgsqlResponsePB.RequestStatus
	(*PgsqlBCallPB)(nil),                        // 3: yb.PgsqlBCallPB
	(*PgsqlConditionPB)(nil),                    // 4: yb.PgsqlConditionPB
	(*PgsqlExpressionPB)(nil),                   // 5: yb.PgsqlExpressionPB
	(*PgsqlBatchArgumentPB)(nil),                // 6: yb.PgsqlBatchArgumentPB
	(*PgsqlColumnRefsPB)(nil),                   // 7: yb.PgsqlColumnRefsPB
	(*PgsqlColRefPB)(nil),                       // 8: yb.PgsqlColRefPB
	(*PgsqlColumnValuePB)(nil),                  // 9: yb.PgsqlColumnValuePB
	(*PgsqlRSColDescPB)(nil),                    // 10: yb.PgsqlRSColDescPB
	(*PgsqlRSRowDescPB)(nil),                    // 11: yb.PgsqlRSRowDescPB
	(*PgsqlPartitionBound)(nil),                 // 12: yb.PgsqlPartitionBound
	(*PgsqlSamplingStatePB)(nil),                // 13: yb.PgsqlSamplingStatePB
	(*PgsqlFetchSequenceParamsPB)(nil),          // 14: yb.PgsqlFetchSequenceParamsPB
	(*PgsqlWriteRequestPB)(nil),                 // 15: yb.PgsqlWriteRequestPB
	(*PgsqlPagingStatePB)(nil),                  // 16: yb.PgsqlPagingStatePB
	(*PgsqlBackfillSpecPB)(nil),                 // 17: yb.PgsqlBackfillSpecPB
	(*GetTabletKeyRangesEmbeddedRequestPB)(nil), // 18: yb.GetTabletKeyRangesEmbeddedRequestPB
	(*PgsqlReadRequestPB)(nil),                  // 19: yb.PgsqlReadRequestPB
	(*PgsqlRequestGaugeMetricPB)(nil),           // 20: yb.PgsqlRequestGaugeMetricPB
	(*PgsqlRequestCounterMetricPB)(nil),         // 21: yb.PgsqlRequestCounterMetricPB
	(*PgsqlRequestEventMetricPB)(nil),           // 22: yb.PgsqlRequestEventMetricPB
	(*PgsqlRequestMetricsPB)(nil),               // 23: yb.PgsqlRequestMetricsPB
	(*PgsqlResponsePB)(nil),                     // 24: yb.PgsqlResponsePB
	(*PgTxnSnapshotPB)(nil),                     // 25: yb.PgTxnSnapshotPB
	(QLOperator)(0),                             // 26: yb.QLOperator
	(*QLValuePB)(nil),                           // 27: yb.QLValuePB
	(*QLTupleExpressionPB)(nil),                 // 28: yb.QLTupleExpressionPB
	(*QLTypePB)(nil),                            // 29: yb.QLTypePB
	(QLClient)(0),                               // 30: yb.QLClient
	(*ReadHybridTimePB)(nil),                    // 31: yb.ReadHybridTimePB
	(RowMarkType)(0),                            // 32: yb.RowMarkType
	(WaitPolicy)(0),                             // 33: yb.WaitPolicy
	(*PgVectorReadOptionsPB)(nil),               // 34: yb.PgVectorReadOptionsPB
	(*AppStatusPB)(nil),                         // 35: yb.AppStatusPB
}
var file_yb_common_pgsql_protocol_proto_depIdxs = []int32{
	5,  // 0: yb.PgsqlBCallPB.operands:type_name -> yb.PgsqlExpressionPB
	26, // 1: yb.PgsqlConditionPB.op:type_name -> yb.QLOperator
	5,  // 2: yb.PgsqlConditionPB.operands:type_name -> yb.PgsqlExpressionPB
	27, // 3: yb.PgsqlExpressionPB.value:type_name -> yb.QLValuePB
	3,  // 4: yb.PgsqlExpressionPB.bfcall:type_name -> yb.PgsqlBCallPB
	3,  // 5: yb.PgsqlExpressionPB.tscall:type_name -> yb.PgsqlBCallPB
	3,  // 6: yb.PgsqlExpressionPB.bocall:type_name -> yb.PgsqlBCallPB
	4,  // 7: yb.PgsqlExpressionPB.condition:type_name -> yb.PgsqlConditionPB
	28, // 8: yb.PgsqlExpressionPB.tuple:type_name -> yb.QLTupleExpressionPB
	5,  // 9: yb.PgsqlBatchArgumentPB.ybctid:type_name -> yb.PgsqlExpressionPB
	5,  // 10: yb.PgsqlBatchArgumentPB.partition_column_values:type_name -> yb.PgsqlExpressionPB
	5,  // 11: yb.PgsqlBatchArgumentPB.range_column_values:type_name -> yb.PgsqlExpressionPB
	5,  // 12: yb.PgsqlColumnValuePB.expr:type_name -> yb.PgsqlExpressionPB
	29, // 13: yb.PgsqlRSColDescPB.ql_type:type_name -> yb.QLTypePB
	10, // 14: yb.PgsqlRSRowDescPB.rscol_descs:type_name -> yb.PgsqlRSColDescPB
	30, // 15: yb.PgsqlWriteRequestPB.client:type_name -> yb.QLClient
	1,  // 16: yb.PgsqlWriteRequestPB.stmt_type:type_name -> yb.PgsqlWriteRequestPB.PgsqlStmtType
	5,  // 17: yb.PgsqlWriteRequestPB.partition_column_values:type_name -> yb.PgsqlExpressionPB
	5,  // 18: yb.PgsqlWriteRequestPB.range_column_values:type_name -> yb.PgsqlExpressionPB
	5,  // 19: yb.PgsqlWriteRequestPB.ybctid_column_value:type_name -> yb.PgsqlExpressionPB
	9,  // 20: yb.PgsqlWriteRequestPB.column_values:type_name -> yb.PgsqlColumnValuePB
	6,  // 21: yb.PgsqlWriteRequestPB.batch_arguments:type_name -> yb.PgsqlBatchArgumentPB
	9,  // 22: yb.PgsqlWriteRequestPB.column_new_values:type_name -> yb.PgsqlColumnValuePB
	11, // 23: yb.PgsqlWriteRequestPB.rsrow_desc:type_name -> yb.PgsqlRSRowDescPB
	5,  // 24: yb.PgsqlWriteRequestPB.targets:type_name -> yb.PgsqlExpressionPB
	5,  // 25: yb.PgsqlWriteRequestPB.where_expr:type_name -> yb.PgsqlExpressionPB
	7,  // 26: yb.PgsqlWriteRequestPB.column_refs:type_name -> yb.PgsqlColumnRefsPB
	8,  // 27: yb.PgsqlWriteRequestPB.col_refs:type_name -> yb.PgsqlColRefPB
	14, // 28: yb.PgsqlWriteRequestPB.fetch_sequence_params:type_name -> yb.PgsqlFetchSequenceParamsPB
	31, // 29: yb.PgsqlPagingStatePB.read_time:type_name -> yb.ReadHybridTimePB
	30, // 30: yb.PgsqlReadRequestPB.client:type_name -> yb.QLClient
	5,  // 31: yb.PgsqlReadRequestPB.ybctid_column_value:type_name -> yb.PgsqlExpressionPB
	5,  // 32: yb.PgsqlReadRequestPB.partition_column_values:type_name -> yb.PgsqlExpressionPB
	5,  // 33: yb.PgsqlReadRequestPB.range_column_values:type_name -> yb.PgsqlExpressionPB
	19, // 34: yb.PgsqlReadRequestPB.index_request:type_name -> yb.PgsqlReadRequestPB
	5,  // 35: yb.PgsqlReadRequestPB.where_expr:type_name -> yb.PgsqlExpressionPB
	5,  // 36: yb.PgsqlReadRequestPB.condition_expr:type_name -> yb.PgsqlExpressionPB
	6,  // 37: yb.PgsqlReadRequestPB.batch_arguments:type_name -> yb.PgsqlBatchArgumentPB
	11, // 38: yb.PgsqlReadRequestPB.rsrow_desc:type_name -> yb.PgsqlRSRowDescPB
	5,  // 39: yb.PgsqlReadRequestPB.targets:type_name -> yb.PgsqlExpressionPB
	7,  // 40: yb.PgsqlReadRequestPB.column_refs:type_name -> yb.PgsqlColumnRefsPB
	16, // 41: yb.PgsqlReadRequestPB.paging_state:type_name -> yb.PgsqlPagingStatePB
	32, // 42: yb.PgsqlReadRequestPB.row_mark_type:type_name -> yb.RowMarkType
	33, // 43: yb.PgsqlReadRequestPB.wait_policy:type_name -> yb.WaitPolicy
	12, // 44: yb.PgsqlReadRequestPB.lower_bound:type_name -> yb.PgsqlPartitionBound
	12, // 45: yb.PgsqlReadRequestPB.upper_bound:type_name -> yb.PgsqlPartitionBound
	13, // 46: yb.PgsqlReadRequestPB.sampling_state:type_name -> yb.PgsqlSamplingStatePB
	5,  // 47: yb.PgsqlReadRequestPB.where_clauses:type_name -> yb.PgsqlExpressionPB
	8,  // 48: yb.PgsqlReadRequestPB.col_refs:type_name -> yb.PgsqlColRefPB
	0,  // 49: yb.PgsqlReadRequestPB.metrics_capture:type_name -> yb.PgsqlMetricsCaptureType
	18, // 50: yb.PgsqlReadRequestPB.get_tablet_key_ranges_request:type_name -> yb.GetTabletKeyRangesEmbeddedRequestPB
	34, // 51: yb.PgsqlReadRequestPB.vector_idx_options:type_name -> yb.PgVectorReadOptionsPB
	20, // 52: yb.PgsqlRequestMetricsPB.gauge_metrics:type_name -> yb.PgsqlRequestGaugeMetricPB
	21, // 53: yb.PgsqlRequestMetricsPB.counter_metrics:type_name -> yb.PgsqlRequestCounterMetricPB
	22, // 54: yb.PgsqlRequestMetricsPB.event_metrics:type_name -> yb.PgsqlRequestEventMetricPB
	2,  // 55: yb.PgsqlResponsePB.status:type_name -> yb.PgsqlResponsePB.RequestStatus
	16, // 56: yb.PgsqlResponsePB.paging_state:type_name -> yb.PgsqlPagingStatePB
	13, // 57: yb.PgsqlResponsePB.sampling_state:type_name -> yb.PgsqlSamplingStatePB
	35, // 58: yb.PgsqlResponsePB.error_status:type_name -> yb.AppStatusPB
	23, // 59: yb.PgsqlResponsePB.metrics:type_name -> yb.PgsqlRequestMetricsPB
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_yb_common_pgsql_protocol_proto_init() }
func file_yb_common_pgsql_protocol_proto_init() {
	if File_yb_common_pgsql_protocol_proto != nil {
		return
	}
	file_yb_common_common_proto_init()
	file_yb_common_common_types_proto_init()
	file_yb_common_transaction_proto_init()
	file_yb_common_value_proto_init()
	file_yb_common_wire_protocol_proto_init()
	file_yb_common_pgsql_protocol_proto_msgTypes[2].OneofWrappers = []any{
		(*PgsqlExpressionPB_Value)(nil),
		(*PgsqlExpressionPB_ColumnId)(nil),
		(*PgsqlExpressionPB_BindId)(nil),
		(*PgsqlExpressionPB_AliasId)(nil),
		(*PgsqlExpressionPB_Bfcall)(nil),
		(*PgsqlExpressionPB_Tscall)(nil),
		(*PgsqlExpressionPB_Bocall)(nil),
		(*PgsqlExpressionPB_Condition)(nil),
		(*PgsqlExpressionPB_Tuple)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_common_pgsql_protocol_proto_rawDesc), len(file_yb_common_pgsql_protocol_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_common_pgsql_protocol_proto_goTypes,
		DependencyIndexes: file_yb_common_pgsql_protocol_proto_depIdxs,
		EnumInfos:         file_yb_common_pgsql_protocol_proto_enumTypes,
		MessageInfos:      file_yb_common_pgsql_protocol_proto_msgTypes,
	}.Build()
	File_yb_common_pgsql_protocol_proto = out.File
	file_yb_common_pgsql_protocol_proto_goTypes = nil
	file_yb_common_pgsql_protocol_proto_depIdxs = nil
}
