// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/common/common_types.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used for Cassandra Roles and Permissions
type ResourceType int32

const (
	ResourceType_ALL_KEYSPACES ResourceType = 1
	ResourceType_KEYSPACE      ResourceType = 2
	ResourceType_TABLE         ResourceType = 3
	ResourceType_ALL_ROLES     ResourceType = 4
	ResourceType_ROLE          ResourceType = 5
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		1: "ALL_KEYSPACES",
		2: "KEYSPACE",
		3: "TABLE",
		4: "ALL_ROLES",
		5: "ROLE",
	}
	ResourceType_value = map[string]int32{
		"ALL_KEYSPACES": 1,
		"KEYSPACE":      2,
		"TABLE":         3,
		"ALL_ROLES":     4,
		"ROLE":          5,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[0].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[0]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResourceType(num)
	return nil
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{0}
}

// Suffixed with PERMISSION, because Google does not allow same enum name CREATE
type PermissionType int32

const (
	PermissionType_ALTER_PERMISSION     PermissionType = 0
	PermissionType_CREATE_PERMISSION    PermissionType = 1
	PermissionType_DROP_PERMISSION      PermissionType = 2
	PermissionType_SELECT_PERMISSION    PermissionType = 3
	PermissionType_MODIFY_PERMISSION    PermissionType = 4
	PermissionType_AUTHORIZE_PERMISSION PermissionType = 5
	PermissionType_DESCRIBE_PERMISSION  PermissionType = 6
	PermissionType_ALL_PERMISSION       PermissionType = 999999999
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0:         "ALTER_PERMISSION",
		1:         "CREATE_PERMISSION",
		2:         "DROP_PERMISSION",
		3:         "SELECT_PERMISSION",
		4:         "MODIFY_PERMISSION",
		5:         "AUTHORIZE_PERMISSION",
		6:         "DESCRIBE_PERMISSION",
		999999999: "ALL_PERMISSION",
	}
	PermissionType_value = map[string]int32{
		"ALTER_PERMISSION":     0,
		"CREATE_PERMISSION":    1,
		"DROP_PERMISSION":      2,
		"SELECT_PERMISSION":    3,
		"MODIFY_PERMISSION":    4,
		"AUTHORIZE_PERMISSION": 5,
		"DESCRIBE_PERMISSION":  6,
		"ALL_PERMISSION":       999999999,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[1].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[1]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PermissionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PermissionType(num)
	return nil
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{1}
}

// Indexes when created or deleted go through a series of steps to add
// a) delete, b) write and c) read permissions one by one. Backfill is done
// before the READ_WRITE_AND_DELETE state. If the backfill succeeds, the read
// permission is granted. If not, the given permissions are removed one by one,
// and the index will be deleted when it is unused.
// If the backfill is successfully complete, the index will be in
// READ_WRITE_AND_DELETE state, and remain so until the user deletes it. If an
// Index is dropped, it will move from READ_WRITE_AND_DELETE state throu the
// WRITE_AND_DELETE_WHILE_REMOVING and DELETE_ONLY_WHILE_REMOVING states to
// INDEX_UNUSED.
type IndexPermissions int32

const (
	IndexPermissions_INDEX_PERM_DELETE_ONLY      IndexPermissions = 0
	IndexPermissions_INDEX_PERM_WRITE_AND_DELETE IndexPermissions = 2
	IndexPermissions_INDEX_PERM_DO_BACKFILL      IndexPermissions = 4
	// This is the "success" state, where the index is completely usable.
	IndexPermissions_INDEX_PERM_READ_WRITE_AND_DELETE IndexPermissions = 6
	// Used while removing an index -- either due to backfill failure, or
	// due to a client requested "drop index".
	IndexPermissions_INDEX_PERM_WRITE_AND_DELETE_WHILE_REMOVING IndexPermissions = 8
	IndexPermissions_INDEX_PERM_DELETE_ONLY_WHILE_REMOVING      IndexPermissions = 10
	IndexPermissions_INDEX_PERM_INDEX_UNUSED                    IndexPermissions = 12
	// Used as a sentinel value.
	IndexPermissions_INDEX_PERM_NOT_USED IndexPermissions = 14
)

// Enum value maps for IndexPermissions.
var (
	IndexPermissions_name = map[int32]string{
		0:  "INDEX_PERM_DELETE_ONLY",
		2:  "INDEX_PERM_WRITE_AND_DELETE",
		4:  "INDEX_PERM_DO_BACKFILL",
		6:  "INDEX_PERM_READ_WRITE_AND_DELETE",
		8:  "INDEX_PERM_WRITE_AND_DELETE_WHILE_REMOVING",
		10: "INDEX_PERM_DELETE_ONLY_WHILE_REMOVING",
		12: "INDEX_PERM_INDEX_UNUSED",
		14: "INDEX_PERM_NOT_USED",
	}
	IndexPermissions_value = map[string]int32{
		"INDEX_PERM_DELETE_ONLY":                     0,
		"INDEX_PERM_WRITE_AND_DELETE":                2,
		"INDEX_PERM_DO_BACKFILL":                     4,
		"INDEX_PERM_READ_WRITE_AND_DELETE":           6,
		"INDEX_PERM_WRITE_AND_DELETE_WHILE_REMOVING": 8,
		"INDEX_PERM_DELETE_ONLY_WHILE_REMOVING":      10,
		"INDEX_PERM_INDEX_UNUSED":                    12,
		"INDEX_PERM_NOT_USED":                        14,
	}
)

func (x IndexPermissions) Enum() *IndexPermissions {
	p := new(IndexPermissions)
	*p = x
	return p
}

func (x IndexPermissions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexPermissions) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[2].Descriptor()
}

func (IndexPermissions) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[2]
}

func (x IndexPermissions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IndexPermissions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IndexPermissions(num)
	return nil
}

// Deprecated: Use IndexPermissions.Descriptor instead.
func (IndexPermissions) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{2}
}

// Client type.
type YQLDatabase int32

const (
	YQLDatabase_YQL_DATABASE_UNKNOWN YQLDatabase = 1
	YQLDatabase_YQL_DATABASE_CQL     YQLDatabase = 2
	YQLDatabase_YQL_DATABASE_PGSQL   YQLDatabase = 3 // Pgsql database
	YQLDatabase_YQL_DATABASE_REDIS   YQLDatabase = 4
)

// Enum value maps for YQLDatabase.
var (
	YQLDatabase_name = map[int32]string{
		1: "YQL_DATABASE_UNKNOWN",
		2: "YQL_DATABASE_CQL",
		3: "YQL_DATABASE_PGSQL",
		4: "YQL_DATABASE_REDIS",
	}
	YQLDatabase_value = map[string]int32{
		"YQL_DATABASE_UNKNOWN": 1,
		"YQL_DATABASE_CQL":     2,
		"YQL_DATABASE_PGSQL":   3,
		"YQL_DATABASE_REDIS":   4,
	}
)

func (x YQLDatabase) Enum() *YQLDatabase {
	p := new(YQLDatabase)
	*p = x
	return p
}

func (x YQLDatabase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YQLDatabase) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[3].Descriptor()
}

func (YQLDatabase) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[3]
}

func (x YQLDatabase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *YQLDatabase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = YQLDatabase(num)
	return nil
}

// Deprecated: Use YQLDatabase.Descriptor instead.
func (YQLDatabase) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{3}
}

// This must exactly match YBTableType in client.h.
// We have static_assert's in tablet-test.cc to verify this.
type TableType int32

const (
	TableType_YQL_TABLE_TYPE                TableType = 2
	TableType_REDIS_TABLE_TYPE              TableType = 3
	TableType_PGSQL_TABLE_TYPE              TableType = 4
	TableType_TRANSACTION_STATUS_TABLE_TYPE TableType = 5
	TableType_DEFAULT_TABLE_TYPE            TableType = 2
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		2: "YQL_TABLE_TYPE",
		3: "REDIS_TABLE_TYPE",
		4: "PGSQL_TABLE_TYPE",
		5: "TRANSACTION_STATUS_TABLE_TYPE",
		// Duplicate value: 2: "DEFAULT_TABLE_TYPE",
	}
	TableType_value = map[string]int32{
		"YQL_TABLE_TYPE":                2,
		"REDIS_TABLE_TYPE":              3,
		"PGSQL_TABLE_TYPE":              4,
		"TRANSACTION_STATUS_TABLE_TYPE": 5,
		"DEFAULT_TABLE_TYPE":            2,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[4].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[4]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableType(num)
	return nil
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{4}
}

type JsonOperatorPB int32

const (
	JsonOperatorPB_JSON_OBJECT JsonOperatorPB = 0 // The -> operator applied to a column.
	JsonOperatorPB_JSON_TEXT   JsonOperatorPB = 1 // The ->> operator applied to a column.
)

// Enum value maps for JsonOperatorPB.
var (
	JsonOperatorPB_name = map[int32]string{
		0: "JSON_OBJECT",
		1: "JSON_TEXT",
	}
	JsonOperatorPB_value = map[string]int32{
		"JSON_OBJECT": 0,
		"JSON_TEXT":   1,
	}
)

func (x JsonOperatorPB) Enum() *JsonOperatorPB {
	p := new(JsonOperatorPB)
	*p = x
	return p
}

func (x JsonOperatorPB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JsonOperatorPB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[5].Descriptor()
}

func (JsonOperatorPB) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[5]
}

func (x JsonOperatorPB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *JsonOperatorPB) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = JsonOperatorPB(num)
	return nil
}

// Deprecated: Use JsonOperatorPB.Descriptor instead.
func (JsonOperatorPB) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{5}
}

type YBConsistencyLevel int32

const (
	// This consistency level provides Linearizability guarantees and is the default for our system.
	YBConsistencyLevel_STRONG YBConsistencyLevel = 1
	// Consistent-prefix consistency means that we always see consistent snapshot of the database in
	// a well-defined order. If operations A, B and C take place, we will either see A, AB, or ABC.
	// Note that reads might still go back in time since we might see ABC on one replica and AB on
	// another.
	YBConsistencyLevel_CONSISTENT_PREFIX YBConsistencyLevel = 2
	// For cross-shard transactions only: user-enforced consistency level means it is the user's
	// responsibility to enforce consistency across shards or tables/indexes.
	YBConsistencyLevel_USER_ENFORCED YBConsistencyLevel = 3
)

// Enum value maps for YBConsistencyLevel.
var (
	YBConsistencyLevel_name = map[int32]string{
		1: "STRONG",
		2: "CONSISTENT_PREFIX",
		3: "USER_ENFORCED",
	}
	YBConsistencyLevel_value = map[string]int32{
		"STRONG":            1,
		"CONSISTENT_PREFIX": 2,
		"USER_ENFORCED":     3,
	}
)

func (x YBConsistencyLevel) Enum() *YBConsistencyLevel {
	p := new(YBConsistencyLevel)
	*p = x
	return p
}

func (x YBConsistencyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YBConsistencyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[6].Descriptor()
}

func (YBConsistencyLevel) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[6]
}

func (x YBConsistencyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *YBConsistencyLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = YBConsistencyLevel(num)
	return nil
}

// Deprecated: Use YBConsistencyLevel.Descriptor instead.
func (YBConsistencyLevel) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{6}
}

// Client type.
type QLClient int32

const (
	QLClient_YQL_CLIENT_CQL   QLClient = 1
	QLClient_YQL_CLIENT_PGSQL QLClient = 2
	QLClient_YQL_CLIENT_REDIS QLClient = 3
)

// Enum value maps for QLClient.
var (
	QLClient_name = map[int32]string{
		1: "YQL_CLIENT_CQL",
		2: "YQL_CLIENT_PGSQL",
		3: "YQL_CLIENT_REDIS",
	}
	QLClient_value = map[string]int32{
		"YQL_CLIENT_CQL":   1,
		"YQL_CLIENT_PGSQL": 2,
		"YQL_CLIENT_REDIS": 3,
	}
)

func (x QLClient) Enum() *QLClient {
	p := new(QLClient)
	*p = x
	return p
}

func (x QLClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLClient) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[7].Descriptor()
}

func (QLClient) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[7]
}

func (x QLClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLClient) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLClient(num)
	return nil
}

// Deprecated: Use QLClient.Descriptor instead.
func (QLClient) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{7}
}

// The possible roles for peers.
type PeerRole int32

const (
	// Indicates this node is a follower in the configuration, i.e. that it participates
	// in majorities and accepts Consensus::Update() calls.
	PeerRole_FOLLOWER PeerRole = 0
	// Indicates this node is the current leader of the configuration, i.e. that it
	// participates in majorities and accepts Consensus::Append() calls.
	PeerRole_LEADER PeerRole = 1
	// New peers joining a quorum will be in this role for both PRE_VOTER and PRE_OBSERVER
	// while the tablet data is being remote bootstrapped. The peer does not participate
	// in starting elections or majorities.
	PeerRole_LEARNER PeerRole = 2
	// Indicates that this node is not a participant of the configuration, i.e. does
	// not accept Consensus::Update() or Consensus::Update() and cannot
	// participate in elections or majorities. This is usually the role of a node
	// that leaves the configuration.
	PeerRole_NON_PARTICIPANT PeerRole = 3
	// This peer is a read (async) replica and gets informed of the quorum write
	// activity and provides time-line consistent reads.
	PeerRole_READ_REPLICA PeerRole = 4
	PeerRole_UNKNOWN_ROLE PeerRole = 7
)

// Enum value maps for PeerRole.
var (
	PeerRole_name = map[int32]string{
		0: "FOLLOWER",
		1: "LEADER",
		2: "LEARNER",
		3: "NON_PARTICIPANT",
		4: "READ_REPLICA",
		7: "UNKNOWN_ROLE",
	}
	PeerRole_value = map[string]int32{
		"FOLLOWER":        0,
		"LEADER":          1,
		"LEARNER":         2,
		"NON_PARTICIPANT": 3,
		"READ_REPLICA":    4,
		"UNKNOWN_ROLE":    7,
	}
)

func (x PeerRole) Enum() *PeerRole {
	p := new(PeerRole)
	*p = x
	return p
}

func (x PeerRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerRole) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[8].Descriptor()
}

func (PeerRole) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[8]
}

func (x PeerRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PeerRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PeerRole(num)
	return nil
}

// Deprecated: Use PeerRole.Descriptor instead.
func (PeerRole) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{8}
}

type ReplicationErrorPb int32

const (
	ReplicationErrorPb_REPLICATION_UNKNOWN_ERROR ReplicationErrorPb = 0
	// One or more WAL segments are missing an expected op id.
	ReplicationErrorPb_REPLICATION_MISSING_OP_ID ReplicationErrorPb = 1
	// There is a schema mismatch between the producer and consumer tables.
	ReplicationErrorPb_REPLICATION_SCHEMA_MISMATCH ReplicationErrorPb = 2
	// There is a colocated table missing on the consumer side.
	ReplicationErrorPb_REPLICATION_MISSING_TABLE ReplicationErrorPb = 3
	// Replication state has not yet been initialized.
	ReplicationErrorPb_REPLICATION_ERROR_UNINITIALIZED ReplicationErrorPb = 4
	// Replication is healthy.
	ReplicationErrorPb_REPLICATION_OK ReplicationErrorPb = 5
	// The AutoFlags config has changed and the new version is not compatible, or
	// has not yet been validated.
	ReplicationErrorPb_REPLICATION_AUTO_FLAG_CONFIG_VERSION_MISMATCH ReplicationErrorPb = 6
	// Error connecting to the source universe.
	ReplicationErrorPb_REPLICATION_SOURCE_UNREACHABLE ReplicationErrorPb = 7
	// There was a generic system error.
	ReplicationErrorPb_REPLICATION_SYSTEM_ERROR ReplicationErrorPb = 8
	// The replication stream has been paused by the user.
	ReplicationErrorPb_REPLICATION_PAUSED ReplicationErrorPb = 9
)

// Enum value maps for ReplicationErrorPb.
var (
	ReplicationErrorPb_name = map[int32]string{
		0: "REPLICATION_UNKNOWN_ERROR",
		1: "REPLICATION_MISSING_OP_ID",
		2: "REPLICATION_SCHEMA_MISMATCH",
		3: "REPLICATION_MISSING_TABLE",
		4: "REPLICATION_ERROR_UNINITIALIZED",
		5: "REPLICATION_OK",
		6: "REPLICATION_AUTO_FLAG_CONFIG_VERSION_MISMATCH",
		7: "REPLICATION_SOURCE_UNREACHABLE",
		8: "REPLICATION_SYSTEM_ERROR",
		9: "REPLICATION_PAUSED",
	}
	ReplicationErrorPb_value = map[string]int32{
		"REPLICATION_UNKNOWN_ERROR":                     0,
		"REPLICATION_MISSING_OP_ID":                     1,
		"REPLICATION_SCHEMA_MISMATCH":                   2,
		"REPLICATION_MISSING_TABLE":                     3,
		"REPLICATION_ERROR_UNINITIALIZED":               4,
		"REPLICATION_OK":                                5,
		"REPLICATION_AUTO_FLAG_CONFIG_VERSION_MISMATCH": 6,
		"REPLICATION_SOURCE_UNREACHABLE":                7,
		"REPLICATION_SYSTEM_ERROR":                      8,
		"REPLICATION_PAUSED":                            9,
	}
)

func (x ReplicationErrorPb) Enum() *ReplicationErrorPb {
	p := new(ReplicationErrorPb)
	*p = x
	return p
}

func (x ReplicationErrorPb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationErrorPb) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[9].Descriptor()
}

func (ReplicationErrorPb) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[9]
}

func (x ReplicationErrorPb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReplicationErrorPb) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReplicationErrorPb(num)
	return nil
}

// Deprecated: Use ReplicationErrorPb.Descriptor instead.
func (ReplicationErrorPb) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{9}
}

// Stateful services.
type StatefulServiceKind int32

const (
	// Test service.
	StatefulServiceKind_TEST_ECHO       StatefulServiceKind = 0
	StatefulServiceKind_PG_AUTO_ANALYZE StatefulServiceKind = 1
	StatefulServiceKind_PG_CRON_LEADER  StatefulServiceKind = 2
)

// Enum value maps for StatefulServiceKind.
var (
	StatefulServiceKind_name = map[int32]string{
		0: "TEST_ECHO",
		1: "PG_AUTO_ANALYZE",
		2: "PG_CRON_LEADER",
	}
	StatefulServiceKind_value = map[string]int32{
		"TEST_ECHO":       0,
		"PG_AUTO_ANALYZE": 1,
		"PG_CRON_LEADER":  2,
	}
)

func (x StatefulServiceKind) Enum() *StatefulServiceKind {
	p := new(StatefulServiceKind)
	*p = x
	return p
}

func (x StatefulServiceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatefulServiceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[10].Descriptor()
}

func (StatefulServiceKind) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[10]
}

func (x StatefulServiceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StatefulServiceKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StatefulServiceKind(num)
	return nil
}

// Deprecated: Use StatefulServiceKind.Descriptor instead.
func (StatefulServiceKind) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{10}
}

// CDC SDK Consistent Snapshot Options
type CDCSDKSnapshotOption int32

const (
	CDCSDKSnapshotOption_NOEXPORT_SNAPSHOT CDCSDKSnapshotOption = 1 // Client does not wish to consume snapshot
	CDCSDKSnapshotOption_USE_SNAPSHOT      CDCSDKSnapshotOption = 2 // Client wishes to consume snapshot from the source universe
	CDCSDKSnapshotOption_EXPORT_SNAPSHOT   CDCSDKSnapshotOption = 3 // Client wishes to export snapshot to be used in other session
)

// Enum value maps for CDCSDKSnapshotOption.
var (
	CDCSDKSnapshotOption_name = map[int32]string{
		1: "NOEXPORT_SNAPSHOT",
		2: "USE_SNAPSHOT",
		3: "EXPORT_SNAPSHOT",
	}
	CDCSDKSnapshotOption_value = map[string]int32{
		"NOEXPORT_SNAPSHOT": 1,
		"USE_SNAPSHOT":      2,
		"EXPORT_SNAPSHOT":   3,
	}
)

func (x CDCSDKSnapshotOption) Enum() *CDCSDKSnapshotOption {
	p := new(CDCSDKSnapshotOption)
	*p = x
	return p
}

func (x CDCSDKSnapshotOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCSDKSnapshotOption) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[11].Descriptor()
}

func (CDCSDKSnapshotOption) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[11]
}

func (x CDCSDKSnapshotOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCSDKSnapshotOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCSDKSnapshotOption(num)
	return nil
}

// Deprecated: Use CDCSDKSnapshotOption.Descriptor instead.
func (CDCSDKSnapshotOption) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{11}
}

type CDCSDKDynamicTablesOption int32

const (
	CDCSDKDynamicTablesOption_DYNAMIC_TABLES_UNDEFINED CDCSDKDynamicTablesOption = 0
	CDCSDKDynamicTablesOption_DYNAMIC_TABLES_ENABLED   CDCSDKDynamicTablesOption = 1
	CDCSDKDynamicTablesOption_DYNAMIC_TABLES_DISABLED  CDCSDKDynamicTablesOption = 2
)

// Enum value maps for CDCSDKDynamicTablesOption.
var (
	CDCSDKDynamicTablesOption_name = map[int32]string{
		0: "DYNAMIC_TABLES_UNDEFINED",
		1: "DYNAMIC_TABLES_ENABLED",
		2: "DYNAMIC_TABLES_DISABLED",
	}
	CDCSDKDynamicTablesOption_value = map[string]int32{
		"DYNAMIC_TABLES_UNDEFINED": 0,
		"DYNAMIC_TABLES_ENABLED":   1,
		"DYNAMIC_TABLES_DISABLED":  2,
	}
)

func (x CDCSDKDynamicTablesOption) Enum() *CDCSDKDynamicTablesOption {
	p := new(CDCSDKDynamicTablesOption)
	*p = x
	return p
}

func (x CDCSDKDynamicTablesOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCSDKDynamicTablesOption) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[12].Descriptor()
}

func (CDCSDKDynamicTablesOption) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[12]
}

func (x CDCSDKDynamicTablesOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCSDKDynamicTablesOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCSDKDynamicTablesOption(num)
	return nil
}

// Deprecated: Use CDCSDKDynamicTablesOption.Descriptor instead.
func (CDCSDKDynamicTablesOption) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{12}
}

// Available replica identity modes for use in CDC
type PgReplicaIdentity int32

const (
	// Entire updated row as new image, only key as old image for DELETE
	// The name DEFAULT is taken from PG, however it is not the default replica identity mode
	PgReplicaIdentity_DEFAULT PgReplicaIdentity = 0
	// Both old and new images of the entire row
	PgReplicaIdentity_FULL PgReplicaIdentity = 1
	// No old image for any operation
	PgReplicaIdentity_NOTHING PgReplicaIdentity = 2
	// Only the changed columns as new image, no old image except DELETE
	// This is the default replica identity mode in YSQL
	PgReplicaIdentity_CHANGE PgReplicaIdentity = 3
)

// Enum value maps for PgReplicaIdentity.
var (
	PgReplicaIdentity_name = map[int32]string{
		0: "DEFAULT",
		1: "FULL",
		2: "NOTHING",
		3: "CHANGE",
	}
	PgReplicaIdentity_value = map[string]int32{
		"DEFAULT": 0,
		"FULL":    1,
		"NOTHING": 2,
		"CHANGE":  3,
	}
)

func (x PgReplicaIdentity) Enum() *PgReplicaIdentity {
	p := new(PgReplicaIdentity)
	*p = x
	return p
}

func (x PgReplicaIdentity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PgReplicaIdentity) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[13].Descriptor()
}

func (PgReplicaIdentity) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[13]
}

func (x PgReplicaIdentity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PgReplicaIdentity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PgReplicaIdentity(num)
	return nil
}

// Deprecated: Use PgReplicaIdentity.Descriptor instead.
func (PgReplicaIdentity) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{13}
}

type XClusterReplicationType int32

const (
	XClusterReplicationType_XCLUSTER_NON_TRANSACTIONAL  XClusterReplicationType = 0 // YCQL and YSQL. Unidirectional and Bidirectional. Table level.
	XClusterReplicationType_XCLUSTER_YSQL_TRANSACTIONAL XClusterReplicationType = 1 // YSQL, Unidirectional only. Table level.
	XClusterReplicationType_XCLUSTER_YSQL_DB_SCOPED     XClusterReplicationType = 2 // YSQL, Transactional and Unidirectional only. DB level.
)

// Enum value maps for XClusterReplicationType.
var (
	XClusterReplicationType_name = map[int32]string{
		0: "XCLUSTER_NON_TRANSACTIONAL",
		1: "XCLUSTER_YSQL_TRANSACTIONAL",
		2: "XCLUSTER_YSQL_DB_SCOPED",
	}
	XClusterReplicationType_value = map[string]int32{
		"XCLUSTER_NON_TRANSACTIONAL":  0,
		"XCLUSTER_YSQL_TRANSACTIONAL": 1,
		"XCLUSTER_YSQL_DB_SCOPED":     2,
	}
)

func (x XClusterReplicationType) Enum() *XClusterReplicationType {
	p := new(XClusterReplicationType)
	*p = x
	return p
}

func (x XClusterReplicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XClusterReplicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_types_proto_enumTypes[14].Descriptor()
}

func (XClusterReplicationType) Type() protoreflect.EnumType {
	return &file_yb_common_common_types_proto_enumTypes[14]
}

func (x XClusterReplicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *XClusterReplicationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = XClusterReplicationType(num)
	return nil
}

// Deprecated: Use XClusterReplicationType.Descriptor instead.
func (XClusterReplicationType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_types_proto_rawDescGZIP(), []int{14}
}

var File_yb_common_common_types_proto protoreflect.FileDescriptor

var file_yb_common_common_types_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x79, 0x62, 0x2a, 0x53, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x05, 0x2a, 0xcb, 0x01, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a,
	0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0xff, 0x93, 0xeb, 0xdc, 0x03, 0x2a, 0xa2, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x50, 0x45, 0x52, 0x4d, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x44, 0x4f, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52,
	0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x5f, 0x57, 0x48, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0e, 0x2a, 0x6d, 0x0a, 0x0b, 0x59, 0x51,
	0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x51, 0x4c,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x51, 0x4c,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0x04, 0x2a, 0x8a, 0x01, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x51, 0x4c, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x45, 0x44, 0x49, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x02, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x0e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x53, 0x4f, 0x4e,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x12, 0x59, 0x42, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f,
	0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x44, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x08, 0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x59, 0x51, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x51, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x51,
	0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0x03,
	0x2a, 0x6a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x07, 0x2a, 0xd8, 0x02, 0x0a,
	0x12, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x62, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x05, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x07, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x09, 0x2a, 0x4d, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x47, 0x5f, 0x43, 0x52, 0x4f, 0x4e, 0x5f, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x14, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x4f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x72, 0x0a, 0x19,
	0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x59, 0x4e,
	0x41, 0x4d, 0x49, 0x43, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x43, 0x0a, 0x11, 0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x17, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x59, 0x53, 0x51,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x59, 0x53,
	0x51, 0x4c, 0x5f, 0x44, 0x42, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x44, 0x10, 0x02, 0x42, 0x08,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62,
})

var (
	file_yb_common_common_types_proto_rawDescOnce sync.Once
	file_yb_common_common_types_proto_rawDescData []byte
)

func file_yb_common_common_types_proto_rawDescGZIP() []byte {
	file_yb_common_common_types_proto_rawDescOnce.Do(func() {
		file_yb_common_common_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_common_common_types_proto_rawDesc), len(file_yb_common_common_types_proto_rawDesc)))
	})
	return file_yb_common_common_types_proto_rawDescData
}

var file_yb_common_common_types_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_yb_common_common_types_proto_goTypes = []any{
	(ResourceType)(0),              // 0: yb.ResourceType
	(PermissionType)(0),            // 1: yb.PermissionType
	(IndexPermissions)(0),          // 2: yb.IndexPermissions
	(YQLDatabase)(0),               // 3: yb.YQLDatabase
	(TableType)(0),                 // 4: yb.TableType
	(JsonOperatorPB)(0),            // 5: yb.JsonOperatorPB
	(YBConsistencyLevel)(0),        // 6: yb.YBConsistencyLevel
	(QLClient)(0),                  // 7: yb.QLClient
	(PeerRole)(0),                  // 8: yb.PeerRole
	(ReplicationErrorPb)(0),        // 9: yb.ReplicationErrorPb
	(StatefulServiceKind)(0),       // 10: yb.StatefulServiceKind
	(CDCSDKSnapshotOption)(0),      // 11: yb.CDCSDKSnapshotOption
	(CDCSDKDynamicTablesOption)(0), // 12: yb.CDCSDKDynamicTablesOption
	(PgReplicaIdentity)(0),         // 13: yb.PgReplicaIdentity
	(XClusterReplicationType)(0),   // 14: yb.XClusterReplicationType
}
var file_yb_common_common_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_yb_common_common_types_proto_init() }
func file_yb_common_common_types_proto_init() {
	if File_yb_common_common_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_common_common_types_proto_rawDesc), len(file_yb_common_common_types_proto_rawDesc)),
			NumEnums:      15,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_common_common_types_proto_goTypes,
		DependencyIndexes: file_yb_common_common_types_proto_depIdxs,
		EnumInfos:         file_yb_common_common_types_proto_enumTypes,
	}.Build()
	File_yb_common_common_types_proto = out.File
	file_yb_common_common_types_proto_goTypes = nil
	file_yb_common_common_types_proto_depIdxs = nil
}
