// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/common/transaction.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IsolationLevel int32

const (
	IsolationLevel_NON_TRANSACTIONAL      IsolationLevel = 0
	IsolationLevel_SNAPSHOT_ISOLATION     IsolationLevel = 1
	IsolationLevel_SERIALIZABLE_ISOLATION IsolationLevel = 2
	IsolationLevel_READ_COMMITTED         IsolationLevel = 3
)

// Enum value maps for IsolationLevel.
var (
	IsolationLevel_name = map[int32]string{
		0: "NON_TRANSACTIONAL",
		1: "SNAPSHOT_ISOLATION",
		2: "SERIALIZABLE_ISOLATION",
		3: "READ_COMMITTED",
	}
	IsolationLevel_value = map[string]int32{
		"NON_TRANSACTIONAL":      0,
		"SNAPSHOT_ISOLATION":     1,
		"SERIALIZABLE_ISOLATION": 2,
		"READ_COMMITTED":         3,
	}
)

func (x IsolationLevel) Enum() *IsolationLevel {
	p := new(IsolationLevel)
	*p = x
	return p
}

func (x IsolationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_transaction_proto_enumTypes[0].Descriptor()
}

func (IsolationLevel) Type() protoreflect.EnumType {
	return &file_yb_common_transaction_proto_enumTypes[0]
}

func (x IsolationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IsolationLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IsolationLevel(num)
	return nil
}

// Deprecated: Use IsolationLevel.Descriptor instead.
func (IsolationLevel) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{0}
}

type TransactionStatus int32

const (
	TransactionStatus_CREATED                         TransactionStatus = 1
	TransactionStatus_PENDING                         TransactionStatus = 2
	TransactionStatus_COMMITTED                       TransactionStatus = 4
	TransactionStatus_SEALED                          TransactionStatus = 5
	TransactionStatus_APPLIED_IN_ALL_INVOLVED_TABLETS TransactionStatus = 7
	TransactionStatus_ABORTED                         TransactionStatus = 8
	TransactionStatus_PROMOTED                        TransactionStatus = 9
	// The APPLYING and PROMOTING statuses are used in Raft in transaction participant tablets but not
	// in status tablets.
	TransactionStatus_APPLYING  TransactionStatus = 20
	TransactionStatus_PROMOTING TransactionStatus = 24
	// All following entries are not used in RAFT, but as events between status tablet and involved
	// tablets:
	TransactionStatus_APPLIED_IN_ONE_OF_INVOLVED_TABLETS TransactionStatus = 21
	TransactionStatus_IMMEDIATE_CLEANUP                  TransactionStatus = 22
	TransactionStatus_GRACEFUL_CLEANUP                   TransactionStatus = 23
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		1:  "CREATED",
		2:  "PENDING",
		4:  "COMMITTED",
		5:  "SEALED",
		7:  "APPLIED_IN_ALL_INVOLVED_TABLETS",
		8:  "ABORTED",
		9:  "PROMOTED",
		20: "APPLYING",
		24: "PROMOTING",
		21: "APPLIED_IN_ONE_OF_INVOLVED_TABLETS",
		22: "IMMEDIATE_CLEANUP",
		23: "GRACEFUL_CLEANUP",
	}
	TransactionStatus_value = map[string]int32{
		"CREATED":                            1,
		"PENDING":                            2,
		"COMMITTED":                          4,
		"SEALED":                             5,
		"APPLIED_IN_ALL_INVOLVED_TABLETS":    7,
		"ABORTED":                            8,
		"PROMOTED":                           9,
		"APPLYING":                           20,
		"PROMOTING":                          24,
		"APPLIED_IN_ONE_OF_INVOLVED_TABLETS": 21,
		"IMMEDIATE_CLEANUP":                  22,
		"GRACEFUL_CLEANUP":                   23,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_transaction_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_yb_common_transaction_proto_enumTypes[1]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransactionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransactionStatus(num)
	return nil
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{1}
}

type TransactionLocality int32

const (
	TransactionLocality_GLOBAL TransactionLocality = 1
	TransactionLocality_LOCAL  TransactionLocality = 2
)

// Enum value maps for TransactionLocality.
var (
	TransactionLocality_name = map[int32]string{
		1: "GLOBAL",
		2: "LOCAL",
	}
	TransactionLocality_value = map[string]int32{
		"GLOBAL": 1,
		"LOCAL":  2,
	}
)

func (x TransactionLocality) Enum() *TransactionLocality {
	p := new(TransactionLocality)
	*p = x
	return p
}

func (x TransactionLocality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionLocality) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_transaction_proto_enumTypes[2].Descriptor()
}

func (TransactionLocality) Type() protoreflect.EnumType {
	return &file_yb_common_transaction_proto_enumTypes[2]
}

func (x TransactionLocality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransactionLocality) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransactionLocality(num)
	return nil
}

// Deprecated: Use TransactionLocality.Descriptor instead.
func (TransactionLocality) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{2}
}

// This enum matches enum RowMarkType defined in src/include/nodes/plannodes.h.
// The exception is ROW_MARK_ABSENT, which signifies the absence of a row mark.
type RowMarkType int32

const (
	// Obtain exclusive tuple lock.
	RowMarkType_ROW_MARK_EXCLUSIVE RowMarkType = 0
	// Obtain no-key exclusive tuple lock.
	RowMarkType_ROW_MARK_NOKEYEXCLUSIVE RowMarkType = 1
	// Obtain shared tuple lock.
	RowMarkType_ROW_MARK_SHARE RowMarkType = 2
	// Obtain keyshare tuple lock.
	RowMarkType_ROW_MARK_KEYSHARE RowMarkType = 3
	// Not supported. Used for postgres compatibility.
	RowMarkType_ROW_MARK_REFERENCE RowMarkType = 4
	// Not supported. Used for postgres compatibility.
	RowMarkType_ROW_MARK_COPY RowMarkType = 5
	// Obtain no tuple lock (this should never sent be on the wire).  The value
	// should be high for convenient comparisons with the other row lock types.
	RowMarkType_ROW_MARK_ABSENT RowMarkType = 15
)

// Enum value maps for RowMarkType.
var (
	RowMarkType_name = map[int32]string{
		0:  "ROW_MARK_EXCLUSIVE",
		1:  "ROW_MARK_NOKEYEXCLUSIVE",
		2:  "ROW_MARK_SHARE",
		3:  "ROW_MARK_KEYSHARE",
		4:  "ROW_MARK_REFERENCE",
		5:  "ROW_MARK_COPY",
		15: "ROW_MARK_ABSENT",
	}
	RowMarkType_value = map[string]int32{
		"ROW_MARK_EXCLUSIVE":      0,
		"ROW_MARK_NOKEYEXCLUSIVE": 1,
		"ROW_MARK_SHARE":          2,
		"ROW_MARK_KEYSHARE":       3,
		"ROW_MARK_REFERENCE":      4,
		"ROW_MARK_COPY":           5,
		"ROW_MARK_ABSENT":         15,
	}
)

func (x RowMarkType) Enum() *RowMarkType {
	p := new(RowMarkType)
	*p = x
	return p
}

func (x RowMarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowMarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_transaction_proto_enumTypes[3].Descriptor()
}

func (RowMarkType) Type() protoreflect.EnumType {
	return &file_yb_common_transaction_proto_enumTypes[3]
}

func (x RowMarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RowMarkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RowMarkType(num)
	return nil
}

// Deprecated: Use RowMarkType.Descriptor instead.
func (RowMarkType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{3}
}

// This enum matches enum table locks defined in src/include/storage/lockdefs.h.
// Table level lock conflict matrix.
// Source: https://www.postgresql.org/docs/15/explicit-locking.html#LOCKING-TABLES
type TableLockType int32

const (
	// Though NONE is listed as a lock type, it seems to be a flag conveying "don't get a
	// lock". Despite that, if a lock request with NONE type makes it to DocDB, we return
	// an error status.
	TableLockType_NONE                   TableLockType = 0
	TableLockType_ACCESS_SHARE           TableLockType = 1
	TableLockType_ROW_SHARE              TableLockType = 2
	TableLockType_ROW_EXCLUSIVE          TableLockType = 3
	TableLockType_SHARE_UPDATE_EXCLUSIVE TableLockType = 4
	TableLockType_SHARE                  TableLockType = 5
	TableLockType_SHARE_ROW_EXCLUSIVE    TableLockType = 6
	TableLockType_EXCLUSIVE              TableLockType = 7
	TableLockType_ACCESS_EXCLUSIVE       TableLockType = 8
)

// Enum value maps for TableLockType.
var (
	TableLockType_name = map[int32]string{
		0: "NONE",
		1: "ACCESS_SHARE",
		2: "ROW_SHARE",
		3: "ROW_EXCLUSIVE",
		4: "SHARE_UPDATE_EXCLUSIVE",
		5: "SHARE",
		6: "SHARE_ROW_EXCLUSIVE",
		7: "EXCLUSIVE",
		8: "ACCESS_EXCLUSIVE",
	}
	TableLockType_value = map[string]int32{
		"NONE":                   0,
		"ACCESS_SHARE":           1,
		"ROW_SHARE":              2,
		"ROW_EXCLUSIVE":          3,
		"SHARE_UPDATE_EXCLUSIVE": 4,
		"SHARE":                  5,
		"SHARE_ROW_EXCLUSIVE":    6,
		"EXCLUSIVE":              7,
		"ACCESS_EXCLUSIVE":       8,
	}
)

func (x TableLockType) Enum() *TableLockType {
	p := new(TableLockType)
	*p = x
	return p
}

func (x TableLockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableLockType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_transaction_proto_enumTypes[4].Descriptor()
}

func (TableLockType) Type() protoreflect.EnumType {
	return &file_yb_common_transaction_proto_enumTypes[4]
}

func (x TableLockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableLockType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableLockType(num)
	return nil
}

// Deprecated: Use TableLockType.Descriptor instead.
func (TableLockType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{4}
}

type LockMode int32

const (
	LockMode_WEAK_READ    LockMode = 0
	LockMode_WEAK_WRITE   LockMode = 1
	LockMode_STRONG_READ  LockMode = 2
	LockMode_STRONG_WRITE LockMode = 3
)

// Enum value maps for LockMode.
var (
	LockMode_name = map[int32]string{
		0: "WEAK_READ",
		1: "WEAK_WRITE",
		2: "STRONG_READ",
		3: "STRONG_WRITE",
	}
	LockMode_value = map[string]int32{
		"WEAK_READ":    0,
		"WEAK_WRITE":   1,
		"STRONG_READ":  2,
		"STRONG_WRITE": 3,
	}
)

func (x LockMode) Enum() *LockMode {
	p := new(LockMode)
	*p = x
	return p
}

func (x LockMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_transaction_proto_enumTypes[5].Descriptor()
}

func (LockMode) Type() protoreflect.EnumType {
	return &file_yb_common_transaction_proto_enumTypes[5]
}

func (x LockMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LockMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LockMode(num)
	return nil
}

// Deprecated: Use LockMode.Descriptor instead.
func (LockMode) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{5}
}

type SubtxnSetPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is not a simple set representation, but rather the encoded output of a
	// yb::UnsignedIntSet<uint32_t>.
	//
	// An ascending nonoverlapping series of integer ranges [a,b) [c,d) ... (a<=b<c<=d...) are encoded
	// as taking a,b, c,d, ...  then compressing it by storing the set of deltas starting from 0.
	// This gives: a-0, b-a, c-b,c-d, ...
	Set           []uint32 `protobuf:"varint,1,rep,name=set" json:"set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubtxnSetPB) Reset() {
	*x = SubtxnSetPB{}
	mi := &file_yb_common_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubtxnSetPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtxnSetPB) ProtoMessage() {}

func (x *SubtxnSetPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtxnSetPB.ProtoReflect.Descriptor instead.
func (*SubtxnSetPB) Descriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *SubtxnSetPB) GetSet() []uint32 {
	if x != nil {
		return x.Set
	}
	return nil
}

type SubTransactionMetadataPB struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SubtransactionId *uint32                `protobuf:"varint,1,opt,name=subtransaction_id,json=subtransactionId" json:"subtransaction_id,omitempty"`
	Aborted          *SubtxnSetPB           `protobuf:"bytes,2,opt,name=aborted" json:"aborted,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SubTransactionMetadataPB) Reset() {
	*x = SubTransactionMetadataPB{}
	mi := &file_yb_common_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubTransactionMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTransactionMetadataPB) ProtoMessage() {}

func (x *SubTransactionMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTransactionMetadataPB.ProtoReflect.Descriptor instead.
func (*SubTransactionMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *SubTransactionMetadataPB) GetSubtransactionId() uint32 {
	if x != nil && x.SubtransactionId != nil {
		return *x.SubtransactionId
	}
	return 0
}

func (x *SubTransactionMetadataPB) GetAborted() *SubtxnSetPB {
	if x != nil {
		return x.Aborted
	}
	return nil
}

type PostApplyTransactionMetadataPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId []byte                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"` // 16 byte uuid
	ApplyOpId     *OpIdPB                `protobuf:"bytes,2,opt,name=apply_op_id,json=applyOpId" json:"apply_op_id,omitempty"`
	CommitHt      *uint64                `protobuf:"fixed64,3,opt,name=commit_ht,json=commitHt" json:"commit_ht,omitempty"`
	LogHt         *uint64                `protobuf:"fixed64,4,opt,name=log_ht,json=logHt" json:"log_ht,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostApplyTransactionMetadataPB) Reset() {
	*x = PostApplyTransactionMetadataPB{}
	mi := &file_yb_common_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostApplyTransactionMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostApplyTransactionMetadataPB) ProtoMessage() {}

func (x *PostApplyTransactionMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostApplyTransactionMetadataPB.ProtoReflect.Descriptor instead.
func (*PostApplyTransactionMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *PostApplyTransactionMetadataPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *PostApplyTransactionMetadataPB) GetApplyOpId() *OpIdPB {
	if x != nil {
		return x.ApplyOpId
	}
	return nil
}

func (x *PostApplyTransactionMetadataPB) GetCommitHt() uint64 {
	if x != nil && x.CommitHt != nil {
		return *x.CommitHt
	}
	return 0
}

func (x *PostApplyTransactionMetadataPB) GetLogHt() uint64 {
	if x != nil && x.LogHt != nil {
		return *x.LogHt
	}
	return 0
}

type LockInfoPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TODO(pglocks): Omit prefix locks, which are implied to exist if their fully-qualified forms
	// are present.
	HashCols           [][]byte `protobuf:"bytes,1,rep,name=hash_cols,json=hashCols" json:"hash_cols,omitempty"`
	RangeCols          [][]byte `protobuf:"bytes,2,rep,name=range_cols,json=rangeCols" json:"range_cols,omitempty"`
	Attnum             *int32   `protobuf:"varint,3,opt,name=attnum" json:"attnum,omitempty"`
	ColumnId           *uint32  `protobuf:"varint,4,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	MultipleRowsLocked *bool    `protobuf:"varint,5,opt,name=multiple_rows_locked,json=multipleRowsLocked" json:"multiple_rows_locked,omitempty"`
	// If this is set, then the lock has been granted.
	WaitEndHt        *uint64    `protobuf:"fixed64,6,opt,name=wait_end_ht,json=waitEndHt" json:"wait_end_ht,omitempty"`
	SubtransactionId *uint32    `protobuf:"varint,7,opt,name=subtransaction_id,json=subtransactionId" json:"subtransaction_id,omitempty"`
	IsExplicit       *bool      `protobuf:"varint,8,opt,name=is_explicit,json=isExplicit" json:"is_explicit,omitempty"`
	Modes            []LockMode `protobuf:"varint,9,rep,name=modes,enum=yb.LockMode" json:"modes,omitempty"`
	// Populated only when the lock belongs to a colocated table. When set,
	// TabletLockInfoPB::pg_table_id should be ignored.
	PgTableId     []byte `protobuf:"bytes,10,opt,name=pg_table_id,json=pgTableId" json:"pg_table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockInfoPB) Reset() {
	*x = LockInfoPB{}
	mi := &file_yb_common_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockInfoPB) ProtoMessage() {}

func (x *LockInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockInfoPB.ProtoReflect.Descriptor instead.
func (*LockInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *LockInfoPB) GetHashCols() [][]byte {
	if x != nil {
		return x.HashCols
	}
	return nil
}

func (x *LockInfoPB) GetRangeCols() [][]byte {
	if x != nil {
		return x.RangeCols
	}
	return nil
}

func (x *LockInfoPB) GetAttnum() int32 {
	if x != nil && x.Attnum != nil {
		return *x.Attnum
	}
	return 0
}

func (x *LockInfoPB) GetColumnId() uint32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *LockInfoPB) GetMultipleRowsLocked() bool {
	if x != nil && x.MultipleRowsLocked != nil {
		return *x.MultipleRowsLocked
	}
	return false
}

func (x *LockInfoPB) GetWaitEndHt() uint64 {
	if x != nil && x.WaitEndHt != nil {
		return *x.WaitEndHt
	}
	return 0
}

func (x *LockInfoPB) GetSubtransactionId() uint32 {
	if x != nil && x.SubtransactionId != nil {
		return *x.SubtransactionId
	}
	return 0
}

func (x *LockInfoPB) GetIsExplicit() bool {
	if x != nil && x.IsExplicit != nil {
		return *x.IsExplicit
	}
	return false
}

func (x *LockInfoPB) GetModes() []LockMode {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *LockInfoPB) GetPgTableId() []byte {
	if x != nil {
		return x.PgTableId
	}
	return nil
}

type TabletLockInfoPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The TableId containing the PG table OID. Note: This will NOT match the DocDB table's uuid
	// if the table was rewritten.
	PgTableId        []byte                                    `protobuf:"bytes,1,opt,name=pg_table_id,json=pgTableId" json:"pg_table_id,omitempty"`
	TabletId         []byte                                    `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TransactionLocks []*TabletLockInfoPB_TransactionLockInfoPB `protobuf:"bytes,3,rep,name=transaction_locks,json=transactionLocks" json:"transaction_locks,omitempty"`
	// Awaiting lock info of single shard waiters.
	SingleShardWaiters []*TabletLockInfoPB_WaiterInfoPB `protobuf:"bytes,4,rep,name=single_shard_waiters,json=singleShardWaiters" json:"single_shard_waiters,omitempty"`
	// Leader term of the peer populating the response. Used to filter out duplicate responses for
	// the same tablet and ensure we pick the most recent results.
	Term          *uint64 `protobuf:"varint,5,opt,name=term" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TabletLockInfoPB) Reset() {
	*x = TabletLockInfoPB{}
	mi := &file_yb_common_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletLockInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletLockInfoPB) ProtoMessage() {}

func (x *TabletLockInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletLockInfoPB.ProtoReflect.Descriptor instead.
func (*TabletLockInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *TabletLockInfoPB) GetPgTableId() []byte {
	if x != nil {
		return x.PgTableId
	}
	return nil
}

func (x *TabletLockInfoPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletLockInfoPB) GetTransactionLocks() []*TabletLockInfoPB_TransactionLockInfoPB {
	if x != nil {
		return x.TransactionLocks
	}
	return nil
}

func (x *TabletLockInfoPB) GetSingleShardWaiters() []*TabletLockInfoPB_WaiterInfoPB {
	if x != nil {
		return x.SingleShardWaiters
	}
	return nil
}

func (x *TabletLockInfoPB) GetTerm() uint64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

type TabletLockInfoPB_WaiterInfoPB struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Locks                     []*LockInfoPB          `protobuf:"bytes,1,rep,name=locks" json:"locks,omitempty"`
	WaitStartHt               *uint64                `protobuf:"fixed64,2,opt,name=wait_start_ht,json=waitStartHt" json:"wait_start_ht,omitempty"`
	BlockingTxnIds            [][]byte               `protobuf:"bytes,3,rep,name=blocking_txn_ids,json=blockingTxnIds" json:"blocking_txn_ids,omitempty"`
	HasAdditionalWaitingLocks *bool                  `protobuf:"varint,4,opt,name=has_additional_waiting_locks,json=hasAdditionalWaitingLocks" json:"has_additional_waiting_locks,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TabletLockInfoPB_WaiterInfoPB) Reset() {
	*x = TabletLockInfoPB_WaiterInfoPB{}
	mi := &file_yb_common_transaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletLockInfoPB_WaiterInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletLockInfoPB_WaiterInfoPB) ProtoMessage() {}

func (x *TabletLockInfoPB_WaiterInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_transaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletLockInfoPB_WaiterInfoPB.ProtoReflect.Descriptor instead.
func (*TabletLockInfoPB_WaiterInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TabletLockInfoPB_WaiterInfoPB) GetLocks() []*LockInfoPB {
	if x != nil {
		return x.Locks
	}
	return nil
}

func (x *TabletLockInfoPB_WaiterInfoPB) GetWaitStartHt() uint64 {
	if x != nil && x.WaitStartHt != nil {
		return *x.WaitStartHt
	}
	return 0
}

func (x *TabletLockInfoPB_WaiterInfoPB) GetBlockingTxnIds() [][]byte {
	if x != nil {
		return x.BlockingTxnIds
	}
	return nil
}

func (x *TabletLockInfoPB_WaiterInfoPB) GetHasAdditionalWaitingLocks() bool {
	if x != nil && x.HasAdditionalWaitingLocks != nil {
		return *x.HasAdditionalWaitingLocks
	}
	return false
}

// Lock info for a given transaction at this tablet.
type TabletLockInfoPB_TransactionLockInfoPB struct {
	state                     protoimpl.MessageState         `protogen:"open.v1"`
	Id                        []byte                         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	GrantedLocks              []*LockInfoPB                  `protobuf:"bytes,2,rep,name=granted_locks,json=grantedLocks" json:"granted_locks,omitempty"`
	WaitingLocks              *TabletLockInfoPB_WaiterInfoPB `protobuf:"bytes,3,opt,name=waiting_locks,json=waitingLocks" json:"waiting_locks,omitempty"`
	HasAdditionalGrantedLocks *bool                          `protobuf:"varint,4,opt,name=has_additional_granted_locks,json=hasAdditionalGrantedLocks" json:"has_additional_granted_locks,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *TabletLockInfoPB_TransactionLockInfoPB) Reset() {
	*x = TabletLockInfoPB_TransactionLockInfoPB{}
	mi := &file_yb_common_transaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletLockInfoPB_TransactionLockInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletLockInfoPB_TransactionLockInfoPB) ProtoMessage() {}

func (x *TabletLockInfoPB_TransactionLockInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_transaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletLockInfoPB_TransactionLockInfoPB.ProtoReflect.Descriptor instead.
func (*TabletLockInfoPB_TransactionLockInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_common_transaction_proto_rawDescGZIP(), []int{4, 1}
}

func (x *TabletLockInfoPB_TransactionLockInfoPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TabletLockInfoPB_TransactionLockInfoPB) GetGrantedLocks() []*LockInfoPB {
	if x != nil {
		return x.GrantedLocks
	}
	return nil
}

func (x *TabletLockInfoPB_TransactionLockInfoPB) GetWaitingLocks() *TabletLockInfoPB_WaiterInfoPB {
	if x != nil {
		return x.WaitingLocks
	}
	return nil
}

func (x *TabletLockInfoPB_TransactionLockInfoPB) GetHasAdditionalGrantedLocks() bool {
	if x != nil && x.HasAdditionalGrantedLocks != nil {
		return *x.HasAdditionalGrantedLocks
	}
	return false
}

var File_yb_common_transaction_proto protoreflect.FileDescriptor

var file_yb_common_transaction_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x79,
	0x62, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x74, 0x78,
	0x6e, 0x53, 0x65, 0x74, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x72, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x42, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65,
	0x74, 0x50, 0x42, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0xa7, 0x01, 0x0a,
	0x1e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62,
	0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x05, 0x6c, 0x6f, 0x67, 0x48, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x74, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x77,
	0x61, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x67,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xbf, 0x05, 0x0a, 0x10, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12,
	0x1e, 0x0a, 0x0b, 0x70, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x1a, 0xc3,
	0x01, 0x0a, 0x0c, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12,
	0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x05,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x77, 0x61,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x61, 0x73, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x1a, 0xe5, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0c, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x68,
	0x61, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x68, 0x61, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x2a, 0x6f, 0x0a, 0x0e,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x53,
	0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xfa, 0x01,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4c,
	0x56, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x4c,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4c,
	0x56, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x15, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e,
	0x55, 0x50, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x17, 0x2a, 0x2c, 0x0a, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xad, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x77,
	0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x57, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x4b,
	0x45, 0x59, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x57, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x50,
	0x59, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f,
	0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x2a, 0xb2, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x57, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x43,
	0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49,
	0x56, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x45, 0x58, 0x43,
	0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x4c,
	0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x08, 0x2a, 0x4c, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x41,
	0x4b, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x45, 0x41, 0x4b,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x4f,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x52,
	0x4f, 0x4e, 0x47, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03, 0x42, 0x08, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x2e, 0x79, 0x62,
})

var (
	file_yb_common_transaction_proto_rawDescOnce sync.Once
	file_yb_common_transaction_proto_rawDescData []byte
)

func file_yb_common_transaction_proto_rawDescGZIP() []byte {
	file_yb_common_transaction_proto_rawDescOnce.Do(func() {
		file_yb_common_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_common_transaction_proto_rawDesc), len(file_yb_common_transaction_proto_rawDesc)))
	})
	return file_yb_common_transaction_proto_rawDescData
}

var file_yb_common_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_yb_common_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yb_common_transaction_proto_goTypes = []any{
	(IsolationLevel)(0),                            // 0: yb.IsolationLevel
	(TransactionStatus)(0),                         // 1: yb.TransactionStatus
	(TransactionLocality)(0),                       // 2: yb.TransactionLocality
	(RowMarkType)(0),                               // 3: yb.RowMarkType
	(TableLockType)(0),                             // 4: yb.TableLockType
	(LockMode)(0),                                  // 5: yb.LockMode
	(*SubtxnSetPB)(nil),                            // 6: yb.SubtxnSetPB
	(*SubTransactionMetadataPB)(nil),               // 7: yb.SubTransactionMetadataPB
	(*PostApplyTransactionMetadataPB)(nil),         // 8: yb.PostApplyTransactionMetadataPB
	(*LockInfoPB)(nil),                             // 9: yb.LockInfoPB
	(*TabletLockInfoPB)(nil),                       // 10: yb.TabletLockInfoPB
	(*TabletLockInfoPB_WaiterInfoPB)(nil),          // 11: yb.TabletLockInfoPB.WaiterInfoPB
	(*TabletLockInfoPB_TransactionLockInfoPB)(nil), // 12: yb.TabletLockInfoPB.TransactionLockInfoPB
	(*OpIdPB)(nil),                                 // 13: yb.OpIdPB
}
var file_yb_common_transaction_proto_depIdxs = []int32{
	6,  // 0: yb.SubTransactionMetadataPB.aborted:type_name -> yb.SubtxnSetPB
	13, // 1: yb.PostApplyTransactionMetadataPB.apply_op_id:type_name -> yb.OpIdPB
	5,  // 2: yb.LockInfoPB.modes:type_name -> yb.LockMode
	12, // 3: yb.TabletLockInfoPB.transaction_locks:type_name -> yb.TabletLockInfoPB.TransactionLockInfoPB
	11, // 4: yb.TabletLockInfoPB.single_shard_waiters:type_name -> yb.TabletLockInfoPB.WaiterInfoPB
	9,  // 5: yb.TabletLockInfoPB.WaiterInfoPB.locks:type_name -> yb.LockInfoPB
	9,  // 6: yb.TabletLockInfoPB.TransactionLockInfoPB.granted_locks:type_name -> yb.LockInfoPB
	11, // 7: yb.TabletLockInfoPB.TransactionLockInfoPB.waiting_locks:type_name -> yb.TabletLockInfoPB.WaiterInfoPB
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_yb_common_transaction_proto_init() }
func file_yb_common_transaction_proto_init() {
	if File_yb_common_transaction_proto != nil {
		return
	}
	file_yb_common_opid_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_common_transaction_proto_rawDesc), len(file_yb_common_transaction_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_common_transaction_proto_goTypes,
		DependencyIndexes: file_yb_common_transaction_proto_depIdxs,
		EnumInfos:         file_yb_common_transaction_proto_enumTypes,
		MessageInfos:      file_yb_common_transaction_proto_msgTypes,
	}.Build()
	File_yb_common_transaction_proto = out.File
	file_yb_common_transaction_proto_goTypes = nil
	file_yb_common_transaction_proto_depIdxs = nil
}
