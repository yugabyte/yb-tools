// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: yb/common/ql_protocol.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Statement types
type QLWriteRequestPB_QLStmtType int32

const (
	QLWriteRequestPB_QL_STMT_INSERT QLWriteRequestPB_QLStmtType = 1
	QLWriteRequestPB_QL_STMT_UPDATE QLWriteRequestPB_QLStmtType = 2
	QLWriteRequestPB_QL_STMT_DELETE QLWriteRequestPB_QLStmtType = 3
)

// Enum value maps for QLWriteRequestPB_QLStmtType.
var (
	QLWriteRequestPB_QLStmtType_name = map[int32]string{
		1: "QL_STMT_INSERT",
		2: "QL_STMT_UPDATE",
		3: "QL_STMT_DELETE",
	}
	QLWriteRequestPB_QLStmtType_value = map[string]int32{
		"QL_STMT_INSERT": 1,
		"QL_STMT_UPDATE": 2,
		"QL_STMT_DELETE": 3,
	}
)

func (x QLWriteRequestPB_QLStmtType) Enum() *QLWriteRequestPB_QLStmtType {
	p := new(QLWriteRequestPB_QLStmtType)
	*p = x
	return p
}

func (x QLWriteRequestPB_QLStmtType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLWriteRequestPB_QLStmtType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_ql_protocol_proto_enumTypes[0].Descriptor()
}

func (QLWriteRequestPB_QLStmtType) Type() protoreflect.EnumType {
	return &file_yb_common_ql_protocol_proto_enumTypes[0]
}

func (x QLWriteRequestPB_QLStmtType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLWriteRequestPB_QLStmtType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLWriteRequestPB_QLStmtType(num)
	return nil
}

// Deprecated: Use QLWriteRequestPB_QLStmtType.Descriptor instead.
func (QLWriteRequestPB_QLStmtType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{3, 0}
}

// Response status
type QLResponsePB_QLStatus int32

const (
	QLResponsePB_YQL_STATUS_OK                      QLResponsePB_QLStatus = 0
	QLResponsePB_YQL_STATUS_SCHEMA_VERSION_MISMATCH QLResponsePB_QLStatus = 1
	QLResponsePB_YQL_STATUS_RUNTIME_ERROR           QLResponsePB_QLStatus = 2
	QLResponsePB_YQL_STATUS_USAGE_ERROR             QLResponsePB_QLStatus = 3
	QLResponsePB_YQL_STATUS_RESTART_REQUIRED_ERROR  QLResponsePB_QLStatus = 4
	QLResponsePB_YQL_STATUS_QUERY_ERROR             QLResponsePB_QLStatus = 5
)

// Enum value maps for QLResponsePB_QLStatus.
var (
	QLResponsePB_QLStatus_name = map[int32]string{
		0: "YQL_STATUS_OK",
		1: "YQL_STATUS_SCHEMA_VERSION_MISMATCH",
		2: "YQL_STATUS_RUNTIME_ERROR",
		3: "YQL_STATUS_USAGE_ERROR",
		4: "YQL_STATUS_RESTART_REQUIRED_ERROR",
		5: "YQL_STATUS_QUERY_ERROR",
	}
	QLResponsePB_QLStatus_value = map[string]int32{
		"YQL_STATUS_OK":                      0,
		"YQL_STATUS_SCHEMA_VERSION_MISMATCH": 1,
		"YQL_STATUS_RUNTIME_ERROR":           2,
		"YQL_STATUS_USAGE_ERROR":             3,
		"YQL_STATUS_RESTART_REQUIRED_ERROR":  4,
		"YQL_STATUS_QUERY_ERROR":             5,
	}
)

func (x QLResponsePB_QLStatus) Enum() *QLResponsePB_QLStatus {
	p := new(QLResponsePB_QLStatus)
	*p = x
	return p
}

func (x QLResponsePB_QLStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLResponsePB_QLStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_ql_protocol_proto_enumTypes[1].Descriptor()
}

func (QLResponsePB_QLStatus) Type() protoreflect.EnumType {
	return &file_yb_common_ql_protocol_proto_enumTypes[1]
}

func (x QLResponsePB_QLStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLResponsePB_QLStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLResponsePB_QLStatus(num)
	return nil
}

// Deprecated: Use QLResponsePB_QLStatus.Descriptor instead.
func (QLResponsePB_QLStatus) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{7, 0}
}

// A column value, optionally with subscripts, e.g. m['x'] or l[2]['x']
type QLColumnValuePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId      *int32               `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	SubscriptArgs []*QLExpressionPB    `protobuf:"bytes,3,rep,name=subscript_args,json=subscriptArgs" json:"subscript_args,omitempty"`
	JsonArgs      []*QLJsonOperationPB `protobuf:"bytes,4,rep,name=json_args,json=jsonArgs" json:"json_args,omitempty"`
	Expr          *QLExpressionPB      `protobuf:"bytes,2,opt,name=expr" json:"expr,omitempty"`
}

func (x *QLColumnValuePB) Reset() {
	*x = QLColumnValuePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLColumnValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLColumnValuePB) ProtoMessage() {}

func (x *QLColumnValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLColumnValuePB.ProtoReflect.Descriptor instead.
func (*QLColumnValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *QLColumnValuePB) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *QLColumnValuePB) GetSubscriptArgs() []*QLExpressionPB {
	if x != nil {
		return x.SubscriptArgs
	}
	return nil
}

func (x *QLColumnValuePB) GetJsonArgs() []*QLJsonOperationPB {
	if x != nil {
		return x.JsonArgs
	}
	return nil
}

func (x *QLColumnValuePB) GetExpr() *QLExpressionPB {
	if x != nil {
		return x.Expr
	}
	return nil
}

// Paging state for continuing a read request.
//
// For a SELECT statement that returns many rows, the client may specify how many rows to return at
// most in each fetch. This paging state maintains the state for returning the next set of rows of
// the statement. This paging state is opaque to the client.
//
// When there should be more rows to return from the same tablet in the next fetch, "next_row_key"
// is populated in DocDB (QLReadOperation) with the DocKey of the next row to read. We also embed a
// hybrid-time which is the clean snapshot time for read consistency. We also populate the
// "next_partition_key" for the next row, which is the hash code of the hash portion of the DocKey.
// This next partition key is needed by YBClient (Batcher) to locate the tablet to send the request
// to and it doesn't have access to the DocDB function to decode and extract from the DocKey.
//
// When we are done returning rows from the current tablet and the next fetch should continue in
// the next tablet (possible only for full-table query across tablets), "next_partition_key" is
// populated by the current tablet with its exclusive partition-end key, which is the start key of
// next tablet's partition. "next_row_key" is empty in this case which means we will start from the
// very beginning of the next tablet. (TODO: we need to return the clean snapshot time in this case
// also).
type QLPagingStatePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table UUID to verify the same table still exists when continuing in the next fetch.
	TableId []byte `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Partition key to find the tablet server of the next row to read.
	NextPartitionKey []byte `protobuf:"bytes,2,opt,name=next_partition_key,json=nextPartitionKey" json:"next_partition_key,omitempty"`
	// The row key (SubDocKey = [DocKey + HybridTimestamp]) of the next row to read.
	NextRowKey []byte `protobuf:"bytes,3,opt,name=next_row_key,json=nextRowKey" json:"next_row_key,omitempty"`
	// Running total number of rows read across fetches so far. Needed to ensure we read up to the
	// number of rows in the SELECT's LIMIT clause across fetches.
	TotalNumRowsRead *uint64 `protobuf:"varint,4,opt,name=total_num_rows_read,json=totalNumRowsRead" json:"total_num_rows_read,omitempty"`
	// For selects with IN condition on the hash columns there are multiple partitions that need to be
	// queried, one for each combination of allowed values for the hash columns.
	// This holds the index of the next partition and is used to resume the read from the right place.
	NextPartitionIndex *uint64 `protobuf:"varint,5,opt,name=next_partition_index,json=nextPartitionIndex" json:"next_partition_index,omitempty"`
	// The number of valid rows that we've skipped so far. This is needed to properly implement
	// SELECT's OFFSET clause.
	TotalRowsSkipped *uint64 `protobuf:"varint,6,opt,name=total_rows_skipped,json=totalRowsSkipped" json:"total_rows_skipped,omitempty"`
	// Request id of the first request, that started paging.
	OriginalRequestId *uint64 `protobuf:"varint,7,opt,name=original_request_id,json=originalRequestId" json:"original_request_id,omitempty"`
	// Used read time.
	ReadTime *ReadHybridTimePB `protobuf:"bytes,8,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
}

func (x *QLPagingStatePB) Reset() {
	*x = QLPagingStatePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLPagingStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLPagingStatePB) ProtoMessage() {}

func (x *QLPagingStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLPagingStatePB.ProtoReflect.Descriptor instead.
func (*QLPagingStatePB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *QLPagingStatePB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *QLPagingStatePB) GetNextPartitionKey() []byte {
	if x != nil {
		return x.NextPartitionKey
	}
	return nil
}

func (x *QLPagingStatePB) GetNextRowKey() []byte {
	if x != nil {
		return x.NextRowKey
	}
	return nil
}

func (x *QLPagingStatePB) GetTotalNumRowsRead() uint64 {
	if x != nil && x.TotalNumRowsRead != nil {
		return *x.TotalNumRowsRead
	}
	return 0
}

func (x *QLPagingStatePB) GetNextPartitionIndex() uint64 {
	if x != nil && x.NextPartitionIndex != nil {
		return *x.NextPartitionIndex
	}
	return 0
}

func (x *QLPagingStatePB) GetTotalRowsSkipped() uint64 {
	if x != nil && x.TotalRowsSkipped != nil {
		return *x.TotalRowsSkipped
	}
	return 0
}

func (x *QLPagingStatePB) GetOriginalRequestId() uint64 {
	if x != nil && x.OriginalRequestId != nil {
		return *x.OriginalRequestId
	}
	return 0
}

func (x *QLPagingStatePB) GetReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

// These columns must be read by DocDB before a read or write request can be executed.
type QLReferencedColumnsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []int32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	StaticIds []int32 `protobuf:"varint,2,rep,name=static_ids,json=staticIds" json:"static_ids,omitempty"`
}

func (x *QLReferencedColumnsPB) Reset() {
	*x = QLReferencedColumnsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLReferencedColumnsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLReferencedColumnsPB) ProtoMessage() {}

func (x *QLReferencedColumnsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLReferencedColumnsPB.ProtoReflect.Descriptor instead.
func (*QLReferencedColumnsPB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *QLReferencedColumnsPB) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QLReferencedColumnsPB) GetStaticIds() []int32 {
	if x != nil {
		return x.StaticIds
	}
	return nil
}

type QLWriteRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statement type
	Type *QLWriteRequestPB_QLStmtType `protobuf:"varint,1,opt,name=type,enum=yb.QLWriteRequestPB_QLStmtType" json:"type,omitempty"` // required
	// Client info
	Client    *QLClient `protobuf:"varint,2,opt,name=client,enum=yb.QLClient" json:"client,omitempty"`       // required
	RequestId *uint64   `protobuf:"varint,3,opt,name=request_id,json=requestId" json:"request_id,omitempty"` // client request id - for debug tracing purpose only
	// Table schema version
	SchemaVersion *uint32 `protobuf:"varint,4,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"` // required
	// Primary key of the row to insert/update/delete - all fields required. The hashed and
	// range column values must be in the same order as the column order in the table schema.
	//
	// Note: the hash_code is the hash of the hashed_column_values. Technically, this can be
	// recomputed by tserver also, but since the client already calculates this to look up the
	// correct tablet server, it is passed in.
	HashCode           *uint32           `protobuf:"varint,5,opt,name=hash_code,json=hashCode" json:"hash_code,omitempty"`
	HashedColumnValues []*QLExpressionPB `protobuf:"bytes,6,rep,name=hashed_column_values,json=hashedColumnValues" json:"hashed_column_values,omitempty"`
	RangeColumnValues  []*QLExpressionPB `protobuf:"bytes,7,rep,name=range_column_values,json=rangeColumnValues" json:"range_column_values,omitempty"`
	// Column values to insert/update/delete - required
	// Note: DELETE statement has no column value.
	ColumnValues []*QLColumnValuePB `protobuf:"bytes,8,rep,name=column_values,json=columnValues" json:"column_values,omitempty"`
	// Where clause condition -- currently this is only allowed for deletes.
	WhereExpr *QLExpressionPB `protobuf:"bytes,14,opt,name=where_expr,json=whereExpr" json:"where_expr,omitempty"`
	// If clause condition
	IfExpr *QLExpressionPB `protobuf:"bytes,9,opt,name=if_expr,json=ifExpr" json:"if_expr,omitempty"`
	// Else error clause
	ElseError *bool `protobuf:"varint,17,opt,name=else_error,json=elseError,def=0" json:"else_error,omitempty"`
	// Time to live in milliseconds.
	Ttl *uint64 `protobuf:"varint,10,opt,name=ttl" json:"ttl,omitempty"`
	// Listing of all columns that this write operation is referencing. TServers will need to read
	// these columns when processing the write request.
	ColumnRefs *QLReferencedColumnsPB `protobuf:"bytes,11,opt,name=column_refs,json=columnRefs" json:"column_refs,omitempty"`
	// Id used to track different queries.
	QueryId *int64 `protobuf:"varint,12,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// User-provided timestamp in microseconds.
	UserTimestampUsec *uint64 `protobuf:"varint,13,opt,name=user_timestamp_usec,json=userTimestampUsec" json:"user_timestamp_usec,omitempty"`
	// Ids of indexes that need update.
	UpdateIndexIds [][]byte `protobuf:"bytes,15,rep,name=update_index_ids,json=updateIndexIds" json:"update_index_ids,omitempty"`
	// Child transaction data for additional write requests necessary for index updates, etc.
	ChildTransactionData *ChildTransactionDataPB `protobuf:"bytes,16,opt,name=child_transaction_data,json=childTransactionData" json:"child_transaction_data,omitempty"`
	// Whether to return a status row reporting applied status and execution errors (if any).
	ReturnsStatus *bool `protobuf:"varint,18,opt,name=returns_status,json=returnsStatus,def=0" json:"returns_status,omitempty"`
	// Does this request correspond to backfilling an index table?
	IsBackfill                      *bool `protobuf:"varint,19,opt,name=is_backfill,json=isBackfill,def=0" json:"is_backfill,omitempty"`
	IsCompatibleWithPreviousVersion *bool `protobuf:"varint,20,opt,name=is_compatible_with_previous_version,json=isCompatibleWithPreviousVersion,def=0" json:"is_compatible_with_previous_version,omitempty"`
}

// Default values for QLWriteRequestPB fields.
const (
	Default_QLWriteRequestPB_ElseError                       = bool(false)
	Default_QLWriteRequestPB_ReturnsStatus                   = bool(false)
	Default_QLWriteRequestPB_IsBackfill                      = bool(false)
	Default_QLWriteRequestPB_IsCompatibleWithPreviousVersion = bool(false)
)

func (x *QLWriteRequestPB) Reset() {
	*x = QLWriteRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLWriteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLWriteRequestPB) ProtoMessage() {}

func (x *QLWriteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLWriteRequestPB.ProtoReflect.Descriptor instead.
func (*QLWriteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *QLWriteRequestPB) GetType() QLWriteRequestPB_QLStmtType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return QLWriteRequestPB_QL_STMT_INSERT
}

func (x *QLWriteRequestPB) GetClient() QLClient {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return QLClient_YQL_CLIENT_CQL
}

func (x *QLWriteRequestPB) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *QLWriteRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *QLWriteRequestPB) GetHashCode() uint32 {
	if x != nil && x.HashCode != nil {
		return *x.HashCode
	}
	return 0
}

func (x *QLWriteRequestPB) GetHashedColumnValues() []*QLExpressionPB {
	if x != nil {
		return x.HashedColumnValues
	}
	return nil
}

func (x *QLWriteRequestPB) GetRangeColumnValues() []*QLExpressionPB {
	if x != nil {
		return x.RangeColumnValues
	}
	return nil
}

func (x *QLWriteRequestPB) GetColumnValues() []*QLColumnValuePB {
	if x != nil {
		return x.ColumnValues
	}
	return nil
}

func (x *QLWriteRequestPB) GetWhereExpr() *QLExpressionPB {
	if x != nil {
		return x.WhereExpr
	}
	return nil
}

func (x *QLWriteRequestPB) GetIfExpr() *QLExpressionPB {
	if x != nil {
		return x.IfExpr
	}
	return nil
}

func (x *QLWriteRequestPB) GetElseError() bool {
	if x != nil && x.ElseError != nil {
		return *x.ElseError
	}
	return Default_QLWriteRequestPB_ElseError
}

func (x *QLWriteRequestPB) GetTtl() uint64 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *QLWriteRequestPB) GetColumnRefs() *QLReferencedColumnsPB {
	if x != nil {
		return x.ColumnRefs
	}
	return nil
}

func (x *QLWriteRequestPB) GetQueryId() int64 {
	if x != nil && x.QueryId != nil {
		return *x.QueryId
	}
	return 0
}

func (x *QLWriteRequestPB) GetUserTimestampUsec() uint64 {
	if x != nil && x.UserTimestampUsec != nil {
		return *x.UserTimestampUsec
	}
	return 0
}

func (x *QLWriteRequestPB) GetUpdateIndexIds() [][]byte {
	if x != nil {
		return x.UpdateIndexIds
	}
	return nil
}

func (x *QLWriteRequestPB) GetChildTransactionData() *ChildTransactionDataPB {
	if x != nil {
		return x.ChildTransactionData
	}
	return nil
}

func (x *QLWriteRequestPB) GetReturnsStatus() bool {
	if x != nil && x.ReturnsStatus != nil {
		return *x.ReturnsStatus
	}
	return Default_QLWriteRequestPB_ReturnsStatus
}

func (x *QLWriteRequestPB) GetIsBackfill() bool {
	if x != nil && x.IsBackfill != nil {
		return *x.IsBackfill
	}
	return Default_QLWriteRequestPB_IsBackfill
}

func (x *QLWriteRequestPB) GetIsCompatibleWithPreviousVersion() bool {
	if x != nil && x.IsCompatibleWithPreviousVersion != nil {
		return *x.IsCompatibleWithPreviousVersion
	}
	return Default_QLWriteRequestPB_IsCompatibleWithPreviousVersion
}

// QLRSColDesc is the descriptor of a SELECT'ed column in a ResultSet, which can be any expression
// and not just table columns.
type QLRSColDescPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QlType *QLTypePB `protobuf:"bytes,2,opt,name=ql_type,json=qlType" json:"ql_type,omitempty"`
}

func (x *QLRSColDescPB) Reset() {
	*x = QLRSColDescPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLRSColDescPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLRSColDescPB) ProtoMessage() {}

func (x *QLRSColDescPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLRSColDescPB.ProtoReflect.Descriptor instead.
func (*QLRSColDescPB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *QLRSColDescPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QLRSColDescPB) GetQlType() *QLTypePB {
	if x != nil {
		return x.QlType
	}
	return nil
}

// Descriptor of a row in a resultset.
type QLRSRowDescPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RscolDescs []*QLRSColDescPB `protobuf:"bytes,1,rep,name=rscol_descs,json=rscolDescs" json:"rscol_descs,omitempty"`
}

func (x *QLRSRowDescPB) Reset() {
	*x = QLRSRowDescPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLRSRowDescPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLRSRowDescPB) ProtoMessage() {}

func (x *QLRSRowDescPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLRSRowDescPB.ProtoReflect.Descriptor instead.
func (*QLRSRowDescPB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *QLRSRowDescPB) GetRscolDescs() []*QLRSColDescPB {
	if x != nil {
		return x.RscolDescs
	}
	return nil
}

// TODO(neil) The protocol for select needs to be changed accordingly when we introduce and cache
// execution plan in tablet server.
type QLReadRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client info
	Client    *QLClient `protobuf:"varint,1,opt,name=client,enum=yb.QLClient" json:"client,omitempty"`       // required
	RequestId *uint64   `protobuf:"varint,2,opt,name=request_id,json=requestId" json:"request_id,omitempty"` // client request id - for debug tracing purpose only
	// Table schema version
	SchemaVersion *uint32 `protobuf:"varint,3,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"` // required
	// Hashed key of row(s) to read - all fields required. The hashed column values must be in the
	// same order as the column order in the table schema. If only a subset of hash columns are
	// specified in the WHERE clause of the SELECT statement, "hashed_column_values" will be empty
	// and we will do a full-table query across tablets.
	HashCode           *uint32           `protobuf:"varint,4,opt,name=hash_code,json=hashCode" json:"hash_code,omitempty"`
	HashedColumnValues []*QLExpressionPB `protobuf:"bytes,5,rep,name=hashed_column_values,json=hashedColumnValues" json:"hashed_column_values,omitempty"`
	IsForwardScan      *bool             `protobuf:"varint,18,opt,name=is_forward_scan,json=isForwardScan,def=1" json:"is_forward_scan,omitempty"`
	// Where clause condition
	WhereExpr *QLExpressionPB `protobuf:"bytes,6,opt,name=where_expr,json=whereExpr" json:"where_expr,omitempty"`
	// If clause condition
	IfExpr *QLExpressionPB `protobuf:"bytes,21,opt,name=if_expr,json=ifExpr" json:"if_expr,omitempty"`
	// TODO(neil) Currently, we need only the datatypes of the rsrow descriptor. However, when we
	// optimize our execution pipeline to bypass QL layer, we might need to send the name as part
	// of the prepared protobuf so that server know how to form result set without the help from QL.
	//
	// For now, we sent rsrow descriptor from proxy to tablet server for every request. RSRow is just
	// a selected row. We call it rsrow to distinguish a selected row from a row of a table in the
	// database in our coding.
	RsrowDesc     *QLRSRowDescPB    `protobuf:"bytes,17,opt,name=rsrow_desc,json=rsrowDesc" json:"rsrow_desc,omitempty"`            // required.
	SelectedExprs []*QLExpressionPB `protobuf:"bytes,7,rep,name=selected_exprs,json=selectedExprs" json:"selected_exprs,omitempty"` // required.
	// Reading distinct columns?
	Distinct *bool `protobuf:"varint,12,opt,name=distinct,def=0" json:"distinct,omitempty"`
	// Limit number of rows to return. For QL SELECT, this limit is the smaller of the page size (max
	// (max number of rows to return per fetch) & the LIMIT clause if present in the SELECT statement.
	Limit *uint64 `protobuf:"varint,8,opt,name=limit" json:"limit,omitempty"`
	// The offset from which we should start returning rows. This is primarily used to support the
	// QL OFFSET clause.
	Offset *uint64 `protobuf:"varint,9,opt,name=offset" json:"offset,omitempty"`
	// Paging state retrieved from the last response.
	PagingState *QLPagingStatePB `protobuf:"bytes,10,opt,name=paging_state,json=pagingState" json:"paging_state,omitempty"`
	// Return paging state when "limit" number of rows are returned? In case when "limit" is the
	// page size, this is set for QLResponsePB to return the paging state for the next fetch.
	ReturnPagingState *bool `protobuf:"varint,11,opt,name=return_paging_state,json=returnPagingState,def=0" json:"return_paging_state,omitempty"`
	// The remote endpoint sending this request. This is filled in by the server and should not be
	// set.
	RemoteEndpoint *HostPortPB `protobuf:"bytes,13,opt,name=remote_endpoint,json=remoteEndpoint" json:"remote_endpoint,omitempty"`
	// If this request comes from proxy, it should be filled with UUID of this proxy.
	ProxyUuid *string `protobuf:"bytes,20,opt,name=proxy_uuid,json=proxyUuid" json:"proxy_uuid,omitempty"`
	// the upper limit for partition (hash) key scan ranges (inclusive)
	MaxHashCode *uint32 `protobuf:"varint,14,opt,name=max_hash_code,json=maxHashCode" json:"max_hash_code,omitempty"`
	// Listing of all columns that this operation is referencing. TServers will need to read these
	// columns when processing this read request.
	ColumnRefs *QLReferencedColumnsPB `protobuf:"bytes,15,opt,name=column_refs,json=columnRefs" json:"column_refs,omitempty"`
	// Id used to track different queries.
	QueryId *int64 `protobuf:"varint,16,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	// Flag for reading aggregate values.
	IsAggregate                     *bool `protobuf:"varint,19,opt,name=is_aggregate,json=isAggregate,def=0" json:"is_aggregate,omitempty"`
	IsCompatibleWithPreviousVersion *bool `protobuf:"varint,22,opt,name=is_compatible_with_previous_version,json=isCompatibleWithPreviousVersion,def=0" json:"is_compatible_with_previous_version,omitempty"`
}

// Default values for QLReadRequestPB fields.
const (
	Default_QLReadRequestPB_IsForwardScan                   = bool(true)
	Default_QLReadRequestPB_Distinct                        = bool(false)
	Default_QLReadRequestPB_ReturnPagingState               = bool(false)
	Default_QLReadRequestPB_IsAggregate                     = bool(false)
	Default_QLReadRequestPB_IsCompatibleWithPreviousVersion = bool(false)
)

func (x *QLReadRequestPB) Reset() {
	*x = QLReadRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLReadRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLReadRequestPB) ProtoMessage() {}

func (x *QLReadRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLReadRequestPB.ProtoReflect.Descriptor instead.
func (*QLReadRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *QLReadRequestPB) GetClient() QLClient {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return QLClient_YQL_CLIENT_CQL
}

func (x *QLReadRequestPB) GetRequestId() uint64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *QLReadRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *QLReadRequestPB) GetHashCode() uint32 {
	if x != nil && x.HashCode != nil {
		return *x.HashCode
	}
	return 0
}

func (x *QLReadRequestPB) GetHashedColumnValues() []*QLExpressionPB {
	if x != nil {
		return x.HashedColumnValues
	}
	return nil
}

func (x *QLReadRequestPB) GetIsForwardScan() bool {
	if x != nil && x.IsForwardScan != nil {
		return *x.IsForwardScan
	}
	return Default_QLReadRequestPB_IsForwardScan
}

func (x *QLReadRequestPB) GetWhereExpr() *QLExpressionPB {
	if x != nil {
		return x.WhereExpr
	}
	return nil
}

func (x *QLReadRequestPB) GetIfExpr() *QLExpressionPB {
	if x != nil {
		return x.IfExpr
	}
	return nil
}

func (x *QLReadRequestPB) GetRsrowDesc() *QLRSRowDescPB {
	if x != nil {
		return x.RsrowDesc
	}
	return nil
}

func (x *QLReadRequestPB) GetSelectedExprs() []*QLExpressionPB {
	if x != nil {
		return x.SelectedExprs
	}
	return nil
}

func (x *QLReadRequestPB) GetDistinct() bool {
	if x != nil && x.Distinct != nil {
		return *x.Distinct
	}
	return Default_QLReadRequestPB_Distinct
}

func (x *QLReadRequestPB) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *QLReadRequestPB) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *QLReadRequestPB) GetPagingState() *QLPagingStatePB {
	if x != nil {
		return x.PagingState
	}
	return nil
}

func (x *QLReadRequestPB) GetReturnPagingState() bool {
	if x != nil && x.ReturnPagingState != nil {
		return *x.ReturnPagingState
	}
	return Default_QLReadRequestPB_ReturnPagingState
}

func (x *QLReadRequestPB) GetRemoteEndpoint() *HostPortPB {
	if x != nil {
		return x.RemoteEndpoint
	}
	return nil
}

func (x *QLReadRequestPB) GetProxyUuid() string {
	if x != nil && x.ProxyUuid != nil {
		return *x.ProxyUuid
	}
	return ""
}

func (x *QLReadRequestPB) GetMaxHashCode() uint32 {
	if x != nil && x.MaxHashCode != nil {
		return *x.MaxHashCode
	}
	return 0
}

func (x *QLReadRequestPB) GetColumnRefs() *QLReferencedColumnsPB {
	if x != nil {
		return x.ColumnRefs
	}
	return nil
}

func (x *QLReadRequestPB) GetQueryId() int64 {
	if x != nil && x.QueryId != nil {
		return *x.QueryId
	}
	return 0
}

func (x *QLReadRequestPB) GetIsAggregate() bool {
	if x != nil && x.IsAggregate != nil {
		return *x.IsAggregate
	}
	return Default_QLReadRequestPB_IsAggregate
}

func (x *QLReadRequestPB) GetIsCompatibleWithPreviousVersion() bool {
	if x != nil && x.IsCompatibleWithPreviousVersion != nil {
		return *x.IsCompatibleWithPreviousVersion
	}
	return Default_QLReadRequestPB_IsCompatibleWithPreviousVersion
}

type QLResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status and error message
	Status       *QLResponsePB_QLStatus `protobuf:"varint,1,opt,name=status,enum=yb.QLResponsePB_QLStatus,def=0" json:"status,omitempty"` // required
	ErrorMessage *string                `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Schema of the rows returned if present (used by conditional DML (write) request only
	// as of Jan 2017).
	ColumnSchemas []*ColumnSchemaPB `protobuf:"bytes,3,rep,name=column_schemas,json=columnSchemas" json:"column_schemas,omitempty"`
	// Sidecar of rows data returned
	RowsDataSidecar *int32 `protobuf:"varint,4,opt,name=rows_data_sidecar,json=rowsDataSidecar" json:"rows_data_sidecar,omitempty"`
	// Paging state for continuing the read in the next QLReadRequestPB fetch.
	PagingState *QLPagingStatePB `protobuf:"bytes,5,opt,name=paging_state,json=pagingState" json:"paging_state,omitempty"`
	// Result of child transaction.
	ChildTransactionResult *ChildTransactionResultPB `protobuf:"bytes,6,opt,name=child_transaction_result,json=childTransactionResult" json:"child_transaction_result,omitempty"`
	// For conditional DML: indicate if the DML is applied or not according to the conditions.
	Applied *bool `protobuf:"varint,7,opt,name=applied" json:"applied,omitempty"`
}

// Default values for QLResponsePB fields.
const (
	Default_QLResponsePB_Status = QLResponsePB_YQL_STATUS_OK
)

func (x *QLResponsePB) Reset() {
	*x = QLResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_ql_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLResponsePB) ProtoMessage() {}

func (x *QLResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_ql_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLResponsePB.ProtoReflect.Descriptor instead.
func (*QLResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_common_ql_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *QLResponsePB) GetStatus() QLResponsePB_QLStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Default_QLResponsePB_Status
}

func (x *QLResponsePB) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *QLResponsePB) GetColumnSchemas() []*ColumnSchemaPB {
	if x != nil {
		return x.ColumnSchemas
	}
	return nil
}

func (x *QLResponsePB) GetRowsDataSidecar() int32 {
	if x != nil && x.RowsDataSidecar != nil {
		return *x.RowsDataSidecar
	}
	return 0
}

func (x *QLResponsePB) GetPagingState() *QLPagingStatePB {
	if x != nil {
		return x.PagingState
	}
	return nil
}

func (x *QLResponsePB) GetChildTransactionResult() *ChildTransactionResultPB {
	if x != nil {
		return x.ChildTransactionResult
	}
	return nil
}

func (x *QLResponsePB) GetApplied() bool {
	if x != nil && x.Applied != nil {
		return *x.Applied
	}
	return false
}

var File_yb_common_ql_protocol_proto protoreflect.FileDescriptor

var file_yb_common_ql_protocol_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x79,
	0x62, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x51, 0x4c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52,
	0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x22, 0xee, 0x02, 0x0a, 0x0f, 0x51, 0x4c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x77, 0x4b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x51, 0x4c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x64, 0x73, 0x22, 0xa4, 0x08, 0x0a,
	0x10, 0x51, 0x4c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x51, 0x4c, 0x53, 0x74, 0x6d, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x44, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x42, 0x52, 0x12, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x06, 0x69, 0x66, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x24, 0x0a, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09,
	0x65, 0x6c, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x3a, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x73,
	0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x16,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79,
	0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c,
	0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x23, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0a, 0x51, 0x4c, 0x53,
	0x74, 0x6d, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x4c, 0x5f, 0x53, 0x54,
	0x4d, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x51,
	0x4c, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x22, 0x4a, 0x0a, 0x0d, 0x51, 0x4c, 0x52, 0x53, 0x43, 0x6f, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x71, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x06, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x43, 0x0a, 0x0d, 0x51, 0x4c, 0x52, 0x53, 0x52, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x50, 0x42,
	0x12, 0x32, 0x0a, 0x0b, 0x72, 0x73, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x53, 0x43,
	0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x50, 0x42, 0x52, 0x0a, 0x72, 0x73, 0x63, 0x6f, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x73, 0x22, 0xed, 0x07, 0x0a, 0x0f, 0x51, 0x4c, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x44, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x52, 0x12, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x06, 0x69,
	0x66, 0x45, 0x78, 0x70, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x73, 0x72, 0x6f, 0x77, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x52, 0x53, 0x52, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x50, 0x42, 0x52, 0x09, 0x72, 0x73,
	0x72, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x0b,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x53, 0x0a, 0x23, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x1f, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x04, 0x0a, 0x0c, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x51, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x0d, 0x59, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x77, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x6f, 0x77, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x0b,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x79, 0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x42, 0x52, 0x16, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0xc2, 0x01,
	0x0a, 0x08, 0x51, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x59, 0x51,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x26, 0x0a,
	0x22, 0x59, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x59, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x25, 0x0a, 0x21, 0x59, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x59, 0x51, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62,
}

var (
	file_yb_common_ql_protocol_proto_rawDescOnce sync.Once
	file_yb_common_ql_protocol_proto_rawDescData = file_yb_common_ql_protocol_proto_rawDesc
)

func file_yb_common_ql_protocol_proto_rawDescGZIP() []byte {
	file_yb_common_ql_protocol_proto_rawDescOnce.Do(func() {
		file_yb_common_ql_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_common_ql_protocol_proto_rawDescData)
	})
	return file_yb_common_ql_protocol_proto_rawDescData
}

var file_yb_common_ql_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yb_common_ql_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yb_common_ql_protocol_proto_goTypes = []interface{}{
	(QLWriteRequestPB_QLStmtType)(0), // 0: yb.QLWriteRequestPB.QLStmtType
	(QLResponsePB_QLStatus)(0),       // 1: yb.QLResponsePB.QLStatus
	(*QLColumnValuePB)(nil),          // 2: yb.QLColumnValuePB
	(*QLPagingStatePB)(nil),          // 3: yb.QLPagingStatePB
	(*QLReferencedColumnsPB)(nil),    // 4: yb.QLReferencedColumnsPB
	(*QLWriteRequestPB)(nil),         // 5: yb.QLWriteRequestPB
	(*QLRSColDescPB)(nil),            // 6: yb.QLRSColDescPB
	(*QLRSRowDescPB)(nil),            // 7: yb.QLRSRowDescPB
	(*QLReadRequestPB)(nil),          // 8: yb.QLReadRequestPB
	(*QLResponsePB)(nil),             // 9: yb.QLResponsePB
	(*QLExpressionPB)(nil),           // 10: yb.QLExpressionPB
	(*QLJsonOperationPB)(nil),        // 11: yb.QLJsonOperationPB
	(*ReadHybridTimePB)(nil),         // 12: yb.ReadHybridTimePB
	(QLClient)(0),                    // 13: yb.QLClient
	(*ChildTransactionDataPB)(nil),   // 14: yb.ChildTransactionDataPB
	(*QLTypePB)(nil),                 // 15: yb.QLTypePB
	(*HostPortPB)(nil),               // 16: yb.HostPortPB
	(*ColumnSchemaPB)(nil),           // 17: yb.ColumnSchemaPB
	(*ChildTransactionResultPB)(nil), // 18: yb.ChildTransactionResultPB
}
var file_yb_common_ql_protocol_proto_depIdxs = []int32{
	10, // 0: yb.QLColumnValuePB.subscript_args:type_name -> yb.QLExpressionPB
	11, // 1: yb.QLColumnValuePB.json_args:type_name -> yb.QLJsonOperationPB
	10, // 2: yb.QLColumnValuePB.expr:type_name -> yb.QLExpressionPB
	12, // 3: yb.QLPagingStatePB.read_time:type_name -> yb.ReadHybridTimePB
	0,  // 4: yb.QLWriteRequestPB.type:type_name -> yb.QLWriteRequestPB.QLStmtType
	13, // 5: yb.QLWriteRequestPB.client:type_name -> yb.QLClient
	10, // 6: yb.QLWriteRequestPB.hashed_column_values:type_name -> yb.QLExpressionPB
	10, // 7: yb.QLWriteRequestPB.range_column_values:type_name -> yb.QLExpressionPB
	2,  // 8: yb.QLWriteRequestPB.column_values:type_name -> yb.QLColumnValuePB
	10, // 9: yb.QLWriteRequestPB.where_expr:type_name -> yb.QLExpressionPB
	10, // 10: yb.QLWriteRequestPB.if_expr:type_name -> yb.QLExpressionPB
	4,  // 11: yb.QLWriteRequestPB.column_refs:type_name -> yb.QLReferencedColumnsPB
	14, // 12: yb.QLWriteRequestPB.child_transaction_data:type_name -> yb.ChildTransactionDataPB
	15, // 13: yb.QLRSColDescPB.ql_type:type_name -> yb.QLTypePB
	6,  // 14: yb.QLRSRowDescPB.rscol_descs:type_name -> yb.QLRSColDescPB
	13, // 15: yb.QLReadRequestPB.client:type_name -> yb.QLClient
	10, // 16: yb.QLReadRequestPB.hashed_column_values:type_name -> yb.QLExpressionPB
	10, // 17: yb.QLReadRequestPB.where_expr:type_name -> yb.QLExpressionPB
	10, // 18: yb.QLReadRequestPB.if_expr:type_name -> yb.QLExpressionPB
	7,  // 19: yb.QLReadRequestPB.rsrow_desc:type_name -> yb.QLRSRowDescPB
	10, // 20: yb.QLReadRequestPB.selected_exprs:type_name -> yb.QLExpressionPB
	3,  // 21: yb.QLReadRequestPB.paging_state:type_name -> yb.QLPagingStatePB
	16, // 22: yb.QLReadRequestPB.remote_endpoint:type_name -> yb.HostPortPB
	4,  // 23: yb.QLReadRequestPB.column_refs:type_name -> yb.QLReferencedColumnsPB
	1,  // 24: yb.QLResponsePB.status:type_name -> yb.QLResponsePB.QLStatus
	17, // 25: yb.QLResponsePB.column_schemas:type_name -> yb.ColumnSchemaPB
	3,  // 26: yb.QLResponsePB.paging_state:type_name -> yb.QLPagingStatePB
	18, // 27: yb.QLResponsePB.child_transaction_result:type_name -> yb.ChildTransactionResultPB
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_yb_common_ql_protocol_proto_init() }
func file_yb_common_ql_protocol_proto_init() {
	if File_yb_common_ql_protocol_proto != nil {
		return
	}
	file_yb_common_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_common_ql_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLColumnValuePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_ql_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLPagingStatePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_ql_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLReferencedColumnsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_ql_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLWriteRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_ql_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLRSColDescPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_ql_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLRSRowDescPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_ql_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLReadRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_ql_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_common_ql_protocol_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_common_ql_protocol_proto_goTypes,
		DependencyIndexes: file_yb_common_ql_protocol_proto_depIdxs,
		EnumInfos:         file_yb_common_ql_protocol_proto_enumTypes,
		MessageInfos:      file_yb_common_ql_protocol_proto_msgTypes,
	}.Build()
	File_yb_common_ql_protocol_proto = out.File
	file_yb_common_ql_protocol_proto_rawDesc = nil
	file_yb_common_ql_protocol_proto_goTypes = nil
	file_yb_common_ql_protocol_proto_depIdxs = nil
}
