// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/common/redis_protocol.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RedisDataType int32

const (
	RedisDataType_REDIS_TYPE_NONE       RedisDataType = 1
	RedisDataType_REDIS_TYPE_STRING     RedisDataType = 2
	RedisDataType_REDIS_TYPE_LIST       RedisDataType = 3
	RedisDataType_REDIS_TYPE_SET        RedisDataType = 4
	RedisDataType_REDIS_TYPE_HASH       RedisDataType = 5
	RedisDataType_REDIS_TYPE_SORTEDSET  RedisDataType = 6
	RedisDataType_REDIS_TYPE_TIMESERIES RedisDataType = 7
)

// Enum value maps for RedisDataType.
var (
	RedisDataType_name = map[int32]string{
		1: "REDIS_TYPE_NONE",
		2: "REDIS_TYPE_STRING",
		3: "REDIS_TYPE_LIST",
		4: "REDIS_TYPE_SET",
		5: "REDIS_TYPE_HASH",
		6: "REDIS_TYPE_SORTEDSET",
		7: "REDIS_TYPE_TIMESERIES",
	}
	RedisDataType_value = map[string]int32{
		"REDIS_TYPE_NONE":       1,
		"REDIS_TYPE_STRING":     2,
		"REDIS_TYPE_LIST":       3,
		"REDIS_TYPE_SET":        4,
		"REDIS_TYPE_HASH":       5,
		"REDIS_TYPE_SORTEDSET":  6,
		"REDIS_TYPE_TIMESERIES": 7,
	}
)

func (x RedisDataType) Enum() *RedisDataType {
	p := new(RedisDataType)
	*p = x
	return p
}

func (x RedisDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[0].Descriptor()
}

func (RedisDataType) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[0]
}

func (x RedisDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisDataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisDataType(num)
	return nil
}

// Deprecated: Use RedisDataType.Descriptor instead.
func (RedisDataType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{0}
}

// This enum is used to specify the side of a list (For LPOP or RPOP etc.).
type RedisSide int32

const (
	RedisSide_REDIS_SIDE_LEFT  RedisSide = 1
	RedisSide_REDIS_SIDE_RIGHT RedisSide = 2
)

// Enum value maps for RedisSide.
var (
	RedisSide_name = map[int32]string{
		1: "REDIS_SIDE_LEFT",
		2: "REDIS_SIDE_RIGHT",
	}
	RedisSide_value = map[string]int32{
		"REDIS_SIDE_LEFT":  1,
		"REDIS_SIDE_RIGHT": 2,
	}
)

func (x RedisSide) Enum() *RedisSide {
	p := new(RedisSide)
	*p = x
	return p
}

func (x RedisSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisSide) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[1].Descriptor()
}

func (RedisSide) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[1]
}

func (x RedisSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisSide) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisSide(num)
	return nil
}

// Deprecated: Use RedisSide.Descriptor instead.
func (RedisSide) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{1}
}

// This enum is used to specify the insertion position (Insert after or before index).
type RedisOrder int32

const (
	RedisOrder_REDIS_ORDER_BEFORE RedisOrder = 1
	RedisOrder_REDIS_ORDER_AFTER  RedisOrder = 2
)

// Enum value maps for RedisOrder.
var (
	RedisOrder_name = map[int32]string{
		1: "REDIS_ORDER_BEFORE",
		2: "REDIS_ORDER_AFTER",
	}
	RedisOrder_value = map[string]int32{
		"REDIS_ORDER_BEFORE": 1,
		"REDIS_ORDER_AFTER":  2,
	}
)

func (x RedisOrder) Enum() *RedisOrder {
	p := new(RedisOrder)
	*p = x
	return p
}

func (x RedisOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[2].Descriptor()
}

func (RedisOrder) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[2]
}

func (x RedisOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisOrder) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisOrder(num)
	return nil
}

// Deprecated: Use RedisOrder.Descriptor instead.
func (RedisOrder) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{2}
}

type RedisWriteMode int32

const (
	RedisWriteMode_REDIS_WRITEMODE_UPSERT RedisWriteMode = 1
	RedisWriteMode_REDIS_WRITEMODE_INSERT RedisWriteMode = 2
	RedisWriteMode_REDIS_WRITEMODE_UPDATE RedisWriteMode = 3
)

// Enum value maps for RedisWriteMode.
var (
	RedisWriteMode_name = map[int32]string{
		1: "REDIS_WRITEMODE_UPSERT",
		2: "REDIS_WRITEMODE_INSERT",
		3: "REDIS_WRITEMODE_UPDATE",
	}
	RedisWriteMode_value = map[string]int32{
		"REDIS_WRITEMODE_UPSERT": 1,
		"REDIS_WRITEMODE_INSERT": 2,
		"REDIS_WRITEMODE_UPDATE": 3,
	}
)

func (x RedisWriteMode) Enum() *RedisWriteMode {
	p := new(RedisWriteMode)
	*p = x
	return p
}

func (x RedisWriteMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisWriteMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[3].Descriptor()
}

func (RedisWriteMode) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[3]
}

func (x RedisWriteMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisWriteMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisWriteMode(num)
	return nil
}

// Deprecated: Use RedisWriteMode.Descriptor instead.
func (RedisWriteMode) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{3}
}

type RedisSubKeyBoundPB_InfinityType int32

const (
	RedisSubKeyBoundPB_POSITIVE RedisSubKeyBoundPB_InfinityType = 1
	RedisSubKeyBoundPB_NEGATIVE RedisSubKeyBoundPB_InfinityType = 2
)

// Enum value maps for RedisSubKeyBoundPB_InfinityType.
var (
	RedisSubKeyBoundPB_InfinityType_name = map[int32]string{
		1: "POSITIVE",
		2: "NEGATIVE",
	}
	RedisSubKeyBoundPB_InfinityType_value = map[string]int32{
		"POSITIVE": 1,
		"NEGATIVE": 2,
	}
)

func (x RedisSubKeyBoundPB_InfinityType) Enum() *RedisSubKeyBoundPB_InfinityType {
	p := new(RedisSubKeyBoundPB_InfinityType)
	*p = x
	return p
}

func (x RedisSubKeyBoundPB_InfinityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisSubKeyBoundPB_InfinityType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[4].Descriptor()
}

func (RedisSubKeyBoundPB_InfinityType) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[4]
}

func (x RedisSubKeyBoundPB_InfinityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisSubKeyBoundPB_InfinityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisSubKeyBoundPB_InfinityType(num)
	return nil
}

// Deprecated: Use RedisSubKeyBoundPB_InfinityType.Descriptor instead.
func (RedisSubKeyBoundPB_InfinityType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{5, 0}
}

type SortedSetOptionsPB_UpdateOptions int32

const (
	SortedSetOptionsPB_NX   SortedSetOptionsPB_UpdateOptions = 1
	SortedSetOptionsPB_XX   SortedSetOptionsPB_UpdateOptions = 2
	SortedSetOptionsPB_NONE SortedSetOptionsPB_UpdateOptions = 3
)

// Enum value maps for SortedSetOptionsPB_UpdateOptions.
var (
	SortedSetOptionsPB_UpdateOptions_name = map[int32]string{
		1: "NX",
		2: "XX",
		3: "NONE",
	}
	SortedSetOptionsPB_UpdateOptions_value = map[string]int32{
		"NX":   1,
		"XX":   2,
		"NONE": 3,
	}
)

func (x SortedSetOptionsPB_UpdateOptions) Enum() *SortedSetOptionsPB_UpdateOptions {
	p := new(SortedSetOptionsPB_UpdateOptions)
	*p = x
	return p
}

func (x SortedSetOptionsPB_UpdateOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortedSetOptionsPB_UpdateOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[5].Descriptor()
}

func (SortedSetOptionsPB_UpdateOptions) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[5]
}

func (x SortedSetOptionsPB_UpdateOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SortedSetOptionsPB_UpdateOptions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SortedSetOptionsPB_UpdateOptions(num)
	return nil
}

// Deprecated: Use SortedSetOptionsPB_UpdateOptions.Descriptor instead.
func (SortedSetOptionsPB_UpdateOptions) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{8, 0}
}

type RedisGetRequestPB_GetRequestType int32

const (
	RedisGetRequestPB_GET       RedisGetRequestPB_GetRequestType = 1
	RedisGetRequestPB_MGET      RedisGetRequestPB_GetRequestType = 3
	RedisGetRequestPB_HGET      RedisGetRequestPB_GetRequestType = 2
	RedisGetRequestPB_HMGET     RedisGetRequestPB_GetRequestType = 4
	RedisGetRequestPB_HGETALL   RedisGetRequestPB_GetRequestType = 5
	RedisGetRequestPB_HKEYS     RedisGetRequestPB_GetRequestType = 7
	RedisGetRequestPB_HVALS     RedisGetRequestPB_GetRequestType = 8
	RedisGetRequestPB_HLEN      RedisGetRequestPB_GetRequestType = 9
	RedisGetRequestPB_HEXISTS   RedisGetRequestPB_GetRequestType = 10
	RedisGetRequestPB_HSTRLEN   RedisGetRequestPB_GetRequestType = 11
	RedisGetRequestPB_SMEMBERS  RedisGetRequestPB_GetRequestType = 6
	RedisGetRequestPB_SISMEMBER RedisGetRequestPB_GetRequestType = 12
	RedisGetRequestPB_SCARD     RedisGetRequestPB_GetRequestType = 13
	RedisGetRequestPB_ZCARD     RedisGetRequestPB_GetRequestType = 15
	RedisGetRequestPB_TSGET     RedisGetRequestPB_GetRequestType = 14
	RedisGetRequestPB_TSCARD    RedisGetRequestPB_GetRequestType = 16
	RedisGetRequestPB_ZSCORE    RedisGetRequestPB_GetRequestType = 17
	RedisGetRequestPB_LLEN      RedisGetRequestPB_GetRequestType = 18
	RedisGetRequestPB_UNKNOWN   RedisGetRequestPB_GetRequestType = 99
)

// Enum value maps for RedisGetRequestPB_GetRequestType.
var (
	RedisGetRequestPB_GetRequestType_name = map[int32]string{
		1:  "GET",
		3:  "MGET",
		2:  "HGET",
		4:  "HMGET",
		5:  "HGETALL",
		7:  "HKEYS",
		8:  "HVALS",
		9:  "HLEN",
		10: "HEXISTS",
		11: "HSTRLEN",
		6:  "SMEMBERS",
		12: "SISMEMBER",
		13: "SCARD",
		15: "ZCARD",
		14: "TSGET",
		16: "TSCARD",
		17: "ZSCORE",
		18: "LLEN",
		99: "UNKNOWN",
	}
	RedisGetRequestPB_GetRequestType_value = map[string]int32{
		"GET":       1,
		"MGET":      3,
		"HGET":      2,
		"HMGET":     4,
		"HGETALL":   5,
		"HKEYS":     7,
		"HVALS":     8,
		"HLEN":      9,
		"HEXISTS":   10,
		"HSTRLEN":   11,
		"SMEMBERS":  6,
		"SISMEMBER": 12,
		"SCARD":     13,
		"ZCARD":     15,
		"TSGET":     14,
		"TSCARD":    16,
		"ZSCORE":    17,
		"LLEN":      18,
		"UNKNOWN":   99,
	}
)

func (x RedisGetRequestPB_GetRequestType) Enum() *RedisGetRequestPB_GetRequestType {
	p := new(RedisGetRequestPB_GetRequestType)
	*p = x
	return p
}

func (x RedisGetRequestPB_GetRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisGetRequestPB_GetRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[6].Descriptor()
}

func (RedisGetRequestPB_GetRequestType) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[6]
}

func (x RedisGetRequestPB_GetRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisGetRequestPB_GetRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisGetRequestPB_GetRequestType(num)
	return nil
}

// Deprecated: Use RedisGetRequestPB_GetRequestType.Descriptor instead.
func (RedisGetRequestPB_GetRequestType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{10, 0}
}

type RedisCollectionGetRangeRequestPB_GetRangeRequestType int32

const (
	RedisCollectionGetRangeRequestPB_TSRANGEBYTIME    RedisCollectionGetRangeRequestPB_GetRangeRequestType = 1
	RedisCollectionGetRangeRequestPB_ZRANGEBYSCORE    RedisCollectionGetRangeRequestPB_GetRangeRequestType = 2
	RedisCollectionGetRangeRequestPB_ZREVRANGE        RedisCollectionGetRangeRequestPB_GetRangeRequestType = 3
	RedisCollectionGetRangeRequestPB_ZRANGE           RedisCollectionGetRangeRequestPB_GetRangeRequestType = 4
	RedisCollectionGetRangeRequestPB_TSREVRANGEBYTIME RedisCollectionGetRangeRequestPB_GetRangeRequestType = 5
	RedisCollectionGetRangeRequestPB_UNKNOWN          RedisCollectionGetRangeRequestPB_GetRangeRequestType = 99
)

// Enum value maps for RedisCollectionGetRangeRequestPB_GetRangeRequestType.
var (
	RedisCollectionGetRangeRequestPB_GetRangeRequestType_name = map[int32]string{
		1:  "TSRANGEBYTIME",
		2:  "ZRANGEBYSCORE",
		3:  "ZREVRANGE",
		4:  "ZRANGE",
		5:  "TSREVRANGEBYTIME",
		99: "UNKNOWN",
	}
	RedisCollectionGetRangeRequestPB_GetRangeRequestType_value = map[string]int32{
		"TSRANGEBYTIME":    1,
		"ZRANGEBYSCORE":    2,
		"ZREVRANGE":        3,
		"ZRANGE":           4,
		"TSREVRANGEBYTIME": 5,
		"UNKNOWN":          99,
	}
)

func (x RedisCollectionGetRangeRequestPB_GetRangeRequestType) Enum() *RedisCollectionGetRangeRequestPB_GetRangeRequestType {
	p := new(RedisCollectionGetRangeRequestPB_GetRangeRequestType)
	*p = x
	return p
}

func (x RedisCollectionGetRangeRequestPB_GetRangeRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisCollectionGetRangeRequestPB_GetRangeRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[7].Descriptor()
}

func (RedisCollectionGetRangeRequestPB_GetRangeRequestType) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[7]
}

func (x RedisCollectionGetRangeRequestPB_GetRangeRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisCollectionGetRangeRequestPB_GetRangeRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisCollectionGetRangeRequestPB_GetRangeRequestType(num)
	return nil
}

// Deprecated: Use RedisCollectionGetRangeRequestPB_GetRangeRequestType.Descriptor instead.
func (RedisCollectionGetRangeRequestPB_GetRangeRequestType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{11, 0}
}

type RedisResponsePB_RedisStatusCode int32

const (
	RedisResponsePB_OK RedisResponsePB_RedisStatusCode = 1
	// Nil is when value is not found, but isn't an error case, eg. GET key when key has no value.
	RedisResponsePB_NIL RedisResponsePB_RedisStatusCode = 2
	// Not found is an error when an existing value is needed for the command, eg. RENAME.
	RedisResponsePB_NOT_FOUND       RedisResponsePB_RedisStatusCode = 5
	RedisResponsePB_UNKNOWN_COMMAND RedisResponsePB_RedisStatusCode = 3
	RedisResponsePB_WRONG_TYPE      RedisResponsePB_RedisStatusCode = 4
	// This code is set in the client to mark commands for which no response was received.
	// This happens when the batch RPC fails somewhere and the individual requests don't
	// get processed.
	RedisResponsePB_SERVER_ERROR        RedisResponsePB_RedisStatusCode = 6
	RedisResponsePB_INDEX_OUT_OF_BOUNDS RedisResponsePB_RedisStatusCode = 7
	RedisResponsePB_PARSING_ERROR       RedisResponsePB_RedisStatusCode = 8
)

// Enum value maps for RedisResponsePB_RedisStatusCode.
var (
	RedisResponsePB_RedisStatusCode_name = map[int32]string{
		1: "OK",
		2: "NIL",
		5: "NOT_FOUND",
		3: "UNKNOWN_COMMAND",
		4: "WRONG_TYPE",
		6: "SERVER_ERROR",
		7: "INDEX_OUT_OF_BOUNDS",
		8: "PARSING_ERROR",
	}
	RedisResponsePB_RedisStatusCode_value = map[string]int32{
		"OK":                  1,
		"NIL":                 2,
		"NOT_FOUND":           5,
		"UNKNOWN_COMMAND":     3,
		"WRONG_TYPE":          4,
		"SERVER_ERROR":        6,
		"INDEX_OUT_OF_BOUNDS": 7,
		"PARSING_ERROR":       8,
	}
)

func (x RedisResponsePB_RedisStatusCode) Enum() *RedisResponsePB_RedisStatusCode {
	p := new(RedisResponsePB_RedisStatusCode)
	*p = x
	return p
}

func (x RedisResponsePB_RedisStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisResponsePB_RedisStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_redis_protocol_proto_enumTypes[8].Descriptor()
}

func (RedisResponsePB_RedisStatusCode) Type() protoreflect.EnumType {
	return &file_yb_common_redis_protocol_proto_enumTypes[8]
}

func (x RedisResponsePB_RedisStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RedisResponsePB_RedisStatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RedisResponsePB_RedisStatusCode(num)
	return nil
}

// Deprecated: Use RedisResponsePB_RedisStatusCode.Descriptor instead.
func (RedisResponsePB_RedisStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{29, 0}
}

// A single Redis request. Some user commands like MGET should be split into multiple of these.
type RedisWriteRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*RedisWriteRequestPB_SetRequest
	//	*RedisWriteRequestPB_GetsetRequest
	//	*RedisWriteRequestPB_AppendRequest
	//	*RedisWriteRequestPB_DelRequest
	//	*RedisWriteRequestPB_SetRangeRequest
	//	*RedisWriteRequestPB_IncrRequest
	//	*RedisWriteRequestPB_PushRequest
	//	*RedisWriteRequestPB_InsertRequest
	//	*RedisWriteRequestPB_PopRequest
	//	*RedisWriteRequestPB_AddRequest
	//	*RedisWriteRequestPB_SetTtlRequest
	//	*RedisWriteRequestPB_NoOpRequest
	Request       isRedisWriteRequestPB_Request `protobuf_oneof:"request"`
	KeyValue      *RedisKeyValuePB              `protobuf:"bytes,13,opt,name=key_value,json=keyValue" json:"key_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisWriteRequestPB) Reset() {
	*x = RedisWriteRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisWriteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisWriteRequestPB) ProtoMessage() {}

func (x *RedisWriteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisWriteRequestPB.ProtoReflect.Descriptor instead.
func (*RedisWriteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *RedisWriteRequestPB) GetRequest() isRedisWriteRequestPB_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RedisWriteRequestPB) GetSetRequest() *RedisSetRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_SetRequest); ok {
			return x.SetRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetGetsetRequest() *RedisGetSetRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_GetsetRequest); ok {
			return x.GetsetRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetAppendRequest() *RedisAppendRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_AppendRequest); ok {
			return x.AppendRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetDelRequest() *RedisDelRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_DelRequest); ok {
			return x.DelRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetSetRangeRequest() *RedisSetRangeRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_SetRangeRequest); ok {
			return x.SetRangeRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetIncrRequest() *RedisIncrRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_IncrRequest); ok {
			return x.IncrRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetPushRequest() *RedisPushRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_PushRequest); ok {
			return x.PushRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetInsertRequest() *RedisInsertRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_InsertRequest); ok {
			return x.InsertRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetPopRequest() *RedisPopRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_PopRequest); ok {
			return x.PopRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetAddRequest() *RedisAddRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_AddRequest); ok {
			return x.AddRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetSetTtlRequest() *RedisSetTtlRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_SetTtlRequest); ok {
			return x.SetTtlRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetNoOpRequest() *RedisNoOpRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisWriteRequestPB_NoOpRequest); ok {
			return x.NoOpRequest
		}
	}
	return nil
}

func (x *RedisWriteRequestPB) GetKeyValue() *RedisKeyValuePB {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

type isRedisWriteRequestPB_Request interface {
	isRedisWriteRequestPB_Request()
}

type RedisWriteRequestPB_SetRequest struct {
	// Only one of the following fields should be set.
	SetRequest *RedisSetRequestPB `protobuf:"bytes,2,opt,name=set_request,json=setRequest,oneof"`
}

type RedisWriteRequestPB_GetsetRequest struct {
	GetsetRequest *RedisGetSetRequestPB `protobuf:"bytes,3,opt,name=getset_request,json=getsetRequest,oneof"`
}

type RedisWriteRequestPB_AppendRequest struct {
	AppendRequest *RedisAppendRequestPB `protobuf:"bytes,4,opt,name=append_request,json=appendRequest,oneof"`
}

type RedisWriteRequestPB_DelRequest struct {
	DelRequest *RedisDelRequestPB `protobuf:"bytes,5,opt,name=del_request,json=delRequest,oneof"`
}

type RedisWriteRequestPB_SetRangeRequest struct {
	SetRangeRequest *RedisSetRangeRequestPB `protobuf:"bytes,6,opt,name=set_range_request,json=setRangeRequest,oneof"`
}

type RedisWriteRequestPB_IncrRequest struct {
	IncrRequest *RedisIncrRequestPB `protobuf:"bytes,7,opt,name=incr_request,json=incrRequest,oneof"`
}

type RedisWriteRequestPB_PushRequest struct {
	PushRequest *RedisPushRequestPB `protobuf:"bytes,8,opt,name=push_request,json=pushRequest,oneof"`
}

type RedisWriteRequestPB_InsertRequest struct {
	InsertRequest *RedisInsertRequestPB `protobuf:"bytes,9,opt,name=insert_request,json=insertRequest,oneof"`
}

type RedisWriteRequestPB_PopRequest struct {
	PopRequest *RedisPopRequestPB `protobuf:"bytes,10,opt,name=pop_request,json=popRequest,oneof"`
}

type RedisWriteRequestPB_AddRequest struct {
	AddRequest *RedisAddRequestPB `protobuf:"bytes,11,opt,name=add_request,json=addRequest,oneof"`
}

type RedisWriteRequestPB_SetTtlRequest struct {
	SetTtlRequest *RedisSetTtlRequestPB `protobuf:"bytes,12,opt,name=set_ttl_request,json=setTtlRequest,oneof"`
}

type RedisWriteRequestPB_NoOpRequest struct {
	NoOpRequest *RedisNoOpRequestPB `protobuf:"bytes,14,opt,name=no_op_request,json=noOpRequest,oneof"`
}

func (*RedisWriteRequestPB_SetRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_GetsetRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_AppendRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_DelRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_SetRangeRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_IncrRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_PushRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_InsertRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_PopRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_AddRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_SetTtlRequest) isRedisWriteRequestPB_Request() {}

func (*RedisWriteRequestPB_NoOpRequest) isRedisWriteRequestPB_Request() {}

type RedisReadRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*RedisReadRequestPB_GetRequest
	//	*RedisReadRequestPB_StrlenRequest
	//	*RedisReadRequestPB_ExistsRequest
	//	*RedisReadRequestPB_GetRangeRequest
	//	*RedisReadRequestPB_GetCollectionRangeRequest
	//	*RedisReadRequestPB_GetTtlRequest
	//	*RedisReadRequestPB_KeysRequest
	//	*RedisReadRequestPB_GetForRenameRequest
	Request     isRedisReadRequestPB_Request `protobuf_oneof:"request"`
	KeyValue    *RedisKeyValuePB             `protobuf:"bytes,6,opt,name=key_value,json=keyValue" json:"key_value,omitempty"`
	SubkeyRange *RedisSubKeyRangePB          `protobuf:"bytes,7,opt,name=subkey_range,json=subkeyRange" json:"subkey_range,omitempty"`
	IndexRange  *RedisIndexRangePB           `protobuf:"bytes,8,opt,name=index_range,json=indexRange" json:"index_range,omitempty"`
	// The maximum number of entries to retrieve for a range request.
	RangeRequestLimit *int32 `protobuf:"varint,10,opt,name=range_request_limit,json=rangeRequestLimit,def=0" json:"range_request_limit,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for RedisReadRequestPB fields.
const (
	Default_RedisReadRequestPB_RangeRequestLimit = int32(0)
)

func (x *RedisReadRequestPB) Reset() {
	*x = RedisReadRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisReadRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisReadRequestPB) ProtoMessage() {}

func (x *RedisReadRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisReadRequestPB.ProtoReflect.Descriptor instead.
func (*RedisReadRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *RedisReadRequestPB) GetRequest() isRedisReadRequestPB_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RedisReadRequestPB) GetGetRequest() *RedisGetRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_GetRequest); ok {
			return x.GetRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetStrlenRequest() *RedisStrLenRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_StrlenRequest); ok {
			return x.StrlenRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetExistsRequest() *RedisExistsRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_ExistsRequest); ok {
			return x.ExistsRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetGetRangeRequest() *RedisGetRangeRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_GetRangeRequest); ok {
			return x.GetRangeRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetGetCollectionRangeRequest() *RedisCollectionGetRangeRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_GetCollectionRangeRequest); ok {
			return x.GetCollectionRangeRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetGetTtlRequest() *RedisGetTtlRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_GetTtlRequest); ok {
			return x.GetTtlRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetKeysRequest() *RedisKeysRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_KeysRequest); ok {
			return x.KeysRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetGetForRenameRequest() *RedisGetForRenameRequestPB {
	if x != nil {
		if x, ok := x.Request.(*RedisReadRequestPB_GetForRenameRequest); ok {
			return x.GetForRenameRequest
		}
	}
	return nil
}

func (x *RedisReadRequestPB) GetKeyValue() *RedisKeyValuePB {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *RedisReadRequestPB) GetSubkeyRange() *RedisSubKeyRangePB {
	if x != nil {
		return x.SubkeyRange
	}
	return nil
}

func (x *RedisReadRequestPB) GetIndexRange() *RedisIndexRangePB {
	if x != nil {
		return x.IndexRange
	}
	return nil
}

func (x *RedisReadRequestPB) GetRangeRequestLimit() int32 {
	if x != nil && x.RangeRequestLimit != nil {
		return *x.RangeRequestLimit
	}
	return Default_RedisReadRequestPB_RangeRequestLimit
}

type isRedisReadRequestPB_Request interface {
	isRedisReadRequestPB_Request()
}

type RedisReadRequestPB_GetRequest struct {
	GetRequest *RedisGetRequestPB `protobuf:"bytes,2,opt,name=get_request,json=getRequest,oneof"`
}

type RedisReadRequestPB_StrlenRequest struct {
	StrlenRequest *RedisStrLenRequestPB `protobuf:"bytes,3,opt,name=strlen_request,json=strlenRequest,oneof"`
}

type RedisReadRequestPB_ExistsRequest struct {
	ExistsRequest *RedisExistsRequestPB `protobuf:"bytes,4,opt,name=exists_request,json=existsRequest,oneof"`
}

type RedisReadRequestPB_GetRangeRequest struct {
	GetRangeRequest *RedisGetRangeRequestPB `protobuf:"bytes,5,opt,name=get_range_request,json=getRangeRequest,oneof"`
}

type RedisReadRequestPB_GetCollectionRangeRequest struct {
	GetCollectionRangeRequest *RedisCollectionGetRangeRequestPB `protobuf:"bytes,9,opt,name=get_collection_range_request,json=getCollectionRangeRequest,oneof"`
}

type RedisReadRequestPB_GetTtlRequest struct {
	GetTtlRequest *RedisGetTtlRequestPB `protobuf:"bytes,11,opt,name=get_ttl_request,json=getTtlRequest,oneof"`
}

type RedisReadRequestPB_KeysRequest struct {
	KeysRequest *RedisKeysRequestPB `protobuf:"bytes,12,opt,name=keys_request,json=keysRequest,oneof"`
}

type RedisReadRequestPB_GetForRenameRequest struct {
	GetForRenameRequest *RedisGetForRenameRequestPB `protobuf:"bytes,13,opt,name=get_for_rename_request,json=getForRenameRequest,oneof"`
}

func (*RedisReadRequestPB_GetRequest) isRedisReadRequestPB_Request() {}

func (*RedisReadRequestPB_StrlenRequest) isRedisReadRequestPB_Request() {}

func (*RedisReadRequestPB_ExistsRequest) isRedisReadRequestPB_Request() {}

func (*RedisReadRequestPB_GetRangeRequest) isRedisReadRequestPB_Request() {}

func (*RedisReadRequestPB_GetCollectionRangeRequest) isRedisReadRequestPB_Request() {}

func (*RedisReadRequestPB_GetTtlRequest) isRedisReadRequestPB_Request() {}

func (*RedisReadRequestPB_KeysRequest) isRedisReadRequestPB_Request() {}

func (*RedisReadRequestPB_GetForRenameRequest) isRedisReadRequestPB_Request() {}

type RedisSubKeyRangePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LowerBound    *RedisSubKeyBoundPB    `protobuf:"bytes,1,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	UpperBound    *RedisSubKeyBoundPB    `protobuf:"bytes,2,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisSubKeyRangePB) Reset() {
	*x = RedisSubKeyRangePB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisSubKeyRangePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisSubKeyRangePB) ProtoMessage() {}

func (x *RedisSubKeyRangePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisSubKeyRangePB.ProtoReflect.Descriptor instead.
func (*RedisSubKeyRangePB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *RedisSubKeyRangePB) GetLowerBound() *RedisSubKeyBoundPB {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *RedisSubKeyRangePB) GetUpperBound() *RedisSubKeyBoundPB {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type RedisIndexRangePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LowerBound    *RedisIndexBoundPB     `protobuf:"bytes,1,opt,name=lower_bound,json=lowerBound" json:"lower_bound,omitempty"`
	UpperBound    *RedisIndexBoundPB     `protobuf:"bytes,2,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisIndexRangePB) Reset() {
	*x = RedisIndexRangePB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisIndexRangePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisIndexRangePB) ProtoMessage() {}

func (x *RedisIndexRangePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisIndexRangePB.ProtoReflect.Descriptor instead.
func (*RedisIndexRangePB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *RedisIndexRangePB) GetLowerBound() *RedisIndexBoundPB {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *RedisIndexRangePB) GetUpperBound() *RedisIndexBoundPB {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type RedisIndexBoundPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         *int64                 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisIndexBoundPB) Reset() {
	*x = RedisIndexBoundPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisIndexBoundPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisIndexBoundPB) ProtoMessage() {}

func (x *RedisIndexBoundPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisIndexBoundPB.ProtoReflect.Descriptor instead.
func (*RedisIndexBoundPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *RedisIndexBoundPB) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

// Wrapper for a subkey which denotes an upper/lower bound for a range request.
type RedisSubKeyBoundPB struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	SubkeyBound   *RedisKeyValueSubKeyPB           `protobuf:"bytes,3,opt,name=subkey_bound,json=subkeyBound" json:"subkey_bound,omitempty"`
	InfinityType  *RedisSubKeyBoundPB_InfinityType `protobuf:"varint,4,opt,name=infinity_type,json=infinityType,enum=yb.RedisSubKeyBoundPB_InfinityType" json:"infinity_type,omitempty"`
	IsExclusive   *bool                            `protobuf:"varint,6,opt,name=is_exclusive,json=isExclusive,def=0" json:"is_exclusive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisSubKeyBoundPB fields.
const (
	Default_RedisSubKeyBoundPB_IsExclusive = bool(false)
)

func (x *RedisSubKeyBoundPB) Reset() {
	*x = RedisSubKeyBoundPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisSubKeyBoundPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisSubKeyBoundPB) ProtoMessage() {}

func (x *RedisSubKeyBoundPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisSubKeyBoundPB.ProtoReflect.Descriptor instead.
func (*RedisSubKeyBoundPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *RedisSubKeyBoundPB) GetSubkeyBound() *RedisKeyValueSubKeyPB {
	if x != nil {
		return x.SubkeyBound
	}
	return nil
}

func (x *RedisSubKeyBoundPB) GetInfinityType() RedisSubKeyBoundPB_InfinityType {
	if x != nil && x.InfinityType != nil {
		return *x.InfinityType
	}
	return RedisSubKeyBoundPB_POSITIVE
}

func (x *RedisSubKeyBoundPB) GetIsExclusive() bool {
	if x != nil && x.IsExclusive != nil {
		return *x.IsExclusive
	}
	return Default_RedisSubKeyBoundPB_IsExclusive
}

type RedisKeyValueSubKeyPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Subkey:
	//
	//	*RedisKeyValueSubKeyPB_StringSubkey
	//	*RedisKeyValueSubKeyPB_TimestampSubkey
	//	*RedisKeyValueSubKeyPB_DoubleSubkey
	Subkey        isRedisKeyValueSubKeyPB_Subkey `protobuf_oneof:"subkey"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisKeyValueSubKeyPB) Reset() {
	*x = RedisKeyValueSubKeyPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisKeyValueSubKeyPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisKeyValueSubKeyPB) ProtoMessage() {}

func (x *RedisKeyValueSubKeyPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisKeyValueSubKeyPB.ProtoReflect.Descriptor instead.
func (*RedisKeyValueSubKeyPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *RedisKeyValueSubKeyPB) GetSubkey() isRedisKeyValueSubKeyPB_Subkey {
	if x != nil {
		return x.Subkey
	}
	return nil
}

func (x *RedisKeyValueSubKeyPB) GetStringSubkey() []byte {
	if x != nil {
		if x, ok := x.Subkey.(*RedisKeyValueSubKeyPB_StringSubkey); ok {
			return x.StringSubkey
		}
	}
	return nil
}

func (x *RedisKeyValueSubKeyPB) GetTimestampSubkey() int64 {
	if x != nil {
		if x, ok := x.Subkey.(*RedisKeyValueSubKeyPB_TimestampSubkey); ok {
			return x.TimestampSubkey
		}
	}
	return 0
}

func (x *RedisKeyValueSubKeyPB) GetDoubleSubkey() float64 {
	if x != nil {
		if x, ok := x.Subkey.(*RedisKeyValueSubKeyPB_DoubleSubkey); ok {
			return x.DoubleSubkey
		}
	}
	return 0
}

type isRedisKeyValueSubKeyPB_Subkey interface {
	isRedisKeyValueSubKeyPB_Subkey()
}

type RedisKeyValueSubKeyPB_StringSubkey struct {
	StringSubkey []byte `protobuf:"bytes,1,opt,name=string_subkey,json=stringSubkey,oneof"`
}

type RedisKeyValueSubKeyPB_TimestampSubkey struct {
	TimestampSubkey int64 `protobuf:"varint,2,opt,name=timestamp_subkey,json=timestampSubkey,oneof"` // Timestamp used in the redis timeseries datatype.
}

type RedisKeyValueSubKeyPB_DoubleSubkey struct {
	DoubleSubkey float64 `protobuf:"fixed64,3,opt,name=double_subkey,json=doubleSubkey,oneof"` // Double used in redis sorted set datatype.
}

func (*RedisKeyValueSubKeyPB_StringSubkey) isRedisKeyValueSubKeyPB_Subkey() {}

func (*RedisKeyValueSubKeyPB_TimestampSubkey) isRedisKeyValueSubKeyPB_Subkey() {}

func (*RedisKeyValueSubKeyPB_DoubleSubkey) isRedisKeyValueSubKeyPB_Subkey() {}

//   - Even if just a key is needed, or there are multiple values, this is used.
//   - In case of referring to an entity within a container, the type of the outer_key and the subkey
//     or index of the inner entity is specified.
//   - String    : Set the key and value only (setting STRING type is optional as it is understood).
//   - List      : Set the key, index, and value.
//   - Set       : Set the key, and value (possibly multiple depending on the command).
//   - Hash      : Set key, subkey, value.
//   - SortedSet : Set key, subkey, value (value is interpreted as score).
//   - Timeseries: Set key, subkey, value (timestamp_subkey in RedisKeyValueSubKeyPB is interpreted
//     as timestamp).
//   - Value is not present in case of an append, get, exists, etc. For multiple inserts into a
//
// container, the subkey and value fields have one or more items.
type RedisKeyValuePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Note: the hash_code is the hash of the 'key' below. Technically, this can be recomputed by
	// tserver also, but since the client already calculates this to look up the correct tablet
	// server, it is passed in.
	HashCode *uint32        `protobuf:"varint,1,opt,name=hash_code,json=hashCode" json:"hash_code,omitempty"`
	Key      []byte         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"` // Required
	Type     *RedisDataType `protobuf:"varint,3,opt,name=type,enum=yb.RedisDataType,def=1" json:"type,omitempty"`
	// It is assumed that all subkeys are distinct for HMSET and SADD.  For collection range requests,
	// we would have exactly two subkeys denoting the lower bound and upper bound for the range
	// request.
	Subkey        []*RedisKeyValueSubKeyPB `protobuf:"bytes,4,rep,name=subkey" json:"subkey,omitempty"`
	Index         *int32                   `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Value         [][]byte                 `protobuf:"bytes,6,rep,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisKeyValuePB fields.
const (
	Default_RedisKeyValuePB_Type = RedisDataType_REDIS_TYPE_NONE
)

func (x *RedisKeyValuePB) Reset() {
	*x = RedisKeyValuePB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisKeyValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisKeyValuePB) ProtoMessage() {}

func (x *RedisKeyValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisKeyValuePB.ProtoReflect.Descriptor instead.
func (*RedisKeyValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *RedisKeyValuePB) GetHashCode() uint32 {
	if x != nil && x.HashCode != nil {
		return *x.HashCode
	}
	return 0
}

func (x *RedisKeyValuePB) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RedisKeyValuePB) GetType() RedisDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_RedisKeyValuePB_Type
}

func (x *RedisKeyValuePB) GetSubkey() []*RedisKeyValueSubKeyPB {
	if x != nil {
		return x.Subkey
	}
	return nil
}

func (x *RedisKeyValuePB) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *RedisKeyValuePB) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SortedSetOptionsPB struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	UpdateOptions *SortedSetOptionsPB_UpdateOptions `protobuf:"varint,4,opt,name=update_options,json=updateOptions,enum=yb.SortedSetOptionsPB_UpdateOptions,def=3" json:"update_options,omitempty"`
	Ch            *bool                             `protobuf:"varint,5,opt,name=ch,def=0" json:"ch,omitempty"`
	Incr          *bool                             `protobuf:"varint,6,opt,name=incr,def=0" json:"incr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for SortedSetOptionsPB fields.
const (
	Default_SortedSetOptionsPB_UpdateOptions = SortedSetOptionsPB_NONE
	Default_SortedSetOptionsPB_Ch            = bool(false)
	Default_SortedSetOptionsPB_Incr          = bool(false)
)

func (x *SortedSetOptionsPB) Reset() {
	*x = SortedSetOptionsPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortedSetOptionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortedSetOptionsPB) ProtoMessage() {}

func (x *SortedSetOptionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortedSetOptionsPB.ProtoReflect.Descriptor instead.
func (*SortedSetOptionsPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *SortedSetOptionsPB) GetUpdateOptions() SortedSetOptionsPB_UpdateOptions {
	if x != nil && x.UpdateOptions != nil {
		return *x.UpdateOptions
	}
	return Default_SortedSetOptionsPB_UpdateOptions
}

func (x *SortedSetOptionsPB) GetCh() bool {
	if x != nil && x.Ch != nil {
		return *x.Ch
	}
	return Default_SortedSetOptionsPB_Ch
}

func (x *SortedSetOptionsPB) GetIncr() bool {
	if x != nil && x.Incr != nil {
		return *x.Incr
	}
	return Default_SortedSetOptionsPB_Incr
}

// SET, SETNX, SETXX, HSET, HSETNX, LSET, MSET, HMSET, MSETNX
type RedisSetRequestPB struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ExpectOkResponse *bool                  `protobuf:"varint,1,opt,name=expect_ok_response,json=expectOkResponse,def=0" json:"expect_ok_response,omitempty"`
	Ttl              *int64                 `protobuf:"varint,2,opt,name=ttl,def=-1" json:"ttl,omitempty"` // Expiration time in milliseconds.
	Mode             *RedisWriteMode        `protobuf:"varint,3,opt,name=mode,enum=yb.RedisWriteMode,def=1" json:"mode,omitempty"`
	SortedSetOptions *SortedSetOptionsPB    `protobuf:"bytes,14,opt,name=sorted_set_options,json=sortedSetOptions" json:"sorted_set_options,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for RedisSetRequestPB fields.
const (
	Default_RedisSetRequestPB_ExpectOkResponse = bool(false)
	Default_RedisSetRequestPB_Ttl              = int64(-1)
	Default_RedisSetRequestPB_Mode             = RedisWriteMode_REDIS_WRITEMODE_UPSERT
)

func (x *RedisSetRequestPB) Reset() {
	*x = RedisSetRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisSetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisSetRequestPB) ProtoMessage() {}

func (x *RedisSetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisSetRequestPB.ProtoReflect.Descriptor instead.
func (*RedisSetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *RedisSetRequestPB) GetExpectOkResponse() bool {
	if x != nil && x.ExpectOkResponse != nil {
		return *x.ExpectOkResponse
	}
	return Default_RedisSetRequestPB_ExpectOkResponse
}

func (x *RedisSetRequestPB) GetTtl() int64 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return Default_RedisSetRequestPB_Ttl
}

func (x *RedisSetRequestPB) GetMode() RedisWriteMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_RedisSetRequestPB_Mode
}

func (x *RedisSetRequestPB) GetSortedSetOptions() *SortedSetOptionsPB {
	if x != nil {
		return x.SortedSetOptions
	}
	return nil
}

// GET, HGET, MGET, HMGET, HGETALL, SMEMBERS
// HKEYS, HKEYS, HLEN
type RedisGetRequestPB struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	RequestType   *RedisGetRequestPB_GetRequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=yb.RedisGetRequestPB_GetRequestType,def=1" json:"request_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisGetRequestPB fields.
const (
	Default_RedisGetRequestPB_RequestType = RedisGetRequestPB_GET
)

func (x *RedisGetRequestPB) Reset() {
	*x = RedisGetRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisGetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisGetRequestPB) ProtoMessage() {}

func (x *RedisGetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisGetRequestPB.ProtoReflect.Descriptor instead.
func (*RedisGetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *RedisGetRequestPB) GetRequestType() RedisGetRequestPB_GetRequestType {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return Default_RedisGetRequestPB_RequestType
}

type RedisCollectionGetRangeRequestPB struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	RequestType   *RedisCollectionGetRangeRequestPB_GetRangeRequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=yb.RedisCollectionGetRangeRequestPB_GetRangeRequestType,def=1" json:"request_type,omitempty"`
	WithScores    *bool                                                 `protobuf:"varint,2,opt,name=with_scores,json=withScores,def=0" json:"with_scores,omitempty"` // Used only with ZRANGEBYSCORE, ZREVRANGE.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisCollectionGetRangeRequestPB fields.
const (
	Default_RedisCollectionGetRangeRequestPB_RequestType = RedisCollectionGetRangeRequestPB_TSRANGEBYTIME
	Default_RedisCollectionGetRangeRequestPB_WithScores  = bool(false)
)

func (x *RedisCollectionGetRangeRequestPB) Reset() {
	*x = RedisCollectionGetRangeRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisCollectionGetRangeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisCollectionGetRangeRequestPB) ProtoMessage() {}

func (x *RedisCollectionGetRangeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisCollectionGetRangeRequestPB.ProtoReflect.Descriptor instead.
func (*RedisCollectionGetRangeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *RedisCollectionGetRangeRequestPB) GetRequestType() RedisCollectionGetRangeRequestPB_GetRangeRequestType {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return Default_RedisCollectionGetRangeRequestPB_RequestType
}

func (x *RedisCollectionGetRangeRequestPB) GetWithScores() bool {
	if x != nil && x.WithScores != nil {
		return *x.WithScores
	}
	return Default_RedisCollectionGetRangeRequestPB_WithScores
}

// No operation.
type RedisNoOpRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisNoOpRequestPB) Reset() {
	*x = RedisNoOpRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisNoOpRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisNoOpRequestPB) ProtoMessage() {}

func (x *RedisNoOpRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisNoOpRequestPB.ProtoReflect.Descriptor instead.
func (*RedisNoOpRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{12}
}

// PERSIST, (P)EXPIRE, (P)EXPIREAT
type RedisSetTtlRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Expiration time in milliseconds.
	//
	// Types that are valid to be assigned to Expiration:
	//
	//	*RedisSetTtlRequestPB_Ttl
	//	*RedisSetTtlRequestPB_AbsoluteTime
	Expiration    isRedisSetTtlRequestPB_Expiration `protobuf_oneof:"expiration"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisSetTtlRequestPB fields.
const (
	Default_RedisSetTtlRequestPB_Ttl = int64(-1)
)

func (x *RedisSetTtlRequestPB) Reset() {
	*x = RedisSetTtlRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisSetTtlRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisSetTtlRequestPB) ProtoMessage() {}

func (x *RedisSetTtlRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisSetTtlRequestPB.ProtoReflect.Descriptor instead.
func (*RedisSetTtlRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{13}
}

func (x *RedisSetTtlRequestPB) GetExpiration() isRedisSetTtlRequestPB_Expiration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *RedisSetTtlRequestPB) GetTtl() int64 {
	if x != nil {
		if x, ok := x.Expiration.(*RedisSetTtlRequestPB_Ttl); ok {
			return x.Ttl
		}
	}
	return Default_RedisSetTtlRequestPB_Ttl
}

func (x *RedisSetTtlRequestPB) GetAbsoluteTime() int64 {
	if x != nil {
		if x, ok := x.Expiration.(*RedisSetTtlRequestPB_AbsoluteTime); ok {
			return x.AbsoluteTime
		}
	}
	return 0
}

type isRedisSetTtlRequestPB_Expiration interface {
	isRedisSetTtlRequestPB_Expiration()
}

type RedisSetTtlRequestPB_Ttl struct {
	Ttl int64 `protobuf:"varint,1,opt,name=ttl,oneof,def=-1"` // For (P)EXPIRE
}

type RedisSetTtlRequestPB_AbsoluteTime struct {
	AbsoluteTime int64 `protobuf:"varint,2,opt,name=absolute_time,json=absoluteTime,oneof"` // For (P)EXPIREAT
}

func (*RedisSetTtlRequestPB_Ttl) isRedisSetTtlRequestPB_Expiration() {}

func (*RedisSetTtlRequestPB_AbsoluteTime) isRedisSetTtlRequestPB_Expiration() {}

// TTL, PTTL
type RedisGetTtlRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// By default, the return value is in milliseconds.
	ReturnSeconds *bool `protobuf:"varint,1,opt,name=return_seconds,json=returnSeconds,def=0" json:"return_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisGetTtlRequestPB fields.
const (
	Default_RedisGetTtlRequestPB_ReturnSeconds = bool(false)
)

func (x *RedisGetTtlRequestPB) Reset() {
	*x = RedisGetTtlRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisGetTtlRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisGetTtlRequestPB) ProtoMessage() {}

func (x *RedisGetTtlRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisGetTtlRequestPB.ProtoReflect.Descriptor instead.
func (*RedisGetTtlRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{14}
}

func (x *RedisGetTtlRequestPB) GetReturnSeconds() bool {
	if x != nil && x.ReturnSeconds != nil {
		return *x.ReturnSeconds
	}
	return Default_RedisGetTtlRequestPB_ReturnSeconds
}

// KEYS
type RedisKeysRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pattern       *string                `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"`
	Threshold     *int32                 `protobuf:"varint,2,opt,name=threshold" json:"threshold,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisKeysRequestPB) Reset() {
	*x = RedisKeysRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisKeysRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisKeysRequestPB) ProtoMessage() {}

func (x *RedisKeysRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisKeysRequestPB.ProtoReflect.Descriptor instead.
func (*RedisKeysRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{15}
}

func (x *RedisKeysRequestPB) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *RedisKeysRequestPB) GetThreshold() int32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

// RENAME
type RedisGetForRenameRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisGetForRenameRequestPB) Reset() {
	*x = RedisGetForRenameRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisGetForRenameRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisGetForRenameRequestPB) ProtoMessage() {}

func (x *RedisGetForRenameRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisGetForRenameRequestPB.ProtoReflect.Descriptor instead.
func (*RedisGetForRenameRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{16}
}

// GETSET
type RedisGetSetRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisGetSetRequestPB) Reset() {
	*x = RedisGetSetRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisGetSetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisGetSetRequestPB) ProtoMessage() {}

func (x *RedisGetSetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisGetSetRequestPB.ProtoReflect.Descriptor instead.
func (*RedisGetSetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{17}
}

// APPEND
type RedisAppendRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisAppendRequestPB) Reset() {
	*x = RedisAppendRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisAppendRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisAppendRequestPB) ProtoMessage() {}

func (x *RedisAppendRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisAppendRequestPB.ProtoReflect.Descriptor instead.
func (*RedisAppendRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{18}
}

// STRLEN, HSTRLEN
type RedisStrLenRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisStrLenRequestPB) Reset() {
	*x = RedisStrLenRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisStrLenRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisStrLenRequestPB) ProtoMessage() {}

func (x *RedisStrLenRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisStrLenRequestPB.ProtoReflect.Descriptor instead.
func (*RedisStrLenRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{19}
}

// DEL, HDEL
type RedisDelRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisDelRequestPB) Reset() {
	*x = RedisDelRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisDelRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisDelRequestPB) ProtoMessage() {}

func (x *RedisDelRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisDelRequestPB.ProtoReflect.Descriptor instead.
func (*RedisDelRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{20}
}

// EXISTS, HEXISTS
type RedisExistsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisExistsRequestPB) Reset() {
	*x = RedisExistsRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisExistsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisExistsRequestPB) ProtoMessage() {}

func (x *RedisExistsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisExistsRequestPB.ProtoReflect.Descriptor instead.
func (*RedisExistsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{21}
}

// SETRANGE
type RedisSetRangeRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        *int32                 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"` // Required
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisSetRangeRequestPB) Reset() {
	*x = RedisSetRangeRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisSetRangeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisSetRangeRequestPB) ProtoMessage() {}

func (x *RedisSetRangeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisSetRangeRequestPB.ProtoReflect.Descriptor instead.
func (*RedisSetRangeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{22}
}

func (x *RedisSetRangeRequestPB) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

// GETRANGE
type RedisGetRangeRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *int32                 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"` // Required
	End           *int32                 `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`     // Required
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisGetRangeRequestPB) Reset() {
	*x = RedisGetRangeRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisGetRangeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisGetRangeRequestPB) ProtoMessage() {}

func (x *RedisGetRangeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisGetRangeRequestPB.ProtoReflect.Descriptor instead.
func (*RedisGetRangeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{23}
}

func (x *RedisGetRangeRequestPB) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *RedisGetRangeRequestPB) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

// INCR, INCRBY, INCRBYFLOAT, HINCRBY, HINCRBYFLOAT, ZINCRBY, DECR, DECRBY, ZADD with incr option
type RedisIncrRequestPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IncrementInt   *int64                 `protobuf:"varint,2,opt,name=increment_int,json=incrementInt,def=1" json:"increment_int,omitempty"`
	IncrementFloat *float64               `protobuf:"fixed64,3,opt,name=increment_float,json=incrementFloat" json:"increment_float,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for RedisIncrRequestPB fields.
const (
	Default_RedisIncrRequestPB_IncrementInt = int64(1)
)

func (x *RedisIncrRequestPB) Reset() {
	*x = RedisIncrRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisIncrRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisIncrRequestPB) ProtoMessage() {}

func (x *RedisIncrRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisIncrRequestPB.ProtoReflect.Descriptor instead.
func (*RedisIncrRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{24}
}

func (x *RedisIncrRequestPB) GetIncrementInt() int64 {
	if x != nil && x.IncrementInt != nil {
		return *x.IncrementInt
	}
	return Default_RedisIncrRequestPB_IncrementInt
}

func (x *RedisIncrRequestPB) GetIncrementFloat() float64 {
	if x != nil && x.IncrementFloat != nil {
		return *x.IncrementFloat
	}
	return 0
}

// RPUSH, RPUSHX, LPUSH, LPUSHX
type RedisPushRequestPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Side           *RedisSide             `protobuf:"varint,2,opt,name=side,enum=yb.RedisSide,def=1" json:"side,omitempty"`
	CheckExistence *bool                  `protobuf:"varint,3,opt,name=check_existence,json=checkExistence,def=0" json:"check_existence,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for RedisPushRequestPB fields.
const (
	Default_RedisPushRequestPB_Side           = RedisSide_REDIS_SIDE_LEFT
	Default_RedisPushRequestPB_CheckExistence = bool(false)
)

func (x *RedisPushRequestPB) Reset() {
	*x = RedisPushRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisPushRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisPushRequestPB) ProtoMessage() {}

func (x *RedisPushRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisPushRequestPB.ProtoReflect.Descriptor instead.
func (*RedisPushRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{25}
}

func (x *RedisPushRequestPB) GetSide() RedisSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return Default_RedisPushRequestPB_Side
}

func (x *RedisPushRequestPB) GetCheckExistence() bool {
	if x != nil && x.CheckExistence != nil {
		return *x.CheckExistence
	}
	return Default_RedisPushRequestPB_CheckExistence
}

// LINSERT
type RedisInsertRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         *RedisOrder            `protobuf:"varint,2,opt,name=order,enum=yb.RedisOrder" json:"order,omitempty"` // Required
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisInsertRequestPB) Reset() {
	*x = RedisInsertRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisInsertRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisInsertRequestPB) ProtoMessage() {}

func (x *RedisInsertRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisInsertRequestPB.ProtoReflect.Descriptor instead.
func (*RedisInsertRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{26}
}

func (x *RedisInsertRequestPB) GetOrder() RedisOrder {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return RedisOrder_REDIS_ORDER_BEFORE
}

// LPOP, RPOP, SPOP; blocking versions BLPOP etc. currently not supported.
type RedisPopRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Side          *RedisSide             `protobuf:"varint,2,opt,name=side,enum=yb.RedisSide,def=1" json:"side,omitempty"`
	Count         *int32                 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"` // Count is allowed only when popping from a set.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisPopRequestPB fields.
const (
	Default_RedisPopRequestPB_Side = RedisSide_REDIS_SIDE_LEFT
)

func (x *RedisPopRequestPB) Reset() {
	*x = RedisPopRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisPopRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisPopRequestPB) ProtoMessage() {}

func (x *RedisPopRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisPopRequestPB.ProtoReflect.Descriptor instead.
func (*RedisPopRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{27}
}

func (x *RedisPopRequestPB) GetSide() RedisSide {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return Default_RedisPopRequestPB_Side
}

func (x *RedisPopRequestPB) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// SADD
type RedisAddRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Following options are for ZADD only.
	Mode *RedisWriteMode `protobuf:"varint,2,opt,name=mode,enum=yb.RedisWriteMode,def=1" json:"mode,omitempty"`
	// Modify the return value from the number of new elements added,
	// to the total number of elements changed.
	Ch            *bool `protobuf:"varint,3,opt,name=ch" json:"ch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RedisAddRequestPB fields.
const (
	Default_RedisAddRequestPB_Mode = RedisWriteMode_REDIS_WRITEMODE_UPSERT
)

func (x *RedisAddRequestPB) Reset() {
	*x = RedisAddRequestPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisAddRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisAddRequestPB) ProtoMessage() {}

func (x *RedisAddRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisAddRequestPB.ProtoReflect.Descriptor instead.
func (*RedisAddRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{28}
}

func (x *RedisAddRequestPB) GetMode() RedisWriteMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_RedisAddRequestPB_Mode
}

func (x *RedisAddRequestPB) GetCh() bool {
	if x != nil && x.Ch != nil {
		return *x.Ch
	}
	return false
}

type RedisResponsePB struct {
	state protoimpl.MessageState           `protogen:"open.v1"`
	Code  *RedisResponsePB_RedisStatusCode `protobuf:"varint,1,opt,name=code,enum=yb.RedisResponsePB_RedisStatusCode" json:"code,omitempty"`
	// Types that are valid to be assigned to ResponseData:
	//
	//	*RedisResponsePB_IntResponse
	//	*RedisResponsePB_StringResponse
	//	*RedisResponsePB_ArrayResponse
	//	*RedisResponsePB_StatusResponse
	//	*RedisResponsePB_EncodedResponse
	ResponseData  isRedisResponsePB_ResponseData `protobuf_oneof:"response_data"`
	ErrorMessage  []byte                         `protobuf:"bytes,6,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Type          *RedisDataType                 `protobuf:"varint,8,opt,name=type,enum=yb.RedisDataType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisResponsePB) Reset() {
	*x = RedisResponsePB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisResponsePB) ProtoMessage() {}

func (x *RedisResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisResponsePB.ProtoReflect.Descriptor instead.
func (*RedisResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{29}
}

func (x *RedisResponsePB) GetCode() RedisResponsePB_RedisStatusCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return RedisResponsePB_OK
}

func (x *RedisResponsePB) GetResponseData() isRedisResponsePB_ResponseData {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *RedisResponsePB) GetIntResponse() int64 {
	if x != nil {
		if x, ok := x.ResponseData.(*RedisResponsePB_IntResponse); ok {
			return x.IntResponse
		}
	}
	return 0
}

func (x *RedisResponsePB) GetStringResponse() []byte {
	if x != nil {
		if x, ok := x.ResponseData.(*RedisResponsePB_StringResponse); ok {
			return x.StringResponse
		}
	}
	return nil
}

func (x *RedisResponsePB) GetArrayResponse() *RedisArrayPB {
	if x != nil {
		if x, ok := x.ResponseData.(*RedisResponsePB_ArrayResponse); ok {
			return x.ArrayResponse
		}
	}
	return nil
}

func (x *RedisResponsePB) GetStatusResponse() []byte {
	if x != nil {
		if x, ok := x.ResponseData.(*RedisResponsePB_StatusResponse); ok {
			return x.StatusResponse
		}
	}
	return nil
}

func (x *RedisResponsePB) GetEncodedResponse() []byte {
	if x != nil {
		if x, ok := x.ResponseData.(*RedisResponsePB_EncodedResponse); ok {
			return x.EncodedResponse
		}
	}
	return nil
}

func (x *RedisResponsePB) GetErrorMessage() []byte {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *RedisResponsePB) GetType() RedisDataType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RedisDataType_REDIS_TYPE_NONE
}

type isRedisResponsePB_ResponseData interface {
	isRedisResponsePB_ResponseData()
}

type RedisResponsePB_IntResponse struct {
	IntResponse int64 `protobuf:"varint,2,opt,name=int_response,json=intResponse,oneof"`
}

type RedisResponsePB_StringResponse struct {
	StringResponse []byte `protobuf:"bytes,3,opt,name=string_response,json=stringResponse,oneof"`
}

type RedisResponsePB_ArrayResponse struct {
	ArrayResponse *RedisArrayPB `protobuf:"bytes,4,opt,name=array_response,json=arrayResponse,oneof"`
}

type RedisResponsePB_StatusResponse struct {
	StatusResponse []byte `protobuf:"bytes,5,opt,name=status_response,json=statusResponse,oneof"`
}

type RedisResponsePB_EncodedResponse struct {
	EncodedResponse []byte `protobuf:"bytes,7,opt,name=encoded_response,json=encodedResponse,oneof"`
}

func (*RedisResponsePB_IntResponse) isRedisResponsePB_ResponseData() {}

func (*RedisResponsePB_StringResponse) isRedisResponsePB_ResponseData() {}

func (*RedisResponsePB_ArrayResponse) isRedisResponsePB_ResponseData() {}

func (*RedisResponsePB_StatusResponse) isRedisResponsePB_ResponseData() {}

func (*RedisResponsePB_EncodedResponse) isRedisResponsePB_ResponseData() {}

type RedisArrayPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Elements      [][]byte               `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
	Encoded       *bool                  `protobuf:"varint,2,opt,name=encoded" json:"encoded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisArrayPB) Reset() {
	*x = RedisArrayPB{}
	mi := &file_yb_common_redis_protocol_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisArrayPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisArrayPB) ProtoMessage() {}

func (x *RedisArrayPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_redis_protocol_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisArrayPB.ProtoReflect.Descriptor instead.
func (*RedisArrayPB) Descriptor() ([]byte, []int) {
	return file_yb_common_redis_protocol_proto_rawDescGZIP(), []int{30}
}

func (x *RedisArrayPB) GetElements() [][]byte {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *RedisArrayPB) GetEncoded() bool {
	if x != nil && x.Encoded != nil {
		return *x.Encoded
	}
	return false
}

var File_yb_common_redis_protocol_proto protoreflect.FileDescriptor

var file_yb_common_redis_protocol_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x79, 0x62, 0x22, 0xc9, 0x06, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x69, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x38, 0x0a, 0x0b,
	0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x0b, 0x70, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x74, 0x54, 0x74, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x54, 0x74, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x6f, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xc2, 0x06, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x38, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x6c, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x6c, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00,
	0x52, 0x0f, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x67, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52,
	0x19, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65,
	0x74, 0x54, 0x74, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52,
	0x0d, 0x67, 0x65, 0x74, 0x54, 0x74, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0b,
	0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x13, 0x67,
	0x65, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x42, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x0b,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x42, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x42, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x83,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x42, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x42,
	0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x0b,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x42, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x42, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xf2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x50, 0x42, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x50, 0x42, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x79, 0x62,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x50, 0x42, 0x2e, 0x49, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x45,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x2a, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x50, 0x42, 0x12, 0x25,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x50, 0x42, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc4, 0x01,
	0x0a, 0x12, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x12, 0x51, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x02, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x02, 0x63, 0x68, 0x12, 0x19,
	0x0a, 0x04, 0x69, 0x6e, 0x63, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x63, 0x72, 0x22, 0x29, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x58,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x58, 0x58, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x03, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x33, 0x0a, 0x12, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x4f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d, 0x31,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x3e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd0, 0x02, 0x0a, 0x11,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x03, 0x47,
	0x45, 0x54, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xec, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x48, 0x4d, 0x47, 0x45, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x47,
	0x45, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4b, 0x45, 0x59, 0x53,
	0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x56, 0x41, 0x4c, 0x53, 0x10, 0x08, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x4c, 0x45, 0x4e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x53, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x53, 0x54, 0x52, 0x4c, 0x45, 0x4e, 0x10,
	0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x49, 0x53, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x5a, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x53, 0x47, 0x45, 0x54, 0x10, 0x0e, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x5a,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4c, 0x45, 0x4e, 0x10,
	0x12, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x63, 0x22, 0xb1,
	0x02, 0x0a, 0x20, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x6a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x79, 0x62, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x0d, 0x54, 0x53, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x59, 0x54, 0x49,
	0x4d, 0x45, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x53, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x59, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x59, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x5a, 0x52, 0x45, 0x56, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x5a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x53, 0x52, 0x45, 0x56, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x42, 0x59, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x63, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4e, 0x6f, 0x4f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x63, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x53, 0x65, 0x74, 0x54, 0x74, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x16, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d,
	0x31, 0x48, 0x00, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a,
	0x14, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74, 0x54, 0x74, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x2c, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x16, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x16, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x16, 0x0a, 0x14,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x22, 0x30, 0x0a, 0x16, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x16, 0x52, 0x65, 0x64, 0x69, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x65, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x26,
	0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x31, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x22,
	0x78, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x69,
	0x64, 0x65, 0x3a, 0x0f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4c,
	0x45, 0x46, 0x54, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x14, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x50, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x69, 0x64, 0x65, 0x3a, 0x0f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x73, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x16, 0x52,
	0x45, 0x44, 0x49, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x50, 0x53, 0x45, 0x52, 0x54, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x63, 0x68, 0x22, 0xa1, 0x04, 0x0a, 0x0f,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x50, 0x42, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x10, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x42, 0x0f,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x44, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x42, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x2a, 0xae, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x44, 0x49,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x53, 0x45, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x44, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x45,
	0x52, 0x49, 0x45, 0x53, 0x10, 0x07, 0x2a, 0x36, 0x0a, 0x09, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x44, 0x49,
	0x53, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x2a, 0x3b,
	0x0a, 0x0a, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x45, 0x46, 0x4f,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x0e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x44,
	0x49, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53,
	0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62,
})

var (
	file_yb_common_redis_protocol_proto_rawDescOnce sync.Once
	file_yb_common_redis_protocol_proto_rawDescData []byte
)

func file_yb_common_redis_protocol_proto_rawDescGZIP() []byte {
	file_yb_common_redis_protocol_proto_rawDescOnce.Do(func() {
		file_yb_common_redis_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_common_redis_protocol_proto_rawDesc), len(file_yb_common_redis_protocol_proto_rawDesc)))
	})
	return file_yb_common_redis_protocol_proto_rawDescData
}

var file_yb_common_redis_protocol_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_yb_common_redis_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_yb_common_redis_protocol_proto_goTypes = []any{
	(RedisDataType)(0),                                        // 0: yb.RedisDataType
	(RedisSide)(0),                                            // 1: yb.RedisSide
	(RedisOrder)(0),                                           // 2: yb.RedisOrder
	(RedisWriteMode)(0),                                       // 3: yb.RedisWriteMode
	(RedisSubKeyBoundPB_InfinityType)(0),                      // 4: yb.RedisSubKeyBoundPB.InfinityType
	(SortedSetOptionsPB_UpdateOptions)(0),                     // 5: yb.SortedSetOptionsPB.UpdateOptions
	(RedisGetRequestPB_GetRequestType)(0),                     // 6: yb.RedisGetRequestPB.GetRequestType
	(RedisCollectionGetRangeRequestPB_GetRangeRequestType)(0), // 7: yb.RedisCollectionGetRangeRequestPB.GetRangeRequestType
	(RedisResponsePB_RedisStatusCode)(0),                      // 8: yb.RedisResponsePB.RedisStatusCode
	(*RedisWriteRequestPB)(nil),                               // 9: yb.RedisWriteRequestPB
	(*RedisReadRequestPB)(nil),                                // 10: yb.RedisReadRequestPB
	(*RedisSubKeyRangePB)(nil),                                // 11: yb.RedisSubKeyRangePB
	(*RedisIndexRangePB)(nil),                                 // 12: yb.RedisIndexRangePB
	(*RedisIndexBoundPB)(nil),                                 // 13: yb.RedisIndexBoundPB
	(*RedisSubKeyBoundPB)(nil),                                // 14: yb.RedisSubKeyBoundPB
	(*RedisKeyValueSubKeyPB)(nil),                             // 15: yb.RedisKeyValueSubKeyPB
	(*RedisKeyValuePB)(nil),                                   // 16: yb.RedisKeyValuePB
	(*SortedSetOptionsPB)(nil),                                // 17: yb.SortedSetOptionsPB
	(*RedisSetRequestPB)(nil),                                 // 18: yb.RedisSetRequestPB
	(*RedisGetRequestPB)(nil),                                 // 19: yb.RedisGetRequestPB
	(*RedisCollectionGetRangeRequestPB)(nil),                  // 20: yb.RedisCollectionGetRangeRequestPB
	(*RedisNoOpRequestPB)(nil),                                // 21: yb.RedisNoOpRequestPB
	(*RedisSetTtlRequestPB)(nil),                              // 22: yb.RedisSetTtlRequestPB
	(*RedisGetTtlRequestPB)(nil),                              // 23: yb.RedisGetTtlRequestPB
	(*RedisKeysRequestPB)(nil),                                // 24: yb.RedisKeysRequestPB
	(*RedisGetForRenameRequestPB)(nil),                        // 25: yb.RedisGetForRenameRequestPB
	(*RedisGetSetRequestPB)(nil),                              // 26: yb.RedisGetSetRequestPB
	(*RedisAppendRequestPB)(nil),                              // 27: yb.RedisAppendRequestPB
	(*RedisStrLenRequestPB)(nil),                              // 28: yb.RedisStrLenRequestPB
	(*RedisDelRequestPB)(nil),                                 // 29: yb.RedisDelRequestPB
	(*RedisExistsRequestPB)(nil),                              // 30: yb.RedisExistsRequestPB
	(*RedisSetRangeRequestPB)(nil),                            // 31: yb.RedisSetRangeRequestPB
	(*RedisGetRangeRequestPB)(nil),                            // 32: yb.RedisGetRangeRequestPB
	(*RedisIncrRequestPB)(nil),                                // 33: yb.RedisIncrRequestPB
	(*RedisPushRequestPB)(nil),                                // 34: yb.RedisPushRequestPB
	(*RedisInsertRequestPB)(nil),                              // 35: yb.RedisInsertRequestPB
	(*RedisPopRequestPB)(nil),                                 // 36: yb.RedisPopRequestPB
	(*RedisAddRequestPB)(nil),                                 // 37: yb.RedisAddRequestPB
	(*RedisResponsePB)(nil),                                   // 38: yb.RedisResponsePB
	(*RedisArrayPB)(nil),                                      // 39: yb.RedisArrayPB
}
var file_yb_common_redis_protocol_proto_depIdxs = []int32{
	18, // 0: yb.RedisWriteRequestPB.set_request:type_name -> yb.RedisSetRequestPB
	26, // 1: yb.RedisWriteRequestPB.getset_request:type_name -> yb.RedisGetSetRequestPB
	27, // 2: yb.RedisWriteRequestPB.append_request:type_name -> yb.RedisAppendRequestPB
	29, // 3: yb.RedisWriteRequestPB.del_request:type_name -> yb.RedisDelRequestPB
	31, // 4: yb.RedisWriteRequestPB.set_range_request:type_name -> yb.RedisSetRangeRequestPB
	33, // 5: yb.RedisWriteRequestPB.incr_request:type_name -> yb.RedisIncrRequestPB
	34, // 6: yb.RedisWriteRequestPB.push_request:type_name -> yb.RedisPushRequestPB
	35, // 7: yb.RedisWriteRequestPB.insert_request:type_name -> yb.RedisInsertRequestPB
	36, // 8: yb.RedisWriteRequestPB.pop_request:type_name -> yb.RedisPopRequestPB
	37, // 9: yb.RedisWriteRequestPB.add_request:type_name -> yb.RedisAddRequestPB
	22, // 10: yb.RedisWriteRequestPB.set_ttl_request:type_name -> yb.RedisSetTtlRequestPB
	21, // 11: yb.RedisWriteRequestPB.no_op_request:type_name -> yb.RedisNoOpRequestPB
	16, // 12: yb.RedisWriteRequestPB.key_value:type_name -> yb.RedisKeyValuePB
	19, // 13: yb.RedisReadRequestPB.get_request:type_name -> yb.RedisGetRequestPB
	28, // 14: yb.RedisReadRequestPB.strlen_request:type_name -> yb.RedisStrLenRequestPB
	30, // 15: yb.RedisReadRequestPB.exists_request:type_name -> yb.RedisExistsRequestPB
	32, // 16: yb.RedisReadRequestPB.get_range_request:type_name -> yb.RedisGetRangeRequestPB
	20, // 17: yb.RedisReadRequestPB.get_collection_range_request:type_name -> yb.RedisCollectionGetRangeRequestPB
	23, // 18: yb.RedisReadRequestPB.get_ttl_request:type_name -> yb.RedisGetTtlRequestPB
	24, // 19: yb.RedisReadRequestPB.keys_request:type_name -> yb.RedisKeysRequestPB
	25, // 20: yb.RedisReadRequestPB.get_for_rename_request:type_name -> yb.RedisGetForRenameRequestPB
	16, // 21: yb.RedisReadRequestPB.key_value:type_name -> yb.RedisKeyValuePB
	11, // 22: yb.RedisReadRequestPB.subkey_range:type_name -> yb.RedisSubKeyRangePB
	12, // 23: yb.RedisReadRequestPB.index_range:type_name -> yb.RedisIndexRangePB
	14, // 24: yb.RedisSubKeyRangePB.lower_bound:type_name -> yb.RedisSubKeyBoundPB
	14, // 25: yb.RedisSubKeyRangePB.upper_bound:type_name -> yb.RedisSubKeyBoundPB
	13, // 26: yb.RedisIndexRangePB.lower_bound:type_name -> yb.RedisIndexBoundPB
	13, // 27: yb.RedisIndexRangePB.upper_bound:type_name -> yb.RedisIndexBoundPB
	15, // 28: yb.RedisSubKeyBoundPB.subkey_bound:type_name -> yb.RedisKeyValueSubKeyPB
	4,  // 29: yb.RedisSubKeyBoundPB.infinity_type:type_name -> yb.RedisSubKeyBoundPB.InfinityType
	0,  // 30: yb.RedisKeyValuePB.type:type_name -> yb.RedisDataType
	15, // 31: yb.RedisKeyValuePB.subkey:type_name -> yb.RedisKeyValueSubKeyPB
	5,  // 32: yb.SortedSetOptionsPB.update_options:type_name -> yb.SortedSetOptionsPB.UpdateOptions
	3,  // 33: yb.RedisSetRequestPB.mode:type_name -> yb.RedisWriteMode
	17, // 34: yb.RedisSetRequestPB.sorted_set_options:type_name -> yb.SortedSetOptionsPB
	6,  // 35: yb.RedisGetRequestPB.request_type:type_name -> yb.RedisGetRequestPB.GetRequestType
	7,  // 36: yb.RedisCollectionGetRangeRequestPB.request_type:type_name -> yb.RedisCollectionGetRangeRequestPB.GetRangeRequestType
	1,  // 37: yb.RedisPushRequestPB.side:type_name -> yb.RedisSide
	2,  // 38: yb.RedisInsertRequestPB.order:type_name -> yb.RedisOrder
	1,  // 39: yb.RedisPopRequestPB.side:type_name -> yb.RedisSide
	3,  // 40: yb.RedisAddRequestPB.mode:type_name -> yb.RedisWriteMode
	8,  // 41: yb.RedisResponsePB.code:type_name -> yb.RedisResponsePB.RedisStatusCode
	39, // 42: yb.RedisResponsePB.array_response:type_name -> yb.RedisArrayPB
	0,  // 43: yb.RedisResponsePB.type:type_name -> yb.RedisDataType
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_yb_common_redis_protocol_proto_init() }
func file_yb_common_redis_protocol_proto_init() {
	if File_yb_common_redis_protocol_proto != nil {
		return
	}
	file_yb_common_redis_protocol_proto_msgTypes[0].OneofWrappers = []any{
		(*RedisWriteRequestPB_SetRequest)(nil),
		(*RedisWriteRequestPB_GetsetRequest)(nil),
		(*RedisWriteRequestPB_AppendRequest)(nil),
		(*RedisWriteRequestPB_DelRequest)(nil),
		(*RedisWriteRequestPB_SetRangeRequest)(nil),
		(*RedisWriteRequestPB_IncrRequest)(nil),
		(*RedisWriteRequestPB_PushRequest)(nil),
		(*RedisWriteRequestPB_InsertRequest)(nil),
		(*RedisWriteRequestPB_PopRequest)(nil),
		(*RedisWriteRequestPB_AddRequest)(nil),
		(*RedisWriteRequestPB_SetTtlRequest)(nil),
		(*RedisWriteRequestPB_NoOpRequest)(nil),
	}
	file_yb_common_redis_protocol_proto_msgTypes[1].OneofWrappers = []any{
		(*RedisReadRequestPB_GetRequest)(nil),
		(*RedisReadRequestPB_StrlenRequest)(nil),
		(*RedisReadRequestPB_ExistsRequest)(nil),
		(*RedisReadRequestPB_GetRangeRequest)(nil),
		(*RedisReadRequestPB_GetCollectionRangeRequest)(nil),
		(*RedisReadRequestPB_GetTtlRequest)(nil),
		(*RedisReadRequestPB_KeysRequest)(nil),
		(*RedisReadRequestPB_GetForRenameRequest)(nil),
	}
	file_yb_common_redis_protocol_proto_msgTypes[6].OneofWrappers = []any{
		(*RedisKeyValueSubKeyPB_StringSubkey)(nil),
		(*RedisKeyValueSubKeyPB_TimestampSubkey)(nil),
		(*RedisKeyValueSubKeyPB_DoubleSubkey)(nil),
	}
	file_yb_common_redis_protocol_proto_msgTypes[13].OneofWrappers = []any{
		(*RedisSetTtlRequestPB_Ttl)(nil),
		(*RedisSetTtlRequestPB_AbsoluteTime)(nil),
	}
	file_yb_common_redis_protocol_proto_msgTypes[29].OneofWrappers = []any{
		(*RedisResponsePB_IntResponse)(nil),
		(*RedisResponsePB_StringResponse)(nil),
		(*RedisResponsePB_ArrayResponse)(nil),
		(*RedisResponsePB_StatusResponse)(nil),
		(*RedisResponsePB_EncodedResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_common_redis_protocol_proto_rawDesc), len(file_yb_common_redis_protocol_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_common_redis_protocol_proto_goTypes,
		DependencyIndexes: file_yb_common_redis_protocol_proto_depIdxs,
		EnumInfos:         file_yb_common_redis_protocol_proto_enumTypes,
		MessageInfos:      file_yb_common_redis_protocol_proto_msgTypes,
	}.Build()
	File_yb_common_redis_protocol_proto = out.File
	file_yb_common_redis_protocol_proto_goTypes = nil
	file_yb_common_redis_protocol_proto_depIdxs = nil
}
