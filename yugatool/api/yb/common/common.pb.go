// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
// Protobufs which are common throughout YB.
//
// This file may contain protobufs which are persisted on disk
// as well as sent on the wire. If a particular protobuf is only
// used as part of the client-server wire protocol, it should go
// in common/wire_protocol.proto instead. If it is only used within
// the server(s), it should go in server/metadata.proto,
// etc, as appropriate.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: yb/common/common.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Client type.
type QLClient int32

const (
	QLClient_YQL_CLIENT_CQL   QLClient = 1
	QLClient_YQL_CLIENT_PGSQL QLClient = 2
	QLClient_YQL_CLIENT_REDIS QLClient = 3
)

// Enum value maps for QLClient.
var (
	QLClient_name = map[int32]string{
		1: "YQL_CLIENT_CQL",
		2: "YQL_CLIENT_PGSQL",
		3: "YQL_CLIENT_REDIS",
	}
	QLClient_value = map[string]int32{
		"YQL_CLIENT_CQL":   1,
		"YQL_CLIENT_PGSQL": 2,
		"YQL_CLIENT_REDIS": 3,
	}
)

func (x QLClient) Enum() *QLClient {
	p := new(QLClient)
	*p = x
	return p
}

func (x QLClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLClient) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[0].Descriptor()
}

func (QLClient) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[0]
}

func (x QLClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLClient) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLClient(num)
	return nil
}

// Deprecated: Use QLClient.Descriptor instead.
func (QLClient) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{0}
}

// Client type.
type YQLDatabase int32

const (
	YQLDatabase_YQL_DATABASE_UNKNOWN YQLDatabase = 1
	YQLDatabase_YQL_DATABASE_CQL     YQLDatabase = 2
	YQLDatabase_YQL_DATABASE_PGSQL   YQLDatabase = 3 // Pgsql database
	YQLDatabase_YQL_DATABASE_REDIS   YQLDatabase = 4
)

// Enum value maps for YQLDatabase.
var (
	YQLDatabase_name = map[int32]string{
		1: "YQL_DATABASE_UNKNOWN",
		2: "YQL_DATABASE_CQL",
		3: "YQL_DATABASE_PGSQL",
		4: "YQL_DATABASE_REDIS",
	}
	YQLDatabase_value = map[string]int32{
		"YQL_DATABASE_UNKNOWN": 1,
		"YQL_DATABASE_CQL":     2,
		"YQL_DATABASE_PGSQL":   3,
		"YQL_DATABASE_REDIS":   4,
	}
)

func (x YQLDatabase) Enum() *YQLDatabase {
	p := new(YQLDatabase)
	*p = x
	return p
}

func (x YQLDatabase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YQLDatabase) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[1].Descriptor()
}

func (YQLDatabase) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[1]
}

func (x YQLDatabase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *YQLDatabase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = YQLDatabase(num)
	return nil
}

// Deprecated: Use YQLDatabase.Descriptor instead.
func (YQLDatabase) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{1}
}

// To ensure compatibility between release versions, the numeric values of these datatypes cannot
// be changed once the types are implemented and released.
//
// Make sure this is in sync with YBCPgDataType in ybc_pg_typedefs.h.
type DataType int32

const (
	DataType_UNKNOWN_DATA      DataType = 999
	DataType_NULL_VALUE_TYPE   DataType = 0
	DataType_INT8              DataType = 1
	DataType_INT16             DataType = 2
	DataType_INT32             DataType = 3
	DataType_INT64             DataType = 4
	DataType_STRING            DataType = 5
	DataType_BOOL              DataType = 6
	DataType_FLOAT             DataType = 7
	DataType_DOUBLE            DataType = 8
	DataType_BINARY            DataType = 9
	DataType_TIMESTAMP         DataType = 10
	DataType_DECIMAL           DataType = 11
	DataType_VARINT            DataType = 12
	DataType_INET              DataType = 13
	DataType_LIST              DataType = 14
	DataType_MAP               DataType = 15
	DataType_SET               DataType = 16
	DataType_UUID              DataType = 17
	DataType_TIMEUUID          DataType = 18
	DataType_TUPLE             DataType = 19 // TUPLE is not yet fully implemented, but it is a CQL type.
	DataType_TYPEARGS          DataType = 20
	DataType_USER_DEFINED_TYPE DataType = 21
	DataType_FROZEN            DataType = 22
	DataType_DATE              DataType = 23
	DataType_TIME              DataType = 24
	DataType_JSONB             DataType = 25
	// All unsigned datatypes will be removed from QL because databases do not have these types.
	DataType_UINT8  DataType = 100
	DataType_UINT16 DataType = 101
	DataType_UINT32 DataType = 102
	DataType_UINT64 DataType = 103
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		999: "UNKNOWN_DATA",
		0:   "NULL_VALUE_TYPE",
		1:   "INT8",
		2:   "INT16",
		3:   "INT32",
		4:   "INT64",
		5:   "STRING",
		6:   "BOOL",
		7:   "FLOAT",
		8:   "DOUBLE",
		9:   "BINARY",
		10:  "TIMESTAMP",
		11:  "DECIMAL",
		12:  "VARINT",
		13:  "INET",
		14:  "LIST",
		15:  "MAP",
		16:  "SET",
		17:  "UUID",
		18:  "TIMEUUID",
		19:  "TUPLE",
		20:  "TYPEARGS",
		21:  "USER_DEFINED_TYPE",
		22:  "FROZEN",
		23:  "DATE",
		24:  "TIME",
		25:  "JSONB",
		100: "UINT8",
		101: "UINT16",
		102: "UINT32",
		103: "UINT64",
	}
	DataType_value = map[string]int32{
		"UNKNOWN_DATA":      999,
		"NULL_VALUE_TYPE":   0,
		"INT8":              1,
		"INT16":             2,
		"INT32":             3,
		"INT64":             4,
		"STRING":            5,
		"BOOL":              6,
		"FLOAT":             7,
		"DOUBLE":            8,
		"BINARY":            9,
		"TIMESTAMP":         10,
		"DECIMAL":           11,
		"VARINT":            12,
		"INET":              13,
		"LIST":              14,
		"MAP":               15,
		"SET":               16,
		"UUID":              17,
		"TIMEUUID":          18,
		"TUPLE":             19,
		"TYPEARGS":          20,
		"USER_DEFINED_TYPE": 21,
		"FROZEN":            22,
		"DATE":              23,
		"TIME":              24,
		"JSONB":             25,
		"UINT8":             100,
		"UINT16":            101,
		"UINT32":            102,
		"UINT64":            103,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[2].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[2]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataType(num)
	return nil
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{2}
}

// This must exactly match YBTableType in client.h.
// We have static_assert's in tablet-test.cc to verify this.
type TableType int32

const (
	TableType_YQL_TABLE_TYPE                TableType = 2
	TableType_REDIS_TABLE_TYPE              TableType = 3
	TableType_PGSQL_TABLE_TYPE              TableType = 4
	TableType_TRANSACTION_STATUS_TABLE_TYPE TableType = 5
	TableType_DEFAULT_TABLE_TYPE            TableType = 2
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		2: "YQL_TABLE_TYPE",
		3: "REDIS_TABLE_TYPE",
		4: "PGSQL_TABLE_TYPE",
		5: "TRANSACTION_STATUS_TABLE_TYPE",
		// Duplicate value: 2: "DEFAULT_TABLE_TYPE",
	}
	TableType_value = map[string]int32{
		"YQL_TABLE_TYPE":                2,
		"REDIS_TABLE_TYPE":              3,
		"PGSQL_TABLE_TYPE":              4,
		"TRANSACTION_STATUS_TABLE_TYPE": 5,
		"DEFAULT_TABLE_TYPE":            2,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[3].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[3]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableType(num)
	return nil
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{3}
}

type YBConsistencyLevel int32

const (
	// This consistency level provides Linearizability guarantees and is the default for our system.
	YBConsistencyLevel_STRONG YBConsistencyLevel = 1
	// Consistent-prefix consistency means that we always see consistent snapshot of the database in
	// a well-defined order. If operations A, B and C take place, we will either see A, AB, or ABC.
	// Note that reads might still go back in time since we might see ABC on one replica and AB on
	// another.
	YBConsistencyLevel_CONSISTENT_PREFIX YBConsistencyLevel = 2
	// For cross-shard transactions only: user-enforced consistency level means it is the user's
	// responsibility to enforce consistency across shards or tables/indexes.
	YBConsistencyLevel_USER_ENFORCED YBConsistencyLevel = 3
)

// Enum value maps for YBConsistencyLevel.
var (
	YBConsistencyLevel_name = map[int32]string{
		1: "STRONG",
		2: "CONSISTENT_PREFIX",
		3: "USER_ENFORCED",
	}
	YBConsistencyLevel_value = map[string]int32{
		"STRONG":            1,
		"CONSISTENT_PREFIX": 2,
		"USER_ENFORCED":     3,
	}
)

func (x YBConsistencyLevel) Enum() *YBConsistencyLevel {
	p := new(YBConsistencyLevel)
	*p = x
	return p
}

func (x YBConsistencyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YBConsistencyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[4].Descriptor()
}

func (YBConsistencyLevel) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[4]
}

func (x YBConsistencyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *YBConsistencyLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = YBConsistencyLevel(num)
	return nil
}

// Deprecated: Use YBConsistencyLevel.Descriptor instead.
func (YBConsistencyLevel) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{4}
}

// Used for Cassandra Roles and Permissions
type ResourceType int32

const (
	ResourceType_ALL_KEYSPACES ResourceType = 1
	ResourceType_KEYSPACE      ResourceType = 2
	ResourceType_TABLE         ResourceType = 3
	ResourceType_ALL_ROLES     ResourceType = 4
	ResourceType_ROLE          ResourceType = 5
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		1: "ALL_KEYSPACES",
		2: "KEYSPACE",
		3: "TABLE",
		4: "ALL_ROLES",
		5: "ROLE",
	}
	ResourceType_value = map[string]int32{
		"ALL_KEYSPACES": 1,
		"KEYSPACE":      2,
		"TABLE":         3,
		"ALL_ROLES":     4,
		"ROLE":          5,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[5].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[5]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResourceType(num)
	return nil
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{5}
}

// Suffixed with PERMISSION, because Google does not allow same enum name CREATE
type PermissionType int32

const (
	PermissionType_ALTER_PERMISSION     PermissionType = 0
	PermissionType_CREATE_PERMISSION    PermissionType = 1
	PermissionType_DROP_PERMISSION      PermissionType = 2
	PermissionType_SELECT_PERMISSION    PermissionType = 3
	PermissionType_MODIFY_PERMISSION    PermissionType = 4
	PermissionType_AUTHORIZE_PERMISSION PermissionType = 5
	PermissionType_DESCRIBE_PERMISSION  PermissionType = 6
	PermissionType_ALL_PERMISSION       PermissionType = 999999999
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0:         "ALTER_PERMISSION",
		1:         "CREATE_PERMISSION",
		2:         "DROP_PERMISSION",
		3:         "SELECT_PERMISSION",
		4:         "MODIFY_PERMISSION",
		5:         "AUTHORIZE_PERMISSION",
		6:         "DESCRIBE_PERMISSION",
		999999999: "ALL_PERMISSION",
	}
	PermissionType_value = map[string]int32{
		"ALTER_PERMISSION":     0,
		"CREATE_PERMISSION":    1,
		"DROP_PERMISSION":      2,
		"SELECT_PERMISSION":    3,
		"MODIFY_PERMISSION":    4,
		"AUTHORIZE_PERMISSION": 5,
		"DESCRIBE_PERMISSION":  6,
		"ALL_PERMISSION":       999999999,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[6].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[6]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PermissionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PermissionType(num)
	return nil
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{6}
}

// Indexes when created or deleted go through a series of steps to add
// a) delete, b) write and c) read permissions one by one. Backfill is done
// before the READ_WRITE_AND_DELETE state. If the backfill succeeds, the read
// permission is granted. If not, the given permissions are removed one by one,
// and the index will be deleted when it is unused.
// If the backfill is successfully complete, the index will be in
// READ_WRITE_AND_DELETE state, and remain so until the user deletes it. If an
// Index is dropped, it will move from READ_WRITE_AND_DELETE state throu the
// WRITE_AND_DELETE_WHILE_REMOVING and DELETE_ONLY_WHILE_REMOVING states to
// INDEX_UNUSED.
type IndexPermissions int32

const (
	IndexPermissions_INDEX_PERM_DELETE_ONLY      IndexPermissions = 0
	IndexPermissions_INDEX_PERM_WRITE_AND_DELETE IndexPermissions = 2
	IndexPermissions_INDEX_PERM_DO_BACKFILL      IndexPermissions = 4
	// This is the "success" state, where the index is completely usable.
	IndexPermissions_INDEX_PERM_READ_WRITE_AND_DELETE IndexPermissions = 6
	// Used while removing an index -- either due to backfill failure, or
	// due to a client requested "drop index".
	IndexPermissions_INDEX_PERM_WRITE_AND_DELETE_WHILE_REMOVING IndexPermissions = 8
	IndexPermissions_INDEX_PERM_DELETE_ONLY_WHILE_REMOVING      IndexPermissions = 10
	IndexPermissions_INDEX_PERM_INDEX_UNUSED                    IndexPermissions = 12
	// Used as a sentinel value.
	IndexPermissions_INDEX_PERM_NOT_USED IndexPermissions = 14
)

// Enum value maps for IndexPermissions.
var (
	IndexPermissions_name = map[int32]string{
		0:  "INDEX_PERM_DELETE_ONLY",
		2:  "INDEX_PERM_WRITE_AND_DELETE",
		4:  "INDEX_PERM_DO_BACKFILL",
		6:  "INDEX_PERM_READ_WRITE_AND_DELETE",
		8:  "INDEX_PERM_WRITE_AND_DELETE_WHILE_REMOVING",
		10: "INDEX_PERM_DELETE_ONLY_WHILE_REMOVING",
		12: "INDEX_PERM_INDEX_UNUSED",
		14: "INDEX_PERM_NOT_USED",
	}
	IndexPermissions_value = map[string]int32{
		"INDEX_PERM_DELETE_ONLY":                     0,
		"INDEX_PERM_WRITE_AND_DELETE":                2,
		"INDEX_PERM_DO_BACKFILL":                     4,
		"INDEX_PERM_READ_WRITE_AND_DELETE":           6,
		"INDEX_PERM_WRITE_AND_DELETE_WHILE_REMOVING": 8,
		"INDEX_PERM_DELETE_ONLY_WHILE_REMOVING":      10,
		"INDEX_PERM_INDEX_UNUSED":                    12,
		"INDEX_PERM_NOT_USED":                        14,
	}
)

func (x IndexPermissions) Enum() *IndexPermissions {
	p := new(IndexPermissions)
	*p = x
	return p
}

func (x IndexPermissions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexPermissions) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[7].Descriptor()
}

func (IndexPermissions) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[7]
}

func (x IndexPermissions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IndexPermissions) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IndexPermissions(num)
	return nil
}

// Deprecated: Use IndexPermissions.Descriptor instead.
func (IndexPermissions) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7}
}

// The possible order modes for clients.
// Clients specify these in new scan requests.
// Ordered scans are fault-tolerant, and can be retried elsewhere in the case
// of tablet server failure. However, ordered scans impose additional overhead
// since the tablet server needs to sort the result rows.
type OrderMode int32

const (
	OrderMode_UNKNOWN_ORDER_MODE OrderMode = 0
	// This is the default order mode.
	OrderMode_UNORDERED OrderMode = 1
	OrderMode_ORDERED   OrderMode = 2
)

// Enum value maps for OrderMode.
var (
	OrderMode_name = map[int32]string{
		0: "UNKNOWN_ORDER_MODE",
		1: "UNORDERED",
		2: "ORDERED",
	}
	OrderMode_value = map[string]int32{
		"UNKNOWN_ORDER_MODE": 0,
		"UNORDERED":          1,
		"ORDERED":            2,
	}
)

func (x OrderMode) Enum() *OrderMode {
	p := new(OrderMode)
	*p = x
	return p
}

func (x OrderMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[8].Descriptor()
}

func (OrderMode) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[8]
}

func (x OrderMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderMode(num)
	return nil
}

// Deprecated: Use OrderMode.Descriptor instead.
func (OrderMode) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{8}
}

type IsolationLevel int32

const (
	IsolationLevel_NON_TRANSACTIONAL      IsolationLevel = 0
	IsolationLevel_SNAPSHOT_ISOLATION     IsolationLevel = 1
	IsolationLevel_SERIALIZABLE_ISOLATION IsolationLevel = 2
)

// Enum value maps for IsolationLevel.
var (
	IsolationLevel_name = map[int32]string{
		0: "NON_TRANSACTIONAL",
		1: "SNAPSHOT_ISOLATION",
		2: "SERIALIZABLE_ISOLATION",
	}
	IsolationLevel_value = map[string]int32{
		"NON_TRANSACTIONAL":      0,
		"SNAPSHOT_ISOLATION":     1,
		"SERIALIZABLE_ISOLATION": 2,
	}
)

func (x IsolationLevel) Enum() *IsolationLevel {
	p := new(IsolationLevel)
	*p = x
	return p
}

func (x IsolationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[9].Descriptor()
}

func (IsolationLevel) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[9]
}

func (x IsolationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IsolationLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IsolationLevel(num)
	return nil
}

// Deprecated: Use IsolationLevel.Descriptor instead.
func (IsolationLevel) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{9}
}

// This enum matches enum RowMarkType defined in src/include/nodes/plannodes.h.
// The exception is ROW_MARK_ABSENT, which signifies the absence of a row mark.
type RowMarkType int32

const (
	// Obtain exclusive tuple lock.
	RowMarkType_ROW_MARK_EXCLUSIVE RowMarkType = 0
	// Obtain no-key exclusive tuple lock.
	RowMarkType_ROW_MARK_NOKEYEXCLUSIVE RowMarkType = 1
	// Obtain shared tuple lock.
	RowMarkType_ROW_MARK_SHARE RowMarkType = 2
	// Obtain keyshare tuple lock.
	RowMarkType_ROW_MARK_KEYSHARE RowMarkType = 3
	// Not supported. Used for postgres compatibility.
	RowMarkType_ROW_MARK_REFERENCE RowMarkType = 4
	// Not supported. Used for postgres compatibility.
	RowMarkType_ROW_MARK_COPY RowMarkType = 5
	// Obtain no tuple lock (this should never sent be on the wire).  The value
	// should be high for convenient comparisons with the other row lock types.
	RowMarkType_ROW_MARK_ABSENT RowMarkType = 15
)

// Enum value maps for RowMarkType.
var (
	RowMarkType_name = map[int32]string{
		0:  "ROW_MARK_EXCLUSIVE",
		1:  "ROW_MARK_NOKEYEXCLUSIVE",
		2:  "ROW_MARK_SHARE",
		3:  "ROW_MARK_KEYSHARE",
		4:  "ROW_MARK_REFERENCE",
		5:  "ROW_MARK_COPY",
		15: "ROW_MARK_ABSENT",
	}
	RowMarkType_value = map[string]int32{
		"ROW_MARK_EXCLUSIVE":      0,
		"ROW_MARK_NOKEYEXCLUSIVE": 1,
		"ROW_MARK_SHARE":          2,
		"ROW_MARK_KEYSHARE":       3,
		"ROW_MARK_REFERENCE":      4,
		"ROW_MARK_COPY":           5,
		"ROW_MARK_ABSENT":         15,
	}
)

func (x RowMarkType) Enum() *RowMarkType {
	p := new(RowMarkType)
	*p = x
	return p
}

func (x RowMarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowMarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[10].Descriptor()
}

func (RowMarkType) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[10]
}

func (x RowMarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RowMarkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RowMarkType(num)
	return nil
}

// Deprecated: Use RowMarkType.Descriptor instead.
func (RowMarkType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{10}
}

type TransactionStatus int32

const (
	TransactionStatus_CREATED                         TransactionStatus = 1
	TransactionStatus_PENDING                         TransactionStatus = 2
	TransactionStatus_COMMITTED                       TransactionStatus = 4
	TransactionStatus_SEALED                          TransactionStatus = 5
	TransactionStatus_APPLIED_IN_ALL_INVOLVED_TABLETS TransactionStatus = 7
	TransactionStatus_ABORTED                         TransactionStatus = 8
	// All following entries are not used in RAFT, but as events between status tablet and involved
	// tablets:
	TransactionStatus_APPLYING                           TransactionStatus = 20
	TransactionStatus_APPLIED_IN_ONE_OF_INVOLVED_TABLETS TransactionStatus = 21
	TransactionStatus_IMMEDIATE_CLEANUP                  TransactionStatus = 22
	TransactionStatus_GRACEFUL_CLEANUP                   TransactionStatus = 23
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		1:  "CREATED",
		2:  "PENDING",
		4:  "COMMITTED",
		5:  "SEALED",
		7:  "APPLIED_IN_ALL_INVOLVED_TABLETS",
		8:  "ABORTED",
		20: "APPLYING",
		21: "APPLIED_IN_ONE_OF_INVOLVED_TABLETS",
		22: "IMMEDIATE_CLEANUP",
		23: "GRACEFUL_CLEANUP",
	}
	TransactionStatus_value = map[string]int32{
		"CREATED":                            1,
		"PENDING":                            2,
		"COMMITTED":                          4,
		"SEALED":                             5,
		"APPLIED_IN_ALL_INVOLVED_TABLETS":    7,
		"ABORTED":                            8,
		"APPLYING":                           20,
		"APPLIED_IN_ONE_OF_INVOLVED_TABLETS": 21,
		"IMMEDIATE_CLEANUP":                  22,
		"GRACEFUL_CLEANUP":                   23,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[11].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[11]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransactionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransactionStatus(num)
	return nil
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{11}
}

type InvolvedTabletMetadataState int32

const (
	InvolvedTabletMetadataState_MISSING   InvolvedTabletMetadataState = 0
	InvolvedTabletMetadataState_EXIST     InvolvedTabletMetadataState = 1
	InvolvedTabletMetadataState_MAY_EXIST InvolvedTabletMetadataState = 2
)

// Enum value maps for InvolvedTabletMetadataState.
var (
	InvolvedTabletMetadataState_name = map[int32]string{
		0: "MISSING",
		1: "EXIST",
		2: "MAY_EXIST",
	}
	InvolvedTabletMetadataState_value = map[string]int32{
		"MISSING":   0,
		"EXIST":     1,
		"MAY_EXIST": 2,
	}
)

func (x InvolvedTabletMetadataState) Enum() *InvolvedTabletMetadataState {
	p := new(InvolvedTabletMetadataState)
	*p = x
	return p
}

func (x InvolvedTabletMetadataState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvolvedTabletMetadataState) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[12].Descriptor()
}

func (InvolvedTabletMetadataState) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[12]
}

func (x InvolvedTabletMetadataState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InvolvedTabletMetadataState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InvolvedTabletMetadataState(num)
	return nil
}

// Deprecated: Use InvolvedTabletMetadataState.Descriptor instead.
func (InvolvedTabletMetadataState) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{12}
}

// --------------------------------------------------------------------------------------------------
// YQL support.
// The following section is common for all query language.
// --------------------------------------------------------------------------------------------------
// Represent system internal values.
type QLVirtualValuePB int32

const (
	QLVirtualValuePB_LIMIT_MAX QLVirtualValuePB = 1
	QLVirtualValuePB_LIMIT_MIN QLVirtualValuePB = 2
)

// Enum value maps for QLVirtualValuePB.
var (
	QLVirtualValuePB_name = map[int32]string{
		1: "LIMIT_MAX",
		2: "LIMIT_MIN",
	}
	QLVirtualValuePB_value = map[string]int32{
		"LIMIT_MAX": 1,
		"LIMIT_MIN": 2,
	}
)

func (x QLVirtualValuePB) Enum() *QLVirtualValuePB {
	p := new(QLVirtualValuePB)
	*p = x
	return p
}

func (x QLVirtualValuePB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLVirtualValuePB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[13].Descriptor()
}

func (QLVirtualValuePB) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[13]
}

func (x QLVirtualValuePB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLVirtualValuePB) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLVirtualValuePB(num)
	return nil
}

// Deprecated: Use QLVirtualValuePB.Descriptor instead.
func (QLVirtualValuePB) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{13}
}

type JsonOperatorPB int32

const (
	JsonOperatorPB_JSON_OBJECT JsonOperatorPB = 0 // The -> operator applied to a column.
	JsonOperatorPB_JSON_TEXT   JsonOperatorPB = 1 // The ->> operator applied to a column.
)

// Enum value maps for JsonOperatorPB.
var (
	JsonOperatorPB_name = map[int32]string{
		0: "JSON_OBJECT",
		1: "JSON_TEXT",
	}
	JsonOperatorPB_value = map[string]int32{
		"JSON_OBJECT": 0,
		"JSON_TEXT":   1,
	}
)

func (x JsonOperatorPB) Enum() *JsonOperatorPB {
	p := new(JsonOperatorPB)
	*p = x
	return p
}

func (x JsonOperatorPB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JsonOperatorPB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[14].Descriptor()
}

func (JsonOperatorPB) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[14]
}

func (x JsonOperatorPB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *JsonOperatorPB) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = JsonOperatorPB(num)
	return nil
}

// Deprecated: Use JsonOperatorPB.Descriptor instead.
func (JsonOperatorPB) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{14}
}

// Expression operators.
type QLOperator int32

const (
	QLOperator_QL_OP_NOOP QLOperator = 0
	// Logic operators that take one operand.
	QLOperator_QL_OP_NOT      QLOperator = 1
	QLOperator_QL_OP_IS_TRUE  QLOperator = 2
	QLOperator_QL_OP_IS_FALSE QLOperator = 3
	// Logic operators that take two or more operands.
	QLOperator_QL_OP_AND QLOperator = 4
	QLOperator_QL_OP_OR  QLOperator = 5
	// Relation operators that take one operand.
	QLOperator_QL_OP_IS_NULL     QLOperator = 6
	QLOperator_QL_OP_IS_NOT_NULL QLOperator = 7
	// Relation operators that take two operands.
	QLOperator_QL_OP_EQUAL              QLOperator = 8
	QLOperator_QL_OP_LESS_THAN          QLOperator = 9
	QLOperator_QL_OP_LESS_THAN_EQUAL    QLOperator = 10
	QLOperator_QL_OP_GREATER_THAN       QLOperator = 11
	QLOperator_QL_OP_GREATER_THAN_EQUAL QLOperator = 12
	QLOperator_QL_OP_NOT_EQUAL          QLOperator = 13
	QLOperator_QL_OP_LIKE               QLOperator = 14
	QLOperator_QL_OP_NOT_LIKE           QLOperator = 15
	QLOperator_QL_OP_IN                 QLOperator = 16
	QLOperator_QL_OP_NOT_IN             QLOperator = 17
	// Relation operators that take three operands.
	QLOperator_QL_OP_BETWEEN     QLOperator = 18
	QLOperator_QL_OP_NOT_BETWEEN QLOperator = 19
	// Operators that take no operand. For use in "if" clause only currently.
	QLOperator_QL_OP_EXISTS     QLOperator = 20 // IF EXISTS
	QLOperator_QL_OP_NOT_EXISTS QLOperator = 21 // IF NOT EXISTS
)

// Enum value maps for QLOperator.
var (
	QLOperator_name = map[int32]string{
		0:  "QL_OP_NOOP",
		1:  "QL_OP_NOT",
		2:  "QL_OP_IS_TRUE",
		3:  "QL_OP_IS_FALSE",
		4:  "QL_OP_AND",
		5:  "QL_OP_OR",
		6:  "QL_OP_IS_NULL",
		7:  "QL_OP_IS_NOT_NULL",
		8:  "QL_OP_EQUAL",
		9:  "QL_OP_LESS_THAN",
		10: "QL_OP_LESS_THAN_EQUAL",
		11: "QL_OP_GREATER_THAN",
		12: "QL_OP_GREATER_THAN_EQUAL",
		13: "QL_OP_NOT_EQUAL",
		14: "QL_OP_LIKE",
		15: "QL_OP_NOT_LIKE",
		16: "QL_OP_IN",
		17: "QL_OP_NOT_IN",
		18: "QL_OP_BETWEEN",
		19: "QL_OP_NOT_BETWEEN",
		20: "QL_OP_EXISTS",
		21: "QL_OP_NOT_EXISTS",
	}
	QLOperator_value = map[string]int32{
		"QL_OP_NOOP":               0,
		"QL_OP_NOT":                1,
		"QL_OP_IS_TRUE":            2,
		"QL_OP_IS_FALSE":           3,
		"QL_OP_AND":                4,
		"QL_OP_OR":                 5,
		"QL_OP_IS_NULL":            6,
		"QL_OP_IS_NOT_NULL":        7,
		"QL_OP_EQUAL":              8,
		"QL_OP_LESS_THAN":          9,
		"QL_OP_LESS_THAN_EQUAL":    10,
		"QL_OP_GREATER_THAN":       11,
		"QL_OP_GREATER_THAN_EQUAL": 12,
		"QL_OP_NOT_EQUAL":          13,
		"QL_OP_LIKE":               14,
		"QL_OP_NOT_LIKE":           15,
		"QL_OP_IN":                 16,
		"QL_OP_NOT_IN":             17,
		"QL_OP_BETWEEN":            18,
		"QL_OP_NOT_BETWEEN":        19,
		"QL_OP_EXISTS":             20,
		"QL_OP_NOT_EXISTS":         21,
	}
)

func (x QLOperator) Enum() *QLOperator {
	p := new(QLOperator)
	*p = x
	return p
}

func (x QLOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[15].Descriptor()
}

func (QLOperator) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[15]
}

func (x QLOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLOperator(num)
	return nil
}

// Deprecated: Use QLOperator.Descriptor instead.
func (QLOperator) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{15}
}

type PartitionSchemaPB_HashSchema int32

const (
	PartitionSchemaPB_MULTI_COLUMN_HASH_SCHEMA PartitionSchemaPB_HashSchema = 1
	PartitionSchemaPB_REDIS_HASH_SCHEMA        PartitionSchemaPB_HashSchema = 2
	PartitionSchemaPB_PGSQL_HASH_SCHEMA        PartitionSchemaPB_HashSchema = 3
)

// Enum value maps for PartitionSchemaPB_HashSchema.
var (
	PartitionSchemaPB_HashSchema_name = map[int32]string{
		1: "MULTI_COLUMN_HASH_SCHEMA",
		2: "REDIS_HASH_SCHEMA",
		3: "PGSQL_HASH_SCHEMA",
	}
	PartitionSchemaPB_HashSchema_value = map[string]int32{
		"MULTI_COLUMN_HASH_SCHEMA": 1,
		"REDIS_HASH_SCHEMA":        2,
		"PGSQL_HASH_SCHEMA":        3,
	}
)

func (x PartitionSchemaPB_HashSchema) Enum() *PartitionSchemaPB_HashSchema {
	p := new(PartitionSchemaPB_HashSchema)
	*p = x
	return p
}

func (x PartitionSchemaPB_HashSchema) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionSchemaPB_HashSchema) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[16].Descriptor()
}

func (PartitionSchemaPB_HashSchema) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[16]
}

func (x PartitionSchemaPB_HashSchema) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PartitionSchemaPB_HashSchema) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PartitionSchemaPB_HashSchema(num)
	return nil
}

// Deprecated: Use PartitionSchemaPB_HashSchema.Descriptor instead.
func (PartitionSchemaPB_HashSchema) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7, 0}
}

type PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm int32

const (
	PartitionSchemaPB_HashBucketSchemaPB_UNKNOWN       PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm = 0
	PartitionSchemaPB_HashBucketSchemaPB_MURMUR_HASH_2 PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm = 1
)

// Enum value maps for PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm.
var (
	PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm_name = map[int32]string{
		0: "UNKNOWN",
		1: "MURMUR_HASH_2",
	}
	PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm_value = map[string]int32{
		"UNKNOWN":       0,
		"MURMUR_HASH_2": 1,
	}
)

func (x PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm) Enum() *PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm {
	p := new(PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm)
	*p = x
	return p
}

func (x PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_common_proto_enumTypes[17].Descriptor()
}

func (PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm) Type() protoreflect.EnumType {
	return &file_yb_common_common_proto_enumTypes[17]
}

func (x PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm(num)
	return nil
}

// Deprecated: Use PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm.Descriptor instead.
func (PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7, 3, 0}
}

type QLTypePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Main       *DataType            `protobuf:"varint,1,opt,name=main,enum=yb.DataType" json:"main,omitempty"`
	Params     []*QLTypePB          `protobuf:"bytes,2,rep,name=params" json:"params,omitempty"`
	UdtypeInfo *QLTypePB_UDTypeInfo `protobuf:"bytes,3,opt,name=udtype_info,json=udtypeInfo" json:"udtype_info,omitempty"`
}

func (x *QLTypePB) Reset() {
	*x = QLTypePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLTypePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLTypePB) ProtoMessage() {}

func (x *QLTypePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLTypePB.ProtoReflect.Descriptor instead.
func (*QLTypePB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{0}
}

func (x *QLTypePB) GetMain() DataType {
	if x != nil && x.Main != nil {
		return *x.Main
	}
	return DataType_UNKNOWN_DATA
}

func (x *QLTypePB) GetParams() []*QLTypePB {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QLTypePB) GetUdtypeInfo() *QLTypePB_UDTypeInfo {
	if x != nil {
		return x.UdtypeInfo
	}
	return nil
}

// TODO: Differentiate between the schema attributes
// that are only relevant to the server (e.g.,
// encoding and compression) and those that also
// matter to the client.
type ColumnSchemaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        *string   `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Type        *QLTypePB `protobuf:"bytes,3,req,name=type" json:"type,omitempty"`
	IsKey       *bool     `protobuf:"varint,4,opt,name=is_key,json=isKey,def=0" json:"is_key,omitempty"`
	IsHashKey   *bool     `protobuf:"varint,5,opt,name=is_hash_key,json=isHashKey,def=0" json:"is_hash_key,omitempty"`
	IsNullable  *bool     `protobuf:"varint,6,opt,name=is_nullable,json=isNullable,def=0" json:"is_nullable,omitempty"`
	IsStatic    *bool     `protobuf:"varint,7,opt,name=is_static,json=isStatic,def=0" json:"is_static,omitempty"`
	IsCounter   *bool     `protobuf:"varint,8,opt,name=is_counter,json=isCounter,def=0" json:"is_counter,omitempty"`
	Order       *int32    `protobuf:"varint,12,opt,name=order,def=0" json:"order,omitempty"`
	SortingType *uint32   `protobuf:"varint,9,opt,name=sorting_type,json=sortingType,def=0" json:"sorting_type,omitempty"`
	// The JSON attribute was mistakenly placed here, but it is not used.
	// To be safe, it's left here for now.
	// JSON attribute (for c->'a'->>'b' case).
	OBSOLETEJsonOperations []*QLJsonOperationPB `protobuf:"bytes,13,rep,name=OBSOLETE_json_operations,json=OBSOLETEJsonOperations" json:"OBSOLETE_json_operations,omitempty"`
}

// Default values for ColumnSchemaPB fields.
const (
	Default_ColumnSchemaPB_IsKey       = bool(false)
	Default_ColumnSchemaPB_IsHashKey   = bool(false)
	Default_ColumnSchemaPB_IsNullable  = bool(false)
	Default_ColumnSchemaPB_IsStatic    = bool(false)
	Default_ColumnSchemaPB_IsCounter   = bool(false)
	Default_ColumnSchemaPB_Order       = int32(0)
	Default_ColumnSchemaPB_SortingType = uint32(0)
)

func (x *ColumnSchemaPB) Reset() {
	*x = ColumnSchemaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnSchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSchemaPB) ProtoMessage() {}

func (x *ColumnSchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSchemaPB.ProtoReflect.Descriptor instead.
func (*ColumnSchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnSchemaPB) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ColumnSchemaPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ColumnSchemaPB) GetType() *QLTypePB {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ColumnSchemaPB) GetIsKey() bool {
	if x != nil && x.IsKey != nil {
		return *x.IsKey
	}
	return Default_ColumnSchemaPB_IsKey
}

func (x *ColumnSchemaPB) GetIsHashKey() bool {
	if x != nil && x.IsHashKey != nil {
		return *x.IsHashKey
	}
	return Default_ColumnSchemaPB_IsHashKey
}

func (x *ColumnSchemaPB) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return Default_ColumnSchemaPB_IsNullable
}

func (x *ColumnSchemaPB) GetIsStatic() bool {
	if x != nil && x.IsStatic != nil {
		return *x.IsStatic
	}
	return Default_ColumnSchemaPB_IsStatic
}

func (x *ColumnSchemaPB) GetIsCounter() bool {
	if x != nil && x.IsCounter != nil {
		return *x.IsCounter
	}
	return Default_ColumnSchemaPB_IsCounter
}

func (x *ColumnSchemaPB) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return Default_ColumnSchemaPB_Order
}

func (x *ColumnSchemaPB) GetSortingType() uint32 {
	if x != nil && x.SortingType != nil {
		return *x.SortingType
	}
	return Default_ColumnSchemaPB_SortingType
}

func (x *ColumnSchemaPB) GetOBSOLETEJsonOperations() []*QLJsonOperationPB {
	if x != nil {
		return x.OBSOLETEJsonOperations
	}
	return nil
}

type ColocatedTableIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: an absent value means NULL.
	//
	// Types that are assignable to Value:
	//	*ColocatedTableIdentifierPB_PgtableId
	//	*ColocatedTableIdentifierPB_CotableId
	Value isColocatedTableIdentifierPB_Value `protobuf_oneof:"value"`
}

func (x *ColocatedTableIdentifierPB) Reset() {
	*x = ColocatedTableIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColocatedTableIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColocatedTableIdentifierPB) ProtoMessage() {}

func (x *ColocatedTableIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColocatedTableIdentifierPB.ProtoReflect.Descriptor instead.
func (*ColocatedTableIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{2}
}

func (m *ColocatedTableIdentifierPB) GetValue() isColocatedTableIdentifierPB_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ColocatedTableIdentifierPB) GetPgtableId() uint32 {
	if x, ok := x.GetValue().(*ColocatedTableIdentifierPB_PgtableId); ok {
		return x.PgtableId
	}
	return 0
}

func (x *ColocatedTableIdentifierPB) GetCotableId() []byte {
	if x, ok := x.GetValue().(*ColocatedTableIdentifierPB_CotableId); ok {
		return x.CotableId
	}
	return nil
}

type isColocatedTableIdentifierPB_Value interface {
	isColocatedTableIdentifierPB_Value()
}

type ColocatedTableIdentifierPB_PgtableId struct {
	// Colocated YSQL user tables use 4-byte PG table ID.
	PgtableId uint32 `protobuf:"varint,1,opt,name=pgtable_id,json=pgtableId,oneof"`
}

type ColocatedTableIdentifierPB_CotableId struct {
	// Colocated YSQL system tables use 16-byte UUID.
	CotableId []byte `protobuf:"bytes,2,opt,name=cotable_id,json=cotableId,oneof"`
}

func (*ColocatedTableIdentifierPB_PgtableId) isColocatedTableIdentifierPB_Value() {}

func (*ColocatedTableIdentifierPB_CotableId) isColocatedTableIdentifierPB_Value() {}

type TablePropertiesPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultTimeToLive *uint64 `protobuf:"varint,1,opt,name=default_time_to_live,json=defaultTimeToLive" json:"default_time_to_live,omitempty"`
	ContainCounters   *bool   `protobuf:"varint,2,opt,name=contain_counters,json=containCounters" json:"contain_counters,omitempty"`
	IsTransactional   *bool   `protobuf:"varint,3,opt,name=is_transactional,json=isTransactional,def=0" json:"is_transactional,omitempty"`
	// The table id of the table that this table is co-partitioned with.
	CopartitionTableId []byte `protobuf:"bytes,4,opt,name=copartition_table_id,json=copartitionTableId" json:"copartition_table_id,omitempty"`
	// For index table only: consistency with respect to the indexed table.
	ConsistencyLevel     *YBConsistencyLevel `protobuf:"varint,5,opt,name=consistency_level,json=consistencyLevel,enum=yb.YBConsistencyLevel,def=1" json:"consistency_level,omitempty"`
	UseMangledColumnName *bool               `protobuf:"varint,6,opt,name=use_mangled_column_name,json=useMangledColumnName,def=0" json:"use_mangled_column_name,omitempty"`
	NumTablets           *int32              `protobuf:"varint,7,opt,name=num_tablets,json=numTablets,def=0" json:"num_tablets,omitempty"`
	IsYsqlCatalogTable   *bool               `protobuf:"varint,8,opt,name=is_ysql_catalog_table,json=isYsqlCatalogTable,def=0" json:"is_ysql_catalog_table,omitempty"`
	RetainDeleteMarkers  *bool               `protobuf:"varint,9,opt,name=retain_delete_markers,json=retainDeleteMarkers,def=0" json:"retain_delete_markers,omitempty"`
	BackfillingTimestamp *uint64             `protobuf:"varint,10,opt,name=backfilling_timestamp,json=backfillingTimestamp" json:"backfilling_timestamp,omitempty"`
}

// Default values for TablePropertiesPB fields.
const (
	Default_TablePropertiesPB_IsTransactional      = bool(false)
	Default_TablePropertiesPB_ConsistencyLevel     = YBConsistencyLevel_STRONG
	Default_TablePropertiesPB_UseMangledColumnName = bool(false)
	Default_TablePropertiesPB_NumTablets           = int32(0)
	Default_TablePropertiesPB_IsYsqlCatalogTable   = bool(false)
	Default_TablePropertiesPB_RetainDeleteMarkers  = bool(false)
)

func (x *TablePropertiesPB) Reset() {
	*x = TablePropertiesPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablePropertiesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePropertiesPB) ProtoMessage() {}

func (x *TablePropertiesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePropertiesPB.ProtoReflect.Descriptor instead.
func (*TablePropertiesPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{3}
}

func (x *TablePropertiesPB) GetDefaultTimeToLive() uint64 {
	if x != nil && x.DefaultTimeToLive != nil {
		return *x.DefaultTimeToLive
	}
	return 0
}

func (x *TablePropertiesPB) GetContainCounters() bool {
	if x != nil && x.ContainCounters != nil {
		return *x.ContainCounters
	}
	return false
}

func (x *TablePropertiesPB) GetIsTransactional() bool {
	if x != nil && x.IsTransactional != nil {
		return *x.IsTransactional
	}
	return Default_TablePropertiesPB_IsTransactional
}

func (x *TablePropertiesPB) GetCopartitionTableId() []byte {
	if x != nil {
		return x.CopartitionTableId
	}
	return nil
}

func (x *TablePropertiesPB) GetConsistencyLevel() YBConsistencyLevel {
	if x != nil && x.ConsistencyLevel != nil {
		return *x.ConsistencyLevel
	}
	return Default_TablePropertiesPB_ConsistencyLevel
}

func (x *TablePropertiesPB) GetUseMangledColumnName() bool {
	if x != nil && x.UseMangledColumnName != nil {
		return *x.UseMangledColumnName
	}
	return Default_TablePropertiesPB_UseMangledColumnName
}

func (x *TablePropertiesPB) GetNumTablets() int32 {
	if x != nil && x.NumTablets != nil {
		return *x.NumTablets
	}
	return Default_TablePropertiesPB_NumTablets
}

func (x *TablePropertiesPB) GetIsYsqlCatalogTable() bool {
	if x != nil && x.IsYsqlCatalogTable != nil {
		return *x.IsYsqlCatalogTable
	}
	return Default_TablePropertiesPB_IsYsqlCatalogTable
}

func (x *TablePropertiesPB) GetRetainDeleteMarkers() bool {
	if x != nil && x.RetainDeleteMarkers != nil {
		return *x.RetainDeleteMarkers
	}
	return Default_TablePropertiesPB_RetainDeleteMarkers
}

func (x *TablePropertiesPB) GetBackfillingTimestamp() uint64 {
	if x != nil && x.BackfillingTimestamp != nil {
		return *x.BackfillingTimestamp
	}
	return 0
}

type SchemaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns          []*ColumnSchemaPB           `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	TableProperties  *TablePropertiesPB          `protobuf:"bytes,2,opt,name=table_properties,json=tableProperties" json:"table_properties,omitempty"`
	ColocatedTableId *ColocatedTableIdentifierPB `protobuf:"bytes,3,opt,name=colocated_table_id,json=colocatedTableId" json:"colocated_table_id,omitempty"`
}

func (x *SchemaPB) Reset() {
	*x = SchemaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaPB) ProtoMessage() {}

func (x *SchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaPB.ProtoReflect.Descriptor instead.
func (*SchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{4}
}

func (x *SchemaPB) GetColumns() []*ColumnSchemaPB {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SchemaPB) GetTableProperties() *TablePropertiesPB {
	if x != nil {
		return x.TableProperties
	}
	return nil
}

func (x *SchemaPB) GetColocatedTableId() *ColocatedTableIdentifierPB {
	if x != nil {
		return x.ColocatedTableId
	}
	return nil
}

// This message contains the metadata of a secondary index of a table.
// It maps the index::columns to the expressions of table::columns.
//
// Notes on where to find metadata of an INDEX.
//   - Each INDEX is represented by IndexInfo and IndexTable.
//     IndexInfoPB contains the definitions of the INDEX.
//     IndexTable contains duplicate user-data for quick access.
//   - The IndexInfoPB is stored in the Catalog::Table being indexed.
//   - The TablePropertiesPB is kept in Catalog::IndexTable.
//     Internally, Catalog::IndexTable is just the same as any Catalog::Table.
type IndexInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId        []byte  `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`                        // Index table id.
	IndexedTableId []byte  `protobuf:"bytes,8,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"` // Indexed table id.
	Version        *uint32 `protobuf:"varint,2,opt,name=version,def=0" json:"version,omitempty"`                                // Index table's schema version.
	IsLocal        *bool   `protobuf:"varint,3,opt,name=is_local,json=isLocal,def=0" json:"is_local,omitempty"`                 // Whether the index is a local index
	IsUnique       *bool   `protobuf:"varint,7,opt,name=is_unique,json=isUnique,def=0" json:"is_unique,omitempty"`              // Whether the index is a unique index
	// We should only have this in the elements of "repeated IndexInfoPB indexes" of the
	// SysTablesEntryPB of the main table.
	IndexPermissions      *IndexPermissions            `protobuf:"varint,12,opt,name=index_permissions,json=indexPermissions,enum=yb.IndexPermissions,def=6" json:"index_permissions,omitempty"`
	Columns               []*IndexInfoPB_IndexColumnPB `protobuf:"bytes,4,rep,name=columns" json:"columns,omitempty"`                                                                // Indexed and covering columns.
	HashColumnCount       *uint32                      `protobuf:"varint,5,opt,name=hash_column_count,json=hashColumnCount" json:"hash_column_count,omitempty"`                      // Number of hash columns in the index.
	RangeColumnCount      *uint32                      `protobuf:"varint,6,opt,name=range_column_count,json=rangeColumnCount" json:"range_column_count,omitempty"`                   // Number of range columns in the index.
	IndexedHashColumnIds  []uint32                     `protobuf:"varint,9,rep,name=indexed_hash_column_ids,json=indexedHashColumnIds" json:"indexed_hash_column_ids,omitempty"`     // Hash column ids in the indexed table.
	IndexedRangeColumnIds []uint32                     `protobuf:"varint,10,rep,name=indexed_range_column_ids,json=indexedRangeColumnIds" json:"indexed_range_column_ids,omitempty"` // Range column ids in the indexed table.
	// The mangled-name flag is kept on both IndexInfo and IndexTable as the same mangled-name is
	// used in both IndexInfo and IndexTable columns.
	UseMangledColumnName *bool `protobuf:"varint,11,opt,name=use_mangled_column_name,json=useMangledColumnName,def=0" json:"use_mangled_column_name,omitempty"` // Newer index has mangled name.
	// When backfill fails with error, the first message that it failed with.
	BackfillErrorMessage *string `protobuf:"bytes,31,opt,name=backfill_error_message,json=backfillErrorMessage" json:"backfill_error_message,omitempty"`
	IsBackfillDeferred   *bool   `protobuf:"varint,32,opt,name=is_backfill_deferred,json=isBackfillDeferred,def=0" json:"is_backfill_deferred,omitempty"` // Should backfill be deferred.
}

// Default values for IndexInfoPB fields.
const (
	Default_IndexInfoPB_Version              = uint32(0)
	Default_IndexInfoPB_IsLocal              = bool(false)
	Default_IndexInfoPB_IsUnique             = bool(false)
	Default_IndexInfoPB_IndexPermissions     = IndexPermissions_INDEX_PERM_READ_WRITE_AND_DELETE
	Default_IndexInfoPB_UseMangledColumnName = bool(false)
	Default_IndexInfoPB_IsBackfillDeferred   = bool(false)
)

func (x *IndexInfoPB) Reset() {
	*x = IndexInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfoPB) ProtoMessage() {}

func (x *IndexInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfoPB.ProtoReflect.Descriptor instead.
func (*IndexInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{5}
}

func (x *IndexInfoPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *IndexInfoPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

func (x *IndexInfoPB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_IndexInfoPB_Version
}

func (x *IndexInfoPB) GetIsLocal() bool {
	if x != nil && x.IsLocal != nil {
		return *x.IsLocal
	}
	return Default_IndexInfoPB_IsLocal
}

func (x *IndexInfoPB) GetIsUnique() bool {
	if x != nil && x.IsUnique != nil {
		return *x.IsUnique
	}
	return Default_IndexInfoPB_IsUnique
}

func (x *IndexInfoPB) GetIndexPermissions() IndexPermissions {
	if x != nil && x.IndexPermissions != nil {
		return *x.IndexPermissions
	}
	return Default_IndexInfoPB_IndexPermissions
}

func (x *IndexInfoPB) GetColumns() []*IndexInfoPB_IndexColumnPB {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexInfoPB) GetHashColumnCount() uint32 {
	if x != nil && x.HashColumnCount != nil {
		return *x.HashColumnCount
	}
	return 0
}

func (x *IndexInfoPB) GetRangeColumnCount() uint32 {
	if x != nil && x.RangeColumnCount != nil {
		return *x.RangeColumnCount
	}
	return 0
}

func (x *IndexInfoPB) GetIndexedHashColumnIds() []uint32 {
	if x != nil {
		return x.IndexedHashColumnIds
	}
	return nil
}

func (x *IndexInfoPB) GetIndexedRangeColumnIds() []uint32 {
	if x != nil {
		return x.IndexedRangeColumnIds
	}
	return nil
}

func (x *IndexInfoPB) GetUseMangledColumnName() bool {
	if x != nil && x.UseMangledColumnName != nil {
		return *x.UseMangledColumnName
	}
	return Default_IndexInfoPB_UseMangledColumnName
}

func (x *IndexInfoPB) GetBackfillErrorMessage() string {
	if x != nil && x.BackfillErrorMessage != nil {
		return *x.BackfillErrorMessage
	}
	return ""
}

func (x *IndexInfoPB) GetIsBackfillDeferred() bool {
	if x != nil && x.IsBackfillDeferred != nil {
		return *x.IsBackfillDeferred
	}
	return Default_IndexInfoPB_IsBackfillDeferred
}

type HostPortPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host *string `protobuf:"bytes,1,req,name=host" json:"host,omitempty"`
	Port *uint32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
}

func (x *HostPortPB) Reset() {
	*x = HostPortPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostPortPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostPortPB) ProtoMessage() {}

func (x *HostPortPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostPortPB.ProtoReflect.Descriptor instead.
func (*HostPortPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{6}
}

func (x *HostPortPB) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *HostPortPB) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

// The serialized format of a YB table partition schema.
type PartitionSchemaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashBucketSchemas []*PartitionSchemaPB_HashBucketSchemaPB `protobuf:"bytes,1,rep,name=hash_bucket_schemas,json=hashBucketSchemas" json:"hash_bucket_schemas,omitempty"`
	RangeSchema       *PartitionSchemaPB_RangeSchemaPB        `protobuf:"bytes,2,opt,name=range_schema,json=rangeSchema" json:"range_schema,omitempty"`
	HashSchema        *PartitionSchemaPB_HashSchema           `protobuf:"varint,3,opt,name=hash_schema,json=hashSchema,enum=yb.PartitionSchemaPB_HashSchema" json:"hash_schema,omitempty"`
}

func (x *PartitionSchemaPB) Reset() {
	*x = PartitionSchemaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSchemaPB) ProtoMessage() {}

func (x *PartitionSchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSchemaPB.ProtoReflect.Descriptor instead.
func (*PartitionSchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionSchemaPB) GetHashBucketSchemas() []*PartitionSchemaPB_HashBucketSchemaPB {
	if x != nil {
		return x.HashBucketSchemas
	}
	return nil
}

func (x *PartitionSchemaPB) GetRangeSchema() *PartitionSchemaPB_RangeSchemaPB {
	if x != nil {
		return x.RangeSchema
	}
	return nil
}

func (x *PartitionSchemaPB) GetHashSchema() PartitionSchemaPB_HashSchema {
	if x != nil && x.HashSchema != nil {
		return *x.HashSchema
	}
	return PartitionSchemaPB_MULTI_COLUMN_HASH_SCHEMA
}

// The serialized format of a YB table partition.
type PartitionPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash buckets of the partition. The number of hash buckets must match
	// the number of hash bucket components in the partition's schema.
	HashBuckets []int32 `protobuf:"varint,1,rep,packed,name=hash_buckets,json=hashBuckets" json:"hash_buckets,omitempty"`
	// The encoded start partition key (inclusive).
	PartitionKeyStart []byte `protobuf:"bytes,2,opt,name=partition_key_start,json=partitionKeyStart" json:"partition_key_start,omitempty"`
	// The encoded end partition key (exclusive).
	PartitionKeyEnd []byte `protobuf:"bytes,3,opt,name=partition_key_end,json=partitionKeyEnd" json:"partition_key_end,omitempty"`
}

func (x *PartitionPB) Reset() {
	*x = PartitionPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionPB) ProtoMessage() {}

func (x *PartitionPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionPB.ProtoReflect.Descriptor instead.
func (*PartitionPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{8}
}

func (x *PartitionPB) GetHashBuckets() []int32 {
	if x != nil {
		return x.HashBuckets
	}
	return nil
}

func (x *PartitionPB) GetPartitionKeyStart() []byte {
	if x != nil {
		return x.PartitionKeyStart
	}
	return nil
}

func (x *PartitionPB) GetPartitionKeyEnd() []byte {
	if x != nil {
		return x.PartitionKeyEnd
	}
	return nil
}

type TransactionMetadataPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId   []byte          `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"` // 16 byte uuid
	Isolation       *IsolationLevel `protobuf:"varint,2,opt,name=isolation,enum=yb.IsolationLevel,def=0" json:"isolation,omitempty"`
	StatusTablet    *string         `protobuf:"bytes,3,opt,name=status_tablet,json=statusTablet" json:"status_tablet,omitempty"`
	Priority        *uint64         `protobuf:"fixed64,4,opt,name=priority" json:"priority,omitempty"`
	StartHybridTime *uint64         `protobuf:"fixed64,5,opt,name=start_hybrid_time,json=startHybridTime" json:"start_hybrid_time,omitempty"`
	// Stores time when metadata was written to provisional records RocksDB on a
	// participating tablet. So it could be used for cleanup.
	MetadataWriteTime *uint64 `protobuf:"fixed64,6,opt,name=metadata_write_time,json=metadataWriteTime" json:"metadata_write_time,omitempty"`
}

// Default values for TransactionMetadataPB fields.
const (
	Default_TransactionMetadataPB_Isolation = IsolationLevel_NON_TRANSACTIONAL
)

func (x *TransactionMetadataPB) Reset() {
	*x = TransactionMetadataPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMetadataPB) ProtoMessage() {}

func (x *TransactionMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMetadataPB.ProtoReflect.Descriptor instead.
func (*TransactionMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionMetadataPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionMetadataPB) GetIsolation() IsolationLevel {
	if x != nil && x.Isolation != nil {
		return *x.Isolation
	}
	return Default_TransactionMetadataPB_Isolation
}

func (x *TransactionMetadataPB) GetStatusTablet() string {
	if x != nil && x.StatusTablet != nil {
		return *x.StatusTablet
	}
	return ""
}

func (x *TransactionMetadataPB) GetPriority() uint64 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *TransactionMetadataPB) GetStartHybridTime() uint64 {
	if x != nil && x.StartHybridTime != nil {
		return *x.StartHybridTime
	}
	return 0
}

func (x *TransactionMetadataPB) GetMetadataWriteTime() uint64 {
	if x != nil && x.MetadataWriteTime != nil {
		return *x.MetadataWriteTime
	}
	return 0
}

// See ReadHybridTime for explation of this message.
type ReadHybridTimePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadHt                                 *uint64 `protobuf:"fixed64,1,opt,name=read_ht,json=readHt" json:"read_ht,omitempty"`
	DEPRECATEDMaxOfReadTimeAndLocalLimitHt *uint64 `protobuf:"fixed64,2,opt,name=DEPRECATED_max_of_read_time_and_local_limit_ht,json=DEPRECATEDMaxOfReadTimeAndLocalLimitHt" json:"DEPRECATED_max_of_read_time_and_local_limit_ht,omitempty"`
	GlobalLimitHt                          *uint64 `protobuf:"fixed64,3,opt,name=global_limit_ht,json=globalLimitHt" json:"global_limit_ht,omitempty"`
	InTxnLimitHt                           *uint64 `protobuf:"fixed64,4,opt,name=in_txn_limit_ht,json=inTxnLimitHt" json:"in_txn_limit_ht,omitempty"`
	LocalLimitHt                           *uint64 `protobuf:"fixed64,5,opt,name=local_limit_ht,json=localLimitHt" json:"local_limit_ht,omitempty"`
}

func (x *ReadHybridTimePB) Reset() {
	*x = ReadHybridTimePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadHybridTimePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHybridTimePB) ProtoMessage() {}

func (x *ReadHybridTimePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHybridTimePB.ProtoReflect.Descriptor instead.
func (*ReadHybridTimePB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{10}
}

func (x *ReadHybridTimePB) GetReadHt() uint64 {
	if x != nil && x.ReadHt != nil {
		return *x.ReadHt
	}
	return 0
}

func (x *ReadHybridTimePB) GetDEPRECATEDMaxOfReadTimeAndLocalLimitHt() uint64 {
	if x != nil && x.DEPRECATEDMaxOfReadTimeAndLocalLimitHt != nil {
		return *x.DEPRECATEDMaxOfReadTimeAndLocalLimitHt
	}
	return 0
}

func (x *ReadHybridTimePB) GetGlobalLimitHt() uint64 {
	if x != nil && x.GlobalLimitHt != nil {
		return *x.GlobalLimitHt
	}
	return 0
}

func (x *ReadHybridTimePB) GetInTxnLimitHt() uint64 {
	if x != nil && x.InTxnLimitHt != nil {
		return *x.InTxnLimitHt
	}
	return 0
}

func (x *ReadHybridTimePB) GetLocalLimitHt() uint64 {
	if x != nil && x.LocalLimitHt != nil {
		return *x.LocalLimitHt
	}
	return 0
}

// For clarification of field meaning see comments of appropriate fields in YBTransaction::Impl
type ChildTransactionDataPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    *TransactionMetadataPB `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	ReadTime    *ReadHybridTimePB      `protobuf:"bytes,2,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	LocalLimits map[string]uint64      `protobuf:"bytes,3,rep,name=local_limits,json=localLimits" json:"local_limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (x *ChildTransactionDataPB) Reset() {
	*x = ChildTransactionDataPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildTransactionDataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildTransactionDataPB) ProtoMessage() {}

func (x *ChildTransactionDataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildTransactionDataPB.ProtoReflect.Descriptor instead.
func (*ChildTransactionDataPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{11}
}

func (x *ChildTransactionDataPB) GetMetadata() *TransactionMetadataPB {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ChildTransactionDataPB) GetReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

func (x *ChildTransactionDataPB) GetLocalLimits() map[string]uint64 {
	if x != nil {
		return x.LocalLimits
	}
	return nil
}

type TransactionInvolvedTabletPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId      []byte                       `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	MetadataState *InvolvedTabletMetadataState `protobuf:"varint,2,opt,name=metadata_state,json=metadataState,enum=yb.InvolvedTabletMetadataState" json:"metadata_state,omitempty"`
	// Number of batches written to this tablet during transaction.
	NumBatches *uint64 `protobuf:"varint,3,opt,name=num_batches,json=numBatches" json:"num_batches,omitempty"`
}

func (x *TransactionInvolvedTabletPB) Reset() {
	*x = TransactionInvolvedTabletPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInvolvedTabletPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInvolvedTabletPB) ProtoMessage() {}

func (x *TransactionInvolvedTabletPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInvolvedTabletPB.ProtoReflect.Descriptor instead.
func (*TransactionInvolvedTabletPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionInvolvedTabletPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TransactionInvolvedTabletPB) GetMetadataState() InvolvedTabletMetadataState {
	if x != nil && x.MetadataState != nil {
		return *x.MetadataState
	}
	return InvolvedTabletMetadataState_MISSING
}

func (x *TransactionInvolvedTabletPB) GetNumBatches() uint64 {
	if x != nil && x.NumBatches != nil {
		return *x.NumBatches
	}
	return 0
}

// For clarification of field meaning see comments of appropriate fields in YBTransaction::Impl
type ChildTransactionResultPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablets       []*TransactionInvolvedTabletPB `protobuf:"bytes,1,rep,name=tablets" json:"tablets,omitempty"`
	RestartReadHt *uint64                        `protobuf:"fixed64,2,opt,name=restart_read_ht,json=restartReadHt" json:"restart_read_ht,omitempty"`
	ReadRestarts  map[string]uint64              `protobuf:"bytes,3,rep,name=read_restarts,json=readRestarts" json:"read_restarts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	UsedReadTime  *ReadHybridTimePB              `protobuf:"bytes,4,opt,name=used_read_time,json=usedReadTime" json:"used_read_time,omitempty"`
}

func (x *ChildTransactionResultPB) Reset() {
	*x = ChildTransactionResultPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildTransactionResultPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildTransactionResultPB) ProtoMessage() {}

func (x *ChildTransactionResultPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildTransactionResultPB.ProtoReflect.Descriptor instead.
func (*ChildTransactionResultPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{13}
}

func (x *ChildTransactionResultPB) GetTablets() []*TransactionInvolvedTabletPB {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *ChildTransactionResultPB) GetRestartReadHt() uint64 {
	if x != nil && x.RestartReadHt != nil {
		return *x.RestartReadHt
	}
	return 0
}

func (x *ChildTransactionResultPB) GetReadRestarts() map[string]uint64 {
	if x != nil {
		return x.ReadRestarts
	}
	return nil
}

func (x *ChildTransactionResultPB) GetUsedReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.UsedReadTime
	}
	return nil
}

type DeletedColumnPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Column Id.
	ColumnId *int32 `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	// Required. Hybrid Time when column was deleted on this tablet.
	DeletedHybridTime *uint64 `protobuf:"fixed64,2,opt,name=deleted_hybrid_time,json=deletedHybridTime" json:"deleted_hybrid_time,omitempty"`
}

func (x *DeletedColumnPB) Reset() {
	*x = DeletedColumnPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedColumnPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedColumnPB) ProtoMessage() {}

func (x *DeletedColumnPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedColumnPB.ProtoReflect.Descriptor instead.
func (*DeletedColumnPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{14}
}

func (x *DeletedColumnPB) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *DeletedColumnPB) GetDeletedHybridTime() uint64 {
	if x != nil && x.DeletedHybridTime != nil {
		return *x.DeletedHybridTime
	}
	return 0
}

type CloudInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlacementCloud  *string `protobuf:"bytes,1,opt,name=placement_cloud,json=placementCloud" json:"placement_cloud,omitempty"`
	PlacementRegion *string `protobuf:"bytes,2,opt,name=placement_region,json=placementRegion" json:"placement_region,omitempty"`
	PlacementZone   *string `protobuf:"bytes,3,opt,name=placement_zone,json=placementZone" json:"placement_zone,omitempty"`
}

func (x *CloudInfoPB) Reset() {
	*x = CloudInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInfoPB) ProtoMessage() {}

func (x *CloudInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInfoPB.ProtoReflect.Descriptor instead.
func (*CloudInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{15}
}

func (x *CloudInfoPB) GetPlacementCloud() string {
	if x != nil && x.PlacementCloud != nil {
		return *x.PlacementCloud
	}
	return ""
}

func (x *CloudInfoPB) GetPlacementRegion() string {
	if x != nil && x.PlacementRegion != nil {
		return *x.PlacementRegion
	}
	return ""
}

func (x *CloudInfoPB) GetPlacementZone() string {
	if x != nil && x.PlacementZone != nil {
		return *x.PlacementZone
	}
	return ""
}

// A QL value
type QLValuePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: an absent value means NULL
	//
	// Types that are assignable to Value:
	//	*QLValuePB_Int8Value
	//	*QLValuePB_Int16Value
	//	*QLValuePB_Int32Value
	//	*QLValuePB_Int64Value
	//	*QLValuePB_FloatValue
	//	*QLValuePB_DoubleValue
	//	*QLValuePB_StringValue
	//	*QLValuePB_BoolValue
	//	*QLValuePB_TimestampValue
	//	*QLValuePB_BinaryValue
	//	*QLValuePB_InetaddressValue
	//	*QLValuePB_MapValue
	//	*QLValuePB_SetValue
	//	*QLValuePB_ListValue
	//	*QLValuePB_DecimalValue
	//	*QLValuePB_VarintValue
	//	*QLValuePB_FrozenValue
	//	*QLValuePB_UuidValue
	//	*QLValuePB_TimeuuidValue
	//	*QLValuePB_JsonbValue
	//	*QLValuePB_DateValue
	//	*QLValuePB_TimeValue
	//	*QLValuePB_Uint32Value
	//	*QLValuePB_Uint64Value
	//	*QLValuePB_VirtualValue
	Value isQLValuePB_Value `protobuf_oneof:"value"`
}

func (x *QLValuePB) Reset() {
	*x = QLValuePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLValuePB) ProtoMessage() {}

func (x *QLValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLValuePB.ProtoReflect.Descriptor instead.
func (*QLValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{16}
}

func (m *QLValuePB) GetValue() isQLValuePB_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QLValuePB) GetInt8Value() int32 {
	if x, ok := x.GetValue().(*QLValuePB_Int8Value); ok {
		return x.Int8Value
	}
	return 0
}

func (x *QLValuePB) GetInt16Value() int32 {
	if x, ok := x.GetValue().(*QLValuePB_Int16Value); ok {
		return x.Int16Value
	}
	return 0
}

func (x *QLValuePB) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*QLValuePB_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *QLValuePB) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*QLValuePB_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *QLValuePB) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*QLValuePB_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *QLValuePB) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*QLValuePB_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *QLValuePB) GetStringValue() string {
	if x, ok := x.GetValue().(*QLValuePB_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *QLValuePB) GetBoolValue() bool {
	if x, ok := x.GetValue().(*QLValuePB_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *QLValuePB) GetTimestampValue() int64 {
	if x, ok := x.GetValue().(*QLValuePB_TimestampValue); ok {
		return x.TimestampValue
	}
	return 0
}

func (x *QLValuePB) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *QLValuePB) GetInetaddressValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_InetaddressValue); ok {
		return x.InetaddressValue
	}
	return nil
}

func (x *QLValuePB) GetMapValue() *QLMapValuePB {
	if x, ok := x.GetValue().(*QLValuePB_MapValue); ok {
		return x.MapValue
	}
	return nil
}

func (x *QLValuePB) GetSetValue() *QLSeqValuePB {
	if x, ok := x.GetValue().(*QLValuePB_SetValue); ok {
		return x.SetValue
	}
	return nil
}

func (x *QLValuePB) GetListValue() *QLSeqValuePB {
	if x, ok := x.GetValue().(*QLValuePB_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *QLValuePB) GetDecimalValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_DecimalValue); ok {
		return x.DecimalValue
	}
	return nil
}

func (x *QLValuePB) GetVarintValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_VarintValue); ok {
		return x.VarintValue
	}
	return nil
}

func (x *QLValuePB) GetFrozenValue() *QLSeqValuePB {
	if x, ok := x.GetValue().(*QLValuePB_FrozenValue); ok {
		return x.FrozenValue
	}
	return nil
}

func (x *QLValuePB) GetUuidValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_UuidValue); ok {
		return x.UuidValue
	}
	return nil
}

func (x *QLValuePB) GetTimeuuidValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_TimeuuidValue); ok {
		return x.TimeuuidValue
	}
	return nil
}

func (x *QLValuePB) GetJsonbValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_JsonbValue); ok {
		return x.JsonbValue
	}
	return nil
}

func (x *QLValuePB) GetDateValue() uint32 {
	if x, ok := x.GetValue().(*QLValuePB_DateValue); ok {
		return x.DateValue
	}
	return 0
}

func (x *QLValuePB) GetTimeValue() int64 {
	if x, ok := x.GetValue().(*QLValuePB_TimeValue); ok {
		return x.TimeValue
	}
	return 0
}

func (x *QLValuePB) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*QLValuePB_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *QLValuePB) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*QLValuePB_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *QLValuePB) GetVirtualValue() QLVirtualValuePB {
	if x, ok := x.GetValue().(*QLValuePB_VirtualValue); ok {
		return x.VirtualValue
	}
	return QLVirtualValuePB_LIMIT_MAX
}

type isQLValuePB_Value interface {
	isQLValuePB_Value()
}

type QLValuePB_Int8Value struct {
	Int8Value int32 `protobuf:"varint,1,opt,name=int8_value,json=int8Value,oneof"` // Note: min int size in protobuf is int32
}

type QLValuePB_Int16Value struct {
	Int16Value int32 `protobuf:"varint,2,opt,name=int16_value,json=int16Value,oneof"`
}

type QLValuePB_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,oneof"`
}

type QLValuePB_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,oneof"`
}

type QLValuePB_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=float_value,json=floatValue,oneof"`
}

type QLValuePB_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,oneof"`
}

type QLValuePB_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=string_value,json=stringValue,oneof"`
}

type QLValuePB_BoolValue struct {
	BoolValue bool `protobuf:"varint,8,opt,name=bool_value,json=boolValue,oneof"`
}

type QLValuePB_TimestampValue struct {
	TimestampValue int64 `protobuf:"varint,9,opt,name=timestamp_value,json=timestampValue,oneof"`
}

type QLValuePB_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,10,opt,name=binary_value,json=binaryValue,oneof"`
}

type QLValuePB_InetaddressValue struct {
	// raw bytes for inet address in network byte order.
	InetaddressValue []byte `protobuf:"bytes,11,opt,name=inetaddress_value,json=inetaddressValue,oneof"`
}

type QLValuePB_MapValue struct {
	MapValue *QLMapValuePB `protobuf:"bytes,12,opt,name=map_value,json=mapValue,oneof"`
}

type QLValuePB_SetValue struct {
	SetValue *QLSeqValuePB `protobuf:"bytes,13,opt,name=set_value,json=setValue,oneof"`
}

type QLValuePB_ListValue struct {
	ListValue *QLSeqValuePB `protobuf:"bytes,14,opt,name=list_value,json=listValue,oneof"`
}

type QLValuePB_DecimalValue struct {
	DecimalValue []byte `protobuf:"bytes,15,opt,name=decimal_value,json=decimalValue,oneof"`
}

type QLValuePB_VarintValue struct {
	VarintValue []byte `protobuf:"bytes,16,opt,name=varint_value,json=varintValue,oneof"`
}

type QLValuePB_FrozenValue struct {
	FrozenValue *QLSeqValuePB `protobuf:"bytes,17,opt,name=frozen_value,json=frozenValue,oneof"`
}

type QLValuePB_UuidValue struct {
	// raw bytes for uuid value.
	UuidValue []byte `protobuf:"bytes,18,opt,name=uuid_value,json=uuidValue,oneof"`
}

type QLValuePB_TimeuuidValue struct {
	// raw bytes for timeuuid value.
	TimeuuidValue []byte `protobuf:"bytes,19,opt,name=timeuuid_value,json=timeuuidValue,oneof"`
}

type QLValuePB_JsonbValue struct {
	JsonbValue []byte `protobuf:"bytes,20,opt,name=jsonb_value,json=jsonbValue,oneof"`
}

type QLValuePB_DateValue struct {
	// Number of days where 2^31 corresponds to 1970-01-01
	// (see DateTime::DateFromString)
	DateValue uint32 `protobuf:"varint,21,opt,name=date_value,json=dateValue,oneof"`
}

type QLValuePB_TimeValue struct {
	// Number of nano-seconds, from 0 to (24 * 60 * 60 * 1,000,000,000 - 1)
	// (see DateTime::kMaxTime)
	TimeValue int64 `protobuf:"varint,22,opt,name=time_value,json=timeValue,oneof"`
}

type QLValuePB_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,23,opt,name=uint32_value,json=uint32Value,oneof"`
}

type QLValuePB_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,24,opt,name=uint64_value,json=uint64Value,oneof"`
}

type QLValuePB_VirtualValue struct {
	// Represent various system values.
	VirtualValue QLVirtualValuePB `protobuf:"varint,25,opt,name=virtual_value,json=virtualValue,enum=yb.QLVirtualValuePB,oneof"`
}

func (*QLValuePB_Int8Value) isQLValuePB_Value() {}

func (*QLValuePB_Int16Value) isQLValuePB_Value() {}

func (*QLValuePB_Int32Value) isQLValuePB_Value() {}

func (*QLValuePB_Int64Value) isQLValuePB_Value() {}

func (*QLValuePB_FloatValue) isQLValuePB_Value() {}

func (*QLValuePB_DoubleValue) isQLValuePB_Value() {}

func (*QLValuePB_StringValue) isQLValuePB_Value() {}

func (*QLValuePB_BoolValue) isQLValuePB_Value() {}

func (*QLValuePB_TimestampValue) isQLValuePB_Value() {}

func (*QLValuePB_BinaryValue) isQLValuePB_Value() {}

func (*QLValuePB_InetaddressValue) isQLValuePB_Value() {}

func (*QLValuePB_MapValue) isQLValuePB_Value() {}

func (*QLValuePB_SetValue) isQLValuePB_Value() {}

func (*QLValuePB_ListValue) isQLValuePB_Value() {}

func (*QLValuePB_DecimalValue) isQLValuePB_Value() {}

func (*QLValuePB_VarintValue) isQLValuePB_Value() {}

func (*QLValuePB_FrozenValue) isQLValuePB_Value() {}

func (*QLValuePB_UuidValue) isQLValuePB_Value() {}

func (*QLValuePB_TimeuuidValue) isQLValuePB_Value() {}

func (*QLValuePB_JsonbValue) isQLValuePB_Value() {}

func (*QLValuePB_DateValue) isQLValuePB_Value() {}

func (*QLValuePB_TimeValue) isQLValuePB_Value() {}

func (*QLValuePB_Uint32Value) isQLValuePB_Value() {}

func (*QLValuePB_Uint64Value) isQLValuePB_Value() {}

func (*QLValuePB_VirtualValue) isQLValuePB_Value() {}

// Sequence of values used to represent Lists and Sets (and later Tuples)
type QLSeqValuePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elems []*QLValuePB `protobuf:"bytes,1,rep,name=elems" json:"elems,omitempty"`
}

func (x *QLSeqValuePB) Reset() {
	*x = QLSeqValuePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLSeqValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLSeqValuePB) ProtoMessage() {}

func (x *QLSeqValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLSeqValuePB.ProtoReflect.Descriptor instead.
func (*QLSeqValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{17}
}

func (x *QLSeqValuePB) GetElems() []*QLValuePB {
	if x != nil {
		return x.Elems
	}
	return nil
}

type QLMapValuePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys   []*QLValuePB `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Values []*QLValuePB `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (x *QLMapValuePB) Reset() {
	*x = QLMapValuePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLMapValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLMapValuePB) ProtoMessage() {}

func (x *QLMapValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLMapValuePB.ProtoReflect.Descriptor instead.
func (*QLMapValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{18}
}

func (x *QLMapValuePB) GetKeys() []*QLValuePB {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *QLMapValuePB) GetValues() []*QLValuePB {
	if x != nil {
		return x.Values
	}
	return nil
}

// Reference to a subcolumn, e.g. m['x'] or l[2]['x']
type QLSubscriptedColPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId      *int32            `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	SubscriptArgs []*QLExpressionPB `protobuf:"bytes,2,rep,name=subscript_args,json=subscriptArgs" json:"subscript_args,omitempty"`
}

func (x *QLSubscriptedColPB) Reset() {
	*x = QLSubscriptedColPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLSubscriptedColPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLSubscriptedColPB) ProtoMessage() {}

func (x *QLSubscriptedColPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLSubscriptedColPB.ProtoReflect.Descriptor instead.
func (*QLSubscriptedColPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{19}
}

func (x *QLSubscriptedColPB) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *QLSubscriptedColPB) GetSubscriptArgs() []*QLExpressionPB {
	if x != nil {
		return x.SubscriptArgs
	}
	return nil
}

// Represents operations applied to a json column.
type QLJsonColumnOperationsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId       *int32               `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	JsonOperations []*QLJsonOperationPB `protobuf:"bytes,2,rep,name=json_operations,json=jsonOperations" json:"json_operations,omitempty"`
}

func (x *QLJsonColumnOperationsPB) Reset() {
	*x = QLJsonColumnOperationsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLJsonColumnOperationsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLJsonColumnOperationsPB) ProtoMessage() {}

func (x *QLJsonColumnOperationsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLJsonColumnOperationsPB.ProtoReflect.Descriptor instead.
func (*QLJsonColumnOperationsPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{20}
}

func (x *QLJsonColumnOperationsPB) GetColumnId() int32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *QLJsonColumnOperationsPB) GetJsonOperations() []*QLJsonOperationPB {
	if x != nil {
		return x.JsonOperations
	}
	return nil
}

type QLJsonOperationPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonOperator *JsonOperatorPB `protobuf:"varint,1,req,name=json_operator,json=jsonOperator,enum=yb.JsonOperatorPB" json:"json_operator,omitempty"`
	Operand      *QLExpressionPB `protobuf:"bytes,2,req,name=operand" json:"operand,omitempty"`
}

func (x *QLJsonOperationPB) Reset() {
	*x = QLJsonOperationPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLJsonOperationPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLJsonOperationPB) ProtoMessage() {}

func (x *QLJsonOperationPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLJsonOperationPB.ProtoReflect.Descriptor instead.
func (*QLJsonOperationPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{21}
}

func (x *QLJsonOperationPB) GetJsonOperator() JsonOperatorPB {
	if x != nil && x.JsonOperator != nil {
		return *x.JsonOperator
	}
	return JsonOperatorPB_JSON_OBJECT
}

func (x *QLJsonOperationPB) GetOperand() *QLExpressionPB {
	if x != nil {
		return x.Operand
	}
	return nil
}

// An expression in a WHERE condition
type QLExpressionPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//	*QLExpressionPB_Value
	//	*QLExpressionPB_ColumnId
	//	*QLExpressionPB_SubscriptedCol
	//	*QLExpressionPB_BindId
	//	*QLExpressionPB_Condition
	//	*QLExpressionPB_Bfcall
	//	*QLExpressionPB_Tscall
	//	*QLExpressionPB_Bocall
	//	*QLExpressionPB_JsonColumn
	Expr isQLExpressionPB_Expr `protobuf_oneof:"expr"`
}

func (x *QLExpressionPB) Reset() {
	*x = QLExpressionPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLExpressionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLExpressionPB) ProtoMessage() {}

func (x *QLExpressionPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLExpressionPB.ProtoReflect.Descriptor instead.
func (*QLExpressionPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{22}
}

func (m *QLExpressionPB) GetExpr() isQLExpressionPB_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *QLExpressionPB) GetValue() *QLValuePB {
	if x, ok := x.GetExpr().(*QLExpressionPB_Value); ok {
		return x.Value
	}
	return nil
}

func (x *QLExpressionPB) GetColumnId() int32 {
	if x, ok := x.GetExpr().(*QLExpressionPB_ColumnId); ok {
		return x.ColumnId
	}
	return 0
}

func (x *QLExpressionPB) GetSubscriptedCol() *QLSubscriptedColPB {
	if x, ok := x.GetExpr().(*QLExpressionPB_SubscriptedCol); ok {
		return x.SubscriptedCol
	}
	return nil
}

func (x *QLExpressionPB) GetBindId() int32 {
	if x, ok := x.GetExpr().(*QLExpressionPB_BindId); ok {
		return x.BindId
	}
	return 0
}

func (x *QLExpressionPB) GetCondition() *QLConditionPB {
	if x, ok := x.GetExpr().(*QLExpressionPB_Condition); ok {
		return x.Condition
	}
	return nil
}

func (x *QLExpressionPB) GetBfcall() *QLBCallPB {
	if x, ok := x.GetExpr().(*QLExpressionPB_Bfcall); ok {
		return x.Bfcall
	}
	return nil
}

func (x *QLExpressionPB) GetTscall() *QLBCallPB {
	if x, ok := x.GetExpr().(*QLExpressionPB_Tscall); ok {
		return x.Tscall
	}
	return nil
}

func (x *QLExpressionPB) GetBocall() *QLBCallPB {
	if x, ok := x.GetExpr().(*QLExpressionPB_Bocall); ok {
		return x.Bocall
	}
	return nil
}

func (x *QLExpressionPB) GetJsonColumn() *QLJsonColumnOperationsPB {
	if x, ok := x.GetExpr().(*QLExpressionPB_JsonColumn); ok {
		return x.JsonColumn
	}
	return nil
}

type isQLExpressionPB_Expr interface {
	isQLExpressionPB_Expr()
}

type QLExpressionPB_Value struct {
	Value *QLValuePB `protobuf:"bytes,1,opt,name=value,oneof"`
}

type QLExpressionPB_ColumnId struct {
	ColumnId int32 `protobuf:"varint,2,opt,name=column_id,json=columnId,oneof"`
}

type QLExpressionPB_SubscriptedCol struct {
	SubscriptedCol *QLSubscriptedColPB `protobuf:"bytes,3,opt,name=subscripted_col,json=subscriptedCol,oneof"`
}

type QLExpressionPB_BindId struct {
	BindId int32 `protobuf:"varint,4,opt,name=bind_id,json=bindId,oneof"` // Bind variable index.
}

type QLExpressionPB_Condition struct {
	Condition *QLConditionPB `protobuf:"bytes,5,opt,name=condition,oneof"` // This should be replaced with builtin operator.
}

type QLExpressionPB_Bfcall struct {
	Bfcall *QLBCallPB `protobuf:"bytes,6,opt,name=bfcall,oneof"` // Regular builtin calls.
}

type QLExpressionPB_Tscall struct {
	Tscall *QLBCallPB `protobuf:"bytes,7,opt,name=tscall,oneof"` // Tablet server builtin calls.
}

type QLExpressionPB_Bocall struct {
	Bocall *QLBCallPB `protobuf:"bytes,8,opt,name=bocall,oneof"` // Builtin operator calls.
}

type QLExpressionPB_JsonColumn struct {
	JsonColumn *QLJsonColumnOperationsPB `protobuf:"bytes,9,opt,name=json_column,json=jsonColumn,oneof"` // Json column operators.
}

func (*QLExpressionPB_Value) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_ColumnId) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_SubscriptedCol) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_BindId) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_Condition) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_Bfcall) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_Tscall) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_Bocall) isQLExpressionPB_Expr() {}

func (*QLExpressionPB_JsonColumn) isQLExpressionPB_Expr() {}

// A logical condition that evaluates to true/false. Used in the WHERE clause.
type QLConditionPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       *QLOperator       `protobuf:"varint,1,opt,name=op,enum=yb.QLOperator" json:"op,omitempty"`
	Operands []*QLExpressionPB `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
}

func (x *QLConditionPB) Reset() {
	*x = QLConditionPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLConditionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLConditionPB) ProtoMessage() {}

func (x *QLConditionPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLConditionPB.ProtoReflect.Descriptor instead.
func (*QLConditionPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{23}
}

func (x *QLConditionPB) GetOp() QLOperator {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return QLOperator_QL_OP_NOOP
}

func (x *QLConditionPB) GetOperands() []*QLExpressionPB {
	if x != nil {
		return x.Operands
	}
	return nil
}

// Builtin call expression. There are 3 different calls.
//   - Builtin operators such as '>', '<', '=', ...
//     These operators can be executed anywhere.
//   - Builtin functions such as Now().
//     These functions can be executed anywhere.
//   - Server builtin functions.
//     Only tablet servers can execute these functions.
//
// TODO(neil) Regular builtin operators. This message can be executed anywhere.
// - This is more efficient than builtin call as it avoids most overheads of calling builtin lib.
// - Merge the current condition operator execution with this.
// - To optimize certain operation (such as +), replace it builtin function with builtin op.
type QLBCallPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opcode   *int32            `protobuf:"varint,1,opt,name=opcode" json:"opcode,omitempty"`
	Operands []*QLExpressionPB `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
}

func (x *QLBCallPB) Reset() {
	*x = QLBCallPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLBCallPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLBCallPB) ProtoMessage() {}

func (x *QLBCallPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLBCallPB.ProtoReflect.Descriptor instead.
func (*QLBCallPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{24}
}

func (x *QLBCallPB) GetOpcode() int32 {
	if x != nil && x.Opcode != nil {
		return *x.Opcode
	}
	return 0
}

func (x *QLBCallPB) GetOperands() []*QLExpressionPB {
	if x != nil {
		return x.Operands
	}
	return nil
}

type ExplainPlanPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Plan:
	//	*ExplainPlanPB_SelectPlan
	//	*ExplainPlanPB_InsertPlan
	//	*ExplainPlanPB_UpdatePlan
	//	*ExplainPlanPB_DeletePlan
	Plan isExplainPlanPB_Plan `protobuf_oneof:"plan"`
}

func (x *ExplainPlanPB) Reset() {
	*x = ExplainPlanPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainPlanPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainPlanPB) ProtoMessage() {}

func (x *ExplainPlanPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainPlanPB.ProtoReflect.Descriptor instead.
func (*ExplainPlanPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{25}
}

func (m *ExplainPlanPB) GetPlan() isExplainPlanPB_Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (x *ExplainPlanPB) GetSelectPlan() *SelectPlanPB {
	if x, ok := x.GetPlan().(*ExplainPlanPB_SelectPlan); ok {
		return x.SelectPlan
	}
	return nil
}

func (x *ExplainPlanPB) GetInsertPlan() *InsertPlanPB {
	if x, ok := x.GetPlan().(*ExplainPlanPB_InsertPlan); ok {
		return x.InsertPlan
	}
	return nil
}

func (x *ExplainPlanPB) GetUpdatePlan() *UpdatePlanPB {
	if x, ok := x.GetPlan().(*ExplainPlanPB_UpdatePlan); ok {
		return x.UpdatePlan
	}
	return nil
}

func (x *ExplainPlanPB) GetDeletePlan() *DeletePlanPB {
	if x, ok := x.GetPlan().(*ExplainPlanPB_DeletePlan); ok {
		return x.DeletePlan
	}
	return nil
}

type isExplainPlanPB_Plan interface {
	isExplainPlanPB_Plan()
}

type ExplainPlanPB_SelectPlan struct {
	SelectPlan *SelectPlanPB `protobuf:"bytes,1,opt,name=select_plan,json=selectPlan,oneof"`
}

type ExplainPlanPB_InsertPlan struct {
	InsertPlan *InsertPlanPB `protobuf:"bytes,2,opt,name=insert_plan,json=insertPlan,oneof"`
}

type ExplainPlanPB_UpdatePlan struct {
	UpdatePlan *UpdatePlanPB `protobuf:"bytes,3,opt,name=update_plan,json=updatePlan,oneof"`
}

type ExplainPlanPB_DeletePlan struct {
	DeletePlan *DeletePlanPB `protobuf:"bytes,4,opt,name=delete_plan,json=deletePlan,oneof"`
}

func (*ExplainPlanPB_SelectPlan) isExplainPlanPB_Plan() {}

func (*ExplainPlanPB_InsertPlan) isExplainPlanPB_Plan() {}

func (*ExplainPlanPB_UpdatePlan) isExplainPlanPB_Plan() {}

func (*ExplainPlanPB_DeletePlan) isExplainPlanPB_Plan() {}

type SelectPlanPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectType *string `protobuf:"bytes,1,opt,name=select_type,json=selectType" json:"select_type,omitempty"`
	// Overarching information like "Aggregate" or "Limit"
	Aggregate     *string `protobuf:"bytes,2,opt,name=aggregate" json:"aggregate,omitempty"`
	KeyConditions *string `protobuf:"bytes,3,opt,name=key_conditions,json=keyConditions" json:"key_conditions,omitempty"`
	Filter        *string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
	OutputWidth   *int32  `protobuf:"varint,5,opt,name=output_width,json=outputWidth" json:"output_width,omitempty"`
}

func (x *SelectPlanPB) Reset() {
	*x = SelectPlanPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectPlanPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectPlanPB) ProtoMessage() {}

func (x *SelectPlanPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectPlanPB.ProtoReflect.Descriptor instead.
func (*SelectPlanPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{26}
}

func (x *SelectPlanPB) GetSelectType() string {
	if x != nil && x.SelectType != nil {
		return *x.SelectType
	}
	return ""
}

func (x *SelectPlanPB) GetAggregate() string {
	if x != nil && x.Aggregate != nil {
		return *x.Aggregate
	}
	return ""
}

func (x *SelectPlanPB) GetKeyConditions() string {
	if x != nil && x.KeyConditions != nil {
		return *x.KeyConditions
	}
	return ""
}

func (x *SelectPlanPB) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SelectPlanPB) GetOutputWidth() int32 {
	if x != nil && x.OutputWidth != nil {
		return *x.OutputWidth
	}
	return 0
}

type InsertPlanPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertType  *string `protobuf:"bytes,1,opt,name=insert_type,json=insertType" json:"insert_type,omitempty"`
	OutputWidth *int32  `protobuf:"varint,2,opt,name=output_width,json=outputWidth" json:"output_width,omitempty"`
}

func (x *InsertPlanPB) Reset() {
	*x = InsertPlanPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertPlanPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertPlanPB) ProtoMessage() {}

func (x *InsertPlanPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertPlanPB.ProtoReflect.Descriptor instead.
func (*InsertPlanPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{27}
}

func (x *InsertPlanPB) GetInsertType() string {
	if x != nil && x.InsertType != nil {
		return *x.InsertType
	}
	return ""
}

func (x *InsertPlanPB) GetOutputWidth() int32 {
	if x != nil && x.OutputWidth != nil {
		return *x.OutputWidth
	}
	return 0
}

type UpdatePlanPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateType *string `protobuf:"bytes,1,opt,name=update_type,json=updateType" json:"update_type,omitempty"`
	// For update, scan_type is currently only primary key lookup.
	ScanType      *string `protobuf:"bytes,2,opt,name=scan_type,json=scanType" json:"scan_type,omitempty"`
	KeyConditions *string `protobuf:"bytes,3,opt,name=key_conditions,json=keyConditions" json:"key_conditions,omitempty"`
	OutputWidth   *int32  `protobuf:"varint,4,opt,name=output_width,json=outputWidth" json:"output_width,omitempty"`
}

func (x *UpdatePlanPB) Reset() {
	*x = UpdatePlanPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanPB) ProtoMessage() {}

func (x *UpdatePlanPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanPB.ProtoReflect.Descriptor instead.
func (*UpdatePlanPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{28}
}

func (x *UpdatePlanPB) GetUpdateType() string {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return ""
}

func (x *UpdatePlanPB) GetScanType() string {
	if x != nil && x.ScanType != nil {
		return *x.ScanType
	}
	return ""
}

func (x *UpdatePlanPB) GetKeyConditions() string {
	if x != nil && x.KeyConditions != nil {
		return *x.KeyConditions
	}
	return ""
}

func (x *UpdatePlanPB) GetOutputWidth() int32 {
	if x != nil && x.OutputWidth != nil {
		return *x.OutputWidth
	}
	return 0
}

type DeletePlanPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeleteType *string `protobuf:"bytes,1,opt,name=delete_type,json=deleteType" json:"delete_type,omitempty"`
	// For delete, scan_type is currently either primary key lookup or range scan.
	ScanType      *string `protobuf:"bytes,2,opt,name=scan_type,json=scanType" json:"scan_type,omitempty"`
	KeyConditions *string `protobuf:"bytes,3,opt,name=key_conditions,json=keyConditions" json:"key_conditions,omitempty"`
	Filter        *string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
	OutputWidth   *int32  `protobuf:"varint,5,opt,name=output_width,json=outputWidth" json:"output_width,omitempty"`
}

func (x *DeletePlanPB) Reset() {
	*x = DeletePlanPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanPB) ProtoMessage() {}

func (x *DeletePlanPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanPB.ProtoReflect.Descriptor instead.
func (*DeletePlanPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{29}
}

func (x *DeletePlanPB) GetDeleteType() string {
	if x != nil && x.DeleteType != nil {
		return *x.DeleteType
	}
	return ""
}

func (x *DeletePlanPB) GetScanType() string {
	if x != nil && x.ScanType != nil {
		return *x.ScanType
	}
	return ""
}

func (x *DeletePlanPB) GetKeyConditions() string {
	if x != nil && x.KeyConditions != nil {
		return *x.KeyConditions
	}
	return ""
}

func (x *DeletePlanPB) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *DeletePlanPB) GetOutputWidth() int32 {
	if x != nil && x.OutputWidth != nil {
		return *x.OutputWidth
	}
	return 0
}

// Fields for user-defined types
type QLTypePB_UDTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyspaceName *string  `protobuf:"bytes,1,opt,name=keyspace_name,json=keyspaceName" json:"keyspace_name,omitempty"`
	Name         *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Id           *string  `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	FieldNames   []string `protobuf:"bytes,4,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
}

func (x *QLTypePB_UDTypeInfo) Reset() {
	*x = QLTypePB_UDTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLTypePB_UDTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLTypePB_UDTypeInfo) ProtoMessage() {}

func (x *QLTypePB_UDTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLTypePB_UDTypeInfo.ProtoReflect.Descriptor instead.
func (*QLTypePB_UDTypeInfo) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{0, 0}
}

func (x *QLTypePB_UDTypeInfo) GetKeyspaceName() string {
	if x != nil && x.KeyspaceName != nil {
		return *x.KeyspaceName
	}
	return ""
}

func (x *QLTypePB_UDTypeInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QLTypePB_UDTypeInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *QLTypePB_UDTypeInfo) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

// Index column mapping.
// "colexpr" is used to compute the value of this column in an INDEX.
//   - When a table is indexed by expressions, we create internal/hidden columns to store the index
//     value, and "value_expr" specifies the indexing expression.
//   - As of 07/2019, only QLJsonColumnOperationsPB is allowed for "colexpr".
//   - In the current index design & implementation, expression can only reference ONE column.
//
// Example:
//
//	Example for scalar index
//	  TABLE (a, b, c)
//	  INDEX (c) -> INDEX is a table whose column 'c' is referencing TABLE(c)
//	  colexpr = ref to "c" column_id.
//	Example for JSON index
//	  TABLE (a, b, j)
//	  INDEX (j->>'b') -> INDEX is a table whose column 'j->>b' is referencing to TABLE(j)
//	  colexpr = j->'b'
type IndexInfoPB_IndexColumnPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId        *uint32         `protobuf:"varint,1,opt,name=column_id,json=columnId" json:"column_id,omitempty"`                        // Column id in the index table.
	ColumnName      *string         `protobuf:"bytes,3,opt,name=column_name,json=columnName" json:"column_name,omitempty"`                   // Generated column name in the index table.
	IndexedColumnId *uint32         `protobuf:"varint,2,opt,name=indexed_column_id,json=indexedColumnId" json:"indexed_column_id,omitempty"` // Corresponding column id in indexed table.
	Colexpr         *QLExpressionPB `protobuf:"bytes,4,opt,name=colexpr" json:"colexpr,omitempty"`                                           // Column value in INDEX.
}

func (x *IndexInfoPB_IndexColumnPB) Reset() {
	*x = IndexInfoPB_IndexColumnPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInfoPB_IndexColumnPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInfoPB_IndexColumnPB) ProtoMessage() {}

func (x *IndexInfoPB_IndexColumnPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInfoPB_IndexColumnPB.ProtoReflect.Descriptor instead.
func (*IndexInfoPB_IndexColumnPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{5, 0}
}

func (x *IndexInfoPB_IndexColumnPB) GetColumnId() uint32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *IndexInfoPB_IndexColumnPB) GetColumnName() string {
	if x != nil && x.ColumnName != nil {
		return *x.ColumnName
	}
	return ""
}

func (x *IndexInfoPB_IndexColumnPB) GetIndexedColumnId() uint32 {
	if x != nil && x.IndexedColumnId != nil {
		return *x.IndexedColumnId
	}
	return 0
}

func (x *IndexInfoPB_IndexColumnPB) GetColexpr() *QLExpressionPB {
	if x != nil {
		return x.Colexpr
	}
	return nil
}

// A column identifier for partition schemas. In general, the name will be
// used when a client creates the table since column IDs are assigned by the
// master. All other uses of partition schemas will use the numeric column ID.
type PartitionSchemaPB_ColumnIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*PartitionSchemaPB_ColumnIdentifierPB_Id
	//	*PartitionSchemaPB_ColumnIdentifierPB_Name
	Identifier isPartitionSchemaPB_ColumnIdentifierPB_Identifier `protobuf_oneof:"identifier"`
}

func (x *PartitionSchemaPB_ColumnIdentifierPB) Reset() {
	*x = PartitionSchemaPB_ColumnIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSchemaPB_ColumnIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSchemaPB_ColumnIdentifierPB) ProtoMessage() {}

func (x *PartitionSchemaPB_ColumnIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSchemaPB_ColumnIdentifierPB.ProtoReflect.Descriptor instead.
func (*PartitionSchemaPB_ColumnIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7, 0}
}

func (m *PartitionSchemaPB_ColumnIdentifierPB) GetIdentifier() isPartitionSchemaPB_ColumnIdentifierPB_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *PartitionSchemaPB_ColumnIdentifierPB) GetId() int32 {
	if x, ok := x.GetIdentifier().(*PartitionSchemaPB_ColumnIdentifierPB_Id); ok {
		return x.Id
	}
	return 0
}

func (x *PartitionSchemaPB_ColumnIdentifierPB) GetName() string {
	if x, ok := x.GetIdentifier().(*PartitionSchemaPB_ColumnIdentifierPB_Name); ok {
		return x.Name
	}
	return ""
}

type isPartitionSchemaPB_ColumnIdentifierPB_Identifier interface {
	isPartitionSchemaPB_ColumnIdentifierPB_Identifier()
}

type PartitionSchemaPB_ColumnIdentifierPB_Id struct {
	Id int32 `protobuf:"varint,1,opt,name=id,oneof"`
}

type PartitionSchemaPB_ColumnIdentifierPB_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,oneof"`
}

func (*PartitionSchemaPB_ColumnIdentifierPB_Id) isPartitionSchemaPB_ColumnIdentifierPB_Identifier() {}

func (*PartitionSchemaPB_ColumnIdentifierPB_Name) isPartitionSchemaPB_ColumnIdentifierPB_Identifier() {
}

type PartitionSchemaPB_RangeSplitPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each range column will be assigned a lower bound.
	ColumnBounds []byte `protobuf:"bytes,1,opt,name=column_bounds,json=columnBounds" json:"column_bounds,omitempty"`
}

func (x *PartitionSchemaPB_RangeSplitPB) Reset() {
	*x = PartitionSchemaPB_RangeSplitPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSchemaPB_RangeSplitPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSchemaPB_RangeSplitPB) ProtoMessage() {}

func (x *PartitionSchemaPB_RangeSplitPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSchemaPB_RangeSplitPB.ProtoReflect.Descriptor instead.
func (*PartitionSchemaPB_RangeSplitPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7, 1}
}

func (x *PartitionSchemaPB_RangeSplitPB) GetColumnBounds() []byte {
	if x != nil {
		return x.ColumnBounds
	}
	return nil
}

type PartitionSchemaPB_RangeSchemaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column identifiers of columns included in the range. All columns must be
	// a component of the primary key.
	Columns []*PartitionSchemaPB_ColumnIdentifierPB `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	// Split points for range tables.
	Splits []*PartitionSchemaPB_RangeSplitPB `protobuf:"bytes,3,rep,name=splits" json:"splits,omitempty"`
	// Field "split_rows" is only available in beta version for SPLIT AT feature. This feature had
	// not been used, so the release version for SPLIT AT does not need to be compatible with
	// the beta version in the past releases.
	DEPRECATEDSplitRows [][]byte `protobuf:"bytes,2,rep,name=DEPRECATED_split_rows,json=DEPRECATEDSplitRows" json:"DEPRECATED_split_rows,omitempty"`
}

func (x *PartitionSchemaPB_RangeSchemaPB) Reset() {
	*x = PartitionSchemaPB_RangeSchemaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSchemaPB_RangeSchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSchemaPB_RangeSchemaPB) ProtoMessage() {}

func (x *PartitionSchemaPB_RangeSchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSchemaPB_RangeSchemaPB.ProtoReflect.Descriptor instead.
func (*PartitionSchemaPB_RangeSchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7, 2}
}

func (x *PartitionSchemaPB_RangeSchemaPB) GetColumns() []*PartitionSchemaPB_ColumnIdentifierPB {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PartitionSchemaPB_RangeSchemaPB) GetSplits() []*PartitionSchemaPB_RangeSplitPB {
	if x != nil {
		return x.Splits
	}
	return nil
}

func (x *PartitionSchemaPB_RangeSchemaPB) GetDEPRECATEDSplitRows() [][]byte {
	if x != nil {
		return x.DEPRECATEDSplitRows
	}
	return nil
}

type PartitionSchemaPB_HashBucketSchemaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column identifiers of columns included in the hash. Every column must be
	// a component of the primary key.
	Columns []*PartitionSchemaPB_ColumnIdentifierPB `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	// Number of buckets into which columns will be hashed. Must be at least 2.
	NumBuckets *int32 `protobuf:"varint,2,req,name=num_buckets,json=numBuckets" json:"num_buckets,omitempty"`
	// Seed value for hash calculation. Administrators may set a seed value
	// on a per-table basis in order to randomize the mapping of rows to
	// buckets. Setting a seed provides some amount of protection against denial
	// of service attacks when the hash bucket columns contain user provided
	// input.
	Seed *uint32 `protobuf:"varint,3,opt,name=seed" json:"seed,omitempty"`
	// The hash algorithm to use for calculating the hash bucket.
	HashAlgorithm *PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm `protobuf:"varint,4,opt,name=hash_algorithm,json=hashAlgorithm,enum=yb.PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm" json:"hash_algorithm,omitempty"`
}

func (x *PartitionSchemaPB_HashBucketSchemaPB) Reset() {
	*x = PartitionSchemaPB_HashBucketSchemaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSchemaPB_HashBucketSchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSchemaPB_HashBucketSchemaPB) ProtoMessage() {}

func (x *PartitionSchemaPB_HashBucketSchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSchemaPB_HashBucketSchemaPB.ProtoReflect.Descriptor instead.
func (*PartitionSchemaPB_HashBucketSchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_common_common_proto_rawDescGZIP(), []int{7, 3}
}

func (x *PartitionSchemaPB_HashBucketSchemaPB) GetColumns() []*PartitionSchemaPB_ColumnIdentifierPB {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *PartitionSchemaPB_HashBucketSchemaPB) GetNumBuckets() int32 {
	if x != nil && x.NumBuckets != nil {
		return *x.NumBuckets
	}
	return 0
}

func (x *PartitionSchemaPB_HashBucketSchemaPB) GetSeed() uint32 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *PartitionSchemaPB_HashBucketSchemaPB) GetHashAlgorithm() PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm {
	if x != nil && x.HashAlgorithm != nil {
		return *x.HashAlgorithm
	}
	return PartitionSchemaPB_HashBucketSchemaPB_UNKNOWN
}

var File_yb_common_common_proto protoreflect.FileDescriptor

var file_yb_common_common_proto_rawDesc = []byte{
	0x0a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x79, 0x62, 0x22, 0x84, 0x02, 0x0a,
	0x08, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x12, 0x20, 0x0a, 0x04, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62,
	0x2e, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x64, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x42, 0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x75, 0x64, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x76, 0x0a, 0x0a, 0x55,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x79,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x05, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x24, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c,
	0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4f, 0x0a, 0x18, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x16, 0x4f, 0x42, 0x53,
	0x4f, 0x4c, 0x45, 0x54, 0x45, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22,
	0x67, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x1f, 0x0a,
	0x0a, 0x70, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x09, 0x70, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0a, 0x63, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x04, 0x0a, 0x11, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x50, 0x42, 0x12, 0x2f,
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x59,
	0x42, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x3a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x17, 0x75,
	0x73, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x30, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x12, 0x69, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x42, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42,
	0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0xf4, 0x06, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x11, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x52, 0x10, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x42, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x3c, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x4d,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x69, 0x73, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x1a,
	0xa7, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x07, 0x63, 0x6f, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x22, 0x34, 0x0a, 0x0a, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0xb9, 0x07, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x11, 0x68, 0x61,
	0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12,
	0x46, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x42, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0a,
	0x68, 0x61, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x4a, 0x0a, 0x12, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x33, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x0d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x42, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x42, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x1a, 0x9d, 0x02, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x42, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x22, 0x2f, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x55, 0x52, 0x4d, 0x55, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x32, 0x10,
	0x01, 0x22, 0x58, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x1c, 0x0a, 0x18, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x41, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x03, 0x22, 0x90, 0x01, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x22, 0xa0,
	0x02, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x09, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x11, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x52, 0x09, 0x69, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x48, 0x74, 0x12,
	0x5e, 0x0a, 0x2e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x26, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x4d, 0x61, 0x78, 0x4f, 0x66, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x74, 0x78,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x48, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22,
	0xcf, 0x02, 0x0a, 0x18, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x42, 0x12, 0x39, 0x0a, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x42, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x48, 0x74, 0x12,
	0x53, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x42, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5e, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0xf9, 0x07, 0x0a,
	0x09, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x53, 0x65, 0x71,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x53,
	0x65, 0x71, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c,
	0x53, 0x65, 0x71, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x75, 0x69,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x75, 0x75, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e,
	0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48,
	0x00, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x0c, 0x51, 0x4c, 0x53, 0x65,
	0x71, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x6c, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0x58, 0x0a,
	0x0c, 0x51, 0x4c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x21, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62,
	0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x25, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x12, 0x51, 0x4c, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x50, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x22, 0x77, 0x0a, 0x18, 0x51, 0x4c, 0x4a, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0e,
	0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7a,
	0x0a, 0x11, 0x51, 0x4c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x42, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0xab, 0x03, 0x0a, 0x0e, 0x51,
	0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x25, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79,
	0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x62, 0x2e, 0x51, 0x4c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x66, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x42, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x42, 0x48, 0x00, 0x52, 0x06, 0x62, 0x66, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a,
	0x06, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x79, 0x62, 0x2e, 0x51, 0x4c, 0x42, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x42, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x6f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x42, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x42, 0x48, 0x00, 0x52, 0x06, 0x62, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x3f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x4a, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x5f, 0x0a, 0x0d, 0x51, 0x4c, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x1e, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62,
	0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x51, 0x4c, 0x42,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x42, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xeb,
	0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x42,
	0x12, 0x33, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x79, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x42, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x33, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0xaf, 0x01, 0x0a,
	0x0c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x42, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x52,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x42, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x22, 0x96, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xae, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x2a, 0x4a, 0x0a, 0x08,
	0x51, 0x4c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x51, 0x4c, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x59, 0x51, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x51, 0x4c,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0x03, 0x2a, 0x6d, 0x0a, 0x0b, 0x59, 0x51, 0x4c, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x59, 0x51, 0x4c, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x59, 0x51, 0x4c, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0x04, 0x2a, 0x86, 0x03, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0xe7, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x4e, 0x54, 0x38, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42,
	0x4c, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x09,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x0a, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x45, 0x54,
	0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x41, 0x50, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x10, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45,
	0x55, 0x55, 0x49, 0x44, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x10,
	0x13, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x41, 0x52, 0x47, 0x53, 0x10, 0x14, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e,
	0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x10,
	0x19, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x64, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54,
	0x33, 0x32, 0x10, 0x66, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x67,
	0x2a, 0x8a, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x59, 0x51, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x47, 0x53, 0x51,
	0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x21,
	0x0a, 0x1d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x4a, 0x0a,
	0x12, 0x59, 0x42, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x45, 0x46, 0x49, 0x58, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45,
	0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c,
	0x5f, 0x4b, 0x45, 0x59, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x45, 0x59, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x05, 0x2a, 0xcb,
	0x01, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xff, 0x93, 0xeb, 0xdc, 0x03, 0x2a, 0xa2, 0x02, 0x0a,
	0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x44, 0x4f, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e,
	0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06,
	0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x57, 0x48, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x57, 0x48, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x0e, 0x2a, 0x3f, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a,
	0xad, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x4c,
	0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f, 0x57, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x4b, 0x45, 0x59, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x57, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x57, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f,
	0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x2a,
	0xdd, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x45, 0x41, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x56,
	0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f,
	0x49, 0x4e, 0x56, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x53,
	0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x41,
	0x43, 0x45, 0x46, 0x55, 0x4c, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x17, 0x2a,
	0x44, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x10, 0x51, 0x4c, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x0e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x53, 0x4f,
	0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x53,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x2a, 0xbb, 0x03, 0x0a, 0x0a, 0x51, 0x4c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x4c, 0x5f, 0x4f,
	0x50, 0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x4c, 0x5f, 0x4f,
	0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x4c, 0x5f, 0x4f, 0x50,
	0x5f, 0x49, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x4c,
	0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x51,
	0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x51,
	0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x0b, 0x12, 0x1c,
	0x0a, 0x18, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f,
	0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10,
	0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c,
	0x49, 0x4b, 0x45, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x49,
	0x4e, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x42,
	0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x4c, 0x5f, 0x4f,
	0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x13, 0x12,
	0x10, 0x0a, 0x0c, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x14, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x15, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x2e, 0x79,
	0x62,
}

var (
	file_yb_common_common_proto_rawDescOnce sync.Once
	file_yb_common_common_proto_rawDescData = file_yb_common_common_proto_rawDesc
)

func file_yb_common_common_proto_rawDescGZIP() []byte {
	file_yb_common_common_proto_rawDescOnce.Do(func() {
		file_yb_common_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_common_common_proto_rawDescData)
	})
	return file_yb_common_common_proto_rawDescData
}

var file_yb_common_common_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_yb_common_common_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_yb_common_common_proto_goTypes = []interface{}{
	(QLClient)(0),                     // 0: yb.QLClient
	(YQLDatabase)(0),                  // 1: yb.YQLDatabase
	(DataType)(0),                     // 2: yb.DataType
	(TableType)(0),                    // 3: yb.TableType
	(YBConsistencyLevel)(0),           // 4: yb.YBConsistencyLevel
	(ResourceType)(0),                 // 5: yb.ResourceType
	(PermissionType)(0),               // 6: yb.PermissionType
	(IndexPermissions)(0),             // 7: yb.IndexPermissions
	(OrderMode)(0),                    // 8: yb.OrderMode
	(IsolationLevel)(0),               // 9: yb.IsolationLevel
	(RowMarkType)(0),                  // 10: yb.RowMarkType
	(TransactionStatus)(0),            // 11: yb.TransactionStatus
	(InvolvedTabletMetadataState)(0),  // 12: yb.InvolvedTabletMetadataState
	(QLVirtualValuePB)(0),             // 13: yb.QLVirtualValuePB
	(JsonOperatorPB)(0),               // 14: yb.JsonOperatorPB
	(QLOperator)(0),                   // 15: yb.QLOperator
	(PartitionSchemaPB_HashSchema)(0), // 16: yb.PartitionSchemaPB.HashSchema
	(PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm)(0), // 17: yb.PartitionSchemaPB.HashBucketSchemaPB.HashAlgorithm
	(*QLTypePB)(nil),                             // 18: yb.QLTypePB
	(*ColumnSchemaPB)(nil),                       // 19: yb.ColumnSchemaPB
	(*ColocatedTableIdentifierPB)(nil),           // 20: yb.ColocatedTableIdentifierPB
	(*TablePropertiesPB)(nil),                    // 21: yb.TablePropertiesPB
	(*SchemaPB)(nil),                             // 22: yb.SchemaPB
	(*IndexInfoPB)(nil),                          // 23: yb.IndexInfoPB
	(*HostPortPB)(nil),                           // 24: yb.HostPortPB
	(*PartitionSchemaPB)(nil),                    // 25: yb.PartitionSchemaPB
	(*PartitionPB)(nil),                          // 26: yb.PartitionPB
	(*TransactionMetadataPB)(nil),                // 27: yb.TransactionMetadataPB
	(*ReadHybridTimePB)(nil),                     // 28: yb.ReadHybridTimePB
	(*ChildTransactionDataPB)(nil),               // 29: yb.ChildTransactionDataPB
	(*TransactionInvolvedTabletPB)(nil),          // 30: yb.TransactionInvolvedTabletPB
	(*ChildTransactionResultPB)(nil),             // 31: yb.ChildTransactionResultPB
	(*DeletedColumnPB)(nil),                      // 32: yb.DeletedColumnPB
	(*CloudInfoPB)(nil),                          // 33: yb.CloudInfoPB
	(*QLValuePB)(nil),                            // 34: yb.QLValuePB
	(*QLSeqValuePB)(nil),                         // 35: yb.QLSeqValuePB
	(*QLMapValuePB)(nil),                         // 36: yb.QLMapValuePB
	(*QLSubscriptedColPB)(nil),                   // 37: yb.QLSubscriptedColPB
	(*QLJsonColumnOperationsPB)(nil),             // 38: yb.QLJsonColumnOperationsPB
	(*QLJsonOperationPB)(nil),                    // 39: yb.QLJsonOperationPB
	(*QLExpressionPB)(nil),                       // 40: yb.QLExpressionPB
	(*QLConditionPB)(nil),                        // 41: yb.QLConditionPB
	(*QLBCallPB)(nil),                            // 42: yb.QLBCallPB
	(*ExplainPlanPB)(nil),                        // 43: yb.ExplainPlanPB
	(*SelectPlanPB)(nil),                         // 44: yb.SelectPlanPB
	(*InsertPlanPB)(nil),                         // 45: yb.InsertPlanPB
	(*UpdatePlanPB)(nil),                         // 46: yb.UpdatePlanPB
	(*DeletePlanPB)(nil),                         // 47: yb.DeletePlanPB
	(*QLTypePB_UDTypeInfo)(nil),                  // 48: yb.QLTypePB.UDTypeInfo
	(*IndexInfoPB_IndexColumnPB)(nil),            // 49: yb.IndexInfoPB.IndexColumnPB
	(*PartitionSchemaPB_ColumnIdentifierPB)(nil), // 50: yb.PartitionSchemaPB.ColumnIdentifierPB
	(*PartitionSchemaPB_RangeSplitPB)(nil),       // 51: yb.PartitionSchemaPB.RangeSplitPB
	(*PartitionSchemaPB_RangeSchemaPB)(nil),      // 52: yb.PartitionSchemaPB.RangeSchemaPB
	(*PartitionSchemaPB_HashBucketSchemaPB)(nil), // 53: yb.PartitionSchemaPB.HashBucketSchemaPB
	nil, // 54: yb.ChildTransactionDataPB.LocalLimitsEntry
	nil, // 55: yb.ChildTransactionResultPB.ReadRestartsEntry
}
var file_yb_common_common_proto_depIdxs = []int32{
	2,  // 0: yb.QLTypePB.main:type_name -> yb.DataType
	18, // 1: yb.QLTypePB.params:type_name -> yb.QLTypePB
	48, // 2: yb.QLTypePB.udtype_info:type_name -> yb.QLTypePB.UDTypeInfo
	18, // 3: yb.ColumnSchemaPB.type:type_name -> yb.QLTypePB
	39, // 4: yb.ColumnSchemaPB.OBSOLETE_json_operations:type_name -> yb.QLJsonOperationPB
	4,  // 5: yb.TablePropertiesPB.consistency_level:type_name -> yb.YBConsistencyLevel
	19, // 6: yb.SchemaPB.columns:type_name -> yb.ColumnSchemaPB
	21, // 7: yb.SchemaPB.table_properties:type_name -> yb.TablePropertiesPB
	20, // 8: yb.SchemaPB.colocated_table_id:type_name -> yb.ColocatedTableIdentifierPB
	7,  // 9: yb.IndexInfoPB.index_permissions:type_name -> yb.IndexPermissions
	49, // 10: yb.IndexInfoPB.columns:type_name -> yb.IndexInfoPB.IndexColumnPB
	53, // 11: yb.PartitionSchemaPB.hash_bucket_schemas:type_name -> yb.PartitionSchemaPB.HashBucketSchemaPB
	52, // 12: yb.PartitionSchemaPB.range_schema:type_name -> yb.PartitionSchemaPB.RangeSchemaPB
	16, // 13: yb.PartitionSchemaPB.hash_schema:type_name -> yb.PartitionSchemaPB.HashSchema
	9,  // 14: yb.TransactionMetadataPB.isolation:type_name -> yb.IsolationLevel
	27, // 15: yb.ChildTransactionDataPB.metadata:type_name -> yb.TransactionMetadataPB
	28, // 16: yb.ChildTransactionDataPB.read_time:type_name -> yb.ReadHybridTimePB
	54, // 17: yb.ChildTransactionDataPB.local_limits:type_name -> yb.ChildTransactionDataPB.LocalLimitsEntry
	12, // 18: yb.TransactionInvolvedTabletPB.metadata_state:type_name -> yb.InvolvedTabletMetadataState
	30, // 19: yb.ChildTransactionResultPB.tablets:type_name -> yb.TransactionInvolvedTabletPB
	55, // 20: yb.ChildTransactionResultPB.read_restarts:type_name -> yb.ChildTransactionResultPB.ReadRestartsEntry
	28, // 21: yb.ChildTransactionResultPB.used_read_time:type_name -> yb.ReadHybridTimePB
	36, // 22: yb.QLValuePB.map_value:type_name -> yb.QLMapValuePB
	35, // 23: yb.QLValuePB.set_value:type_name -> yb.QLSeqValuePB
	35, // 24: yb.QLValuePB.list_value:type_name -> yb.QLSeqValuePB
	35, // 25: yb.QLValuePB.frozen_value:type_name -> yb.QLSeqValuePB
	13, // 26: yb.QLValuePB.virtual_value:type_name -> yb.QLVirtualValuePB
	34, // 27: yb.QLSeqValuePB.elems:type_name -> yb.QLValuePB
	34, // 28: yb.QLMapValuePB.keys:type_name -> yb.QLValuePB
	34, // 29: yb.QLMapValuePB.values:type_name -> yb.QLValuePB
	40, // 30: yb.QLSubscriptedColPB.subscript_args:type_name -> yb.QLExpressionPB
	39, // 31: yb.QLJsonColumnOperationsPB.json_operations:type_name -> yb.QLJsonOperationPB
	14, // 32: yb.QLJsonOperationPB.json_operator:type_name -> yb.JsonOperatorPB
	40, // 33: yb.QLJsonOperationPB.operand:type_name -> yb.QLExpressionPB
	34, // 34: yb.QLExpressionPB.value:type_name -> yb.QLValuePB
	37, // 35: yb.QLExpressionPB.subscripted_col:type_name -> yb.QLSubscriptedColPB
	41, // 36: yb.QLExpressionPB.condition:type_name -> yb.QLConditionPB
	42, // 37: yb.QLExpressionPB.bfcall:type_name -> yb.QLBCallPB
	42, // 38: yb.QLExpressionPB.tscall:type_name -> yb.QLBCallPB
	42, // 39: yb.QLExpressionPB.bocall:type_name -> yb.QLBCallPB
	38, // 40: yb.QLExpressionPB.json_column:type_name -> yb.QLJsonColumnOperationsPB
	15, // 41: yb.QLConditionPB.op:type_name -> yb.QLOperator
	40, // 42: yb.QLConditionPB.operands:type_name -> yb.QLExpressionPB
	40, // 43: yb.QLBCallPB.operands:type_name -> yb.QLExpressionPB
	44, // 44: yb.ExplainPlanPB.select_plan:type_name -> yb.SelectPlanPB
	45, // 45: yb.ExplainPlanPB.insert_plan:type_name -> yb.InsertPlanPB
	46, // 46: yb.ExplainPlanPB.update_plan:type_name -> yb.UpdatePlanPB
	47, // 47: yb.ExplainPlanPB.delete_plan:type_name -> yb.DeletePlanPB
	40, // 48: yb.IndexInfoPB.IndexColumnPB.colexpr:type_name -> yb.QLExpressionPB
	50, // 49: yb.PartitionSchemaPB.RangeSchemaPB.columns:type_name -> yb.PartitionSchemaPB.ColumnIdentifierPB
	51, // 50: yb.PartitionSchemaPB.RangeSchemaPB.splits:type_name -> yb.PartitionSchemaPB.RangeSplitPB
	50, // 51: yb.PartitionSchemaPB.HashBucketSchemaPB.columns:type_name -> yb.PartitionSchemaPB.ColumnIdentifierPB
	17, // 52: yb.PartitionSchemaPB.HashBucketSchemaPB.hash_algorithm:type_name -> yb.PartitionSchemaPB.HashBucketSchemaPB.HashAlgorithm
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_yb_common_common_proto_init() }
func file_yb_common_common_proto_init() {
	if File_yb_common_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yb_common_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLTypePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnSchemaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColocatedTableIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablePropertiesPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPortPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSchemaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionMetadataPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadHybridTimePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildTransactionDataPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInvolvedTabletPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildTransactionResultPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedColumnPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLValuePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLSeqValuePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLMapValuePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLSubscriptedColPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLJsonColumnOperationsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLJsonOperationPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLExpressionPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLConditionPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLBCallPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainPlanPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectPlanPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertPlanPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLTypePB_UDTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInfoPB_IndexColumnPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSchemaPB_ColumnIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSchemaPB_RangeSplitPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSchemaPB_RangeSchemaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSchemaPB_HashBucketSchemaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yb_common_common_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ColocatedTableIdentifierPB_PgtableId)(nil),
		(*ColocatedTableIdentifierPB_CotableId)(nil),
	}
	file_yb_common_common_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*QLValuePB_Int8Value)(nil),
		(*QLValuePB_Int16Value)(nil),
		(*QLValuePB_Int32Value)(nil),
		(*QLValuePB_Int64Value)(nil),
		(*QLValuePB_FloatValue)(nil),
		(*QLValuePB_DoubleValue)(nil),
		(*QLValuePB_StringValue)(nil),
		(*QLValuePB_BoolValue)(nil),
		(*QLValuePB_TimestampValue)(nil),
		(*QLValuePB_BinaryValue)(nil),
		(*QLValuePB_InetaddressValue)(nil),
		(*QLValuePB_MapValue)(nil),
		(*QLValuePB_SetValue)(nil),
		(*QLValuePB_ListValue)(nil),
		(*QLValuePB_DecimalValue)(nil),
		(*QLValuePB_VarintValue)(nil),
		(*QLValuePB_FrozenValue)(nil),
		(*QLValuePB_UuidValue)(nil),
		(*QLValuePB_TimeuuidValue)(nil),
		(*QLValuePB_JsonbValue)(nil),
		(*QLValuePB_DateValue)(nil),
		(*QLValuePB_TimeValue)(nil),
		(*QLValuePB_Uint32Value)(nil),
		(*QLValuePB_Uint64Value)(nil),
		(*QLValuePB_VirtualValue)(nil),
	}
	file_yb_common_common_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*QLExpressionPB_Value)(nil),
		(*QLExpressionPB_ColumnId)(nil),
		(*QLExpressionPB_SubscriptedCol)(nil),
		(*QLExpressionPB_BindId)(nil),
		(*QLExpressionPB_Condition)(nil),
		(*QLExpressionPB_Bfcall)(nil),
		(*QLExpressionPB_Tscall)(nil),
		(*QLExpressionPB_Bocall)(nil),
		(*QLExpressionPB_JsonColumn)(nil),
	}
	file_yb_common_common_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ExplainPlanPB_SelectPlan)(nil),
		(*ExplainPlanPB_InsertPlan)(nil),
		(*ExplainPlanPB_UpdatePlan)(nil),
		(*ExplainPlanPB_DeletePlan)(nil),
	}
	file_yb_common_common_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*PartitionSchemaPB_ColumnIdentifierPB_Id)(nil),
		(*PartitionSchemaPB_ColumnIdentifierPB_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_common_common_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_common_common_proto_goTypes,
		DependencyIndexes: file_yb_common_common_proto_depIdxs,
		EnumInfos:         file_yb_common_common_proto_enumTypes,
		MessageInfos:      file_yb_common_common_proto_msgTypes,
	}.Build()
	File_yb_common_common_proto = out.File
	file_yb_common_common_proto_rawDesc = nil
	file_yb_common_common_proto_goTypes = nil
	file_yb_common_common_proto_depIdxs = nil
}
