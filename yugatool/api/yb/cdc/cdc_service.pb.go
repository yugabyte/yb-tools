// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/cdc/cdc_service.proto

package cdc

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	master "github.com/yugabyte/yb-tools/yugatool/api/yb/master"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	tserver "github.com/yugabyte/yb-tools/yugatool/api/yb/tserver"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CDCRecordType int32

const (
	// CHANGE: Default type, only the changed columns as new image, no old image except DELETE
	CDCRecordType_CHANGE CDCRecordType = 1
	// ALL: [Old type that is no longer allowed to be created] same as PG_FULL
	CDCRecordType_ALL CDCRecordType = 3
	// FULL_ROW_NEW_IMAGE: [Old type that is no longer allowed to be created] Entire updated row as
	// new image, entire row as old image for DELETE
	CDCRecordType_FULL_ROW_NEW_IMAGE CDCRecordType = 4
	// MODIFIED_COLUMNS_OLD_AND_NEW_IMAGES: [Old type that is no longer allowed to be created]
	// same as CHANGE_OLD_NEW
	CDCRecordType_MODIFIED_COLUMNS_OLD_AND_NEW_IMAGES CDCRecordType = 5
	// PG_FULL: Both old and new images of the entire row
	CDCRecordType_PG_FULL CDCRecordType = 6
	// PG_CHANGE_OLD_NEW: Both old and new image only of the modified columns
	CDCRecordType_PG_CHANGE_OLD_NEW CDCRecordType = 7
	// PG_DEFAULT: Entire updated row as new image, only key as old image for DELETE
	CDCRecordType_PG_DEFAULT CDCRecordType = 8
	// PG_NOTHING: No old image for any operation
	CDCRecordType_PG_NOTHING CDCRecordType = 9
)

// Enum value maps for CDCRecordType.
var (
	CDCRecordType_name = map[int32]string{
		1: "CHANGE",
		3: "ALL",
		4: "FULL_ROW_NEW_IMAGE",
		5: "MODIFIED_COLUMNS_OLD_AND_NEW_IMAGES",
		6: "PG_FULL",
		7: "PG_CHANGE_OLD_NEW",
		8: "PG_DEFAULT",
		9: "PG_NOTHING",
	}
	CDCRecordType_value = map[string]int32{
		"CHANGE":                              1,
		"ALL":                                 3,
		"FULL_ROW_NEW_IMAGE":                  4,
		"MODIFIED_COLUMNS_OLD_AND_NEW_IMAGES": 5,
		"PG_FULL":                             6,
		"PG_CHANGE_OLD_NEW":                   7,
		"PG_DEFAULT":                          8,
		"PG_NOTHING":                          9,
	}
)

func (x CDCRecordType) Enum() *CDCRecordType {
	p := new(CDCRecordType)
	*p = x
	return p
}

func (x CDCRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[0].Descriptor()
}

func (CDCRecordType) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[0]
}

func (x CDCRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCRecordType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCRecordType(num)
	return nil
}

// Deprecated: Use CDCRecordType.Descriptor instead.
func (CDCRecordType) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{0}
}

type CDCRecordFormat int32

const (
	CDCRecordFormat_JSON  CDCRecordFormat = 1
	CDCRecordFormat_WAL   CDCRecordFormat = 2 // Used for 2DC.
	CDCRecordFormat_PROTO CDCRecordFormat = 3 // Used for CDCSDK in case of Debezium
)

// Enum value maps for CDCRecordFormat.
var (
	CDCRecordFormat_name = map[int32]string{
		1: "JSON",
		2: "WAL",
		3: "PROTO",
	}
	CDCRecordFormat_value = map[string]int32{
		"JSON":  1,
		"WAL":   2,
		"PROTO": 3,
	}
)

func (x CDCRecordFormat) Enum() *CDCRecordFormat {
	p := new(CDCRecordFormat)
	*p = x
	return p
}

func (x CDCRecordFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCRecordFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[1].Descriptor()
}

func (CDCRecordFormat) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[1]
}

func (x CDCRecordFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCRecordFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCRecordFormat(num)
	return nil
}

// Deprecated: Use CDCRecordFormat.Descriptor instead.
func (CDCRecordFormat) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{1}
}

type CDCRequestSource int32

const (
	CDCRequestSource_XCLUSTER CDCRequestSource = 1 // Used for 2DC
	CDCRequestSource_CDCSDK   CDCRequestSource = 2 // Used for CDC
)

// Enum value maps for CDCRequestSource.
var (
	CDCRequestSource_name = map[int32]string{
		1: "XCLUSTER",
		2: "CDCSDK",
	}
	CDCRequestSource_value = map[string]int32{
		"XCLUSTER": 1,
		"CDCSDK":   2,
	}
)

func (x CDCRequestSource) Enum() *CDCRequestSource {
	p := new(CDCRequestSource)
	*p = x
	return p
}

func (x CDCRequestSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCRequestSource) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[2].Descriptor()
}

func (CDCRequestSource) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[2]
}

func (x CDCRequestSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCRequestSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCRequestSource(num)
	return nil
}

// Deprecated: Use CDCRequestSource.Descriptor instead.
func (CDCRequestSource) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{2}
}

type CDCCheckpointType int32

const (
	CDCCheckpointType_IMPLICIT CDCCheckpointType = 1 // Used for 2DC and CDC
	CDCCheckpointType_EXPLICIT CDCCheckpointType = 2 // Used for CDC
)

// Enum value maps for CDCCheckpointType.
var (
	CDCCheckpointType_name = map[int32]string{
		1: "IMPLICIT",
		2: "EXPLICIT",
	}
	CDCCheckpointType_value = map[string]int32{
		"IMPLICIT": 1,
		"EXPLICIT": 2,
	}
)

func (x CDCCheckpointType) Enum() *CDCCheckpointType {
	p := new(CDCCheckpointType)
	*p = x
	return p
}

func (x CDCCheckpointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCCheckpointType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[3].Descriptor()
}

func (CDCCheckpointType) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[3]
}

func (x CDCCheckpointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCCheckpointType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCCheckpointType(num)
	return nil
}

// Deprecated: Use CDCCheckpointType.Descriptor instead.
func (CDCCheckpointType) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{3}
}

type CDCSDKRequestSource int32

const (
	// Debezium connector directly calling CDC Service.
	CDCSDKRequestSource_DEBEZIUM CDCSDKRequestSource = 1
	// Walsender calling CDC service.
	CDCSDKRequestSource_WALSENDER CDCSDKRequestSource = 2
)

// Enum value maps for CDCSDKRequestSource.
var (
	CDCSDKRequestSource_name = map[int32]string{
		1: "DEBEZIUM",
		2: "WALSENDER",
	}
	CDCSDKRequestSource_value = map[string]int32{
		"DEBEZIUM":  1,
		"WALSENDER": 2,
	}
)

func (x CDCSDKRequestSource) Enum() *CDCSDKRequestSource {
	p := new(CDCSDKRequestSource)
	*p = x
	return p
}

func (x CDCSDKRequestSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCSDKRequestSource) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[4].Descriptor()
}

func (CDCSDKRequestSource) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[4]
}

func (x CDCSDKRequestSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCSDKRequestSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCSDKRequestSource(num)
	return nil
}

// Deprecated: Use CDCSDKRequestSource.Descriptor instead.
func (CDCSDKRequestSource) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{4}
}

type CDCErrorPB_Code int32

const (
	// An error which has no more specific error code.
	// The code and message in 'status' may reveal more details.
	//
	// RPCs should avoid returning this, since callers will not be
	// able to easily parse the error.
	CDCErrorPB_UNKNOWN_ERROR                      CDCErrorPB_Code = 1
	CDCErrorPB_TABLET_NOT_FOUND                   CDCErrorPB_Code = 2
	CDCErrorPB_TABLE_NOT_FOUND                    CDCErrorPB_Code = 3
	CDCErrorPB_SUBSCRIBER_NOT_FOUND               CDCErrorPB_Code = 4
	CDCErrorPB_CHECKPOINT_TOO_OLD                 CDCErrorPB_Code = 5
	CDCErrorPB_TABLET_NOT_RUNNING                 CDCErrorPB_Code = 6
	CDCErrorPB_NOT_LEADER                         CDCErrorPB_Code = 7 // deprecated. use TABLET_NOT_FOUND
	CDCErrorPB_LEADER_NOT_READY                   CDCErrorPB_Code = 11
	CDCErrorPB_NOT_RUNNING                        CDCErrorPB_Code = 8
	CDCErrorPB_INTERNAL_ERROR                     CDCErrorPB_Code = 9
	CDCErrorPB_INVALID_REQUEST                    CDCErrorPB_Code = 10
	CDCErrorPB_TABLET_SPLIT                       CDCErrorPB_Code = 12
	CDCErrorPB_OPERATION_DISALLOWED               CDCErrorPB_Code = 13
	CDCErrorPB_AUTO_FLAGS_CONFIG_VERSION_MISMATCH CDCErrorPB_Code = 14
)

// Enum value maps for CDCErrorPB_Code.
var (
	CDCErrorPB_Code_name = map[int32]string{
		1:  "UNKNOWN_ERROR",
		2:  "TABLET_NOT_FOUND",
		3:  "TABLE_NOT_FOUND",
		4:  "SUBSCRIBER_NOT_FOUND",
		5:  "CHECKPOINT_TOO_OLD",
		6:  "TABLET_NOT_RUNNING",
		7:  "NOT_LEADER",
		11: "LEADER_NOT_READY",
		8:  "NOT_RUNNING",
		9:  "INTERNAL_ERROR",
		10: "INVALID_REQUEST",
		12: "TABLET_SPLIT",
		13: "OPERATION_DISALLOWED",
		14: "AUTO_FLAGS_CONFIG_VERSION_MISMATCH",
	}
	CDCErrorPB_Code_value = map[string]int32{
		"UNKNOWN_ERROR":                      1,
		"TABLET_NOT_FOUND":                   2,
		"TABLE_NOT_FOUND":                    3,
		"SUBSCRIBER_NOT_FOUND":               4,
		"CHECKPOINT_TOO_OLD":                 5,
		"TABLET_NOT_RUNNING":                 6,
		"NOT_LEADER":                         7,
		"LEADER_NOT_READY":                   11,
		"NOT_RUNNING":                        8,
		"INTERNAL_ERROR":                     9,
		"INVALID_REQUEST":                    10,
		"TABLET_SPLIT":                       12,
		"OPERATION_DISALLOWED":               13,
		"AUTO_FLAGS_CONFIG_VERSION_MISMATCH": 14,
	}
)

func (x CDCErrorPB_Code) Enum() *CDCErrorPB_Code {
	p := new(CDCErrorPB_Code)
	*p = x
	return p
}

func (x CDCErrorPB_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCErrorPB_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[5].Descriptor()
}

func (CDCErrorPB_Code) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[5]
}

func (x CDCErrorPB_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCErrorPB_Code) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCErrorPB_Code(num)
	return nil
}

// Deprecated: Use CDCErrorPB_Code.Descriptor instead.
func (CDCErrorPB_Code) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{0, 0}
}

type CDCRecordPB_OperationType int32

const (
	CDCRecordPB_WRITE           CDCRecordPB_OperationType = 1
	CDCRecordPB_DELETE          CDCRecordPB_OperationType = 2
	CDCRecordPB_APPLY           CDCRecordPB_OperationType = 3
	CDCRecordPB_SPLIT_OP        CDCRecordPB_OperationType = 4
	CDCRecordPB_CHANGE_METADATA CDCRecordPB_OperationType = 5
)

// Enum value maps for CDCRecordPB_OperationType.
var (
	CDCRecordPB_OperationType_name = map[int32]string{
		1: "WRITE",
		2: "DELETE",
		3: "APPLY",
		4: "SPLIT_OP",
		5: "CHANGE_METADATA",
	}
	CDCRecordPB_OperationType_value = map[string]int32{
		"WRITE":           1,
		"DELETE":          2,
		"APPLY":           3,
		"SPLIT_OP":        4,
		"CHANGE_METADATA": 5,
	}
)

func (x CDCRecordPB_OperationType) Enum() *CDCRecordPB_OperationType {
	p := new(CDCRecordPB_OperationType)
	*p = x
	return p
}

func (x CDCRecordPB_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCRecordPB_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[6].Descriptor()
}

func (CDCRecordPB_OperationType) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[6]
}

func (x CDCRecordPB_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCRecordPB_OperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCRecordPB_OperationType(num)
	return nil
}

// Deprecated: Use CDCRecordPB_OperationType.Descriptor instead.
func (CDCRecordPB_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{23, 0}
}

type RowMessage_Op int32

const (
	RowMessage_UNKNOWN   RowMessage_Op = -1
	RowMessage_INSERT    RowMessage_Op = 0
	RowMessage_UPDATE    RowMessage_Op = 1
	RowMessage_DELETE    RowMessage_Op = 2
	RowMessage_BEGIN     RowMessage_Op = 3
	RowMessage_COMMIT    RowMessage_Op = 4
	RowMessage_DDL       RowMessage_Op = 5
	RowMessage_TRUNCATE  RowMessage_Op = 6
	RowMessage_READ      RowMessage_Op = 7
	RowMessage_SAFEPOINT RowMessage_Op = 8
)

// Enum value maps for RowMessage_Op.
var (
	RowMessage_Op_name = map[int32]string{
		-1: "UNKNOWN",
		0:  "INSERT",
		1:  "UPDATE",
		2:  "DELETE",
		3:  "BEGIN",
		4:  "COMMIT",
		5:  "DDL",
		6:  "TRUNCATE",
		7:  "READ",
		8:  "SAFEPOINT",
	}
	RowMessage_Op_value = map[string]int32{
		"UNKNOWN":   -1,
		"INSERT":    0,
		"UPDATE":    1,
		"DELETE":    2,
		"BEGIN":     3,
		"COMMIT":    4,
		"DDL":       5,
		"TRUNCATE":  6,
		"READ":      7,
		"SAFEPOINT": 8,
	}
)

func (x RowMessage_Op) Enum() *RowMessage_Op {
	p := new(RowMessage_Op)
	*p = x
	return p
}

func (x RowMessage_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowMessage_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[7].Descriptor()
}

func (RowMessage_Op) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[7]
}

func (x RowMessage_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RowMessage_Op) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RowMessage_Op(num)
	return nil
}

// Deprecated: Use RowMessage_Op.Descriptor instead.
func (RowMessage_Op) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{29, 0}
}

type CDCErrorPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error code.
	Code *CDCErrorPB_Code `protobuf:"varint,1,opt,name=code,enum=yb.cdc.CDCErrorPB_Code,def=1" json:"code,omitempty"`
	// The Status object for the error. This will include a textual
	// message that may be more useful to present in log messages, etc,
	// though its error code is less specific.
	Status        *common.AppStatusPB `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDCErrorPB fields.
const (
	Default_CDCErrorPB_Code = CDCErrorPB_UNKNOWN_ERROR
)

func (x *CDCErrorPB) Reset() {
	*x = CDCErrorPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCErrorPB) ProtoMessage() {}

func (x *CDCErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCErrorPB.ProtoReflect.Descriptor instead.
func (*CDCErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{0}
}

func (x *CDCErrorPB) GetCode() CDCErrorPB_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return Default_CDCErrorPB_Code
}

func (x *CDCErrorPB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type ReplicationSlotHashRangePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartRange    *uint32                `protobuf:"varint,1,opt,name=start_range,json=startRange" json:"start_range,omitempty"`
	EndRange      *uint32                `protobuf:"varint,2,opt,name=end_range,json=endRange" json:"end_range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationSlotHashRangePB) Reset() {
	*x = ReplicationSlotHashRangePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationSlotHashRangePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationSlotHashRangePB) ProtoMessage() {}

func (x *ReplicationSlotHashRangePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationSlotHashRangePB.ProtoReflect.Descriptor instead.
func (*ReplicationSlotHashRangePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicationSlotHashRangePB) GetStartRange() uint32 {
	if x != nil && x.StartRange != nil {
		return *x.StartRange
	}
	return 0
}

func (x *ReplicationSlotHashRangePB) GetEndRange() uint32 {
	if x != nil && x.EndRange != nil {
		return *x.EndRange
	}
	return 0
}

type InitVirtualWALForCDCRequestPB struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StreamId  []byte                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TableId   []string               `protobuf:"bytes,3,rep,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Represents the hash range constraints for replication slot i.e [start range, end range).
	// Tablets with start hash range falling in these slot's hash range will be polled.
	SlotHashRange *ReplicationSlotHashRangePB `protobuf:"bytes,4,opt,name=slot_hash_range,json=slotHashRange" json:"slot_hash_range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitVirtualWALForCDCRequestPB) Reset() {
	*x = InitVirtualWALForCDCRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitVirtualWALForCDCRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitVirtualWALForCDCRequestPB) ProtoMessage() {}

func (x *InitVirtualWALForCDCRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitVirtualWALForCDCRequestPB.ProtoReflect.Descriptor instead.
func (*InitVirtualWALForCDCRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{2}
}

func (x *InitVirtualWALForCDCRequestPB) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *InitVirtualWALForCDCRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *InitVirtualWALForCDCRequestPB) GetTableId() []string {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *InitVirtualWALForCDCRequestPB) GetSlotHashRange() *ReplicationSlotHashRangePB {
	if x != nil {
		return x.SlotHashRange
	}
	return nil
}

type InitVirtualWALForCDCResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitVirtualWALForCDCResponsePB) Reset() {
	*x = InitVirtualWALForCDCResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitVirtualWALForCDCResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitVirtualWALForCDCResponsePB) ProtoMessage() {}

func (x *InitVirtualWALForCDCResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitVirtualWALForCDCResponsePB.ProtoReflect.Descriptor instead.
func (*InitVirtualWALForCDCResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{3}
}

func (x *InitVirtualWALForCDCResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetConsistentChangesRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StreamId      []byte                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsistentChangesRequestPB) Reset() {
	*x = GetConsistentChangesRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsistentChangesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsistentChangesRequestPB) ProtoMessage() {}

func (x *GetConsistentChangesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsistentChangesRequestPB.ProtoReflect.Descriptor instead.
func (*GetConsistentChangesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetConsistentChangesRequestPB) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *GetConsistentChangesRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type GetConsistentChangesResponsePB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Error              *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	CdcSdkProtoRecords []*CDCSDKProtoRecordPB `protobuf:"bytes,2,rep,name=cdc_sdk_proto_records,json=cdcSdkProtoRecords" json:"cdc_sdk_proto_records,omitempty"`
	// This field tells the walsender whether a refresh of publication's table list is needed
	NeedsPublicationTableListRefresh *bool `protobuf:"varint,3,opt,name=needs_publication_table_list_refresh,json=needsPublicationTableListRefresh" json:"needs_publication_table_list_refresh,omitempty"`
	// This field tells the walsender the time at which the list of tables
	// in the publication needs to be querried for refresh. This is only relevant if
	// the above field 'needs_publication_table_list_refresh' is true.
	PublicationRefreshTime *uint64 `protobuf:"varint,4,opt,name=publication_refresh_time,json=publicationRefreshTime" json:"publication_refresh_time,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetConsistentChangesResponsePB) Reset() {
	*x = GetConsistentChangesResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsistentChangesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsistentChangesResponsePB) ProtoMessage() {}

func (x *GetConsistentChangesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsistentChangesResponsePB.ProtoReflect.Descriptor instead.
func (*GetConsistentChangesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetConsistentChangesResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetConsistentChangesResponsePB) GetCdcSdkProtoRecords() []*CDCSDKProtoRecordPB {
	if x != nil {
		return x.CdcSdkProtoRecords
	}
	return nil
}

func (x *GetConsistentChangesResponsePB) GetNeedsPublicationTableListRefresh() bool {
	if x != nil && x.NeedsPublicationTableListRefresh != nil {
		return *x.NeedsPublicationTableListRefresh
	}
	return false
}

func (x *GetConsistentChangesResponsePB) GetPublicationRefreshTime() uint64 {
	if x != nil && x.PublicationRefreshTime != nil {
		return *x.PublicationRefreshTime
	}
	return 0
}

type DestroyVirtualWALForCDCRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyVirtualWALForCDCRequestPB) Reset() {
	*x = DestroyVirtualWALForCDCRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyVirtualWALForCDCRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyVirtualWALForCDCRequestPB) ProtoMessage() {}

func (x *DestroyVirtualWALForCDCRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyVirtualWALForCDCRequestPB.ProtoReflect.Descriptor instead.
func (*DestroyVirtualWALForCDCRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{6}
}

func (x *DestroyVirtualWALForCDCRequestPB) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type DestroyVirtualWALForCDCResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DestroyVirtualWALForCDCResponsePB) Reset() {
	*x = DestroyVirtualWALForCDCResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestroyVirtualWALForCDCResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyVirtualWALForCDCResponsePB) ProtoMessage() {}

func (x *DestroyVirtualWALForCDCResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyVirtualWALForCDCResponsePB.ProtoReflect.Descriptor instead.
func (*DestroyVirtualWALForCDCResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{7}
}

func (x *DestroyVirtualWALForCDCResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type UpdateAndPersistLSNRequestPB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SessionId         *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StreamId          []byte                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	ConfirmedFlushLsn *uint64                `protobuf:"varint,3,opt,name=confirmed_flush_lsn,json=confirmedFlushLsn" json:"confirmed_flush_lsn,omitempty"`
	// The hint given for the possible value of restart_lsn.
	// The actual value which is persisted might differ from this value
	// and is returned in the response of this RPC.
	RestartLsn    *uint64 `protobuf:"varint,4,opt,name=restart_lsn,json=restartLsn" json:"restart_lsn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAndPersistLSNRequestPB) Reset() {
	*x = UpdateAndPersistLSNRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAndPersistLSNRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAndPersistLSNRequestPB) ProtoMessage() {}

func (x *UpdateAndPersistLSNRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAndPersistLSNRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateAndPersistLSNRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAndPersistLSNRequestPB) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *UpdateAndPersistLSNRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *UpdateAndPersistLSNRequestPB) GetConfirmedFlushLsn() uint64 {
	if x != nil && x.ConfirmedFlushLsn != nil {
		return *x.ConfirmedFlushLsn
	}
	return 0
}

func (x *UpdateAndPersistLSNRequestPB) GetRestartLsn() uint64 {
	if x != nil && x.RestartLsn != nil {
		return *x.RestartLsn
	}
	return 0
}

type UpdateAndPersistLSNResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	RestartLsn    *uint64                `protobuf:"varint,2,opt,name=restart_lsn,json=restartLsn" json:"restart_lsn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAndPersistLSNResponsePB) Reset() {
	*x = UpdateAndPersistLSNResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAndPersistLSNResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAndPersistLSNResponsePB) ProtoMessage() {}

func (x *UpdateAndPersistLSNResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAndPersistLSNResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateAndPersistLSNResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAndPersistLSNResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateAndPersistLSNResponsePB) GetRestartLsn() uint64 {
	if x != nil && x.RestartLsn != nil {
		return *x.RestartLsn
	}
	return 0
}

type UpdatePublicationTableListRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StreamId      []byte                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TableId       []string               `protobuf:"bytes,3,rep,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePublicationTableListRequestPB) Reset() {
	*x = UpdatePublicationTableListRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePublicationTableListRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicationTableListRequestPB) ProtoMessage() {}

func (x *UpdatePublicationTableListRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicationTableListRequestPB.ProtoReflect.Descriptor instead.
func (*UpdatePublicationTableListRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePublicationTableListRequestPB) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *UpdatePublicationTableListRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *UpdatePublicationTableListRequestPB) GetTableId() []string {
	if x != nil {
		return x.TableId
	}
	return nil
}

type UpdatePublicationTableListResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePublicationTableListResponsePB) Reset() {
	*x = UpdatePublicationTableListResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePublicationTableListResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicationTableListResponsePB) ProtoMessage() {}

func (x *UpdatePublicationTableListResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicationTableListResponsePB.ProtoReflect.Descriptor instead.
func (*UpdatePublicationTableListResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePublicationTableListResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateCDCStreamRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table to set up CDC on.
	TableId                        *string                      `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	RecordType                     *CDCRecordType               `protobuf:"varint,2,opt,name=record_type,json=recordType,enum=yb.cdc.CDCRecordType,def=1" json:"record_type,omitempty"`
	RecordFormat                   *CDCRecordFormat             `protobuf:"varint,3,opt,name=record_format,json=recordFormat,enum=yb.cdc.CDCRecordFormat,def=1" json:"record_format,omitempty"`
	NamespaceName                  *string                      `protobuf:"bytes,4,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	SourceType                     *CDCRequestSource            `protobuf:"varint,5,opt,name=source_type,json=sourceType,enum=yb.cdc.CDCRequestSource,def=1" json:"source_type,omitempty"`
	CheckpointType                 *CDCCheckpointType           `protobuf:"varint,6,opt,name=checkpoint_type,json=checkpointType,enum=yb.cdc.CDCCheckpointType" json:"checkpoint_type,omitempty"`
	Transactional                  *bool                        `protobuf:"varint,7,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	DbType                         *common.YQLDatabase          `protobuf:"varint,8,opt,name=db_type,json=dbType,enum=yb.YQLDatabase,def=3" json:"db_type,omitempty"`
	CdcsdkConsistentSnapshotOption *common.CDCSDKSnapshotOption `protobuf:"varint,9,opt,name=cdcsdk_consistent_snapshot_option,json=cdcsdkConsistentSnapshotOption,enum=yb.CDCSDKSnapshotOption" json:"cdcsdk_consistent_snapshot_option,omitempty"`
	// cdcsdk_stream_create_options field should be used for adding more stream creation options
	// related to CDCSDK in future.
	CdcsdkStreamCreateOptions *common.CDCSDKStreamCreateOptionsPB `protobuf:"bytes,10,opt,name=cdcsdk_stream_create_options,json=cdcsdkStreamCreateOptions" json:"cdcsdk_stream_create_options,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for CreateCDCStreamRequestPB fields.
const (
	Default_CreateCDCStreamRequestPB_RecordType   = CDCRecordType_CHANGE
	Default_CreateCDCStreamRequestPB_RecordFormat = CDCRecordFormat_JSON
	Default_CreateCDCStreamRequestPB_SourceType   = CDCRequestSource_XCLUSTER
	Default_CreateCDCStreamRequestPB_DbType       = common.YQLDatabase(3) // common.YQLDatabase_YQL_DATABASE_PGSQL
)

func (x *CreateCDCStreamRequestPB) Reset() {
	*x = CreateCDCStreamRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamRequestPB) ProtoMessage() {}

func (x *CreateCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCDCStreamRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetRecordType() CDCRecordType {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return Default_CreateCDCStreamRequestPB_RecordType
}

func (x *CreateCDCStreamRequestPB) GetRecordFormat() CDCRecordFormat {
	if x != nil && x.RecordFormat != nil {
		return *x.RecordFormat
	}
	return Default_CreateCDCStreamRequestPB_RecordFormat
}

func (x *CreateCDCStreamRequestPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetSourceType() CDCRequestSource {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return Default_CreateCDCStreamRequestPB_SourceType
}

func (x *CreateCDCStreamRequestPB) GetCheckpointType() CDCCheckpointType {
	if x != nil && x.CheckpointType != nil {
		return *x.CheckpointType
	}
	return CDCCheckpointType_IMPLICIT
}

func (x *CreateCDCStreamRequestPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *CreateCDCStreamRequestPB) GetDbType() common.YQLDatabase {
	if x != nil && x.DbType != nil {
		return *x.DbType
	}
	return Default_CreateCDCStreamRequestPB_DbType
}

func (x *CreateCDCStreamRequestPB) GetCdcsdkConsistentSnapshotOption() common.CDCSDKSnapshotOption {
	if x != nil && x.CdcsdkConsistentSnapshotOption != nil {
		return *x.CdcsdkConsistentSnapshotOption
	}
	return common.CDCSDKSnapshotOption(1)
}

func (x *CreateCDCStreamRequestPB) GetCdcsdkStreamCreateOptions() *common.CDCSDKStreamCreateOptionsPB {
	if x != nil {
		return x.CdcsdkStreamCreateOptions
	}
	return nil
}

type CreateCDCStreamResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StreamId      []byte                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	DbStreamId    []byte                 `protobuf:"bytes,3,opt,name=db_stream_id,json=dbStreamId" json:"db_stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCDCStreamResponsePB) Reset() {
	*x = CreateCDCStreamResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamResponsePB) ProtoMessage() {}

func (x *CreateCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{13}
}

func (x *CreateCDCStreamResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateCDCStreamResponsePB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *CreateCDCStreamResponsePB) GetDbStreamId() []byte {
	if x != nil {
		return x.DbStreamId
	}
	return nil
}

type DeleteCDCStreamRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      [][]byte               `protobuf:"bytes,1,rep,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	IgnoreErrors  *bool                  `protobuf:"varint,2,opt,name=ignore_errors,json=ignoreErrors,def=0" json:"ignore_errors,omitempty"`
	ForceDelete   *bool                  `protobuf:"varint,3,opt,name=force_delete,json=forceDelete,def=0" json:"force_delete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for DeleteCDCStreamRequestPB fields.
const (
	Default_DeleteCDCStreamRequestPB_IgnoreErrors = bool(false)
	Default_DeleteCDCStreamRequestPB_ForceDelete  = bool(false)
)

func (x *DeleteCDCStreamRequestPB) Reset() {
	*x = DeleteCDCStreamRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamRequestPB) ProtoMessage() {}

func (x *DeleteCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCDCStreamRequestPB) GetStreamId() [][]byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *DeleteCDCStreamRequestPB) GetIgnoreErrors() bool {
	if x != nil && x.IgnoreErrors != nil {
		return *x.IgnoreErrors
	}
	return Default_DeleteCDCStreamRequestPB_IgnoreErrors
}

func (x *DeleteCDCStreamRequestPB) GetForceDelete() bool {
	if x != nil && x.ForceDelete != nil {
		return *x.ForceDelete
	}
	return Default_DeleteCDCStreamRequestPB_ForceDelete
}

type DeleteCDCStreamResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCDCStreamResponsePB) Reset() {
	*x = DeleteCDCStreamResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamResponsePB) ProtoMessage() {}

func (x *DeleteCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCDCStreamResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListTabletsRequestPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StreamId *string                `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// local_only = true will only list tablets local to the tserver that receives the request.
	// local_only = false will list  all tablets for the stream.
	LocalOnly     *bool `protobuf:"varint,2,opt,name=local_only,json=localOnly,def=0" json:"local_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ListTabletsRequestPB fields.
const (
	Default_ListTabletsRequestPB_LocalOnly = bool(false)
)

func (x *ListTabletsRequestPB) Reset() {
	*x = ListTabletsRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsRequestPB) ProtoMessage() {}

func (x *ListTabletsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsRequestPB.ProtoReflect.Descriptor instead.
func (*ListTabletsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListTabletsRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *ListTabletsRequestPB) GetLocalOnly() bool {
	if x != nil && x.LocalOnly != nil {
		return *x.LocalOnly
	}
	return Default_ListTabletsRequestPB_LocalOnly
}

type ListTabletsResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Tablets       []*CDCTabletPB         `protobuf:"bytes,2,rep,name=tablets" json:"tablets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTabletsResponsePB) Reset() {
	*x = ListTabletsResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsResponsePB) ProtoMessage() {}

func (x *ListTabletsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsResponsePB.ProtoReflect.Descriptor instead.
func (*ListTabletsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListTabletsResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTabletsResponsePB) GetTablets() []*CDCTabletPB {
	if x != nil {
		return x.Tablets
	}
	return nil
}

type CDCTabletPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TabletId []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Tservers holding data for the tablet.
	Tservers      []*CDCTabletPB_ReplicaPB `protobuf:"bytes,2,rep,name=tservers" json:"tservers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCTabletPB) Reset() {
	*x = CDCTabletPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCTabletPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCTabletPB) ProtoMessage() {}

func (x *CDCTabletPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCTabletPB.ProtoReflect.Descriptor instead.
func (*CDCTabletPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{18}
}

func (x *CDCTabletPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *CDCTabletPB) GetTservers() []*CDCTabletPB_ReplicaPB {
	if x != nil {
		return x.Tservers
	}
	return nil
}

type CDCSDKCheckpointPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Term  *int64                 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index *int64                 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	// write_id, key which is the reverse_index_iterator are used to resume from partially
	// streamed intents when the number of intents to be streamed are more than the intent max batch
	// size
	Key     []byte `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	WriteId *int32 `protobuf:"varint,4,opt,name=write_id,json=writeId,def=0" json:"write_id,omitempty"`
	// snapshot_time is used in the context of bootstrap process
	SnapshotTime  *uint64 `protobuf:"varint,5,opt,name=snapshot_time,json=snapshotTime" json:"snapshot_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDCSDKCheckpointPB fields.
const (
	Default_CDCSDKCheckpointPB_WriteId = int32(0)
)

func (x *CDCSDKCheckpointPB) Reset() {
	*x = CDCSDKCheckpointPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCSDKCheckpointPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCSDKCheckpointPB) ProtoMessage() {}

func (x *CDCSDKCheckpointPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCSDKCheckpointPB.ProtoReflect.Descriptor instead.
func (*CDCSDKCheckpointPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{19}
}

func (x *CDCSDKCheckpointPB) GetTerm() int64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *CDCSDKCheckpointPB) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CDCSDKCheckpointPB) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CDCSDKCheckpointPB) GetWriteId() int32 {
	if x != nil && x.WriteId != nil {
		return *x.WriteId
	}
	return Default_CDCSDKCheckpointPB_WriteId
}

func (x *CDCSDKCheckpointPB) GetSnapshotTime() uint64 {
	if x != nil && x.SnapshotTime != nil {
		return *x.SnapshotTime
	}
	return 0
}

type CDCCheckpointPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpId          *common.OpIdPB         `protobuf:"bytes,1,opt,name=op_id,json=opId" json:"op_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCCheckpointPB) Reset() {
	*x = CDCCheckpointPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCCheckpointPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCCheckpointPB) ProtoMessage() {}

func (x *CDCCheckpointPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCCheckpointPB.ProtoReflect.Descriptor instead.
func (*CDCCheckpointPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{20}
}

func (x *CDCCheckpointPB) GetOpId() *common.OpIdPB {
	if x != nil {
		return x.OpId
	}
	return nil
}

type GetChangesRequestPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StreamId []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// Tablet to get the changes for.
	TabletId []byte `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Checkpoint to start reading from (exclusive).
	// Start reading from the first record after this checkpoint.
	FromCheckpoint *CDCCheckpointPB `protobuf:"bytes,3,opt,name=from_checkpoint,json=fromCheckpoint" json:"from_checkpoint,omitempty"`
	// Maximum records to read.
	MaxRecords *uint32 `protobuf:"varint,4,opt,name=max_records,json=maxRecords" json:"max_records,omitempty"`
	// Whether the caller knows the tablet address or needs to use us as a proxy.
	ServeAsProxy         *bool               `protobuf:"varint,5,opt,name=serve_as_proxy,json=serveAsProxy,def=1" json:"serve_as_proxy,omitempty"`
	DbStreamId           []byte              `protobuf:"bytes,6,opt,name=db_stream_id,json=dbStreamId" json:"db_stream_id,omitempty"`
	TableId              []byte              `protobuf:"bytes,7,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	FromCdcSdkCheckpoint *CDCSDKCheckpointPB `protobuf:"bytes,8,opt,name=from_cdc_sdk_checkpoint,json=fromCdcSdkCheckpoint" json:"from_cdc_sdk_checkpoint,omitempty"`
	NeedSchemaInfo       *bool               `protobuf:"varint,9,opt,name=need_schema_info,json=needSchemaInfo,def=0" json:"need_schema_info,omitempty"`
	// This will be the checkpoint used for 'EXPLICIT' checkpoint streams.
	ExplicitCdcSdkCheckpoint *CDCSDKCheckpointPB `protobuf:"bytes,10,opt,name=explicit_cdc_sdk_checkpoint,json=explicitCdcSdkCheckpoint" json:"explicit_cdc_sdk_checkpoint,omitempty"`
	SafeHybridTime           *int64              `protobuf:"varint,11,opt,name=safe_hybrid_time,json=safeHybridTime,def=-1" json:"safe_hybrid_time,omitempty"`
	// index used to filter out the records we've already streamed.
	WalSegmentIndex *int32 `protobuf:"varint,12,opt,name=wal_segment_index,json=walSegmentIndex,def=0" json:"wal_segment_index,omitempty"`
	// Used only in xCluster streams.
	AutoFlagsConfigVersion *uint32              `protobuf:"varint,13,opt,name=auto_flags_config_version,json=autoFlagsConfigVersion" json:"auto_flags_config_version,omitempty"`
	CdcsdkRequestSource    *CDCSDKRequestSource `protobuf:"varint,14,opt,name=cdcsdk_request_source,json=cdcsdkRequestSource,enum=yb.cdc.CDCSDKRequestSource,def=1" json:"cdcsdk_request_source,omitempty"`
	RaftConfigOpidIndex    *int64               `protobuf:"varint,15,opt,name=raft_config_opid_index,json=raftConfigOpidIndex" json:"raft_config_opid_index,omitempty"`
	// Used only in CDCSDK streams. If the field is set, use its value to
	// limit the size of GetChanges response. Otherwise consider the value
	// of the gflag 'cdc_stream_records_threshold_size_bytes'
	GetchangesRespMaxSizeBytes *uint64 `protobuf:"varint,16,opt,name=getchanges_resp_max_size_bytes,json=getchangesRespMaxSizeBytes" json:"getchanges_resp_max_size_bytes,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for GetChangesRequestPB fields.
const (
	Default_GetChangesRequestPB_ServeAsProxy        = bool(true)
	Default_GetChangesRequestPB_NeedSchemaInfo      = bool(false)
	Default_GetChangesRequestPB_SafeHybridTime      = int64(-1)
	Default_GetChangesRequestPB_WalSegmentIndex     = int32(0)
	Default_GetChangesRequestPB_CdcsdkRequestSource = CDCSDKRequestSource_DEBEZIUM
)

func (x *GetChangesRequestPB) Reset() {
	*x = GetChangesRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChangesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangesRequestPB) ProtoMessage() {}

func (x *GetChangesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangesRequestPB.ProtoReflect.Descriptor instead.
func (*GetChangesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetChangesRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *GetChangesRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetChangesRequestPB) GetFromCheckpoint() *CDCCheckpointPB {
	if x != nil {
		return x.FromCheckpoint
	}
	return nil
}

func (x *GetChangesRequestPB) GetMaxRecords() uint32 {
	if x != nil && x.MaxRecords != nil {
		return *x.MaxRecords
	}
	return 0
}

func (x *GetChangesRequestPB) GetServeAsProxy() bool {
	if x != nil && x.ServeAsProxy != nil {
		return *x.ServeAsProxy
	}
	return Default_GetChangesRequestPB_ServeAsProxy
}

func (x *GetChangesRequestPB) GetDbStreamId() []byte {
	if x != nil {
		return x.DbStreamId
	}
	return nil
}

func (x *GetChangesRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *GetChangesRequestPB) GetFromCdcSdkCheckpoint() *CDCSDKCheckpointPB {
	if x != nil {
		return x.FromCdcSdkCheckpoint
	}
	return nil
}

func (x *GetChangesRequestPB) GetNeedSchemaInfo() bool {
	if x != nil && x.NeedSchemaInfo != nil {
		return *x.NeedSchemaInfo
	}
	return Default_GetChangesRequestPB_NeedSchemaInfo
}

func (x *GetChangesRequestPB) GetExplicitCdcSdkCheckpoint() *CDCSDKCheckpointPB {
	if x != nil {
		return x.ExplicitCdcSdkCheckpoint
	}
	return nil
}

func (x *GetChangesRequestPB) GetSafeHybridTime() int64 {
	if x != nil && x.SafeHybridTime != nil {
		return *x.SafeHybridTime
	}
	return Default_GetChangesRequestPB_SafeHybridTime
}

func (x *GetChangesRequestPB) GetWalSegmentIndex() int32 {
	if x != nil && x.WalSegmentIndex != nil {
		return *x.WalSegmentIndex
	}
	return Default_GetChangesRequestPB_WalSegmentIndex
}

func (x *GetChangesRequestPB) GetAutoFlagsConfigVersion() uint32 {
	if x != nil && x.AutoFlagsConfigVersion != nil {
		return *x.AutoFlagsConfigVersion
	}
	return 0
}

func (x *GetChangesRequestPB) GetCdcsdkRequestSource() CDCSDKRequestSource {
	if x != nil && x.CdcsdkRequestSource != nil {
		return *x.CdcsdkRequestSource
	}
	return Default_GetChangesRequestPB_CdcsdkRequestSource
}

func (x *GetChangesRequestPB) GetRaftConfigOpidIndex() int64 {
	if x != nil && x.RaftConfigOpidIndex != nil {
		return *x.RaftConfigOpidIndex
	}
	return 0
}

func (x *GetChangesRequestPB) GetGetchangesRespMaxSizeBytes() uint64 {
	if x != nil && x.GetchangesRespMaxSizeBytes != nil {
		return *x.GetchangesRespMaxSizeBytes
	}
	return 0
}

type KeyValuePairPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *common.QLValuePB      `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValuePairPB) Reset() {
	*x = KeyValuePairPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValuePairPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePairPB) ProtoMessage() {}

func (x *KeyValuePairPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePairPB.ProtoReflect.Descriptor instead.
func (*KeyValuePairPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{22}
}

func (x *KeyValuePairPB) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValuePairPB) GetValue() *common.QLValuePB {
	if x != nil {
		return x.Value
	}
	return nil
}

type CDCRecordPB struct {
	state     protoimpl.MessageState     `protogen:"open.v1"`
	Time      *uint64                    `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Operation *CDCRecordPB_OperationType `protobuf:"varint,2,opt,name=operation,enum=yb.cdc.CDCRecordPB_OperationType" json:"operation,omitempty"`
	// Primary key of the record that changed
	Key []*KeyValuePairPB `protobuf:"bytes,3,rep,name=key" json:"key,omitempty"`
	// Key-value pairs (column_name : value) of changes / before record / after record
	Changes          []*KeyValuePairPB          `protobuf:"bytes,4,rep,name=changes" json:"changes,omitempty"`
	Before           []*KeyValuePairPB          `protobuf:"bytes,5,rep,name=before" json:"before,omitempty"` // NOT CURRENTLY USED
	After            []*KeyValuePairPB          `protobuf:"bytes,6,rep,name=after" json:"after,omitempty"`   // NOT CURRENTLY USED
	TransactionState *tablet.TransactionStatePB `protobuf:"bytes,7,opt,name=transaction_state,json=transactionState" json:"transaction_state,omitempty"`
	// If transaction_state.status is APPLYING, then partition will contain the partition for the
	// tablet being polled.
	Partition *common.PartitionPB `protobuf:"bytes,9,opt,name=partition" json:"partition,omitempty"`
	// If operation type is a SPLIT_OP, then include the split request.
	SplitTabletRequest *tablet.SplitTabletRequestPB `protobuf:"bytes,10,opt,name=split_tablet_request,json=splitTabletRequest" json:"split_tablet_request,omitempty"`
	// If operation type is a CHANGE_METADATA_OP, then include the tablet payload for it.
	ChangeMetadataRequest *tablet.ChangeMetadataRequestPB `protobuf:"bytes,11,opt,name=change_metadata_request,json=changeMetadataRequest" json:"change_metadata_request,omitempty"`
	// For intents, what subtransaction, if any, they are part of.
	// Omitted in cases where the subtransaction ID is kMinSubTransactionId.
	SubtransactionId *uint32 `protobuf:"varint,12,opt,name=subtransaction_id,json=subtransactionId" json:"subtransaction_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CDCRecordPB) Reset() {
	*x = CDCRecordPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCRecordPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCRecordPB) ProtoMessage() {}

func (x *CDCRecordPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCRecordPB.ProtoReflect.Descriptor instead.
func (*CDCRecordPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{23}
}

func (x *CDCRecordPB) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CDCRecordPB) GetOperation() CDCRecordPB_OperationType {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return CDCRecordPB_WRITE
}

func (x *CDCRecordPB) GetKey() []*KeyValuePairPB {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CDCRecordPB) GetChanges() []*KeyValuePairPB {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CDCRecordPB) GetBefore() []*KeyValuePairPB {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CDCRecordPB) GetAfter() []*KeyValuePairPB {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CDCRecordPB) GetTransactionState() *tablet.TransactionStatePB {
	if x != nil {
		return x.TransactionState
	}
	return nil
}

func (x *CDCRecordPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *CDCRecordPB) GetSplitTabletRequest() *tablet.SplitTabletRequestPB {
	if x != nil {
		return x.SplitTabletRequest
	}
	return nil
}

func (x *CDCRecordPB) GetChangeMetadataRequest() *tablet.ChangeMetadataRequestPB {
	if x != nil {
		return x.ChangeMetadataRequest
	}
	return nil
}

func (x *CDCRecordPB) GetSubtransactionId() uint32 {
	if x != nil && x.SubtransactionId != nil {
		return *x.SubtransactionId
	}
	return 0
}

// CDCSDK: Column information used in case of DDL, as part of schema info
type CDCSDKColumnInfoPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type          *common.QLTypePB       `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	IsKey         *bool                  `protobuf:"varint,3,opt,name=is_key,json=isKey,def=0" json:"is_key,omitempty"`
	IsHashKey     *bool                  `protobuf:"varint,4,opt,name=is_hash_key,json=isHashKey,def=0" json:"is_hash_key,omitempty"`
	IsNullable    *bool                  `protobuf:"varint,5,opt,name=is_nullable,json=isNullable,def=0" json:"is_nullable,omitempty"`
	Oid           *int32                 `protobuf:"varint,6,opt,name=oid,def=0" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDCSDKColumnInfoPB fields.
const (
	Default_CDCSDKColumnInfoPB_IsKey      = bool(false)
	Default_CDCSDKColumnInfoPB_IsHashKey  = bool(false)
	Default_CDCSDKColumnInfoPB_IsNullable = bool(false)
	Default_CDCSDKColumnInfoPB_Oid        = int32(0)
)

func (x *CDCSDKColumnInfoPB) Reset() {
	*x = CDCSDKColumnInfoPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCSDKColumnInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCSDKColumnInfoPB) ProtoMessage() {}

func (x *CDCSDKColumnInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCSDKColumnInfoPB.ProtoReflect.Descriptor instead.
func (*CDCSDKColumnInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{24}
}

func (x *CDCSDKColumnInfoPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CDCSDKColumnInfoPB) GetType() *common.QLTypePB {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CDCSDKColumnInfoPB) GetIsKey() bool {
	if x != nil && x.IsKey != nil {
		return *x.IsKey
	}
	return Default_CDCSDKColumnInfoPB_IsKey
}

func (x *CDCSDKColumnInfoPB) GetIsHashKey() bool {
	if x != nil && x.IsHashKey != nil {
		return *x.IsHashKey
	}
	return Default_CDCSDKColumnInfoPB_IsHashKey
}

func (x *CDCSDKColumnInfoPB) GetIsNullable() bool {
	if x != nil && x.IsNullable != nil {
		return *x.IsNullable
	}
	return Default_CDCSDKColumnInfoPB_IsNullable
}

func (x *CDCSDKColumnInfoPB) GetOid() int32 {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return Default_CDCSDKColumnInfoPB_Oid
}

// CDCSDK: Table properties used in case of DDL, as part of schema info
type CDCSDKTablePropertiesPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DefaultTimeToLive  *uint64                `protobuf:"varint,1,opt,name=default_time_to_live,json=defaultTimeToLive" json:"default_time_to_live,omitempty"`
	NumTablets         *int32                 `protobuf:"varint,2,opt,name=num_tablets,json=numTablets,def=0" json:"num_tablets,omitempty"`
	IsYsqlCatalogTable *bool                  `protobuf:"varint,3,opt,name=is_ysql_catalog_table,json=isYsqlCatalogTable,def=0" json:"is_ysql_catalog_table,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CDCSDKTablePropertiesPB fields.
const (
	Default_CDCSDKTablePropertiesPB_NumTablets         = int32(0)
	Default_CDCSDKTablePropertiesPB_IsYsqlCatalogTable = bool(false)
)

func (x *CDCSDKTablePropertiesPB) Reset() {
	*x = CDCSDKTablePropertiesPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCSDKTablePropertiesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCSDKTablePropertiesPB) ProtoMessage() {}

func (x *CDCSDKTablePropertiesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCSDKTablePropertiesPB.ProtoReflect.Descriptor instead.
func (*CDCSDKTablePropertiesPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{25}
}

func (x *CDCSDKTablePropertiesPB) GetDefaultTimeToLive() uint64 {
	if x != nil && x.DefaultTimeToLive != nil {
		return *x.DefaultTimeToLive
	}
	return 0
}

func (x *CDCSDKTablePropertiesPB) GetNumTablets() int32 {
	if x != nil && x.NumTablets != nil {
		return *x.NumTablets
	}
	return Default_CDCSDKTablePropertiesPB_NumTablets
}

func (x *CDCSDKTablePropertiesPB) GetIsYsqlCatalogTable() bool {
	if x != nil && x.IsYsqlCatalogTable != nil {
		return *x.IsYsqlCatalogTable
	}
	return Default_CDCSDKTablePropertiesPB_IsYsqlCatalogTable
}

// CDCSDK: Schema information
type CDCSDKSchemaPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of columns with associated column properties
	ColumnInfo []*CDCSDKColumnInfoPB `protobuf:"bytes,1,rep,name=column_info,json=columnInfo" json:"column_info,omitempty"`
	// Table properties
	TabInfo       *CDCSDKTablePropertiesPB `protobuf:"bytes,2,opt,name=tab_info,json=tabInfo" json:"tab_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCSDKSchemaPB) Reset() {
	*x = CDCSDKSchemaPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCSDKSchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCSDKSchemaPB) ProtoMessage() {}

func (x *CDCSDKSchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCSDKSchemaPB.ProtoReflect.Descriptor instead.
func (*CDCSDKSchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{26}
}

func (x *CDCSDKSchemaPB) GetColumnInfo() []*CDCSDKColumnInfoPB {
	if x != nil {
		return x.ColumnInfo
	}
	return nil
}

func (x *CDCSDKSchemaPB) GetTabInfo() *CDCSDKTablePropertiesPB {
	if x != nil {
		return x.TabInfo
	}
	return nil
}

type CDCSDKOpIdPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The term of an operation or the leader's sequence id.
	Term          *int64  `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Index         *int64  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	WriteId       *uint32 `protobuf:"varint,3,opt,name=write_id,json=writeId,def=0" json:"write_id,omitempty"`
	WriteIdKey    []byte  `protobuf:"bytes,4,opt,name=write_id_key,json=writeIdKey,def=" json:"write_id_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDCSDKOpIdPB fields.
const (
	Default_CDCSDKOpIdPB_WriteId = uint32(0)
)

// Default values for CDCSDKOpIdPB fields.
var (
	Default_CDCSDKOpIdPB_WriteIdKey = []byte("")
)

func (x *CDCSDKOpIdPB) Reset() {
	*x = CDCSDKOpIdPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCSDKOpIdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCSDKOpIdPB) ProtoMessage() {}

func (x *CDCSDKOpIdPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCSDKOpIdPB.ProtoReflect.Descriptor instead.
func (*CDCSDKOpIdPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{27}
}

func (x *CDCSDKOpIdPB) GetTerm() int64 {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return 0
}

func (x *CDCSDKOpIdPB) GetIndex() int64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CDCSDKOpIdPB) GetWriteId() uint32 {
	if x != nil && x.WriteId != nil {
		return *x.WriteId
	}
	return Default_CDCSDKOpIdPB_WriteId
}

func (x *CDCSDKOpIdPB) GetWriteIdKey() []byte {
	if x != nil && x.WriteIdKey != nil {
		return x.WriteIdKey
	}
	return append([]byte(nil), Default_CDCSDKOpIdPB_WriteIdKey...)
}

type TypeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Modifier      *string                `protobuf:"bytes,1,opt,name=modifier" json:"modifier,omitempty"`
	ValueOptional *bool                  `protobuf:"varint,2,opt,name=value_optional,json=valueOptional" json:"value_optional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeInfo) Reset() {
	*x = TypeInfo{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeInfo) ProtoMessage() {}

func (x *TypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeInfo.ProtoReflect.Descriptor instead.
func (*TypeInfo) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{28}
}

func (x *TypeInfo) GetModifier() string {
	if x != nil && x.Modifier != nil {
		return *x.Modifier
	}
	return ""
}

func (x *TypeInfo) GetValueOptional() bool {
	if x != nil && x.ValueOptional != nil {
		return *x.ValueOptional
	}
	return false
}

type RowMessage struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	TransactionId []byte                   `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	CommitTime    *uint64                  `protobuf:"varint,2,opt,name=commit_time,json=commitTime" json:"commit_time,omitempty"`
	Table         *string                  `protobuf:"bytes,3,opt,name=table" json:"table,omitempty"`
	Op            *RowMessage_Op           `protobuf:"varint,4,opt,name=op,enum=yb.cdc.RowMessage_Op" json:"op,omitempty"`
	NewTuple      []*common.DatumMessagePB `protobuf:"bytes,5,rep,name=new_tuple,json=newTuple" json:"new_tuple,omitempty"`
	OldTuple      []*common.DatumMessagePB `protobuf:"bytes,6,rep,name=old_tuple,json=oldTuple" json:"old_tuple,omitempty"`
	NewTypeinfo   []*TypeInfo              `protobuf:"bytes,7,rep,name=new_typeinfo,json=newTypeinfo" json:"new_typeinfo,omitempty"`
	// Schema information used in case of DDL
	Schema *CDCSDKSchemaPB `protobuf:"bytes,8,opt,name=schema" json:"schema,omitempty"`
	// Schema version
	SchemaVersion *uint32 `protobuf:"varint,9,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	// New table name, used in the case of rename table
	NewTableName *string `protobuf:"bytes,10,opt,name=new_table_name,json=newTableName" json:"new_table_name,omitempty"`
	PgschemaName *string `protobuf:"bytes,11,opt,name=pgschema_name,json=pgschemaName" json:"pgschema_name,omitempty"`
	// truncate info
	TruncateRequestInfo *tserver.TruncateRequestPB `protobuf:"bytes,13,opt,name=truncate_request_info,json=truncateRequestInfo" json:"truncate_request_info,omitempty"`
	RecordTime          *uint64                    `protobuf:"varint,14,opt,name=record_time,json=recordTime" json:"record_time,omitempty"`
	PgLsn               *uint64                    `protobuf:"varint,15,opt,name=pg_lsn,json=pgLsn" json:"pg_lsn,omitempty"`
	PgTransactionId     *uint32                    `protobuf:"varint,16,opt,name=pg_transaction_id,json=pgTransactionId" json:"pg_transaction_id,omitempty"`
	// The ID of the table associated with the row. Only populated for DMLs & DDLs
	// but not for other ops such as BEGIN/COMMIT/SAFEPOINT.
	TableId *string `protobuf:"bytes,17,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// DocKey for the row in a table. Only populated for DMLs in the streaming phase but not
	// for other ops such as DDL/BEGIN/COMMIT/SAFEPOINT. Not populated in the Snapshot phase.
	PrimaryKey    []byte `protobuf:"bytes,18,opt,name=primary_key,json=primaryKey" json:"primary_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RowMessage) Reset() {
	*x = RowMessage{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowMessage) ProtoMessage() {}

func (x *RowMessage) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowMessage.ProtoReflect.Descriptor instead.
func (*RowMessage) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{29}
}

func (x *RowMessage) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *RowMessage) GetCommitTime() uint64 {
	if x != nil && x.CommitTime != nil {
		return *x.CommitTime
	}
	return 0
}

func (x *RowMessage) GetTable() string {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return ""
}

func (x *RowMessage) GetOp() RowMessage_Op {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return RowMessage_UNKNOWN
}

func (x *RowMessage) GetNewTuple() []*common.DatumMessagePB {
	if x != nil {
		return x.NewTuple
	}
	return nil
}

func (x *RowMessage) GetOldTuple() []*common.DatumMessagePB {
	if x != nil {
		return x.OldTuple
	}
	return nil
}

func (x *RowMessage) GetNewTypeinfo() []*TypeInfo {
	if x != nil {
		return x.NewTypeinfo
	}
	return nil
}

func (x *RowMessage) GetSchema() *CDCSDKSchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *RowMessage) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *RowMessage) GetNewTableName() string {
	if x != nil && x.NewTableName != nil {
		return *x.NewTableName
	}
	return ""
}

func (x *RowMessage) GetPgschemaName() string {
	if x != nil && x.PgschemaName != nil {
		return *x.PgschemaName
	}
	return ""
}

func (x *RowMessage) GetTruncateRequestInfo() *tserver.TruncateRequestPB {
	if x != nil {
		return x.TruncateRequestInfo
	}
	return nil
}

func (x *RowMessage) GetRecordTime() uint64 {
	if x != nil && x.RecordTime != nil {
		return *x.RecordTime
	}
	return 0
}

func (x *RowMessage) GetPgLsn() uint64 {
	if x != nil && x.PgLsn != nil {
		return *x.PgLsn
	}
	return 0
}

func (x *RowMessage) GetPgTransactionId() uint32 {
	if x != nil && x.PgTransactionId != nil {
		return *x.PgTransactionId
	}
	return 0
}

func (x *RowMessage) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *RowMessage) GetPrimaryKey() []byte {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

type CDCSDKProtoRecordPB struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	RowMessage *RowMessage            `protobuf:"bytes,1,opt,name=row_message,json=rowMessage" json:"row_message,omitempty"`
	// Op id information to identify duplicate entries
	CdcSdkOpId    *CDCSDKOpIdPB `protobuf:"bytes,2,opt,name=cdc_sdk_op_id,json=cdcSdkOpId" json:"cdc_sdk_op_id,omitempty"`
	FromOpId      *CDCSDKOpIdPB `protobuf:"bytes,3,opt,name=from_op_id,json=fromOpId" json:"from_op_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCSDKProtoRecordPB) Reset() {
	*x = CDCSDKProtoRecordPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCSDKProtoRecordPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCSDKProtoRecordPB) ProtoMessage() {}

func (x *CDCSDKProtoRecordPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCSDKProtoRecordPB.ProtoReflect.Descriptor instead.
func (*CDCSDKProtoRecordPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{30}
}

func (x *CDCSDKProtoRecordPB) GetRowMessage() *RowMessage {
	if x != nil {
		return x.RowMessage
	}
	return nil
}

func (x *CDCSDKProtoRecordPB) GetCdcSdkOpId() *CDCSDKOpIdPB {
	if x != nil {
		return x.CdcSdkOpId
	}
	return nil
}

func (x *CDCSDKProtoRecordPB) GetFromOpId() *CDCSDKOpIdPB {
	if x != nil {
		return x.FromOpId
	}
	return nil
}

type GetChangesResponsePB struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Error        *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	RecordType   *CDCRecordType         `protobuf:"varint,2,opt,name=record_type,json=recordType,enum=yb.cdc.CDCRecordType,def=1" json:"record_type,omitempty"`
	RecordFormat *CDCRecordFormat       `protobuf:"varint,3,opt,name=record_format,json=recordFormat,enum=yb.cdc.CDCRecordFormat" json:"record_format,omitempty"`
	Records      []*CDCRecordPB         `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
	// Checkpoint that consumers can send back in GetChanges RPC
	// to mark all CDC records in this GetChanges batch as committed.
	Checkpoint *CDCCheckpointPB `protobuf:"bytes,5,opt,name=checkpoint" json:"checkpoint,omitempty"`
	// In case the tablet is no longer hosted on this tserver, provide the list of tservers holding
	// data for the tablet.
	Tserver []*common.HostPortPB `protobuf:"bytes,6,rep,name=tserver" json:"tserver,omitempty"`
	// repeated CDCSDKRecordPB cdc_sdk_records = 7;
	CdcSdkProtoRecords []*CDCSDKProtoRecordPB `protobuf:"bytes,8,rep,name=cdc_sdk_proto_records,json=cdcSdkProtoRecords" json:"cdc_sdk_proto_records,omitempty"`
	// In addition to the op id info, cdc_sdk_checkpoint also stores the info about write_id and
	// reverse_index_key so that it could be used  to resume partially streamed intents
	CdcSdkCheckpoint *CDCSDKCheckpointPB `protobuf:"bytes,9,opt,name=cdc_sdk_checkpoint,json=cdcSdkCheckpoint" json:"cdc_sdk_checkpoint,omitempty"`
	// The safe time to be used on the target for this tablet.
	SafeHybridTime *int64 `protobuf:"varint,10,opt,name=safe_hybrid_time,json=safeHybridTime" json:"safe_hybrid_time,omitempty"`
	// index used to filter out the records we've already streamed.
	WalSegmentIndex *int32 `protobuf:"varint,11,opt,name=wal_segment_index,json=walSegmentIndex,def=0" json:"wal_segment_index,omitempty"`
	// Only set in xCluster streams when error is AUTO_FLAGS_CONFIG_VERSION_MISMATCH.
	AutoFlagsConfigVersion *uint32                        `protobuf:"varint,12,opt,name=auto_flags_config_version,json=autoFlagsConfigVersion" json:"auto_flags_config_version,omitempty"`
	TabletConsensusInfo    *tserver.TabletConsensusInfoPB `protobuf:"bytes,13,opt,name=tablet_consensus_info,json=tabletConsensusInfo" json:"tablet_consensus_info,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for GetChangesResponsePB fields.
const (
	Default_GetChangesResponsePB_RecordType      = CDCRecordType_CHANGE
	Default_GetChangesResponsePB_WalSegmentIndex = int32(0)
)

func (x *GetChangesResponsePB) Reset() {
	*x = GetChangesResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChangesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangesResponsePB) ProtoMessage() {}

func (x *GetChangesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangesResponsePB.ProtoReflect.Descriptor instead.
func (*GetChangesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetChangesResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetChangesResponsePB) GetRecordType() CDCRecordType {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return Default_GetChangesResponsePB_RecordType
}

func (x *GetChangesResponsePB) GetRecordFormat() CDCRecordFormat {
	if x != nil && x.RecordFormat != nil {
		return *x.RecordFormat
	}
	return CDCRecordFormat_JSON
}

func (x *GetChangesResponsePB) GetRecords() []*CDCRecordPB {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetChangesResponsePB) GetCheckpoint() *CDCCheckpointPB {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *GetChangesResponsePB) GetTserver() []*common.HostPortPB {
	if x != nil {
		return x.Tserver
	}
	return nil
}

func (x *GetChangesResponsePB) GetCdcSdkProtoRecords() []*CDCSDKProtoRecordPB {
	if x != nil {
		return x.CdcSdkProtoRecords
	}
	return nil
}

func (x *GetChangesResponsePB) GetCdcSdkCheckpoint() *CDCSDKCheckpointPB {
	if x != nil {
		return x.CdcSdkCheckpoint
	}
	return nil
}

func (x *GetChangesResponsePB) GetSafeHybridTime() int64 {
	if x != nil && x.SafeHybridTime != nil {
		return *x.SafeHybridTime
	}
	return 0
}

func (x *GetChangesResponsePB) GetWalSegmentIndex() int32 {
	if x != nil && x.WalSegmentIndex != nil {
		return *x.WalSegmentIndex
	}
	return Default_GetChangesResponsePB_WalSegmentIndex
}

func (x *GetChangesResponsePB) GetAutoFlagsConfigVersion() uint32 {
	if x != nil && x.AutoFlagsConfigVersion != nil {
		return *x.AutoFlagsConfigVersion
	}
	return 0
}

func (x *GetChangesResponsePB) GetTabletConsensusInfo() *tserver.TabletConsensusInfoPB {
	if x != nil {
		return x.TabletConsensusInfo
	}
	return nil
}

type GetCheckpointRequestPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StreamId []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TabletId []byte                 `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// The table_id will be required in case of colocated tables.
	TableId []byte `protobuf:"bytes,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Whether the caller knows the tablet address or needs to use us as a proxy.
	ServeAsProxy  *bool `protobuf:"varint,4,opt,name=serve_as_proxy,json=serveAsProxy,def=1" json:"serve_as_proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GetCheckpointRequestPB fields.
const (
	Default_GetCheckpointRequestPB_ServeAsProxy = bool(true)
)

func (x *GetCheckpointRequestPB) Reset() {
	*x = GetCheckpointRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCheckpointRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckpointRequestPB) ProtoMessage() {}

func (x *GetCheckpointRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckpointRequestPB.ProtoReflect.Descriptor instead.
func (*GetCheckpointRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetCheckpointRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *GetCheckpointRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetCheckpointRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *GetCheckpointRequestPB) GetServeAsProxy() bool {
	if x != nil && x.ServeAsProxy != nil {
		return *x.ServeAsProxy
	}
	return Default_GetCheckpointRequestPB_ServeAsProxy
}

type GetCheckpointResponsePB struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Error      *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Checkpoint *CDCCheckpointPB       `protobuf:"bytes,2,opt,name=checkpoint" json:"checkpoint,omitempty"`
	// The snapshot_key and snapshot_time will be used for CDCSDK snapshot purposes.
	SnapshotKey   []byte  `protobuf:"bytes,3,opt,name=snapshot_key,json=snapshotKey" json:"snapshot_key,omitempty"`
	SnapshotTime  *uint64 `protobuf:"varint,4,opt,name=snapshot_time,json=snapshotTime" json:"snapshot_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCheckpointResponsePB) Reset() {
	*x = GetCheckpointResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCheckpointResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckpointResponsePB) ProtoMessage() {}

func (x *GetCheckpointResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckpointResponsePB.ProtoReflect.Descriptor instead.
func (*GetCheckpointResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetCheckpointResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCheckpointResponsePB) GetCheckpoint() *CDCCheckpointPB {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *GetCheckpointResponsePB) GetSnapshotKey() []byte {
	if x != nil {
		return x.SnapshotKey
	}
	return nil
}

func (x *GetCheckpointResponsePB) GetSnapshotTime() uint64 {
	if x != nil && x.SnapshotTime != nil {
		return *x.SnapshotTime
	}
	return 0
}

type UpdateCdcReplicatedIndexRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Old API. Deprecated.
	TabletId        []byte `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	ReplicatedIndex *int64 `protobuf:"varint,2,opt,name=replicated_index,json=replicatedIndex" json:"replicated_index,omitempty"`
	ReplicatedTerm  *int64 `protobuf:"varint,3,opt,name=replicated_term,json=replicatedTerm" json:"replicated_term,omitempty"`
	// Batch API.
	// Tablets being updated.
	TabletIds [][]byte `protobuf:"bytes,4,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"`
	// Minimum replicated index for each tablet across all the streams.
	ReplicatedIndices []int64 `protobuf:"varint,5,rep,name=replicated_indices,json=replicatedIndices" json:"replicated_indices,omitempty"`
	ReplicatedTerms   []int64 `protobuf:"varint,6,rep,name=replicated_terms,json=replicatedTerms" json:"replicated_terms,omitempty"`
	// Minimum checkpoint term and index  for CDCSDK stream, to do intent cleanup for this tablet.
	CdcSdkConsumedOps     []*common.OpIdPB `protobuf:"bytes,7,rep,name=cdc_sdk_consumed_ops,json=cdcSdkConsumedOps" json:"cdc_sdk_consumed_ops,omitempty"`
	CdcSdkOpsExpirationMs []uint64         `protobuf:"varint,8,rep,name=cdc_sdk_ops_expiration_ms,json=cdcSdkOpsExpirationMs" json:"cdc_sdk_ops_expiration_ms,omitempty"`
	StreamIds             [][]byte         `protobuf:"bytes,9,rep,name=stream_ids,json=streamIds" json:"stream_ids,omitempty"`
	CdcSdkSafeTime        *uint64          `protobuf:"fixed64,10,opt,name=cdc_sdk_safe_time,json=cdcSdkSafeTime" json:"cdc_sdk_safe_time,omitempty"`
	CdcSdkSafeTimes       []uint64         `protobuf:"fixed64,11,rep,name=cdc_sdk_safe_times,json=cdcSdkSafeTimes" json:"cdc_sdk_safe_times,omitempty"`
	// Is this an initial retention barrier setting request
	InitialRetentionBarrier *bool `protobuf:"varint,12,opt,name=initial_retention_barrier,json=initialRetentionBarrier" json:"initial_retention_barrier,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UpdateCdcReplicatedIndexRequestPB) Reset() {
	*x = UpdateCdcReplicatedIndexRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCdcReplicatedIndexRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCdcReplicatedIndexRequestPB) ProtoMessage() {}

func (x *UpdateCdcReplicatedIndexRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCdcReplicatedIndexRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateCdcReplicatedIndexRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetReplicatedIndex() int64 {
	if x != nil && x.ReplicatedIndex != nil {
		return *x.ReplicatedIndex
	}
	return 0
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetReplicatedTerm() int64 {
	if x != nil && x.ReplicatedTerm != nil {
		return *x.ReplicatedTerm
	}
	return 0
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetTabletIds() [][]byte {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetReplicatedIndices() []int64 {
	if x != nil {
		return x.ReplicatedIndices
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetReplicatedTerms() []int64 {
	if x != nil {
		return x.ReplicatedTerms
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetCdcSdkConsumedOps() []*common.OpIdPB {
	if x != nil {
		return x.CdcSdkConsumedOps
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetCdcSdkOpsExpirationMs() []uint64 {
	if x != nil {
		return x.CdcSdkOpsExpirationMs
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetStreamIds() [][]byte {
	if x != nil {
		return x.StreamIds
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetCdcSdkSafeTime() uint64 {
	if x != nil && x.CdcSdkSafeTime != nil {
		return *x.CdcSdkSafeTime
	}
	return 0
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetCdcSdkSafeTimes() []uint64 {
	if x != nil {
		return x.CdcSdkSafeTimes
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetInitialRetentionBarrier() bool {
	if x != nil && x.InitialRetentionBarrier != nil {
		return *x.InitialRetentionBarrier
	}
	return false
}

type UpdateCdcReplicatedIndexResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCdcReplicatedIndexResponsePB) Reset() {
	*x = UpdateCdcReplicatedIndexResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCdcReplicatedIndexResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCdcReplicatedIndexResponsePB) ProtoMessage() {}

func (x *UpdateCdcReplicatedIndexResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCdcReplicatedIndexResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateCdcReplicatedIndexResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateCdcReplicatedIndexResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type BootstrapProducerRequestPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TableIds []string               `protobuf:"bytes,1,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	// If the stream_ids are not provided, a new stream for each table will be created.
	XreplStreamIds [][]byte `protobuf:"bytes,2,rep,name=xrepl_stream_ids,json=xreplStreamIds" json:"xrepl_stream_ids,omitempty"`
	// Check if data bootstrap is required. Equivalent to the IsBootstrapRequired RPC.
	CheckIfBootstrapRequired *bool `protobuf:"varint,3,opt,name=check_if_bootstrap_required,json=checkIfBootstrapRequired" json:"check_if_bootstrap_required,omitempty"` // [default = false]
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BootstrapProducerRequestPB) Reset() {
	*x = BootstrapProducerRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapProducerRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapProducerRequestPB) ProtoMessage() {}

func (x *BootstrapProducerRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapProducerRequestPB.ProtoReflect.Descriptor instead.
func (*BootstrapProducerRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{36}
}

func (x *BootstrapProducerRequestPB) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *BootstrapProducerRequestPB) GetXreplStreamIds() [][]byte {
	if x != nil {
		return x.XreplStreamIds
	}
	return nil
}

func (x *BootstrapProducerRequestPB) GetCheckIfBootstrapRequired() bool {
	if x != nil && x.CheckIfBootstrapRequired != nil {
		return *x.CheckIfBootstrapRequired
	}
	return false
}

type BootstrapProducerResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// New streams that were created. Only happens if the request does not have xrepl_stream_ids.
	CdcBootstrapIds [][]byte `protobuf:"bytes,2,rep,name=cdc_bootstrap_ids,json=cdcBootstrapIds" json:"cdc_bootstrap_ids,omitempty"`
	// Minimum time after which data is available on all the bootstrapped streams.
	BootstrapTime *uint64 `protobuf:"fixed64,3,opt,name=bootstrap_time,json=bootstrapTime" json:"bootstrap_time,omitempty"`
	// Only set if check_if_bootstrap_required is set on the request.
	BootstrapRequired *bool `protobuf:"varint,4,opt,name=bootstrap_required,json=bootstrapRequired" json:"bootstrap_required,omitempty"` // [default = false]
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BootstrapProducerResponsePB) Reset() {
	*x = BootstrapProducerResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapProducerResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapProducerResponsePB) ProtoMessage() {}

func (x *BootstrapProducerResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapProducerResponsePB.ProtoReflect.Descriptor instead.
func (*BootstrapProducerResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{37}
}

func (x *BootstrapProducerResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BootstrapProducerResponsePB) GetCdcBootstrapIds() [][]byte {
	if x != nil {
		return x.CdcBootstrapIds
	}
	return nil
}

func (x *BootstrapProducerResponsePB) GetBootstrapTime() uint64 {
	if x != nil && x.BootstrapTime != nil {
		return *x.BootstrapTime
	}
	return 0
}

func (x *BootstrapProducerResponsePB) GetBootstrapRequired() bool {
	if x != nil && x.BootstrapRequired != nil {
		return *x.BootstrapRequired
	}
	return false
}

type GetLatestEntryOpIdRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`    // Deprecated.
	TabletIds     [][]byte               `protobuf:"bytes,2,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"` // Batch param.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestEntryOpIdRequestPB) Reset() {
	*x = GetLatestEntryOpIdRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestEntryOpIdRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestEntryOpIdRequestPB) ProtoMessage() {}

func (x *GetLatestEntryOpIdRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestEntryOpIdRequestPB.ProtoReflect.Descriptor instead.
func (*GetLatestEntryOpIdRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetLatestEntryOpIdRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetLatestEntryOpIdRequestPB) GetTabletIds() [][]byte {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

type GetLatestEntryOpIdResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	OpId          *common.OpIdPB         `protobuf:"bytes,2,opt,name=op_id,json=opId" json:"op_id,omitempty"`    // Deprecated.
	OpIds         []*common.OpIdPB       `protobuf:"bytes,3,rep,name=op_ids,json=opIds" json:"op_ids,omitempty"` // Batch param.
	BootstrapTime *uint64                `protobuf:"fixed64,4,opt,name=bootstrap_time,json=bootstrapTime" json:"bootstrap_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestEntryOpIdResponsePB) Reset() {
	*x = GetLatestEntryOpIdResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestEntryOpIdResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestEntryOpIdResponsePB) ProtoMessage() {}

func (x *GetLatestEntryOpIdResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestEntryOpIdResponsePB.ProtoReflect.Descriptor instead.
func (*GetLatestEntryOpIdResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{39}
}

func (x *GetLatestEntryOpIdResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLatestEntryOpIdResponsePB) GetOpId() *common.OpIdPB {
	if x != nil {
		return x.OpId
	}
	return nil
}

func (x *GetLatestEntryOpIdResponsePB) GetOpIds() []*common.OpIdPB {
	if x != nil {
		return x.OpIds
	}
	return nil
}

func (x *GetLatestEntryOpIdResponsePB) GetBootstrapTime() uint64 {
	if x != nil && x.BootstrapTime != nil {
		return *x.BootstrapTime
	}
	return 0
}

type TableInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TableId       []byte                 `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{40}
}

func (x *TableInfo) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *TableInfo) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type GetCDCDBStreamInfoRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbStreamId    []byte                 `protobuf:"bytes,1,opt,name=db_stream_id,json=dbStreamId" json:"db_stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCDCDBStreamInfoRequestPB) Reset() {
	*x = GetCDCDBStreamInfoRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCDCDBStreamInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCDBStreamInfoRequestPB) ProtoMessage() {}

func (x *GetCDCDBStreamInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCDBStreamInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetCDCDBStreamInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetCDCDBStreamInfoRequestPB) GetDbStreamId() []byte {
	if x != nil {
		return x.DbStreamId
	}
	return nil
}

type GetCDCDBStreamInfoResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NamespaceId          []byte                 `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	TableInfo            []*TableInfo           `protobuf:"bytes,3,rep,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	UnqualifiedTableInfo []*TableInfo           `protobuf:"bytes,4,rep,name=unqualified_table_info,json=unqualifiedTableInfo" json:"unqualified_table_info,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetCDCDBStreamInfoResponsePB) Reset() {
	*x = GetCDCDBStreamInfoResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCDCDBStreamInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCDBStreamInfoResponsePB) ProtoMessage() {}

func (x *GetCDCDBStreamInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCDBStreamInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetCDCDBStreamInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{42}
}

func (x *GetCDCDBStreamInfoResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCDCDBStreamInfoResponsePB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *GetCDCDBStreamInfoResponsePB) GetTableInfo() []*TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *GetCDCDBStreamInfoResponsePB) GetUnqualifiedTableInfo() []*TableInfo {
	if x != nil {
		return x.UnqualifiedTableInfo
	}
	return nil
}

type SetCDCCheckpointRequestPB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Checkpoint        *CDCCheckpointPB       `protobuf:"bytes,1,opt,name=checkpoint" json:"checkpoint,omitempty"`
	CdcSdkCheckpoint  *CDCSDKCheckpointPB    `protobuf:"bytes,2,opt,name=cdc_sdk_checkpoint,json=cdcSdkCheckpoint" json:"cdc_sdk_checkpoint,omitempty"`
	StreamId          []byte                 `protobuf:"bytes,3,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TabletId          []byte                 `protobuf:"bytes,4,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	InitialCheckpoint *bool                  `protobuf:"varint,5,opt,name=initial_checkpoint,json=initialCheckpoint,def=0" json:"initial_checkpoint,omitempty"`
	Bootstrap         *bool                  `protobuf:"varint,6,opt,name=bootstrap,def=0" json:"bootstrap,omitempty"`
	CdcSdkSafeTime    *uint64                `protobuf:"fixed64,7,opt,name=cdc_sdk_safe_time,json=cdcSdkSafeTime" json:"cdc_sdk_safe_time,omitempty"`
	// Whether the caller knows the tablet address or needs to use us as a proxy.
	ServeAsProxy  *bool `protobuf:"varint,8,opt,name=serve_as_proxy,json=serveAsProxy,def=1" json:"serve_as_proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for SetCDCCheckpointRequestPB fields.
const (
	Default_SetCDCCheckpointRequestPB_InitialCheckpoint = bool(false)
	Default_SetCDCCheckpointRequestPB_Bootstrap         = bool(false)
	Default_SetCDCCheckpointRequestPB_ServeAsProxy      = bool(true)
)

func (x *SetCDCCheckpointRequestPB) Reset() {
	*x = SetCDCCheckpointRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCDCCheckpointRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCDCCheckpointRequestPB) ProtoMessage() {}

func (x *SetCDCCheckpointRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCDCCheckpointRequestPB.ProtoReflect.Descriptor instead.
func (*SetCDCCheckpointRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{43}
}

func (x *SetCDCCheckpointRequestPB) GetCheckpoint() *CDCCheckpointPB {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *SetCDCCheckpointRequestPB) GetCdcSdkCheckpoint() *CDCSDKCheckpointPB {
	if x != nil {
		return x.CdcSdkCheckpoint
	}
	return nil
}

func (x *SetCDCCheckpointRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *SetCDCCheckpointRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *SetCDCCheckpointRequestPB) GetInitialCheckpoint() bool {
	if x != nil && x.InitialCheckpoint != nil {
		return *x.InitialCheckpoint
	}
	return Default_SetCDCCheckpointRequestPB_InitialCheckpoint
}

func (x *SetCDCCheckpointRequestPB) GetBootstrap() bool {
	if x != nil && x.Bootstrap != nil {
		return *x.Bootstrap
	}
	return Default_SetCDCCheckpointRequestPB_Bootstrap
}

func (x *SetCDCCheckpointRequestPB) GetCdcSdkSafeTime() uint64 {
	if x != nil && x.CdcSdkSafeTime != nil {
		return *x.CdcSdkSafeTime
	}
	return 0
}

func (x *SetCDCCheckpointRequestPB) GetServeAsProxy() bool {
	if x != nil && x.ServeAsProxy != nil {
		return *x.ServeAsProxy
	}
	return Default_SetCDCCheckpointRequestPB_ServeAsProxy
}

type SetCDCCheckpointResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCDCCheckpointResponsePB) Reset() {
	*x = SetCDCCheckpointResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCDCCheckpointResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCDCCheckpointResponsePB) ProtoMessage() {}

func (x *SetCDCCheckpointResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCDCCheckpointResponsePB.ProtoReflect.Descriptor instead.
func (*SetCDCCheckpointResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{44}
}

func (x *SetCDCCheckpointResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type TabletCheckpointPair struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	TabletLocations  *master.TabletLocationsPB `protobuf:"bytes,1,opt,name=tablet_locations,json=tabletLocations" json:"tablet_locations,omitempty"`
	CdcSdkCheckpoint *CDCSDKCheckpointPB       `protobuf:"bytes,2,opt,name=cdc_sdk_checkpoint,json=cdcSdkCheckpoint" json:"cdc_sdk_checkpoint,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TabletCheckpointPair) Reset() {
	*x = TabletCheckpointPair{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletCheckpointPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletCheckpointPair) ProtoMessage() {}

func (x *TabletCheckpointPair) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletCheckpointPair.ProtoReflect.Descriptor instead.
func (*TabletCheckpointPair) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{45}
}

func (x *TabletCheckpointPair) GetTabletLocations() *master.TabletLocationsPB {
	if x != nil {
		return x.TabletLocations
	}
	return nil
}

func (x *TabletCheckpointPair) GetCdcSdkCheckpoint() *CDCSDKCheckpointPB {
	if x != nil {
		return x.CdcSdkCheckpoint
	}
	return nil
}

type GetTabletListToPollForCDCRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableInfo     *TableInfo             `protobuf:"bytes,1,opt,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	TabletId      []byte                 `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletListToPollForCDCRequestPB) Reset() {
	*x = GetTabletListToPollForCDCRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletListToPollForCDCRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletListToPollForCDCRequestPB) ProtoMessage() {}

func (x *GetTabletListToPollForCDCRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletListToPollForCDCRequestPB.ProtoReflect.Descriptor instead.
func (*GetTabletListToPollForCDCRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{46}
}

func (x *GetTabletListToPollForCDCRequestPB) GetTableInfo() *TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *GetTabletListToPollForCDCRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type GetTabletListToPollForCDCResponsePB struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	Error                 *CDCErrorPB             `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletCheckpointPairs []*TabletCheckpointPair `protobuf:"bytes,2,rep,name=tablet_checkpoint_pairs,json=tabletCheckpointPairs" json:"tablet_checkpoint_pairs,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetTabletListToPollForCDCResponsePB) Reset() {
	*x = GetTabletListToPollForCDCResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletListToPollForCDCResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletListToPollForCDCResponsePB) ProtoMessage() {}

func (x *GetTabletListToPollForCDCResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletListToPollForCDCResponsePB.ProtoReflect.Descriptor instead.
func (*GetTabletListToPollForCDCResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{47}
}

func (x *GetTabletListToPollForCDCResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTabletListToPollForCDCResponsePB) GetTabletCheckpointPairs() []*TabletCheckpointPair {
	if x != nil {
		return x.TabletCheckpointPairs
	}
	return nil
}

type IsBootstrapRequiredRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletIds     []string               `protobuf:"bytes,1,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"`
	StreamId      *string                `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBootstrapRequiredRequestPB) Reset() {
	*x = IsBootstrapRequiredRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBootstrapRequiredRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrapRequiredRequestPB) ProtoMessage() {}

func (x *IsBootstrapRequiredRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrapRequiredRequestPB.ProtoReflect.Descriptor instead.
func (*IsBootstrapRequiredRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{48}
}

func (x *IsBootstrapRequiredRequestPB) GetTabletIds() []string {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

func (x *IsBootstrapRequiredRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

type IsBootstrapRequiredResponsePB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Error             *CDCErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	BootstrapRequired *bool                  `protobuf:"varint,2,opt,name=bootstrap_required,json=bootstrapRequired,def=0" json:"bootstrap_required,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for IsBootstrapRequiredResponsePB fields.
const (
	Default_IsBootstrapRequiredResponsePB_BootstrapRequired = bool(false)
)

func (x *IsBootstrapRequiredResponsePB) Reset() {
	*x = IsBootstrapRequiredResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBootstrapRequiredResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrapRequiredResponsePB) ProtoMessage() {}

func (x *IsBootstrapRequiredResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrapRequiredResponsePB.ProtoReflect.Descriptor instead.
func (*IsBootstrapRequiredResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{49}
}

func (x *IsBootstrapRequiredResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsBootstrapRequiredResponsePB) GetBootstrapRequired() bool {
	if x != nil && x.BootstrapRequired != nil {
		return *x.BootstrapRequired
	}
	return Default_IsBootstrapRequiredResponsePB_BootstrapRequired
}

// Metadata regarding replication status of a stream set up on a tablet.
type StreamTabletDrainInfoPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      []byte                 `protobuf:"bytes,1,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TabletId      []byte                 `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTabletDrainInfoPB) Reset() {
	*x = StreamTabletDrainInfoPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTabletDrainInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTabletDrainInfoPB) ProtoMessage() {}

func (x *StreamTabletDrainInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTabletDrainInfoPB.ProtoReflect.Descriptor instead.
func (*StreamTabletDrainInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{50}
}

func (x *StreamTabletDrainInfoPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *StreamTabletDrainInfoPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type CheckReplicationDrainRequestPB struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	StreamInfo    []*StreamTabletDrainInfoPB `protobuf:"bytes,1,rep,name=stream_info,json=streamInfo" json:"stream_info,omitempty"`
	TargetTime    *uint64                    `protobuf:"varint,2,opt,name=target_time,json=targetTime" json:"target_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckReplicationDrainRequestPB) Reset() {
	*x = CheckReplicationDrainRequestPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckReplicationDrainRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckReplicationDrainRequestPB) ProtoMessage() {}

func (x *CheckReplicationDrainRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckReplicationDrainRequestPB.ProtoReflect.Descriptor instead.
func (*CheckReplicationDrainRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{51}
}

func (x *CheckReplicationDrainRequestPB) GetStreamInfo() []*StreamTabletDrainInfoPB {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *CheckReplicationDrainRequestPB) GetTargetTime() uint64 {
	if x != nil && x.TargetTime != nil {
		return *x.TargetTime
	}
	return 0
}

type CheckReplicationDrainResponsePB struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	Error             *CDCErrorPB                `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	DrainedStreamInfo []*StreamTabletDrainInfoPB `protobuf:"bytes,2,rep,name=drained_stream_info,json=drainedStreamInfo" json:"drained_stream_info,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CheckReplicationDrainResponsePB) Reset() {
	*x = CheckReplicationDrainResponsePB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckReplicationDrainResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckReplicationDrainResponsePB) ProtoMessage() {}

func (x *CheckReplicationDrainResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckReplicationDrainResponsePB.ProtoReflect.Descriptor instead.
func (*CheckReplicationDrainResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{52}
}

func (x *CheckReplicationDrainResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CheckReplicationDrainResponsePB) GetDrainedStreamInfo() []*StreamTabletDrainInfoPB {
	if x != nil {
		return x.DrainedStreamInfo
	}
	return nil
}

type CDCTabletPB_ReplicaPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastAddresses []*common.HostPortPB   `protobuf:"bytes,1,rep,name=broadcast_addresses,json=broadcastAddresses" json:"broadcast_addresses,omitempty"` // Don't use private_rpc_addresses since we're cross-universe
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CDCTabletPB_ReplicaPB) Reset() {
	*x = CDCTabletPB_ReplicaPB{}
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCTabletPB_ReplicaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCTabletPB_ReplicaPB) ProtoMessage() {}

func (x *CDCTabletPB_ReplicaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCTabletPB_ReplicaPB.ProtoReflect.Descriptor instead.
func (*CDCTabletPB_ReplicaPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CDCTabletPB_ReplicaPB) GetBroadcastAddresses() []*common.HostPortPB {
	if x != nil {
		return x.BroadcastAddresses
	}
	return nil
}

var File_yb_cdc_cdc_service_proto protoreflect.FileDescriptor

var file_yb_cdc_cdc_service_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x79, 0x62, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x0a,
	0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x3a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xc2, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54,
	0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x0e, 0x22, 0x5a, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x57, 0x41, 0x4c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x42, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x1e, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x57, 0x41, 0x4c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x5b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xa4,
	0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x15, 0x63,
	0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x52, 0x12, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x20, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x57, 0x41, 0x4c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x21, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x57, 0x41, 0x4c, 0x46, 0x6f, 0x72,
	0x43, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x53, 0x4e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x4c, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x73, 0x6e, 0x22, 0x6a, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43,
	0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x73, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x73,
	0x6e, 0x22, 0x7c, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x50, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x94, 0x05, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x3a, 0x08, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x12, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x63, 0x0a, 0x21, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x1c, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x62, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x19, 0x63,
	0x64, 0x63, 0x73, 0x64, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43,
	0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0x8d, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0d, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x45, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x6e, 0x6c,
	0x79, 0x22, 0x70, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43,
	0x44, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x43, 0x44, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50,
	0x42, 0x52, 0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x4c, 0x0a, 0x09, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x42, 0x12, 0x3f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x43, 0x44,
	0x43, 0x53, 0x44, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x08,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x32, 0x0a, 0x0f, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x42, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x04, 0x6f,
	0x70, 0x49, 0x64, 0x22, 0xe6, 0x06, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x62, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64,
	0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53,
	0x44, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x14,
	0x66, 0x72, 0x6f, 0x6d, 0x43, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x1b, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x18, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x43, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x10, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0e,
	0x73, 0x61, 0x66, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x11, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x77, 0x61,
	0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a,
	0x19, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x64, 0x63, 0x73,
	0x64, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x3a, 0x08, 0x44, 0x45, 0x42, 0x45, 0x5a, 0x49, 0x55, 0x4d, 0x52, 0x13,
	0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x70, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x0e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5, 0x05, 0x0a, 0x0b, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x42, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x14, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x12,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x05, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x22, 0x04, 0x08, 0x07, 0x10, 0x07, 0x22, 0xcc, 0x01,
	0x0a, 0x12, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x42, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x05, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0xa8, 0x01, 0x0a,
	0x17, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x50, 0x42, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01,
	0x30, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x12, 0x69, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x43, 0x44, 0x43, 0x53,
	0x44, 0x4b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x0c, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x4f, 0x70, 0x49,
	0x64, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a,
	0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x3a, 0x00, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x22,
	0x4d, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xc5,
	0x06, 0x0a, 0x0a, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x67, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x67, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x67, 0x5f, 0x6c, 0x73, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x70, 0x67, 0x4c, 0x73, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x85,
	0x01, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x14, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x44, 0x4c, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x46, 0x45, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x08, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x43, 0x44, 0x43, 0x53, 0x44,
	0x4b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x12, 0x33,
	0x0a, 0x0b, 0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x52, 0x6f, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42,
	0x52, 0x0a, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b,
	0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x70, 0x49, 0x64,
	0x22, 0xd5, 0x05, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44,
	0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x07, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53,
	0x44, 0x4b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x52,
	0x12, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x10, 0x63, 0x64, 0x63,
	0x53, 0x64, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x04, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x14, 0x63,
	0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f,
	0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f,
	0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x11, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x64, 0x63, 0x5f,
	0x73, 0x64, 0x6b, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x63, 0x64, 0x63,
	0x53, 0x64, 0x6b, 0x4f, 0x70, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x11, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x64,
	0x63, 0x53, 0x64, 0x6b, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b,
	0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x72, 0x72, 0x69, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x78, 0x72, 0x65,
	0x70, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x64, 0x63, 0x5f, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0f, 0x63, 0x64, 0x63, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62,
	0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x06, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x05, 0x6f, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x20, 0x0a, 0x0c, 0x64,
	0x62, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x64, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xe6, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a,
	0x16, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x14, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x03, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x44,
	0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x42, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x12, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x10, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x11,
	0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x53,
	0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x73, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x22, 0x46, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x14,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a,
	0x12, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x10, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f,
	0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54,
	0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x15, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x1c, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0x7f, 0x0a, 0x1d, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x12, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11,
	0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x53, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a,
	0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x13, 0x64, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x11, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0xa9, 0x01, 0x0a, 0x0d,
	0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x5f, 0x4f,
	0x4c, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x53, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x47, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x06,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x4c,
	0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x47, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x47, 0x5f, 0x4e, 0x4f,
	0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x2a, 0x2f, 0x0a, 0x0f, 0x43, 0x44, 0x43, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x10, 0x43, 0x44, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x58, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x44,
	0x43, 0x53, 0x44, 0x4b, 0x10, 0x02, 0x2a, 0x2f, 0x0a, 0x11, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x13, 0x43, 0x44, 0x43, 0x53, 0x44,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x45, 0x42, 0x45, 0x5a, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x41, 0x4c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x32, 0xfc, 0x0d, 0x0a, 0x0a,
	0x43, 0x44, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x21, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4a, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x71, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x64, 0x63, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x64, 0x63,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44,
	0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x44, 0x43, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x44,
	0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x22, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x74, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x50, 0x6f,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x50, 0x6f, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x6c,
	0x6c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x62, 0x0a, 0x13, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x26,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x65, 0x0a, 0x14, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x57, 0x41,
	0x4c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x57, 0x41, 0x4c, 0x46,
	0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x57, 0x41, 0x4c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a,
	0x17, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x57,
	0x41, 0x4c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x57, 0x41, 0x4c, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x57, 0x41, 0x4c, 0x46, 0x6f, 0x72,
	0x43, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x4c, 0x53, 0x4e, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x4c, 0x53,
	0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x4c, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x77, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2c, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x72,
	0x67, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
})

var (
	file_yb_cdc_cdc_service_proto_rawDescOnce sync.Once
	file_yb_cdc_cdc_service_proto_rawDescData []byte
)

func file_yb_cdc_cdc_service_proto_rawDescGZIP() []byte {
	file_yb_cdc_cdc_service_proto_rawDescOnce.Do(func() {
		file_yb_cdc_cdc_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_cdc_cdc_service_proto_rawDesc), len(file_yb_cdc_cdc_service_proto_rawDesc)))
	})
	return file_yb_cdc_cdc_service_proto_rawDescData
}

var file_yb_cdc_cdc_service_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_yb_cdc_cdc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_yb_cdc_cdc_service_proto_goTypes = []any{
	(CDCRecordType)(0),                           // 0: yb.cdc.CDCRecordType
	(CDCRecordFormat)(0),                         // 1: yb.cdc.CDCRecordFormat
	(CDCRequestSource)(0),                        // 2: yb.cdc.CDCRequestSource
	(CDCCheckpointType)(0),                       // 3: yb.cdc.CDCCheckpointType
	(CDCSDKRequestSource)(0),                     // 4: yb.cdc.CDCSDKRequestSource
	(CDCErrorPB_Code)(0),                         // 5: yb.cdc.CDCErrorPB.Code
	(CDCRecordPB_OperationType)(0),               // 6: yb.cdc.CDCRecordPB.OperationType
	(RowMessage_Op)(0),                           // 7: yb.cdc.RowMessage.Op
	(*CDCErrorPB)(nil),                           // 8: yb.cdc.CDCErrorPB
	(*ReplicationSlotHashRangePB)(nil),           // 9: yb.cdc.ReplicationSlotHashRangePB
	(*InitVirtualWALForCDCRequestPB)(nil),        // 10: yb.cdc.InitVirtualWALForCDCRequestPB
	(*InitVirtualWALForCDCResponsePB)(nil),       // 11: yb.cdc.InitVirtualWALForCDCResponsePB
	(*GetConsistentChangesRequestPB)(nil),        // 12: yb.cdc.GetConsistentChangesRequestPB
	(*GetConsistentChangesResponsePB)(nil),       // 13: yb.cdc.GetConsistentChangesResponsePB
	(*DestroyVirtualWALForCDCRequestPB)(nil),     // 14: yb.cdc.DestroyVirtualWALForCDCRequestPB
	(*DestroyVirtualWALForCDCResponsePB)(nil),    // 15: yb.cdc.DestroyVirtualWALForCDCResponsePB
	(*UpdateAndPersistLSNRequestPB)(nil),         // 16: yb.cdc.UpdateAndPersistLSNRequestPB
	(*UpdateAndPersistLSNResponsePB)(nil),        // 17: yb.cdc.UpdateAndPersistLSNResponsePB
	(*UpdatePublicationTableListRequestPB)(nil),  // 18: yb.cdc.UpdatePublicationTableListRequestPB
	(*UpdatePublicationTableListResponsePB)(nil), // 19: yb.cdc.UpdatePublicationTableListResponsePB
	(*CreateCDCStreamRequestPB)(nil),             // 20: yb.cdc.CreateCDCStreamRequestPB
	(*CreateCDCStreamResponsePB)(nil),            // 21: yb.cdc.CreateCDCStreamResponsePB
	(*DeleteCDCStreamRequestPB)(nil),             // 22: yb.cdc.DeleteCDCStreamRequestPB
	(*DeleteCDCStreamResponsePB)(nil),            // 23: yb.cdc.DeleteCDCStreamResponsePB
	(*ListTabletsRequestPB)(nil),                 // 24: yb.cdc.ListTabletsRequestPB
	(*ListTabletsResponsePB)(nil),                // 25: yb.cdc.ListTabletsResponsePB
	(*CDCTabletPB)(nil),                          // 26: yb.cdc.CDCTabletPB
	(*CDCSDKCheckpointPB)(nil),                   // 27: yb.cdc.CDCSDKCheckpointPB
	(*CDCCheckpointPB)(nil),                      // 28: yb.cdc.CDCCheckpointPB
	(*GetChangesRequestPB)(nil),                  // 29: yb.cdc.GetChangesRequestPB
	(*KeyValuePairPB)(nil),                       // 30: yb.cdc.KeyValuePairPB
	(*CDCRecordPB)(nil),                          // 31: yb.cdc.CDCRecordPB
	(*CDCSDKColumnInfoPB)(nil),                   // 32: yb.cdc.CDCSDKColumnInfoPB
	(*CDCSDKTablePropertiesPB)(nil),              // 33: yb.cdc.CDCSDKTablePropertiesPB
	(*CDCSDKSchemaPB)(nil),                       // 34: yb.cdc.CDCSDKSchemaPB
	(*CDCSDKOpIdPB)(nil),                         // 35: yb.cdc.CDCSDKOpIdPB
	(*TypeInfo)(nil),                             // 36: yb.cdc.TypeInfo
	(*RowMessage)(nil),                           // 37: yb.cdc.RowMessage
	(*CDCSDKProtoRecordPB)(nil),                  // 38: yb.cdc.CDCSDKProtoRecordPB
	(*GetChangesResponsePB)(nil),                 // 39: yb.cdc.GetChangesResponsePB
	(*GetCheckpointRequestPB)(nil),               // 40: yb.cdc.GetCheckpointRequestPB
	(*GetCheckpointResponsePB)(nil),              // 41: yb.cdc.GetCheckpointResponsePB
	(*UpdateCdcReplicatedIndexRequestPB)(nil),    // 42: yb.cdc.UpdateCdcReplicatedIndexRequestPB
	(*UpdateCdcReplicatedIndexResponsePB)(nil),   // 43: yb.cdc.UpdateCdcReplicatedIndexResponsePB
	(*BootstrapProducerRequestPB)(nil),           // 44: yb.cdc.BootstrapProducerRequestPB
	(*BootstrapProducerResponsePB)(nil),          // 45: yb.cdc.BootstrapProducerResponsePB
	(*GetLatestEntryOpIdRequestPB)(nil),          // 46: yb.cdc.GetLatestEntryOpIdRequestPB
	(*GetLatestEntryOpIdResponsePB)(nil),         // 47: yb.cdc.GetLatestEntryOpIdResponsePB
	(*TableInfo)(nil),                            // 48: yb.cdc.TableInfo
	(*GetCDCDBStreamInfoRequestPB)(nil),          // 49: yb.cdc.GetCDCDBStreamInfoRequestPB
	(*GetCDCDBStreamInfoResponsePB)(nil),         // 50: yb.cdc.GetCDCDBStreamInfoResponsePB
	(*SetCDCCheckpointRequestPB)(nil),            // 51: yb.cdc.SetCDCCheckpointRequestPB
	(*SetCDCCheckpointResponsePB)(nil),           // 52: yb.cdc.SetCDCCheckpointResponsePB
	(*TabletCheckpointPair)(nil),                 // 53: yb.cdc.TabletCheckpointPair
	(*GetTabletListToPollForCDCRequestPB)(nil),   // 54: yb.cdc.GetTabletListToPollForCDCRequestPB
	(*GetTabletListToPollForCDCResponsePB)(nil),  // 55: yb.cdc.GetTabletListToPollForCDCResponsePB
	(*IsBootstrapRequiredRequestPB)(nil),         // 56: yb.cdc.IsBootstrapRequiredRequestPB
	(*IsBootstrapRequiredResponsePB)(nil),        // 57: yb.cdc.IsBootstrapRequiredResponsePB
	(*StreamTabletDrainInfoPB)(nil),              // 58: yb.cdc.StreamTabletDrainInfoPB
	(*CheckReplicationDrainRequestPB)(nil),       // 59: yb.cdc.CheckReplicationDrainRequestPB
	(*CheckReplicationDrainResponsePB)(nil),      // 60: yb.cdc.CheckReplicationDrainResponsePB
	(*CDCTabletPB_ReplicaPB)(nil),                // 61: yb.cdc.CDCTabletPB.ReplicaPB
	(*common.AppStatusPB)(nil),                   // 62: yb.AppStatusPB
	(common.YQLDatabase)(0),                      // 63: yb.YQLDatabase
	(common.CDCSDKSnapshotOption)(0),             // 64: yb.CDCSDKSnapshotOption
	(*common.CDCSDKStreamCreateOptionsPB)(nil),   // 65: yb.CDCSDKStreamCreateOptionsPB
	(*common.OpIdPB)(nil),                        // 66: yb.OpIdPB
	(*common.QLValuePB)(nil),                     // 67: yb.QLValuePB
	(*tablet.TransactionStatePB)(nil),            // 68: yb.tablet.TransactionStatePB
	(*common.PartitionPB)(nil),                   // 69: yb.PartitionPB
	(*tablet.SplitTabletRequestPB)(nil),          // 70: yb.tablet.SplitTabletRequestPB
	(*tablet.ChangeMetadataRequestPB)(nil),       // 71: yb.tablet.ChangeMetadataRequestPB
	(*common.QLTypePB)(nil),                      // 72: yb.QLTypePB
	(*common.DatumMessagePB)(nil),                // 73: yb.DatumMessagePB
	(*tserver.TruncateRequestPB)(nil),            // 74: yb.tserver.TruncateRequestPB
	(*common.HostPortPB)(nil),                    // 75: yb.HostPortPB
	(*tserver.TabletConsensusInfoPB)(nil),        // 76: yb.tserver.TabletConsensusInfoPB
	(*master.TabletLocationsPB)(nil),             // 77: yb.master.TabletLocationsPB
}
var file_yb_cdc_cdc_service_proto_depIdxs = []int32{
	5,  // 0: yb.cdc.CDCErrorPB.code:type_name -> yb.cdc.CDCErrorPB.Code
	62, // 1: yb.cdc.CDCErrorPB.status:type_name -> yb.AppStatusPB
	9,  // 2: yb.cdc.InitVirtualWALForCDCRequestPB.slot_hash_range:type_name -> yb.cdc.ReplicationSlotHashRangePB
	8,  // 3: yb.cdc.InitVirtualWALForCDCResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	8,  // 4: yb.cdc.GetConsistentChangesResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	38, // 5: yb.cdc.GetConsistentChangesResponsePB.cdc_sdk_proto_records:type_name -> yb.cdc.CDCSDKProtoRecordPB
	8,  // 6: yb.cdc.DestroyVirtualWALForCDCResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	8,  // 7: yb.cdc.UpdateAndPersistLSNResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	8,  // 8: yb.cdc.UpdatePublicationTableListResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	0,  // 9: yb.cdc.CreateCDCStreamRequestPB.record_type:type_name -> yb.cdc.CDCRecordType
	1,  // 10: yb.cdc.CreateCDCStreamRequestPB.record_format:type_name -> yb.cdc.CDCRecordFormat
	2,  // 11: yb.cdc.CreateCDCStreamRequestPB.source_type:type_name -> yb.cdc.CDCRequestSource
	3,  // 12: yb.cdc.CreateCDCStreamRequestPB.checkpoint_type:type_name -> yb.cdc.CDCCheckpointType
	63, // 13: yb.cdc.CreateCDCStreamRequestPB.db_type:type_name -> yb.YQLDatabase
	64, // 14: yb.cdc.CreateCDCStreamRequestPB.cdcsdk_consistent_snapshot_option:type_name -> yb.CDCSDKSnapshotOption
	65, // 15: yb.cdc.CreateCDCStreamRequestPB.cdcsdk_stream_create_options:type_name -> yb.CDCSDKStreamCreateOptionsPB
	8,  // 16: yb.cdc.CreateCDCStreamResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	8,  // 17: yb.cdc.DeleteCDCStreamResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	8,  // 18: yb.cdc.ListTabletsResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	26, // 19: yb.cdc.ListTabletsResponsePB.tablets:type_name -> yb.cdc.CDCTabletPB
	61, // 20: yb.cdc.CDCTabletPB.tservers:type_name -> yb.cdc.CDCTabletPB.ReplicaPB
	66, // 21: yb.cdc.CDCCheckpointPB.op_id:type_name -> yb.OpIdPB
	28, // 22: yb.cdc.GetChangesRequestPB.from_checkpoint:type_name -> yb.cdc.CDCCheckpointPB
	27, // 23: yb.cdc.GetChangesRequestPB.from_cdc_sdk_checkpoint:type_name -> yb.cdc.CDCSDKCheckpointPB
	27, // 24: yb.cdc.GetChangesRequestPB.explicit_cdc_sdk_checkpoint:type_name -> yb.cdc.CDCSDKCheckpointPB
	4,  // 25: yb.cdc.GetChangesRequestPB.cdcsdk_request_source:type_name -> yb.cdc.CDCSDKRequestSource
	67, // 26: yb.cdc.KeyValuePairPB.value:type_name -> yb.QLValuePB
	6,  // 27: yb.cdc.CDCRecordPB.operation:type_name -> yb.cdc.CDCRecordPB.OperationType
	30, // 28: yb.cdc.CDCRecordPB.key:type_name -> yb.cdc.KeyValuePairPB
	30, // 29: yb.cdc.CDCRecordPB.changes:type_name -> yb.cdc.KeyValuePairPB
	30, // 30: yb.cdc.CDCRecordPB.before:type_name -> yb.cdc.KeyValuePairPB
	30, // 31: yb.cdc.CDCRecordPB.after:type_name -> yb.cdc.KeyValuePairPB
	68, // 32: yb.cdc.CDCRecordPB.transaction_state:type_name -> yb.tablet.TransactionStatePB
	69, // 33: yb.cdc.CDCRecordPB.partition:type_name -> yb.PartitionPB
	70, // 34: yb.cdc.CDCRecordPB.split_tablet_request:type_name -> yb.tablet.SplitTabletRequestPB
	71, // 35: yb.cdc.CDCRecordPB.change_metadata_request:type_name -> yb.tablet.ChangeMetadataRequestPB
	72, // 36: yb.cdc.CDCSDKColumnInfoPB.type:type_name -> yb.QLTypePB
	32, // 37: yb.cdc.CDCSDKSchemaPB.column_info:type_name -> yb.cdc.CDCSDKColumnInfoPB
	33, // 38: yb.cdc.CDCSDKSchemaPB.tab_info:type_name -> yb.cdc.CDCSDKTablePropertiesPB
	7,  // 39: yb.cdc.RowMessage.op:type_name -> yb.cdc.RowMessage.Op
	73, // 40: yb.cdc.RowMessage.new_tuple:type_name -> yb.DatumMessagePB
	73, // 41: yb.cdc.RowMessage.old_tuple:type_name -> yb.DatumMessagePB
	36, // 42: yb.cdc.RowMessage.new_typeinfo:type_name -> yb.cdc.TypeInfo
	34, // 43: yb.cdc.RowMessage.schema:type_name -> yb.cdc.CDCSDKSchemaPB
	74, // 44: yb.cdc.RowMessage.truncate_request_info:type_name -> yb.tserver.TruncateRequestPB
	37, // 45: yb.cdc.CDCSDKProtoRecordPB.row_message:type_name -> yb.cdc.RowMessage
	35, // 46: yb.cdc.CDCSDKProtoRecordPB.cdc_sdk_op_id:type_name -> yb.cdc.CDCSDKOpIdPB
	35, // 47: yb.cdc.CDCSDKProtoRecordPB.from_op_id:type_name -> yb.cdc.CDCSDKOpIdPB
	8,  // 48: yb.cdc.GetChangesResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	0,  // 49: yb.cdc.GetChangesResponsePB.record_type:type_name -> yb.cdc.CDCRecordType
	1,  // 50: yb.cdc.GetChangesResponsePB.record_format:type_name -> yb.cdc.CDCRecordFormat
	31, // 51: yb.cdc.GetChangesResponsePB.records:type_name -> yb.cdc.CDCRecordPB
	28, // 52: yb.cdc.GetChangesResponsePB.checkpoint:type_name -> yb.cdc.CDCCheckpointPB
	75, // 53: yb.cdc.GetChangesResponsePB.tserver:type_name -> yb.HostPortPB
	38, // 54: yb.cdc.GetChangesResponsePB.cdc_sdk_proto_records:type_name -> yb.cdc.CDCSDKProtoRecordPB
	27, // 55: yb.cdc.GetChangesResponsePB.cdc_sdk_checkpoint:type_name -> yb.cdc.CDCSDKCheckpointPB
	76, // 56: yb.cdc.GetChangesResponsePB.tablet_consensus_info:type_name -> yb.tserver.TabletConsensusInfoPB
	8,  // 57: yb.cdc.GetCheckpointResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	28, // 58: yb.cdc.GetCheckpointResponsePB.checkpoint:type_name -> yb.cdc.CDCCheckpointPB
	66, // 59: yb.cdc.UpdateCdcReplicatedIndexRequestPB.cdc_sdk_consumed_ops:type_name -> yb.OpIdPB
	8,  // 60: yb.cdc.UpdateCdcReplicatedIndexResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	8,  // 61: yb.cdc.BootstrapProducerResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	8,  // 62: yb.cdc.GetLatestEntryOpIdResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	66, // 63: yb.cdc.GetLatestEntryOpIdResponsePB.op_id:type_name -> yb.OpIdPB
	66, // 64: yb.cdc.GetLatestEntryOpIdResponsePB.op_ids:type_name -> yb.OpIdPB
	8,  // 65: yb.cdc.GetCDCDBStreamInfoResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	48, // 66: yb.cdc.GetCDCDBStreamInfoResponsePB.table_info:type_name -> yb.cdc.TableInfo
	48, // 67: yb.cdc.GetCDCDBStreamInfoResponsePB.unqualified_table_info:type_name -> yb.cdc.TableInfo
	28, // 68: yb.cdc.SetCDCCheckpointRequestPB.checkpoint:type_name -> yb.cdc.CDCCheckpointPB
	27, // 69: yb.cdc.SetCDCCheckpointRequestPB.cdc_sdk_checkpoint:type_name -> yb.cdc.CDCSDKCheckpointPB
	8,  // 70: yb.cdc.SetCDCCheckpointResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	77, // 71: yb.cdc.TabletCheckpointPair.tablet_locations:type_name -> yb.master.TabletLocationsPB
	27, // 72: yb.cdc.TabletCheckpointPair.cdc_sdk_checkpoint:type_name -> yb.cdc.CDCSDKCheckpointPB
	48, // 73: yb.cdc.GetTabletListToPollForCDCRequestPB.table_info:type_name -> yb.cdc.TableInfo
	8,  // 74: yb.cdc.GetTabletListToPollForCDCResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	53, // 75: yb.cdc.GetTabletListToPollForCDCResponsePB.tablet_checkpoint_pairs:type_name -> yb.cdc.TabletCheckpointPair
	8,  // 76: yb.cdc.IsBootstrapRequiredResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	58, // 77: yb.cdc.CheckReplicationDrainRequestPB.stream_info:type_name -> yb.cdc.StreamTabletDrainInfoPB
	8,  // 78: yb.cdc.CheckReplicationDrainResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	58, // 79: yb.cdc.CheckReplicationDrainResponsePB.drained_stream_info:type_name -> yb.cdc.StreamTabletDrainInfoPB
	75, // 80: yb.cdc.CDCTabletPB.ReplicaPB.broadcast_addresses:type_name -> yb.HostPortPB
	20, // 81: yb.cdc.CDCService.CreateCDCStream:input_type -> yb.cdc.CreateCDCStreamRequestPB
	22, // 82: yb.cdc.CDCService.DeleteCDCStream:input_type -> yb.cdc.DeleteCDCStreamRequestPB
	24, // 83: yb.cdc.CDCService.ListTablets:input_type -> yb.cdc.ListTabletsRequestPB
	29, // 84: yb.cdc.CDCService.GetChanges:input_type -> yb.cdc.GetChangesRequestPB
	40, // 85: yb.cdc.CDCService.GetCheckpoint:input_type -> yb.cdc.GetCheckpointRequestPB
	42, // 86: yb.cdc.CDCService.UpdateCdcReplicatedIndex:input_type -> yb.cdc.UpdateCdcReplicatedIndexRequestPB
	44, // 87: yb.cdc.CDCService.BootstrapProducer:input_type -> yb.cdc.BootstrapProducerRequestPB
	46, // 88: yb.cdc.CDCService.GetLatestEntryOpId:input_type -> yb.cdc.GetLatestEntryOpIdRequestPB
	49, // 89: yb.cdc.CDCService.GetCDCDBStreamInfo:input_type -> yb.cdc.GetCDCDBStreamInfoRequestPB
	51, // 90: yb.cdc.CDCService.SetCDCCheckpoint:input_type -> yb.cdc.SetCDCCheckpointRequestPB
	54, // 91: yb.cdc.CDCService.GetTabletListToPollForCDC:input_type -> yb.cdc.GetTabletListToPollForCDCRequestPB
	56, // 92: yb.cdc.CDCService.IsBootstrapRequired:input_type -> yb.cdc.IsBootstrapRequiredRequestPB
	59, // 93: yb.cdc.CDCService.CheckReplicationDrain:input_type -> yb.cdc.CheckReplicationDrainRequestPB
	10, // 94: yb.cdc.CDCService.InitVirtualWALForCDC:input_type -> yb.cdc.InitVirtualWALForCDCRequestPB
	12, // 95: yb.cdc.CDCService.GetConsistentChanges:input_type -> yb.cdc.GetConsistentChangesRequestPB
	14, // 96: yb.cdc.CDCService.DestroyVirtualWALForCDC:input_type -> yb.cdc.DestroyVirtualWALForCDCRequestPB
	16, // 97: yb.cdc.CDCService.UpdateAndPersistLSN:input_type -> yb.cdc.UpdateAndPersistLSNRequestPB
	18, // 98: yb.cdc.CDCService.UpdatePublicationTableList:input_type -> yb.cdc.UpdatePublicationTableListRequestPB
	21, // 99: yb.cdc.CDCService.CreateCDCStream:output_type -> yb.cdc.CreateCDCStreamResponsePB
	23, // 100: yb.cdc.CDCService.DeleteCDCStream:output_type -> yb.cdc.DeleteCDCStreamResponsePB
	25, // 101: yb.cdc.CDCService.ListTablets:output_type -> yb.cdc.ListTabletsResponsePB
	39, // 102: yb.cdc.CDCService.GetChanges:output_type -> yb.cdc.GetChangesResponsePB
	41, // 103: yb.cdc.CDCService.GetCheckpoint:output_type -> yb.cdc.GetCheckpointResponsePB
	43, // 104: yb.cdc.CDCService.UpdateCdcReplicatedIndex:output_type -> yb.cdc.UpdateCdcReplicatedIndexResponsePB
	45, // 105: yb.cdc.CDCService.BootstrapProducer:output_type -> yb.cdc.BootstrapProducerResponsePB
	47, // 106: yb.cdc.CDCService.GetLatestEntryOpId:output_type -> yb.cdc.GetLatestEntryOpIdResponsePB
	50, // 107: yb.cdc.CDCService.GetCDCDBStreamInfo:output_type -> yb.cdc.GetCDCDBStreamInfoResponsePB
	52, // 108: yb.cdc.CDCService.SetCDCCheckpoint:output_type -> yb.cdc.SetCDCCheckpointResponsePB
	55, // 109: yb.cdc.CDCService.GetTabletListToPollForCDC:output_type -> yb.cdc.GetTabletListToPollForCDCResponsePB
	57, // 110: yb.cdc.CDCService.IsBootstrapRequired:output_type -> yb.cdc.IsBootstrapRequiredResponsePB
	60, // 111: yb.cdc.CDCService.CheckReplicationDrain:output_type -> yb.cdc.CheckReplicationDrainResponsePB
	11, // 112: yb.cdc.CDCService.InitVirtualWALForCDC:output_type -> yb.cdc.InitVirtualWALForCDCResponsePB
	13, // 113: yb.cdc.CDCService.GetConsistentChanges:output_type -> yb.cdc.GetConsistentChangesResponsePB
	15, // 114: yb.cdc.CDCService.DestroyVirtualWALForCDC:output_type -> yb.cdc.DestroyVirtualWALForCDCResponsePB
	17, // 115: yb.cdc.CDCService.UpdateAndPersistLSN:output_type -> yb.cdc.UpdateAndPersistLSNResponsePB
	19, // 116: yb.cdc.CDCService.UpdatePublicationTableList:output_type -> yb.cdc.UpdatePublicationTableListResponsePB
	99, // [99:117] is the sub-list for method output_type
	81, // [81:99] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_yb_cdc_cdc_service_proto_init() }
func file_yb_cdc_cdc_service_proto_init() {
	if File_yb_cdc_cdc_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_cdc_cdc_service_proto_rawDesc), len(file_yb_cdc_cdc_service_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_cdc_cdc_service_proto_goTypes,
		DependencyIndexes: file_yb_cdc_cdc_service_proto_depIdxs,
		EnumInfos:         file_yb_cdc_cdc_service_proto_enumTypes,
		MessageInfos:      file_yb_cdc_cdc_service_proto_msgTypes,
	}.Build()
	File_yb_cdc_cdc_service_proto = out.File
	file_yb_cdc_cdc_service_proto_goTypes = nil
	file_yb_cdc_cdc_service_proto_depIdxs = nil
}
