// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/cdc/cdc_consumer.proto

package cdc

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NOTE: Deprecated
type XClusterRole int32

const (
	XClusterRole_ACTIVE  XClusterRole = 0
	XClusterRole_STANDBY XClusterRole = 1
)

// Enum value maps for XClusterRole.
var (
	XClusterRole_name = map[int32]string{
		0: "ACTIVE",
		1: "STANDBY",
	}
	XClusterRole_value = map[string]int32{
		"ACTIVE":  0,
		"STANDBY": 1,
	}
)

func (x XClusterRole) Enum() *XClusterRole {
	p := new(XClusterRole)
	*p = x
	return p
}

func (x XClusterRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XClusterRole) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_consumer_proto_enumTypes[0].Descriptor()
}

func (XClusterRole) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_consumer_proto_enumTypes[0]
}

func (x XClusterRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XClusterRole.Descriptor instead.
func (XClusterRole) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_consumer_proto_rawDescGZIP(), []int{0}
}

type ProducerTabletListPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of tablet ids, start and end keys for a given producer table.
	Tablets       []string `protobuf:"bytes,1,rep,name=tablets,proto3" json:"tablets,omitempty"`
	StartKey      [][]byte `protobuf:"bytes,2,rep,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey        [][]byte `protobuf:"bytes,3,rep,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProducerTabletListPB) Reset() {
	*x = ProducerTabletListPB{}
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProducerTabletListPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerTabletListPB) ProtoMessage() {}

func (x *ProducerTabletListPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerTabletListPB.ProtoReflect.Descriptor instead.
func (*ProducerTabletListPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_consumer_proto_rawDescGZIP(), []int{0}
}

func (x *ProducerTabletListPB) GetTablets() []string {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *ProducerTabletListPB) GetStartKey() [][]byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *ProducerTabletListPB) GetEndKey() [][]byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

type SchemaVersionsPB struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	CurrentProducerSchemaVersion uint32                 `protobuf:"varint,1,opt,name=current_producer_schema_version,json=currentProducerSchemaVersion,proto3" json:"current_producer_schema_version,omitempty"`
	CurrentConsumerSchemaVersion uint32                 `protobuf:"varint,2,opt,name=current_consumer_schema_version,json=currentConsumerSchemaVersion,proto3" json:"current_consumer_schema_version,omitempty"`
	OldProducerSchemaVersion     uint32                 `protobuf:"varint,3,opt,name=old_producer_schema_version,json=oldProducerSchemaVersion,proto3" json:"old_producer_schema_version,omitempty"`
	OldConsumerSchemaVersion     uint32                 `protobuf:"varint,4,opt,name=old_consumer_schema_version,json=oldConsumerSchemaVersion,proto3" json:"old_consumer_schema_version,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *SchemaVersionsPB) Reset() {
	*x = SchemaVersionsPB{}
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaVersionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaVersionsPB) ProtoMessage() {}

func (x *SchemaVersionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaVersionsPB.ProtoReflect.Descriptor instead.
func (*SchemaVersionsPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_consumer_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaVersionsPB) GetCurrentProducerSchemaVersion() uint32 {
	if x != nil {
		return x.CurrentProducerSchemaVersion
	}
	return 0
}

func (x *SchemaVersionsPB) GetCurrentConsumerSchemaVersion() uint32 {
	if x != nil {
		return x.CurrentConsumerSchemaVersion
	}
	return 0
}

func (x *SchemaVersionsPB) GetOldProducerSchemaVersion() uint32 {
	if x != nil {
		return x.OldProducerSchemaVersion
	}
	return 0
}

func (x *SchemaVersionsPB) GetOldConsumerSchemaVersion() uint32 {
	if x != nil {
		return x.OldConsumerSchemaVersion
	}
	return 0
}

type StreamEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map from consumer to producer tablet id.
	ConsumerProducerTabletMap map[string]*ProducerTabletListPB `protobuf:"bytes,1,rep,name=consumer_producer_tablet_map,json=consumerProducerTabletMap,proto3" json:"consumer_producer_tablet_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ConsumerTableId           string                           `protobuf:"bytes,2,opt,name=consumer_table_id,json=consumerTableId,proto3" json:"consumer_table_id,omitempty"`
	ProducerTableId           string                           `protobuf:"bytes,3,opt,name=producer_table_id,json=producerTableId,proto3" json:"producer_table_id,omitempty"`
	LocalTserverOptimized     bool                             `protobuf:"varint,4,opt,name=local_tserver_optimized,json=localTserverOptimized,proto3" json:"local_tserver_optimized,omitempty"`
	// Producer consumer schema versions
	SchemaVersions *SchemaVersionsPB `protobuf:"bytes,6,opt,name=schema_versions,json=schemaVersions,proto3" json:"schema_versions,omitempty"`
	// Mapping of colocation_id to producer/consumer schema versions
	ColocatedSchemaVersions map[uint32]*SchemaVersionsPB `protobuf:"bytes,7,rep,name=colocated_schema_versions,json=colocatedSchemaVersions,proto3" json:"colocated_schema_versions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsDdlQueueTable         bool                         `protobuf:"varint,8,opt,name=is_ddl_queue_table,json=isDdlQueueTable,proto3" json:"is_ddl_queue_table,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *StreamEntryPB) Reset() {
	*x = StreamEntryPB{}
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEntryPB) ProtoMessage() {}

func (x *StreamEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEntryPB.ProtoReflect.Descriptor instead.
func (*StreamEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_consumer_proto_rawDescGZIP(), []int{2}
}

func (x *StreamEntryPB) GetConsumerProducerTabletMap() map[string]*ProducerTabletListPB {
	if x != nil {
		return x.ConsumerProducerTabletMap
	}
	return nil
}

func (x *StreamEntryPB) GetConsumerTableId() string {
	if x != nil {
		return x.ConsumerTableId
	}
	return ""
}

func (x *StreamEntryPB) GetProducerTableId() string {
	if x != nil {
		return x.ProducerTableId
	}
	return ""
}

func (x *StreamEntryPB) GetLocalTserverOptimized() bool {
	if x != nil {
		return x.LocalTserverOptimized
	}
	return false
}

func (x *StreamEntryPB) GetSchemaVersions() *SchemaVersionsPB {
	if x != nil {
		return x.SchemaVersions
	}
	return nil
}

func (x *StreamEntryPB) GetColocatedSchemaVersions() map[uint32]*SchemaVersionsPB {
	if x != nil {
		return x.ColocatedSchemaVersions
	}
	return nil
}

func (x *StreamEntryPB) GetIsDdlQueueTable() bool {
	if x != nil {
		return x.IsDdlQueueTable
	}
	return false
}

type ProducerEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map from stream id to metadata for that stream.
	StreamMap                       map[string]*StreamEntryPB `protobuf:"bytes,1,rep,name=stream_map,json=streamMap,proto3" json:"stream_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MasterAddrs                     []*common.HostPortPB      `protobuf:"bytes,2,rep,name=master_addrs,json=masterAddrs,proto3" json:"master_addrs,omitempty"`
	DisableStream                   bool                      `protobuf:"varint,4,opt,name=disable_stream,json=disableStream,proto3" json:"disable_stream,omitempty"`                                                             // [default = false] implicit in proto3
	CompatibleAutoFlagConfigVersion uint32                    `protobuf:"varint,5,opt,name=compatible_auto_flag_config_version,json=compatibleAutoFlagConfigVersion,proto3" json:"compatible_auto_flag_config_version,omitempty"` // [default = 0] implicit in proto3
	ValidatedAutoFlagsConfigVersion uint32                    `protobuf:"varint,6,opt,name=validated_auto_flags_config_version,json=validatedAutoFlagsConfigVersion,proto3" json:"validated_auto_flags_config_version,omitempty"` // [default = 0] implicit in proto3
	// Whether automatic ddl mode is enabled for all streams in this replication group.
	AutomaticDdlMode bool `protobuf:"varint,7,opt,name=automatic_ddl_mode,json=automaticDdlMode,proto3" json:"automatic_ddl_mode,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProducerEntryPB) Reset() {
	*x = ProducerEntryPB{}
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProducerEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerEntryPB) ProtoMessage() {}

func (x *ProducerEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerEntryPB.ProtoReflect.Descriptor instead.
func (*ProducerEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_consumer_proto_rawDescGZIP(), []int{3}
}

func (x *ProducerEntryPB) GetStreamMap() map[string]*StreamEntryPB {
	if x != nil {
		return x.StreamMap
	}
	return nil
}

func (x *ProducerEntryPB) GetMasterAddrs() []*common.HostPortPB {
	if x != nil {
		return x.MasterAddrs
	}
	return nil
}

func (x *ProducerEntryPB) GetDisableStream() bool {
	if x != nil {
		return x.DisableStream
	}
	return false
}

func (x *ProducerEntryPB) GetCompatibleAutoFlagConfigVersion() uint32 {
	if x != nil {
		return x.CompatibleAutoFlagConfigVersion
	}
	return 0
}

func (x *ProducerEntryPB) GetValidatedAutoFlagsConfigVersion() uint32 {
	if x != nil {
		return x.ValidatedAutoFlagsConfigVersion
	}
	return 0
}

func (x *ProducerEntryPB) GetAutomaticDdlMode() bool {
	if x != nil {
		return x.AutomaticDdlMode
	}
	return false
}

type ConsumerRegistryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map from ReplicationGroupId to metadata for that ReplicationGroup.
	ProducerMap map[string]*ProducerEntryPB `protobuf:"bytes,1,rep,name=producer_map,json=producerMap,proto3" json:"producer_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Cannot remove the field, since we need to support rollbacks.
	DEPRECATEDRole XClusterRole `protobuf:"varint,3,opt,name=DEPRECATED_role,json=DEPRECATEDRole,proto3,enum=yb.cdc.XClusterRole" json:"DEPRECATED_role,omitempty"`
	// Cannot remove the field, since we need to support rollbacks.
	DEPRECATEDTransactional bool `protobuf:"varint,4,opt,name=DEPRECATED_transactional,json=DEPRECATEDTransactional,proto3" json:"DEPRECATED_transactional,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ConsumerRegistryPB) Reset() {
	*x = ConsumerRegistryPB{}
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumerRegistryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerRegistryPB) ProtoMessage() {}

func (x *ConsumerRegistryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_consumer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerRegistryPB.ProtoReflect.Descriptor instead.
func (*ConsumerRegistryPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_consumer_proto_rawDescGZIP(), []int{4}
}

func (x *ConsumerRegistryPB) GetProducerMap() map[string]*ProducerEntryPB {
	if x != nil {
		return x.ProducerMap
	}
	return nil
}

func (x *ConsumerRegistryPB) GetDEPRECATEDRole() XClusterRole {
	if x != nil {
		return x.DEPRECATEDRole
	}
	return XClusterRole_ACTIVE
}

func (x *ConsumerRegistryPB) GetDEPRECATEDTransactional() bool {
	if x != nil {
		return x.DEPRECATEDTransactional
	}
	return false
}

var File_yb_cdc_cdc_consumer_proto protoreflect.FileDescriptor

var file_yb_cdc_cdc_consumer_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x79, 0x62, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22,
	0x9e, 0x02, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xce, 0x05, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x12, 0x75, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x19,
	0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x64, 0x6c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x6a, 0x0a, 0x1e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x22, 0xd7, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x0c,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x50, 0x42, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4c, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x23, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x64, 0x64, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x1a, 0x53, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xbd, 0x02, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x12, 0x3d, 0x0a, 0x0f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x64, 0x63, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x0e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0x57, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x2a, 0x27, 0x0a, 0x0c, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x42, 0x59, 0x10, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_yb_cdc_cdc_consumer_proto_rawDescOnce sync.Once
	file_yb_cdc_cdc_consumer_proto_rawDescData []byte
)

func file_yb_cdc_cdc_consumer_proto_rawDescGZIP() []byte {
	file_yb_cdc_cdc_consumer_proto_rawDescOnce.Do(func() {
		file_yb_cdc_cdc_consumer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_cdc_cdc_consumer_proto_rawDesc), len(file_yb_cdc_cdc_consumer_proto_rawDesc)))
	})
	return file_yb_cdc_cdc_consumer_proto_rawDescData
}

var file_yb_cdc_cdc_consumer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yb_cdc_cdc_consumer_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_yb_cdc_cdc_consumer_proto_goTypes = []any{
	(XClusterRole)(0),            // 0: yb.cdc.XClusterRole
	(*ProducerTabletListPB)(nil), // 1: yb.cdc.ProducerTabletListPB
	(*SchemaVersionsPB)(nil),     // 2: yb.cdc.SchemaVersionsPB
	(*StreamEntryPB)(nil),        // 3: yb.cdc.StreamEntryPB
	(*ProducerEntryPB)(nil),      // 4: yb.cdc.ProducerEntryPB
	(*ConsumerRegistryPB)(nil),   // 5: yb.cdc.ConsumerRegistryPB
	nil,                          // 6: yb.cdc.StreamEntryPB.ConsumerProducerTabletMapEntry
	nil,                          // 7: yb.cdc.StreamEntryPB.ColocatedSchemaVersionsEntry
	nil,                          // 8: yb.cdc.ProducerEntryPB.StreamMapEntry
	nil,                          // 9: yb.cdc.ConsumerRegistryPB.ProducerMapEntry
	(*common.HostPortPB)(nil),    // 10: yb.HostPortPB
}
var file_yb_cdc_cdc_consumer_proto_depIdxs = []int32{
	6,  // 0: yb.cdc.StreamEntryPB.consumer_producer_tablet_map:type_name -> yb.cdc.StreamEntryPB.ConsumerProducerTabletMapEntry
	2,  // 1: yb.cdc.StreamEntryPB.schema_versions:type_name -> yb.cdc.SchemaVersionsPB
	7,  // 2: yb.cdc.StreamEntryPB.colocated_schema_versions:type_name -> yb.cdc.StreamEntryPB.ColocatedSchemaVersionsEntry
	8,  // 3: yb.cdc.ProducerEntryPB.stream_map:type_name -> yb.cdc.ProducerEntryPB.StreamMapEntry
	10, // 4: yb.cdc.ProducerEntryPB.master_addrs:type_name -> yb.HostPortPB
	9,  // 5: yb.cdc.ConsumerRegistryPB.producer_map:type_name -> yb.cdc.ConsumerRegistryPB.ProducerMapEntry
	0,  // 6: yb.cdc.ConsumerRegistryPB.DEPRECATED_role:type_name -> yb.cdc.XClusterRole
	1,  // 7: yb.cdc.StreamEntryPB.ConsumerProducerTabletMapEntry.value:type_name -> yb.cdc.ProducerTabletListPB
	2,  // 8: yb.cdc.StreamEntryPB.ColocatedSchemaVersionsEntry.value:type_name -> yb.cdc.SchemaVersionsPB
	3,  // 9: yb.cdc.ProducerEntryPB.StreamMapEntry.value:type_name -> yb.cdc.StreamEntryPB
	4,  // 10: yb.cdc.ConsumerRegistryPB.ProducerMapEntry.value:type_name -> yb.cdc.ProducerEntryPB
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_yb_cdc_cdc_consumer_proto_init() }
func file_yb_cdc_cdc_consumer_proto_init() {
	if File_yb_cdc_cdc_consumer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_cdc_cdc_consumer_proto_rawDesc), len(file_yb_cdc_cdc_consumer_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_cdc_cdc_consumer_proto_goTypes,
		DependencyIndexes: file_yb_cdc_cdc_consumer_proto_depIdxs,
		EnumInfos:         file_yb_cdc_cdc_consumer_proto_enumTypes,
		MessageInfos:      file_yb_cdc_cdc_consumer_proto_msgTypes,
	}.Build()
	File_yb_cdc_cdc_consumer_proto = out.File
	file_yb_cdc_cdc_consumer_proto_goTypes = nil
	file_yb_cdc_cdc_consumer_proto_depIdxs = nil
}
