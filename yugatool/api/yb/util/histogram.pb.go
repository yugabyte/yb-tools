// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/util/histogram.proto

package util

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Captures the state of an Histogram.
type HistogramSnapshotPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Type                 *string                `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Name                 *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Description          *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Level                *string                `protobuf:"bytes,20,opt,name=level" json:"level,omitempty"`
	Unit                 *string                `protobuf:"bytes,4,req,name=unit" json:"unit,omitempty"`
	Label                *string                `protobuf:"bytes,19,opt,name=label" json:"label,omitempty"`
	MaxTrackableValue    *uint64                `protobuf:"varint,5,req,name=max_trackable_value,json=maxTrackableValue" json:"max_trackable_value,omitempty"`
	NumSignificantDigits *int32                 `protobuf:"varint,6,req,name=num_significant_digits,json=numSignificantDigits" json:"num_significant_digits,omitempty"`
	TotalCount           *uint64                `protobuf:"varint,7,req,name=total_count,json=totalCount" json:"total_count,omitempty"`
	TotalSum             *uint64                `protobuf:"varint,18,opt,name=total_sum,json=totalSum" json:"total_sum,omitempty"`
	Min                  *uint64                `protobuf:"varint,8,req,name=min" json:"min,omitempty"`
	Mean                 *float64               `protobuf:"fixed64,9,req,name=mean" json:"mean,omitempty"`
	Percentile_75        *uint64                `protobuf:"varint,10,req,name=percentile_75,json=percentile75" json:"percentile_75,omitempty"`
	Percentile_95        *uint64                `protobuf:"varint,11,req,name=percentile_95,json=percentile95" json:"percentile_95,omitempty"`
	Percentile_99        *uint64                `protobuf:"varint,12,req,name=percentile_99,json=percentile99" json:"percentile_99,omitempty"`
	Percentile_99_9      *uint64                `protobuf:"varint,13,req,name=percentile_99_9,json=percentile999" json:"percentile_99_9,omitempty"`
	Percentile_99_99     *uint64                `protobuf:"varint,14,req,name=percentile_99_99,json=percentile9999" json:"percentile_99_99,omitempty"`
	Max                  *uint64                `protobuf:"varint,15,req,name=max" json:"max,omitempty"`
	Values               []uint64               `protobuf:"varint,16,rep,packed,name=values" json:"values,omitempty"`
	Counts               []uint64               `protobuf:"varint,17,rep,packed,name=counts" json:"counts,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HistogramSnapshotPB) Reset() {
	*x = HistogramSnapshotPB{}
	mi := &file_yb_util_histogram_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramSnapshotPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramSnapshotPB) ProtoMessage() {}

func (x *HistogramSnapshotPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_util_histogram_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramSnapshotPB.ProtoReflect.Descriptor instead.
func (*HistogramSnapshotPB) Descriptor() ([]byte, []int) {
	return file_yb_util_histogram_proto_rawDescGZIP(), []int{0}
}

func (x *HistogramSnapshotPB) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *HistogramSnapshotPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *HistogramSnapshotPB) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *HistogramSnapshotPB) GetLevel() string {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ""
}

func (x *HistogramSnapshotPB) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *HistogramSnapshotPB) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *HistogramSnapshotPB) GetMaxTrackableValue() uint64 {
	if x != nil && x.MaxTrackableValue != nil {
		return *x.MaxTrackableValue
	}
	return 0
}

func (x *HistogramSnapshotPB) GetNumSignificantDigits() int32 {
	if x != nil && x.NumSignificantDigits != nil {
		return *x.NumSignificantDigits
	}
	return 0
}

func (x *HistogramSnapshotPB) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *HistogramSnapshotPB) GetTotalSum() uint64 {
	if x != nil && x.TotalSum != nil {
		return *x.TotalSum
	}
	return 0
}

func (x *HistogramSnapshotPB) GetMin() uint64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *HistogramSnapshotPB) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *HistogramSnapshotPB) GetPercentile_75() uint64 {
	if x != nil && x.Percentile_75 != nil {
		return *x.Percentile_75
	}
	return 0
}

func (x *HistogramSnapshotPB) GetPercentile_95() uint64 {
	if x != nil && x.Percentile_95 != nil {
		return *x.Percentile_95
	}
	return 0
}

func (x *HistogramSnapshotPB) GetPercentile_99() uint64 {
	if x != nil && x.Percentile_99 != nil {
		return *x.Percentile_99
	}
	return 0
}

func (x *HistogramSnapshotPB) GetPercentile_99_9() uint64 {
	if x != nil && x.Percentile_99_9 != nil {
		return *x.Percentile_99_9
	}
	return 0
}

func (x *HistogramSnapshotPB) GetPercentile_99_99() uint64 {
	if x != nil && x.Percentile_99_99 != nil {
		return *x.Percentile_99_99
	}
	return 0
}

func (x *HistogramSnapshotPB) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *HistogramSnapshotPB) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *HistogramSnapshotPB) GetCounts() []uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type HistogramSnapshotsListPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Histograms    []*HistogramSnapshotPB `protobuf:"bytes,1,rep,name=histograms" json:"histograms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistogramSnapshotsListPB) Reset() {
	*x = HistogramSnapshotsListPB{}
	mi := &file_yb_util_histogram_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramSnapshotsListPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramSnapshotsListPB) ProtoMessage() {}

func (x *HistogramSnapshotsListPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_util_histogram_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramSnapshotsListPB.ProtoReflect.Descriptor instead.
func (*HistogramSnapshotsListPB) Descriptor() ([]byte, []int) {
	return file_yb_util_histogram_proto_rawDescGZIP(), []int{1}
}

func (x *HistogramSnapshotsListPB) GetHistograms() []*HistogramSnapshotPB {
	if x != nil {
		return x.Histograms
	}
	return nil
}

var File_yb_util_histogram_proto protoreflect.FileDescriptor

var file_yb_util_histogram_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x79, 0x62, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x79, 0x62, 0x22, 0xf4, 0x04,
	0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x14, 0x6e, 0x75, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x09, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x37, 0x35, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x37, 0x35, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39, 0x35, 0x18,
	0x0b, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x39, 0x35, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x5f, 0x39, 0x39, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x39, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39, 0x39, 0x5f, 0x39, 0x18, 0x0d, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x39, 0x39,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x39,
	0x39, 0x5f, 0x39, 0x39, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x39, 0x39, 0x39, 0x39, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x18, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x37, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x42, 0x52, 0x0a, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x2e, 0x79, 0x62,
})

var (
	file_yb_util_histogram_proto_rawDescOnce sync.Once
	file_yb_util_histogram_proto_rawDescData []byte
)

func file_yb_util_histogram_proto_rawDescGZIP() []byte {
	file_yb_util_histogram_proto_rawDescOnce.Do(func() {
		file_yb_util_histogram_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_util_histogram_proto_rawDesc), len(file_yb_util_histogram_proto_rawDesc)))
	})
	return file_yb_util_histogram_proto_rawDescData
}

var file_yb_util_histogram_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yb_util_histogram_proto_goTypes = []any{
	(*HistogramSnapshotPB)(nil),      // 0: yb.HistogramSnapshotPB
	(*HistogramSnapshotsListPB)(nil), // 1: yb.HistogramSnapshotsListPB
}
var file_yb_util_histogram_proto_depIdxs = []int32{
	0, // 0: yb.HistogramSnapshotsListPB.histograms:type_name -> yb.HistogramSnapshotPB
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_yb_util_histogram_proto_init() }
func file_yb_util_histogram_proto_init() {
	if File_yb_util_histogram_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_util_histogram_proto_rawDesc), len(file_yb_util_histogram_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_util_histogram_proto_goTypes,
		DependencyIndexes: file_yb_util_histogram_proto_depIdxs,
		MessageInfos:      file_yb_util_histogram_proto_msgTypes,
	}.Build()
	File_yb_util_histogram_proto = out.File
	file_yb_util_histogram_proto_goTypes = nil
	file_yb_util_histogram_proto_depIdxs = nil
}
