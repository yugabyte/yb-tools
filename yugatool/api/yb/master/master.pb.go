// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: yb/master/master.proto

package master

import (
	cdc "github.com/yugabyte/yb-tools/yugatool/api/yb/cdc"
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	util "github.com/yugabyte/yb-tools/yugatool/api/yb/util"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelationType int32

const (
	RelationType_SYSTEM_TABLE_RELATION RelationType = 1
	RelationType_USER_TABLE_RELATION   RelationType = 2
	RelationType_INDEX_TABLE_RELATION  RelationType = 3
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		1: "SYSTEM_TABLE_RELATION",
		2: "USER_TABLE_RELATION",
		3: "INDEX_TABLE_RELATION",
	}
	RelationType_value = map[string]int32{
		"SYSTEM_TABLE_RELATION": 1,
		"USER_TABLE_RELATION":   2,
		"INDEX_TABLE_RELATION":  3,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[0].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[0]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RelationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RelationType(num)
	return nil
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{0}
}

type MasterErrorPB_Code int32

const (
	// An error which has no more specific error code.
	// The code and message in 'status' may reveal more details.
	//
	// RPCs should avoid returning this, since callers will not be
	// able to easily parse the error.
	MasterErrorPB_UNKNOWN_ERROR MasterErrorPB_Code = 1
	// The schema provided for a request was not well-formed.
	MasterErrorPB_INVALID_SCHEMA MasterErrorPB_Code = 2
	// The requested table or index does not exist
	MasterErrorPB_OBJECT_NOT_FOUND MasterErrorPB_Code = 3
	// The name requested for the table or index is already in use
	MasterErrorPB_OBJECT_ALREADY_PRESENT MasterErrorPB_Code = 4
	// The number of tablets requested for a new table is over the per TS limit.
	MasterErrorPB_TOO_MANY_TABLETS MasterErrorPB_Code = 5
	// Catalog manager is not yet initialized.
	MasterErrorPB_CATALOG_MANAGER_NOT_INITIALIZED MasterErrorPB_Code = 6
	// The operation attempted can only be invoked against either the
	// leader or a single non-distributed master, which this node
	// isn't.
	MasterErrorPB_NOT_THE_LEADER MasterErrorPB_Code = 7
	// The number of replicas requested is greater than the number of live servers
	// in the cluster.
	MasterErrorPB_REPLICATION_FACTOR_TOO_HIGH MasterErrorPB_Code = 8
	// Change config should always be issued with the latest config version set.
	// If the client fails to do so, or there is a concurrent change, we will
	// set this error code.
	MasterErrorPB_CONFIG_VERSION_MISMATCH MasterErrorPB_Code = 9
	// If there is an operation in progress causing the current rpc to be in an indeterminate state,
	// we return this error code. Client can retry on a case by case basis as needed.
	MasterErrorPB_IN_TRANSITION_CAN_RETRY MasterErrorPB_Code = 10
	// Invalid namespace name or id for the namespace operation.
	MasterErrorPB_NAMESPACE_NOT_FOUND       MasterErrorPB_Code = 11
	MasterErrorPB_NAMESPACE_ALREADY_PRESENT MasterErrorPB_Code = 12
	MasterErrorPB_NO_NAMESPACE_USED         MasterErrorPB_Code = 13
	MasterErrorPB_NAMESPACE_IS_NOT_EMPTY    MasterErrorPB_Code = 14
	// Client set some fields incorrectly in the cluster config proto.
	MasterErrorPB_INVALID_CLUSTER_CONFIG MasterErrorPB_Code = 15
	// Indicator to client that the load balance operation can be retried.
	MasterErrorPB_CAN_RETRY_LOAD_BALANCE_CHECK MasterErrorPB_Code = 16
	// Invalid (User-Defined) Type operation
	MasterErrorPB_TYPE_NOT_FOUND       MasterErrorPB_Code = 17
	MasterErrorPB_INVALID_TYPE         MasterErrorPB_Code = 18
	MasterErrorPB_TYPE_ALREADY_PRESENT MasterErrorPB_Code = 19
	// Snapshot related errors.
	MasterErrorPB_INVALID_TABLE_TYPE            MasterErrorPB_Code = 20
	MasterErrorPB_TABLE_CREATION_IS_IN_PROGRESS MasterErrorPB_Code = 21
	MasterErrorPB_SNAPSHOT_NOT_FOUND            MasterErrorPB_Code = 22
	MasterErrorPB_SNAPSHOT_FAILED               MasterErrorPB_Code = 23
	MasterErrorPB_SNAPSHOT_CANCELLED            MasterErrorPB_Code = 24
	MasterErrorPB_PARALLEL_SNAPSHOT_OPERATION   MasterErrorPB_Code = 25
	MasterErrorPB_SNAPSHOT_IS_NOT_READY         MasterErrorPB_Code = 26
	// Roles and permissions errors.
	MasterErrorPB_ROLE_ALREADY_PRESENT MasterErrorPB_Code = 27
	MasterErrorPB_ROLE_NOT_FOUND       MasterErrorPB_Code = 28
	MasterErrorPB_INVALID_REQUEST      MasterErrorPB_Code = 29
	MasterErrorPB_NOT_AUTHORIZED       MasterErrorPB_Code = 32
	// Indicator to client that the are leaders on preferred only operation can be retried.
	MasterErrorPB_CAN_RETRY_ARE_LEADERS_ON_PREFERRED_ONLY_CHECK MasterErrorPB_Code = 30
	MasterErrorPB_REDIS_CONFIG_NOT_FOUND                        MasterErrorPB_Code = 31
	// Indicator to client that load balancer was recently active.
	MasterErrorPB_LOAD_BALANCER_RECENTLY_ACTIVE MasterErrorPB_Code = 33
	MasterErrorPB_INTERNAL_ERROR                MasterErrorPB_Code = 34
	// Client set some fields in the table replication info incorrectly.
	MasterErrorPB_INVALID_TABLE_REPLICATION_INFO MasterErrorPB_Code = 35
	MasterErrorPB_REACHED_SPLIT_LIMIT            MasterErrorPB_Code = 36
	MasterErrorPB_SPLIT_OR_BACKFILL_IN_PROGRESS  MasterErrorPB_Code = 37
)

// Enum value maps for MasterErrorPB_Code.
var (
	MasterErrorPB_Code_name = map[int32]string{
		1:  "UNKNOWN_ERROR",
		2:  "INVALID_SCHEMA",
		3:  "OBJECT_NOT_FOUND",
		4:  "OBJECT_ALREADY_PRESENT",
		5:  "TOO_MANY_TABLETS",
		6:  "CATALOG_MANAGER_NOT_INITIALIZED",
		7:  "NOT_THE_LEADER",
		8:  "REPLICATION_FACTOR_TOO_HIGH",
		9:  "CONFIG_VERSION_MISMATCH",
		10: "IN_TRANSITION_CAN_RETRY",
		11: "NAMESPACE_NOT_FOUND",
		12: "NAMESPACE_ALREADY_PRESENT",
		13: "NO_NAMESPACE_USED",
		14: "NAMESPACE_IS_NOT_EMPTY",
		15: "INVALID_CLUSTER_CONFIG",
		16: "CAN_RETRY_LOAD_BALANCE_CHECK",
		17: "TYPE_NOT_FOUND",
		18: "INVALID_TYPE",
		19: "TYPE_ALREADY_PRESENT",
		20: "INVALID_TABLE_TYPE",
		21: "TABLE_CREATION_IS_IN_PROGRESS",
		22: "SNAPSHOT_NOT_FOUND",
		23: "SNAPSHOT_FAILED",
		24: "SNAPSHOT_CANCELLED",
		25: "PARALLEL_SNAPSHOT_OPERATION",
		26: "SNAPSHOT_IS_NOT_READY",
		27: "ROLE_ALREADY_PRESENT",
		28: "ROLE_NOT_FOUND",
		29: "INVALID_REQUEST",
		32: "NOT_AUTHORIZED",
		30: "CAN_RETRY_ARE_LEADERS_ON_PREFERRED_ONLY_CHECK",
		31: "REDIS_CONFIG_NOT_FOUND",
		33: "LOAD_BALANCER_RECENTLY_ACTIVE",
		34: "INTERNAL_ERROR",
		35: "INVALID_TABLE_REPLICATION_INFO",
		36: "REACHED_SPLIT_LIMIT",
		37: "SPLIT_OR_BACKFILL_IN_PROGRESS",
	}
	MasterErrorPB_Code_value = map[string]int32{
		"UNKNOWN_ERROR":                                 1,
		"INVALID_SCHEMA":                                2,
		"OBJECT_NOT_FOUND":                              3,
		"OBJECT_ALREADY_PRESENT":                        4,
		"TOO_MANY_TABLETS":                              5,
		"CATALOG_MANAGER_NOT_INITIALIZED":               6,
		"NOT_THE_LEADER":                                7,
		"REPLICATION_FACTOR_TOO_HIGH":                   8,
		"CONFIG_VERSION_MISMATCH":                       9,
		"IN_TRANSITION_CAN_RETRY":                       10,
		"NAMESPACE_NOT_FOUND":                           11,
		"NAMESPACE_ALREADY_PRESENT":                     12,
		"NO_NAMESPACE_USED":                             13,
		"NAMESPACE_IS_NOT_EMPTY":                        14,
		"INVALID_CLUSTER_CONFIG":                        15,
		"CAN_RETRY_LOAD_BALANCE_CHECK":                  16,
		"TYPE_NOT_FOUND":                                17,
		"INVALID_TYPE":                                  18,
		"TYPE_ALREADY_PRESENT":                          19,
		"INVALID_TABLE_TYPE":                            20,
		"TABLE_CREATION_IS_IN_PROGRESS":                 21,
		"SNAPSHOT_NOT_FOUND":                            22,
		"SNAPSHOT_FAILED":                               23,
		"SNAPSHOT_CANCELLED":                            24,
		"PARALLEL_SNAPSHOT_OPERATION":                   25,
		"SNAPSHOT_IS_NOT_READY":                         26,
		"ROLE_ALREADY_PRESENT":                          27,
		"ROLE_NOT_FOUND":                                28,
		"INVALID_REQUEST":                               29,
		"NOT_AUTHORIZED":                                32,
		"CAN_RETRY_ARE_LEADERS_ON_PREFERRED_ONLY_CHECK": 30,
		"REDIS_CONFIG_NOT_FOUND":                        31,
		"LOAD_BALANCER_RECENTLY_ACTIVE":                 33,
		"INTERNAL_ERROR":                                34,
		"INVALID_TABLE_REPLICATION_INFO":                35,
		"REACHED_SPLIT_LIMIT":                           36,
		"SPLIT_OR_BACKFILL_IN_PROGRESS":                 37,
	}
)

func (x MasterErrorPB_Code) Enum() *MasterErrorPB_Code {
	p := new(MasterErrorPB_Code)
	*p = x
	return p
}

func (x MasterErrorPB_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterErrorPB_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[1].Descriptor()
}

func (MasterErrorPB_Code) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[1]
}

func (x MasterErrorPB_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MasterErrorPB_Code) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MasterErrorPB_Code(num)
	return nil
}

// Deprecated: Use MasterErrorPB_Code.Descriptor instead.
func (MasterErrorPB_Code) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{0, 0}
}

type SysRowEntry_Type int32

const (
	SysRowEntry_UNKNOWN              SysRowEntry_Type = 0
	SysRowEntry_TABLE                SysRowEntry_Type = 1
	SysRowEntry_TABLET               SysRowEntry_Type = 2
	SysRowEntry_CLUSTER_CONFIG       SysRowEntry_Type = 3
	SysRowEntry_NAMESPACE            SysRowEntry_Type = 4
	SysRowEntry_UDTYPE               SysRowEntry_Type = 5
	SysRowEntry_ROLE                 SysRowEntry_Type = 6
	SysRowEntry_SNAPSHOT             SysRowEntry_Type = 7
	SysRowEntry_REDIS_CONFIG         SysRowEntry_Type = 8
	SysRowEntry_SYS_CONFIG           SysRowEntry_Type = 9
	SysRowEntry_CDC_STREAM           SysRowEntry_Type = 10
	SysRowEntry_UNIVERSE_REPLICATION SysRowEntry_Type = 11
	SysRowEntry_SNAPSHOT_SCHEDULE    SysRowEntry_Type = 12
)

// Enum value maps for SysRowEntry_Type.
var (
	SysRowEntry_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "TABLE",
		2:  "TABLET",
		3:  "CLUSTER_CONFIG",
		4:  "NAMESPACE",
		5:  "UDTYPE",
		6:  "ROLE",
		7:  "SNAPSHOT",
		8:  "REDIS_CONFIG",
		9:  "SYS_CONFIG",
		10: "CDC_STREAM",
		11: "UNIVERSE_REPLICATION",
		12: "SNAPSHOT_SCHEDULE",
	}
	SysRowEntry_Type_value = map[string]int32{
		"UNKNOWN":              0,
		"TABLE":                1,
		"TABLET":               2,
		"CLUSTER_CONFIG":       3,
		"NAMESPACE":            4,
		"UDTYPE":               5,
		"ROLE":                 6,
		"SNAPSHOT":             7,
		"REDIS_CONFIG":         8,
		"SYS_CONFIG":           9,
		"CDC_STREAM":           10,
		"UNIVERSE_REPLICATION": 11,
		"SNAPSHOT_SCHEDULE":    12,
	}
)

func (x SysRowEntry_Type) Enum() *SysRowEntry_Type {
	p := new(SysRowEntry_Type)
	*p = x
	return p
}

func (x SysRowEntry_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysRowEntry_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[2].Descriptor()
}

func (SysRowEntry_Type) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[2]
}

func (x SysRowEntry_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysRowEntry_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysRowEntry_Type(num)
	return nil
}

// Deprecated: Use SysRowEntry_Type.Descriptor instead.
func (SysRowEntry_Type) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{9, 0}
}

type SysTabletsEntryPB_State int32

const (
	SysTabletsEntryPB_UNKNOWN   SysTabletsEntryPB_State = 999
	SysTabletsEntryPB_PREPARING SysTabletsEntryPB_State = 0
	SysTabletsEntryPB_CREATING  SysTabletsEntryPB_State = 1
	SysTabletsEntryPB_RUNNING   SysTabletsEntryPB_State = 2
	SysTabletsEntryPB_REPLACED  SysTabletsEntryPB_State = 3
	SysTabletsEntryPB_DELETED   SysTabletsEntryPB_State = 4
)

// Enum value maps for SysTabletsEntryPB_State.
var (
	SysTabletsEntryPB_State_name = map[int32]string{
		999: "UNKNOWN",
		0:   "PREPARING",
		1:   "CREATING",
		2:   "RUNNING",
		3:   "REPLACED",
		4:   "DELETED",
	}
	SysTabletsEntryPB_State_value = map[string]int32{
		"UNKNOWN":   999,
		"PREPARING": 0,
		"CREATING":  1,
		"RUNNING":   2,
		"REPLACED":  3,
		"DELETED":   4,
	}
)

func (x SysTabletsEntryPB_State) Enum() *SysTabletsEntryPB_State {
	p := new(SysTabletsEntryPB_State)
	*p = x
	return p
}

func (x SysTabletsEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTabletsEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[3].Descriptor()
}

func (SysTabletsEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[3]
}

func (x SysTabletsEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTabletsEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTabletsEntryPB_State(num)
	return nil
}

// Deprecated: Use SysTabletsEntryPB_State.Descriptor instead.
func (SysTabletsEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{11, 0}
}

type BackfillJobPB_State int32

const (
	BackfillJobPB_IN_PROGRESS BackfillJobPB_State = 0
	BackfillJobPB_FAILED      BackfillJobPB_State = 1
	BackfillJobPB_SUCCESS     BackfillJobPB_State = 2
)

// Enum value maps for BackfillJobPB_State.
var (
	BackfillJobPB_State_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "FAILED",
		2: "SUCCESS",
	}
	BackfillJobPB_State_value = map[string]int32{
		"IN_PROGRESS": 0,
		"FAILED":      1,
		"SUCCESS":     2,
	}
)

func (x BackfillJobPB_State) Enum() *BackfillJobPB_State {
	p := new(BackfillJobPB_State)
	*p = x
	return p
}

func (x BackfillJobPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackfillJobPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[4].Descriptor()
}

func (BackfillJobPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[4]
}

func (x BackfillJobPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackfillJobPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackfillJobPB_State(num)
	return nil
}

// Deprecated: Use BackfillJobPB_State.Descriptor instead.
func (BackfillJobPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{12, 0}
}

type SysTablesEntryPB_State int32

const (
	SysTablesEntryPB_UNKNOWN   SysTablesEntryPB_State = 0
	SysTablesEntryPB_PREPARING SysTablesEntryPB_State = 1
	SysTablesEntryPB_RUNNING   SysTablesEntryPB_State = 2
	SysTablesEntryPB_ALTERING  SysTablesEntryPB_State = 3
	SysTablesEntryPB_DELETING  SysTablesEntryPB_State = 4
	SysTablesEntryPB_DELETED   SysTablesEntryPB_State = 5
)

// Enum value maps for SysTablesEntryPB_State.
var (
	SysTablesEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARING",
		2: "RUNNING",
		3: "ALTERING",
		4: "DELETING",
		5: "DELETED",
	}
	SysTablesEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"PREPARING": 1,
		"RUNNING":   2,
		"ALTERING":  3,
		"DELETING":  4,
		"DELETED":   5,
	}
)

func (x SysTablesEntryPB_State) Enum() *SysTablesEntryPB_State {
	p := new(SysTablesEntryPB_State)
	*p = x
	return p
}

func (x SysTablesEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTablesEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[5].Descriptor()
}

func (SysTablesEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[5]
}

func (x SysTablesEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTablesEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTablesEntryPB_State(num)
	return nil
}

// Deprecated: Use SysTablesEntryPB_State.Descriptor instead.
func (SysTablesEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{13, 0}
}

type SysNamespaceEntryPB_State int32

const (
	SysNamespaceEntryPB_UNKNOWN   SysNamespaceEntryPB_State = 0 // Unset or bad data. Unexpected state.
	SysNamespaceEntryPB_PREPARING SysNamespaceEntryPB_State = 1 // Creating. Transitive State. Possible Next States: [RUNNING, FAILED].
	SysNamespaceEntryPB_FAILED    SysNamespaceEntryPB_State = 2 // Creation Failed. Permanent State.
	SysNamespaceEntryPB_RUNNING   SysNamespaceEntryPB_State = 3 // Live. Permanent State. Possible Next States: [FAILED, DELETING].
	SysNamespaceEntryPB_DELETING  SysNamespaceEntryPB_State = 4 // Delete Requested. Transitive State. Possible Next States: [DELETED].
	SysNamespaceEntryPB_DELETED   SysNamespaceEntryPB_State = 5 // Delete Finished on TServers or Tombstone. Final State before erasure.
)

// Enum value maps for SysNamespaceEntryPB_State.
var (
	SysNamespaceEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARING",
		2: "FAILED",
		3: "RUNNING",
		4: "DELETING",
		5: "DELETED",
	}
	SysNamespaceEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"PREPARING": 1,
		"FAILED":    2,
		"RUNNING":   3,
		"DELETING":  4,
		"DELETED":   5,
	}
)

func (x SysNamespaceEntryPB_State) Enum() *SysNamespaceEntryPB_State {
	p := new(SysNamespaceEntryPB_State)
	*p = x
	return p
}

func (x SysNamespaceEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysNamespaceEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[6].Descriptor()
}

func (SysNamespaceEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[6]
}

func (x SysNamespaceEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysNamespaceEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysNamespaceEntryPB_State(num)
	return nil
}

// Deprecated: Use SysNamespaceEntryPB_State.Descriptor instead.
func (SysNamespaceEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{14, 0}
}

type SysCDCStreamEntryPB_State int32

const (
	SysCDCStreamEntryPB_ACTIVE   SysCDCStreamEntryPB_State = 0
	SysCDCStreamEntryPB_DELETING SysCDCStreamEntryPB_State = 1
	// Currently DELETED is not being used because we delete streams entries from sys catalog.
	SysCDCStreamEntryPB_DELETED SysCDCStreamEntryPB_State = 2
)

// Enum value maps for SysCDCStreamEntryPB_State.
var (
	SysCDCStreamEntryPB_State_name = map[int32]string{
		0: "ACTIVE",
		1: "DELETING",
		2: "DELETED",
	}
	SysCDCStreamEntryPB_State_value = map[string]int32{
		"ACTIVE":   0,
		"DELETING": 1,
		"DELETED":  2,
	}
)

func (x SysCDCStreamEntryPB_State) Enum() *SysCDCStreamEntryPB_State {
	p := new(SysCDCStreamEntryPB_State)
	*p = x
	return p
}

func (x SysCDCStreamEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysCDCStreamEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[7].Descriptor()
}

func (SysCDCStreamEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[7]
}

func (x SysCDCStreamEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysCDCStreamEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysCDCStreamEntryPB_State(num)
	return nil
}

// Deprecated: Use SysCDCStreamEntryPB_State.Descriptor instead.
func (SysCDCStreamEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{17, 0}
}

type SysUniverseReplicationEntryPB_State int32

const (
	// Setting up replication.
	SysUniverseReplicationEntryPB_INITIALIZING SysUniverseReplicationEntryPB_State = 0
	// Validated table schemas.
	SysUniverseReplicationEntryPB_VALIDATED SysUniverseReplicationEntryPB_State = 1
	// Active.
	SysUniverseReplicationEntryPB_ACTIVE SysUniverseReplicationEntryPB_State = 2
	// Failed.
	// Setting up universe replication consists of a sequence of steps like validating schemas,
	// creating CDC streams, starting subscribers. If any of these fail, we set the universe
	// replication state to FAILED.
	SysUniverseReplicationEntryPB_FAILED SysUniverseReplicationEntryPB_State = 3
	// Disabled.
	SysUniverseReplicationEntryPB_DISABLED SysUniverseReplicationEntryPB_State = 6
	// Deleted.
	SysUniverseReplicationEntryPB_DELETED SysUniverseReplicationEntryPB_State = 4
	// Error while cleaning up state of deleted entry. This indicates that universe replication has
	// been deleted but there is still some uncleaned up state - for example, there may be left over
	// CDC streams.
	SysUniverseReplicationEntryPB_DELETED_ERROR SysUniverseReplicationEntryPB_State = 5
)

// Enum value maps for SysUniverseReplicationEntryPB_State.
var (
	SysUniverseReplicationEntryPB_State_name = map[int32]string{
		0: "INITIALIZING",
		1: "VALIDATED",
		2: "ACTIVE",
		3: "FAILED",
		6: "DISABLED",
		4: "DELETED",
		5: "DELETED_ERROR",
	}
	SysUniverseReplicationEntryPB_State_value = map[string]int32{
		"INITIALIZING":  0,
		"VALIDATED":     1,
		"ACTIVE":        2,
		"FAILED":        3,
		"DISABLED":      6,
		"DELETED":       4,
		"DELETED_ERROR": 5,
	}
)

func (x SysUniverseReplicationEntryPB_State) Enum() *SysUniverseReplicationEntryPB_State {
	p := new(SysUniverseReplicationEntryPB_State)
	*p = x
	return p
}

func (x SysUniverseReplicationEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysUniverseReplicationEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[8].Descriptor()
}

func (SysUniverseReplicationEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[8]
}

func (x SysUniverseReplicationEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysUniverseReplicationEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysUniverseReplicationEntryPB_State(num)
	return nil
}

// Deprecated: Use SysUniverseReplicationEntryPB_State.Descriptor instead.
func (SysUniverseReplicationEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{18, 0}
}

type AlterTableRequestPB_StepType int32

const (
	AlterTableRequestPB_UNKNOWN       AlterTableRequestPB_StepType = 0
	AlterTableRequestPB_ADD_COLUMN    AlterTableRequestPB_StepType = 1
	AlterTableRequestPB_DROP_COLUMN   AlterTableRequestPB_StepType = 2
	AlterTableRequestPB_RENAME_COLUMN AlterTableRequestPB_StepType = 3
	// TODO(KUDU-861): this will subsume RENAME_COLUMN, but not yet implemented
	// on the master side.
	AlterTableRequestPB_ALTER_COLUMN AlterTableRequestPB_StepType = 4
)

// Enum value maps for AlterTableRequestPB_StepType.
var (
	AlterTableRequestPB_StepType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ADD_COLUMN",
		2: "DROP_COLUMN",
		3: "RENAME_COLUMN",
		4: "ALTER_COLUMN",
	}
	AlterTableRequestPB_StepType_value = map[string]int32{
		"UNKNOWN":       0,
		"ADD_COLUMN":    1,
		"DROP_COLUMN":   2,
		"RENAME_COLUMN": 3,
		"ALTER_COLUMN":  4,
	}
)

func (x AlterTableRequestPB_StepType) Enum() *AlterTableRequestPB_StepType {
	p := new(AlterTableRequestPB_StepType)
	*p = x
	return p
}

func (x AlterTableRequestPB_StepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlterTableRequestPB_StepType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_proto_enumTypes[9].Descriptor()
}

func (AlterTableRequestPB_StepType) Type() protoreflect.EnumType {
	return &file_yb_master_master_proto_enumTypes[9]
}

func (x AlterTableRequestPB_StepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AlterTableRequestPB_StepType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AlterTableRequestPB_StepType(num)
	return nil
}

// Deprecated: Use AlterTableRequestPB_StepType.Descriptor instead.
func (AlterTableRequestPB_StepType) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{74, 0}
}

// Master specific errors use this protobuf.
type MasterErrorPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code.
	Code *MasterErrorPB_Code `protobuf:"varint,1,req,name=code,enum=yb.master.MasterErrorPB_Code" json:"code,omitempty"`
	// The Status object for the error. This will include a textual
	// message that may be more useful to present in log messages, etc,
	// though its error code is less specific.
	Status *common.AppStatusPB `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
}

func (x *MasterErrorPB) Reset() {
	*x = MasterErrorPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterErrorPB) ProtoMessage() {}

func (x *MasterErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterErrorPB.ProtoReflect.Descriptor instead.
func (*MasterErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{0}
}

func (x *MasterErrorPB) GetCode() MasterErrorPB_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return MasterErrorPB_UNKNOWN_ERROR
}

func (x *MasterErrorPB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

// Common information sent with every request from the tablet server
// to the master.
type TSToMasterCommonPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instance of the tablet server sending the heartbeat.
	TsInstance *common.NodeInstancePB `protobuf:"bytes,1,req,name=ts_instance,json=tsInstance" json:"ts_instance,omitempty"`
}

func (x *TSToMasterCommonPB) Reset() {
	*x = TSToMasterCommonPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSToMasterCommonPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSToMasterCommonPB) ProtoMessage() {}

func (x *TSToMasterCommonPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSToMasterCommonPB.ProtoReflect.Descriptor instead.
func (*TSToMasterCommonPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{1}
}

func (x *TSToMasterCommonPB) GetTsInstance() *common.NodeInstancePB {
	if x != nil {
		return x.TsInstance
	}
	return nil
}

type NamespaceIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace ID to fetch info.
	Id []byte `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The namespace name to fetch info.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Database type.
	DatabaseType *common.YQLDatabase `protobuf:"varint,3,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
}

// Default values for NamespaceIdentifierPB fields.
const (
	Default_NamespaceIdentifierPB_DatabaseType = common.YQLDatabase_YQL_DATABASE_CQL
)

func (x *NamespaceIdentifierPB) Reset() {
	*x = NamespaceIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceIdentifierPB) ProtoMessage() {}

func (x *NamespaceIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceIdentifierPB.ProtoReflect.Descriptor instead.
func (*NamespaceIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{2}
}

func (x *NamespaceIdentifierPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamespaceIdentifierPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NamespaceIdentifierPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_NamespaceIdentifierPB_DatabaseType
}

type TableIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table ID to fetch info.
	TableId []byte `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// The table name to fetch info.
	TableName *string `protobuf:"bytes,2,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	// The table namespace (if empty - using default namespace).
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *TableIdentifierPB) Reset() {
	*x = TableIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIdentifierPB) ProtoMessage() {}

func (x *TableIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIdentifierPB.ProtoReflect.Descriptor instead.
func (*TableIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{3}
}

func (x *TableIdentifierPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TableIdentifierPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TableIdentifierPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type TablegroupIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tablegroup ID to fetch info.
	Id []byte `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The tablegroup name to fetch info.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The namespace that the tablegroup is in
	NamespaceId []byte `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
}

func (x *TablegroupIdentifierPB) Reset() {
	*x = TablegroupIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablegroupIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablegroupIdentifierPB) ProtoMessage() {}

func (x *TablegroupIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablegroupIdentifierPB.ProtoReflect.Descriptor instead.
func (*TablegroupIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{4}
}

func (x *TablegroupIdentifierPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TablegroupIdentifierPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TablegroupIdentifierPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

// This represents one instance of a placement constraint for a table. It is
// used to dictate what is the minimum number of expected replicas in a certain
// cloud/region/zone combo.
type PlacementBlockPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cloud, region and zone information for this placement block.
	CloudInfo *common.CloudInfoPB `protobuf:"bytes,1,opt,name=cloud_info,json=cloudInfo" json:"cloud_info,omitempty"`
	// The minimum number of replicas that should always be up in this placement.
	MinNumReplicas *int32 `protobuf:"varint,2,opt,name=min_num_replicas,json=minNumReplicas" json:"min_num_replicas,omitempty"`
}

func (x *PlacementBlockPB) Reset() {
	*x = PlacementBlockPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementBlockPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementBlockPB) ProtoMessage() {}

func (x *PlacementBlockPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementBlockPB.ProtoReflect.Descriptor instead.
func (*PlacementBlockPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{5}
}

func (x *PlacementBlockPB) GetCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

func (x *PlacementBlockPB) GetMinNumReplicas() int32 {
	if x != nil && x.MinNumReplicas != nil {
		return *x.MinNumReplicas
	}
	return 0
}

// This keeps track of the set of PlacementBlockPBs defining the placement
// requirements for a certain table. This is used both in the on-disk storage
// in SysCatalog, as well as in the actual table creation calls and in the
// schema returned to client queries.
//
// This is tightly coupled with the overall num_replicas for a certain table,
// as we want to both be able to specify requirements, per placement block, but
// also for the overall RF factor of the table.
type PlacementInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumReplicas     *int32              `protobuf:"varint,1,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty"`
	PlacementBlocks []*PlacementBlockPB `protobuf:"bytes,2,rep,name=placement_blocks,json=placementBlocks" json:"placement_blocks,omitempty"`
	PlacementUuid   []byte              `protobuf:"bytes,3,opt,name=placement_uuid,json=placementUuid" json:"placement_uuid,omitempty"`
}

func (x *PlacementInfoPB) Reset() {
	*x = PlacementInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementInfoPB) ProtoMessage() {}

func (x *PlacementInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementInfoPB.ProtoReflect.Descriptor instead.
func (*PlacementInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{6}
}

func (x *PlacementInfoPB) GetNumReplicas() int32 {
	if x != nil && x.NumReplicas != nil {
		return *x.NumReplicas
	}
	return 0
}

func (x *PlacementInfoPB) GetPlacementBlocks() []*PlacementBlockPB {
	if x != nil {
		return x.PlacementBlocks
	}
	return nil
}

func (x *PlacementInfoPB) GetPlacementUuid() []byte {
	if x != nil {
		return x.PlacementUuid
	}
	return nil
}

// Higher level structure to keep track of all types of replicas configured. This will have, at a
// minimum, the information about the replicas that are supposed to be active members of the raft
// configs, but can also include extra information, such as read only replicas.
type ReplicationInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveReplicas       *PlacementInfoPB      `protobuf:"bytes,1,opt,name=live_replicas,json=liveReplicas" json:"live_replicas,omitempty"`
	ReadReplicas       []*PlacementInfoPB    `protobuf:"bytes,2,rep,name=read_replicas,json=readReplicas" json:"read_replicas,omitempty"`
	AffinitizedLeaders []*common.CloudInfoPB `protobuf:"bytes,3,rep,name=affinitized_leaders,json=affinitizedLeaders" json:"affinitized_leaders,omitempty"`
}

func (x *ReplicationInfoPB) Reset() {
	*x = ReplicationInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationInfoPB) ProtoMessage() {}

func (x *ReplicationInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationInfoPB.ProtoReflect.Descriptor instead.
func (*ReplicationInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicationInfoPB) GetLiveReplicas() *PlacementInfoPB {
	if x != nil {
		return x.LiveReplicas
	}
	return nil
}

func (x *ReplicationInfoPB) GetReadReplicas() []*PlacementInfoPB {
	if x != nil {
		return x.ReadReplicas
	}
	return nil
}

func (x *ReplicationInfoPB) GetAffinitizedLeaders() []*common.CloudInfoPB {
	if x != nil {
		return x.AffinitizedLeaders
	}
	return nil
}

// This is used to mark servers in the load balancer that should be considered
// for immediate removal of load and also prevented from being assigned any
// new load.
type BlacklistPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []*common.HostPortPB `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// Fields to track the number of replicas/leaders in current set of tablets which have a
	// blacklist server/leader. Client should not set this. Set by server side when persisting
	// the blacklist load.
	InitialReplicaLoad *int32 `protobuf:"varint,2,opt,name=initial_replica_load,json=initialReplicaLoad" json:"initial_replica_load,omitempty"`
	InitialLeaderLoad  *int32 `protobuf:"varint,3,opt,name=initial_leader_load,json=initialLeaderLoad" json:"initial_leader_load,omitempty"`
}

func (x *BlacklistPB) Reset() {
	*x = BlacklistPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistPB) ProtoMessage() {}

func (x *BlacklistPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistPB.ProtoReflect.Descriptor instead.
func (*BlacklistPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{8}
}

func (x *BlacklistPB) GetHosts() []*common.HostPortPB {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *BlacklistPB) GetInitialReplicaLoad() int32 {
	if x != nil && x.InitialReplicaLoad != nil {
		return *x.InitialReplicaLoad
	}
	return 0
}

func (x *BlacklistPB) GetInitialLeaderLoad() int32 {
	if x != nil && x.InitialLeaderLoad != nil {
		return *x.InitialLeaderLoad
	}
	return 0
}

// The actual on disk abstract representation of a row in the sys catalog.
// This has to respect the fixed schema of the catalog. In case of changes to
// the schema, this proto must reflect them.
type SysRowEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of entry we are storing. Since the data is serialized, we cannot
	// just store it with
	// the data, as we are not able to read into the appropriate type.
	Type *SysRowEntry_Type `protobuf:"varint,1,opt,name=type,enum=yb.master.SysRowEntry_Type" json:"type,omitempty"`
	// The optional ID of the data that we are storing. This can be useful to only
	// read information
	// related to a single item, in the case of tables or tablets, for example.
	// This is optional.
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// This is the serialized format of the proto we store. This used to be of the "string" type, but
	// was giving warnings due to non-UTF8 data. This is safe, because "bytes" and "string" are
	// encoded the same way in Protobuf.
	// https://groups.google.com/forum/#!msg/protobuf/au6eQBkRT5s/Bhpctql7Q5sJ
	Data []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *SysRowEntry) Reset() {
	*x = SysRowEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRowEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRowEntry) ProtoMessage() {}

func (x *SysRowEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRowEntry.ProtoReflect.Descriptor instead.
func (*SysRowEntry) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{9}
}

func (x *SysRowEntry) GetType() SysRowEntry_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SysRowEntry_UNKNOWN
}

func (x *SysRowEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SysRowEntry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SysRowEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*SysRowEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *SysRowEntries) Reset() {
	*x = SysRowEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRowEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRowEntries) ProtoMessage() {}

func (x *SysRowEntries) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRowEntries.ProtoReflect.Descriptor instead.
func (*SysRowEntries) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{10}
}

func (x *SysRowEntries) GetEntries() []*SysRowEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tablets entries.
type SysTabletsEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DEPRECATED. Replaced by 'partition'.
	OBSOLETEStartKey []byte `protobuf:"bytes,1,opt,name=OBSOLETE_start_key,json=OBSOLETEStartKey" json:"OBSOLETE_start_key,omitempty"`
	OBSOLETEEndKey   []byte `protobuf:"bytes,2,opt,name=OBSOLETE_end_key,json=OBSOLETEEndKey" json:"OBSOLETE_end_key,omitempty"`
	// Tablet partition.
	Partition *common.PartitionPB `protobuf:"bytes,7,opt,name=partition" json:"partition,omitempty"`
	// The latest committed consensus configuration reported to the Master.
	CommittedConsensusState *common.ConsensusStatePB `protobuf:"bytes,3,opt,name=committed_consensus_state,json=committedConsensusState" json:"committed_consensus_state,omitempty"`
	// Debug state for the tablet.
	State    *SysTabletsEntryPB_State `protobuf:"varint,4,opt,name=state,enum=yb.master.SysTabletsEntryPB_State,def=999" json:"state,omitempty"`
	StateMsg []byte                   `protobuf:"bytes,5,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
	// The table id for the tablet.
	TableId []byte `protobuf:"bytes,6,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Table ids for all the tables on this tablet.
	TableIds [][]byte `protobuf:"bytes,8,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	// True if the tablet is colocated.
	Colocated *bool `protobuf:"varint,9,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// Replaced by the map below.
	DEPRECATEDBackfilledUntil []byte `protobuf:"bytes,10,opt,name=DEPRECATED_backfilled_until,json=DEPRECATEDBackfilledUntil" json:"DEPRECATED_backfilled_until,omitempty"`
	// For tablets that are results of splitting we set this to split parent split_depth + 1.
	SplitDepth          *uint64 `protobuf:"varint,11,opt,name=split_depth,json=splitDepth" json:"split_depth,omitempty"`
	SplitParentTabletId []byte  `protobuf:"bytes,13,opt,name=split_parent_tablet_id,json=splitParentTabletId" json:"split_parent_tablet_id,omitempty"`
	// If the tablet is in the backfilling state, this is used to keep track
	// of how far along backfill has completed.
	// Key corresponds to the table_id for the index table. Value is encoded as
	// the DocKey for the next row to be backfilled.
	BackfilledUntil map[string][]byte `protobuf:"bytes,12,rep,name=backfilled_until,json=backfilledUntil" json:"backfilled_until,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tablet IDs for this tablet split if they have been registered in master.
	SplitTabletIds [][]byte `protobuf:"bytes,14,rep,name=split_tablet_ids,json=splitTabletIds" json:"split_tablet_ids,omitempty"`
	Hidden         *bool    `protobuf:"varint,15,opt,name=hidden" json:"hidden,omitempty"`
}

// Default values for SysTabletsEntryPB fields.
const (
	Default_SysTabletsEntryPB_State     = SysTabletsEntryPB_UNKNOWN
	Default_SysTabletsEntryPB_Colocated = bool(false)
)

func (x *SysTabletsEntryPB) Reset() {
	*x = SysTabletsEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTabletsEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTabletsEntryPB) ProtoMessage() {}

func (x *SysTabletsEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTabletsEntryPB.ProtoReflect.Descriptor instead.
func (*SysTabletsEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{11}
}

func (x *SysTabletsEntryPB) GetOBSOLETEStartKey() []byte {
	if x != nil {
		return x.OBSOLETEStartKey
	}
	return nil
}

func (x *SysTabletsEntryPB) GetOBSOLETEEndKey() []byte {
	if x != nil {
		return x.OBSOLETEEndKey
	}
	return nil
}

func (x *SysTabletsEntryPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *SysTabletsEntryPB) GetCommittedConsensusState() *common.ConsensusStatePB {
	if x != nil {
		return x.CommittedConsensusState
	}
	return nil
}

func (x *SysTabletsEntryPB) GetState() SysTabletsEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysTabletsEntryPB_State
}

func (x *SysTabletsEntryPB) GetStateMsg() []byte {
	if x != nil {
		return x.StateMsg
	}
	return nil
}

func (x *SysTabletsEntryPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *SysTabletsEntryPB) GetTableIds() [][]byte {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *SysTabletsEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysTabletsEntryPB_Colocated
}

func (x *SysTabletsEntryPB) GetDEPRECATEDBackfilledUntil() []byte {
	if x != nil {
		return x.DEPRECATEDBackfilledUntil
	}
	return nil
}

func (x *SysTabletsEntryPB) GetSplitDepth() uint64 {
	if x != nil && x.SplitDepth != nil {
		return *x.SplitDepth
	}
	return 0
}

func (x *SysTabletsEntryPB) GetSplitParentTabletId() []byte {
	if x != nil {
		return x.SplitParentTabletId
	}
	return nil
}

func (x *SysTabletsEntryPB) GetBackfilledUntil() map[string][]byte {
	if x != nil {
		return x.BackfilledUntil
	}
	return nil
}

func (x *SysTabletsEntryPB) GetSplitTabletIds() [][]byte {
	if x != nil {
		return x.SplitTabletIds
	}
	return nil
}

func (x *SysTabletsEntryPB) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

type BackfillJobPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []*common.IndexInfoPB `protobuf:"bytes,1,rep,name=indexes" json:"indexes,omitempty"`
	// Index's TableId -> State for each index.
	BackfillState        map[string]BackfillJobPB_State `protobuf:"bytes,2,rep,name=backfill_state,json=backfillState" json:"backfill_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=yb.master.BackfillJobPB_State"`
	BackfillingTimestamp *uint64                        `protobuf:"varint,3,opt,name=backfilling_timestamp,json=backfillingTimestamp" json:"backfilling_timestamp,omitempty"`
}

func (x *BackfillJobPB) Reset() {
	*x = BackfillJobPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillJobPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillJobPB) ProtoMessage() {}

func (x *BackfillJobPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillJobPB.ProtoReflect.Descriptor instead.
func (*BackfillJobPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{12}
}

func (x *BackfillJobPB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *BackfillJobPB) GetBackfillState() map[string]BackfillJobPB_State {
	if x != nil {
		return x.BackfillState
	}
	return nil
}

func (x *BackfillJobPB) GetBackfillingTimestamp() uint64 {
	if x != nil && x.BackfillingTimestamp != nil {
		return *x.BackfillingTimestamp
	}
	return 0
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tables entries.
type SysTablesEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table name
	Name []byte `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Table type
	TableType *common.TableType `protobuf:"varint,10,opt,name=table_type,json=tableType,enum=yb.TableType,def=2" json:"table_type,omitempty"`
	// The table namespace ID.
	NamespaceId []byte `protobuf:"bytes,11,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	// The table namespace name.
	NamespaceName []byte `protobuf:"bytes,30,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	// sequence-id for the table metadata.
	// Used on tablet-report to avoid sending "alter-table" notifications.
	Version *uint32 `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	// Newest table schema (every TS will eventually have it).
	Schema *common.SchemaPB `protobuf:"bytes,3,req,name=schema" json:"schema,omitempty"`
	// Last table schema that is guaranteed to have reached every TS, though
	// not necessarily the newest schema.
	//
	// This is the schema provided to the user on client->GetSchema(tableName).
	FullyAppliedSchema *common.SchemaPB `protobuf:"bytes,4,opt,name=fully_applied_schema,json=fullyAppliedSchema" json:"fully_applied_schema,omitempty"`
	// The table's partitioning schema.
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,9,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	// The table's partitions version. Incremented each time partitions change.
	PartitionListVersion *uint32 `protobuf:"varint,28,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	// The next column ID to assign to newly added columns in this table.
	// This prevents column ID reuse.
	NextColumnId *int32 `protobuf:"varint,8,opt,name=next_column_id,json=nextColumnId" json:"next_column_id,omitempty"`
	// Replication information for this tablet.
	ReplicationInfo *ReplicationInfoPB `protobuf:"bytes,5,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	// Debug state for the table.
	State    *SysTablesEntryPB_State `protobuf:"varint,6,opt,name=state,enum=yb.master.SysTablesEntryPB_State,def=0" json:"state,omitempty"`
	StateMsg []byte                  `protobuf:"bytes,7,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
	// TODO(neil) OLDER INDEXes will always have the deprecated fields. To remove the old format, we
	// first need to come up with a way to convert existing catalog content to new format.
	// Secondary indexes of the table.
	Indexes []*common.IndexInfoPB `protobuf:"bytes,12,rep,name=indexes" json:"indexes,omitempty"`
	// For index table: [to be deprecated and replaced by "index_info"]
	IndexedTableId []byte `protobuf:"bytes,13,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`     // Indexed table id of this index.
	IsLocalIndex   *bool  `protobuf:"varint,14,opt,name=is_local_index,json=isLocalIndex,def=0" json:"is_local_index,omitempty"`    // Whether this is a local index.
	IsUniqueIndex  *bool  `protobuf:"varint,15,opt,name=is_unique_index,json=isUniqueIndex,def=0" json:"is_unique_index,omitempty"` // Whether this is a unique index.
	// For index table: information about this index.
	IndexInfo *common.IndexInfoPB `protobuf:"bytes,22,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// For Postgres:
	IsPgSharedTable           *bool                 `protobuf:"varint,16,opt,name=is_pg_shared_table,json=isPgSharedTable,def=0" json:"is_pg_shared_table,omitempty"` // Is this a shared table?
	WalRetentionSecs          *uint32               `protobuf:"varint,24,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	Colocated                 *bool                 `protobuf:"varint,25,opt,name=colocated,def=0" json:"colocated,omitempty"` // Is this a colocated table?
	FullyAppliedSchemaVersion *uint32               `protobuf:"varint,23,opt,name=fully_applied_schema_version,json=fullyAppliedSchemaVersion" json:"fully_applied_schema_version,omitempty"`
	FullyAppliedIndexes       []*common.IndexInfoPB `protobuf:"bytes,26,rep,name=fully_applied_indexes,json=fullyAppliedIndexes" json:"fully_applied_indexes,omitempty"`
	FullyAppliedIndexInfo     *common.IndexInfoPB   `protobuf:"bytes,27,opt,name=fully_applied_index_info,json=fullyAppliedIndexInfo" json:"fully_applied_index_info,omitempty"`
	// Optional: Table dependent upon transaction success (abort removes table). Used by YSQL.
	Transaction *common.TransactionMetadataPB `protobuf:"bytes,29,opt,name=transaction" json:"transaction,omitempty"`
	// During an alter table, which involves no schema change but only updating
	// a permission, is it sometimes acceptable for a client's request (which is
	// prepared with the current schema) to be accepted by a tserver which is
	// still running the previous version.
	// This is typically set during alters that are caused due to index
	// permissions being changed, when the table is backfilled.
	UpdatesOnlyIndexPermissions *bool `protobuf:"varint,31,opt,name=updates_only_index_permissions,json=updatesOnlyIndexPermissions,def=0" json:"updates_only_index_permissions,omitempty"`
	// Keeps track of in-progress backfill jobs.
	// As of Apr 2021, we only have at most one outstanding backfill job, but
	// this restriction may be removed later on. Hence repeated.
	BackfillJobs []*BackfillJobPB `protobuf:"bytes,32,rep,name=backfill_jobs,json=backfillJobs" json:"backfill_jobs,omitempty"`
}

// Default values for SysTablesEntryPB fields.
const (
	Default_SysTablesEntryPB_TableType                   = common.TableType_DEFAULT_TABLE_TYPE
	Default_SysTablesEntryPB_State                       = SysTablesEntryPB_UNKNOWN
	Default_SysTablesEntryPB_IsLocalIndex                = bool(false)
	Default_SysTablesEntryPB_IsUniqueIndex               = bool(false)
	Default_SysTablesEntryPB_IsPgSharedTable             = bool(false)
	Default_SysTablesEntryPB_Colocated                   = bool(false)
	Default_SysTablesEntryPB_UpdatesOnlyIndexPermissions = bool(false)
)

func (x *SysTablesEntryPB) Reset() {
	*x = SysTablesEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesEntryPB) ProtoMessage() {}

func (x *SysTablesEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesEntryPB.ProtoReflect.Descriptor instead.
func (*SysTablesEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{13}
}

func (x *SysTablesEntryPB) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SysTablesEntryPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return Default_SysTablesEntryPB_TableType
}

func (x *SysTablesEntryPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *SysTablesEntryPB) GetNamespaceName() []byte {
	if x != nil {
		return x.NamespaceName
	}
	return nil
}

func (x *SysTablesEntryPB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysTablesEntryPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SysTablesEntryPB) GetFullyAppliedSchema() *common.SchemaPB {
	if x != nil {
		return x.FullyAppliedSchema
	}
	return nil
}

func (x *SysTablesEntryPB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *SysTablesEntryPB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *SysTablesEntryPB) GetNextColumnId() int32 {
	if x != nil && x.NextColumnId != nil {
		return *x.NextColumnId
	}
	return 0
}

func (x *SysTablesEntryPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetState() SysTablesEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysTablesEntryPB_State
}

func (x *SysTablesEntryPB) GetStateMsg() []byte {
	if x != nil {
		return x.StateMsg
	}
	return nil
}

func (x *SysTablesEntryPB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *SysTablesEntryPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

func (x *SysTablesEntryPB) GetIsLocalIndex() bool {
	if x != nil && x.IsLocalIndex != nil {
		return *x.IsLocalIndex
	}
	return Default_SysTablesEntryPB_IsLocalIndex
}

func (x *SysTablesEntryPB) GetIsUniqueIndex() bool {
	if x != nil && x.IsUniqueIndex != nil {
		return *x.IsUniqueIndex
	}
	return Default_SysTablesEntryPB_IsUniqueIndex
}

func (x *SysTablesEntryPB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetIsPgSharedTable() bool {
	if x != nil && x.IsPgSharedTable != nil {
		return *x.IsPgSharedTable
	}
	return Default_SysTablesEntryPB_IsPgSharedTable
}

func (x *SysTablesEntryPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *SysTablesEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysTablesEntryPB_Colocated
}

func (x *SysTablesEntryPB) GetFullyAppliedSchemaVersion() uint32 {
	if x != nil && x.FullyAppliedSchemaVersion != nil {
		return *x.FullyAppliedSchemaVersion
	}
	return 0
}

func (x *SysTablesEntryPB) GetFullyAppliedIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.FullyAppliedIndexes
	}
	return nil
}

func (x *SysTablesEntryPB) GetFullyAppliedIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.FullyAppliedIndexInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SysTablesEntryPB) GetUpdatesOnlyIndexPermissions() bool {
	if x != nil && x.UpdatesOnlyIndexPermissions != nil {
		return *x.UpdatesOnlyIndexPermissions
	}
	return Default_SysTablesEntryPB_UpdatesOnlyIndexPermissions
}

func (x *SysTablesEntryPB) GetBackfillJobs() []*BackfillJobPB {
	if x != nil {
		return x.BackfillJobs
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for a namespace.
type SysNamespaceEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace name.
	Name []byte `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Namespace/Database type.
	DatabaseType *common.YQLDatabase `protobuf:"varint,2,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
	// For Postgres:
	NextPgOid *uint32 `protobuf:"varint,3,opt,name=next_pg_oid,json=nextPgOid" json:"next_pg_oid,omitempty"` // Next oid to assign.
	// True if the namespace is colocated.
	Colocated *bool `protobuf:"varint,4,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// Optional: Namespace dependent upon transaction success (abort removes NS). Used by YSQL.
	Transaction *common.TransactionMetadataPB `protobuf:"bytes,6,opt,name=transaction" json:"transaction,omitempty"`
	State       *SysNamespaceEntryPB_State    `protobuf:"varint,5,opt,name=state,enum=yb.master.SysNamespaceEntryPB_State,def=0" json:"state,omitempty"`
}

// Default values for SysNamespaceEntryPB fields.
const (
	Default_SysNamespaceEntryPB_DatabaseType = common.YQLDatabase_YQL_DATABASE_CQL
	Default_SysNamespaceEntryPB_Colocated    = bool(false)
	Default_SysNamespaceEntryPB_State        = SysNamespaceEntryPB_UNKNOWN
)

func (x *SysNamespaceEntryPB) Reset() {
	*x = SysNamespaceEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysNamespaceEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysNamespaceEntryPB) ProtoMessage() {}

func (x *SysNamespaceEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysNamespaceEntryPB.ProtoReflect.Descriptor instead.
func (*SysNamespaceEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{14}
}

func (x *SysNamespaceEntryPB) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SysNamespaceEntryPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_SysNamespaceEntryPB_DatabaseType
}

func (x *SysNamespaceEntryPB) GetNextPgOid() uint32 {
	if x != nil && x.NextPgOid != nil {
		return *x.NextPgOid
	}
	return 0
}

func (x *SysNamespaceEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysNamespaceEntryPB_Colocated
}

func (x *SysNamespaceEntryPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SysNamespaceEntryPB) GetState() SysNamespaceEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysNamespaceEntryPB_State
}

// The data part of a SysRowEntry in the sys.catalog table for a User Defined Type.
type SysUDTypeEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *string            `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	Name        *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FieldNames  []string           `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	FieldTypes  []*common.QLTypePB `protobuf:"bytes,4,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
}

func (x *SysUDTypeEntryPB) Reset() {
	*x = SysUDTypeEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysUDTypeEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUDTypeEntryPB) ProtoMessage() {}

func (x *SysUDTypeEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUDTypeEntryPB.ProtoReflect.Descriptor instead.
func (*SysUDTypeEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{15}
}

func (x *SysUDTypeEntryPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *SysUDTypeEntryPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SysUDTypeEntryPB) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *SysUDTypeEntryPB) GetFieldTypes() []*common.QLTypePB {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for Redis Config.
type SysRedisConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Args [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (x *SysRedisConfigEntryPB) Reset() {
	*x = SysRedisConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRedisConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRedisConfigEntryPB) ProtoMessage() {}

func (x *SysRedisConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRedisConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysRedisConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{16}
}

func (x *SysRedisConfigEntryPB) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SysRedisConfigEntryPB) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for a CDC stream.
type SysCDCStreamEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId *string                    `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Options []*CDCStreamOptionsPB      `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
	State   *SysCDCStreamEntryPB_State `protobuf:"varint,3,opt,name=state,enum=yb.master.SysCDCStreamEntryPB_State,def=0" json:"state,omitempty"`
}

// Default values for SysCDCStreamEntryPB fields.
const (
	Default_SysCDCStreamEntryPB_State = SysCDCStreamEntryPB_ACTIVE
)

func (x *SysCDCStreamEntryPB) Reset() {
	*x = SysCDCStreamEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCDCStreamEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCDCStreamEntryPB) ProtoMessage() {}

func (x *SysCDCStreamEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCDCStreamEntryPB.ProtoReflect.Descriptor instead.
func (*SysCDCStreamEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{17}
}

func (x *SysCDCStreamEntryPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *SysCDCStreamEntryPB) GetOptions() []*CDCStreamOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetState() SysCDCStreamEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysCDCStreamEntryPB_State
}

// The data part of a SysRowEntry in the sys.catalog table for a universe replication record.
type SysUniverseReplicationEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId              *string              `protobuf:"bytes,1,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	ProducerMasterAddresses []*common.HostPortPB `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	// producer table IDs.
	Tables []string                             `protobuf:"bytes,3,rep,name=tables" json:"tables,omitempty"`
	State  *SysUniverseReplicationEntryPB_State `protobuf:"varint,4,opt,name=state,enum=yb.master.SysUniverseReplicationEntryPB_State,def=0" json:"state,omitempty"`
	// producer table ID -> consumer table ID map.
	ValidatedTables map[string]string `protobuf:"bytes,5,rep,name=validated_tables,json=validatedTables" json:"validated_tables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// producer table ID -> producer CDC stream map.
	TableStreams map[string]string `protobuf:"bytes,6,rep,name=table_streams,json=tableStreams" json:"table_streams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

// Default values for SysUniverseReplicationEntryPB fields.
const (
	Default_SysUniverseReplicationEntryPB_State = SysUniverseReplicationEntryPB_INITIALIZING
)

func (x *SysUniverseReplicationEntryPB) Reset() {
	*x = SysUniverseReplicationEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysUniverseReplicationEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationEntryPB) ProtoMessage() {}

func (x *SysUniverseReplicationEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationEntryPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{18}
}

func (x *SysUniverseReplicationEntryPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *SysUniverseReplicationEntryPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetState() SysUniverseReplicationEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysUniverseReplicationEntryPB_State
}

func (x *SysUniverseReplicationEntryPB) GetValidatedTables() map[string]string {
	if x != nil {
		return x.ValidatedTables
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetTableStreams() map[string]string {
	if x != nil {
		return x.TableStreams
	}
	return nil
}

type ChangeEncryptionInfoRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionEnabled *bool   `protobuf:"varint,1,opt,name=encryption_enabled,json=encryptionEnabled" json:"encryption_enabled,omitempty"`
	KeyPath           *string `protobuf:"bytes,2,opt,name=key_path,json=keyPath" json:"key_path,omitempty"`
	VersionId         *string `protobuf:"bytes,3,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
	InMemory          *bool   `protobuf:"varint,4,opt,name=in_memory,json=inMemory" json:"in_memory,omitempty"`
}

func (x *ChangeEncryptionInfoRequestPB) Reset() {
	*x = ChangeEncryptionInfoRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEncryptionInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEncryptionInfoRequestPB) ProtoMessage() {}

func (x *ChangeEncryptionInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEncryptionInfoRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeEncryptionInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{19}
}

func (x *ChangeEncryptionInfoRequestPB) GetEncryptionEnabled() bool {
	if x != nil && x.EncryptionEnabled != nil {
		return *x.EncryptionEnabled
	}
	return false
}

func (x *ChangeEncryptionInfoRequestPB) GetKeyPath() string {
	if x != nil && x.KeyPath != nil {
		return *x.KeyPath
	}
	return ""
}

func (x *ChangeEncryptionInfoRequestPB) GetVersionId() string {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return ""
}

func (x *ChangeEncryptionInfoRequestPB) GetInMemory() bool {
	if x != nil && x.InMemory != nil {
		return *x.InMemory
	}
	return false
}

type ChangeEncryptionInfoResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *ChangeEncryptionInfoResponsePB) Reset() {
	*x = ChangeEncryptionInfoResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEncryptionInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEncryptionInfoResponsePB) ProtoMessage() {}

func (x *ChangeEncryptionInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEncryptionInfoResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeEncryptionInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{20}
}

func (x *ChangeEncryptionInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsEncryptionEnabledRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsEncryptionEnabledRequestPB) Reset() {
	*x = IsEncryptionEnabledRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEncryptionEnabledRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEncryptionEnabledRequestPB) ProtoMessage() {}

func (x *IsEncryptionEnabledRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEncryptionEnabledRequestPB.ProtoReflect.Descriptor instead.
func (*IsEncryptionEnabledRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{21}
}

type IsEncryptionEnabledResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionEnabled *bool          `protobuf:"varint,1,opt,name=encryption_enabled,json=encryptionEnabled" json:"encryption_enabled,omitempty"`
	KeyId             *string        `protobuf:"bytes,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	Error             *MasterErrorPB `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *IsEncryptionEnabledResponsePB) Reset() {
	*x = IsEncryptionEnabledResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsEncryptionEnabledResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsEncryptionEnabledResponsePB) ProtoMessage() {}

func (x *IsEncryptionEnabledResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsEncryptionEnabledResponsePB.ProtoReflect.Descriptor instead.
func (*IsEncryptionEnabledResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{22}
}

func (x *IsEncryptionEnabledResponsePB) GetEncryptionEnabled() bool {
	if x != nil && x.EncryptionEnabled != nil {
		return *x.EncryptionEnabled
	}
	return false
}

func (x *IsEncryptionEnabledResponsePB) GetKeyId() string {
	if x != nil && x.KeyId != nil {
		return *x.KeyId
	}
	return ""
}

func (x *IsEncryptionEnabledResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type EncryptionInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionEnabled          *bool   `protobuf:"varint,1,opt,name=encryption_enabled,json=encryptionEnabled" json:"encryption_enabled,omitempty"`
	UniverseKeyRegistryEncoded []byte  `protobuf:"bytes,2,opt,name=universe_key_registry_encoded,json=universeKeyRegistryEncoded" json:"universe_key_registry_encoded,omitempty"`
	KeyPath                    *string `protobuf:"bytes,3,opt,name=key_path,json=keyPath" json:"key_path,omitempty"`
	LatestVersionId            *string `protobuf:"bytes,4,opt,name=latest_version_id,json=latestVersionId" json:"latest_version_id,omitempty"`
	KeyInMemory                *bool   `protobuf:"varint,5,opt,name=key_in_memory,json=keyInMemory" json:"key_in_memory,omitempty"`
}

func (x *EncryptionInfoPB) Reset() {
	*x = EncryptionInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionInfoPB) ProtoMessage() {}

func (x *EncryptionInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionInfoPB.ProtoReflect.Descriptor instead.
func (*EncryptionInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{23}
}

func (x *EncryptionInfoPB) GetEncryptionEnabled() bool {
	if x != nil && x.EncryptionEnabled != nil {
		return *x.EncryptionEnabled
	}
	return false
}

func (x *EncryptionInfoPB) GetUniverseKeyRegistryEncoded() []byte {
	if x != nil {
		return x.UniverseKeyRegistryEncoded
	}
	return nil
}

func (x *EncryptionInfoPB) GetKeyPath() string {
	if x != nil && x.KeyPath != nil {
		return *x.KeyPath
	}
	return ""
}

func (x *EncryptionInfoPB) GetLatestVersionId() string {
	if x != nil && x.LatestVersionId != nil {
		return *x.LatestVersionId
	}
	return ""
}

func (x *EncryptionInfoPB) GetKeyInMemory() bool {
	if x != nil && x.KeyInMemory != nil {
		return *x.KeyInMemory
	}
	return false
}

type AddUniverseKeysRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniverseKeys *util.UniverseKeysPB `protobuf:"bytes,1,opt,name=universe_keys,json=universeKeys" json:"universe_keys,omitempty"`
}

func (x *AddUniverseKeysRequestPB) Reset() {
	*x = AddUniverseKeysRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUniverseKeysRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUniverseKeysRequestPB) ProtoMessage() {}

func (x *AddUniverseKeysRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUniverseKeysRequestPB.ProtoReflect.Descriptor instead.
func (*AddUniverseKeysRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{24}
}

func (x *AddUniverseKeysRequestPB) GetUniverseKeys() *util.UniverseKeysPB {
	if x != nil {
		return x.UniverseKeys
	}
	return nil
}

type AddUniverseKeysResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *AddUniverseKeysResponsePB) Reset() {
	*x = AddUniverseKeysResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUniverseKeysResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUniverseKeysResponsePB) ProtoMessage() {}

func (x *AddUniverseKeysResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUniverseKeysResponsePB.ProtoReflect.Descriptor instead.
func (*AddUniverseKeysResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{25}
}

func (x *AddUniverseKeysResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetUniverseKeyRegistryRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUniverseKeyRegistryRequestPB) Reset() {
	*x = GetUniverseKeyRegistryRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniverseKeyRegistryRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseKeyRegistryRequestPB) ProtoMessage() {}

func (x *GetUniverseKeyRegistryRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseKeyRegistryRequestPB.ProtoReflect.Descriptor instead.
func (*GetUniverseKeyRegistryRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{26}
}

type GetUniverseKeyRegistryResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *MasterErrorPB       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	UniverseKeys *util.UniverseKeysPB `protobuf:"bytes,2,opt,name=universe_keys,json=universeKeys" json:"universe_keys,omitempty"`
}

func (x *GetUniverseKeyRegistryResponsePB) Reset() {
	*x = GetUniverseKeyRegistryResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniverseKeyRegistryResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseKeyRegistryResponsePB) ProtoMessage() {}

func (x *GetUniverseKeyRegistryResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseKeyRegistryResponsePB.ProtoReflect.Descriptor instead.
func (*GetUniverseKeyRegistryResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{27}
}

func (x *GetUniverseKeyRegistryResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUniverseKeyRegistryResponsePB) GetUniverseKeys() *util.UniverseKeysPB {
	if x != nil {
		return x.UniverseKeys
	}
	return nil
}

type HasUniverseKeyInMemoryRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionId *string `protobuf:"bytes,1,opt,name=version_id,json=versionId" json:"version_id,omitempty"`
}

func (x *HasUniverseKeyInMemoryRequestPB) Reset() {
	*x = HasUniverseKeyInMemoryRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasUniverseKeyInMemoryRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasUniverseKeyInMemoryRequestPB) ProtoMessage() {}

func (x *HasUniverseKeyInMemoryRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasUniverseKeyInMemoryRequestPB.ProtoReflect.Descriptor instead.
func (*HasUniverseKeyInMemoryRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{28}
}

func (x *HasUniverseKeyInMemoryRequestPB) GetVersionId() string {
	if x != nil && x.VersionId != nil {
		return *x.VersionId
	}
	return ""
}

type HasUniverseKeyInMemoryResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasKey *bool          `protobuf:"varint,1,opt,name=has_key,json=hasKey" json:"has_key,omitempty"`
	Error  *MasterErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *HasUniverseKeyInMemoryResponsePB) Reset() {
	*x = HasUniverseKeyInMemoryResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasUniverseKeyInMemoryResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasUniverseKeyInMemoryResponsePB) ProtoMessage() {}

func (x *HasUniverseKeyInMemoryResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasUniverseKeyInMemoryResponsePB.ProtoReflect.Descriptor instead.
func (*HasUniverseKeyInMemoryResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{29}
}

func (x *HasUniverseKeyInMemoryResponsePB) GetHasKey() bool {
	if x != nil && x.HasKey != nil {
		return *x.HasKey
	}
	return false
}

func (x *HasUniverseKeyInMemoryResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// The on-disk entry in the sys.catalog table for configuration vinformation
// that are relevant to the entire cluster. This has a version entry that is
// used for ensuring that client read-modify-writes are valid.
type SysClusterConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          *int32                  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ClusterUuid      *string                 `protobuf:"bytes,4,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	ReplicationInfo  *ReplicationInfoPB      `protobuf:"bytes,2,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	ServerBlacklist  *BlacklistPB            `protobuf:"bytes,3,opt,name=server_blacklist,json=serverBlacklist" json:"server_blacklist,omitempty"`
	LeaderBlacklist  *BlacklistPB            `protobuf:"bytes,7,opt,name=leader_blacklist,json=leaderBlacklist" json:"leader_blacklist,omitempty"`
	EncryptionInfo   *EncryptionInfoPB       `protobuf:"bytes,5,opt,name=encryption_info,json=encryptionInfo" json:"encryption_info,omitempty"`
	ConsumerRegistry *cdc.ConsumerRegistryPB `protobuf:"bytes,6,opt,name=consumer_registry,json=consumerRegistry" json:"consumer_registry,omitempty"`
}

func (x *SysClusterConfigEntryPB) Reset() {
	*x = SysClusterConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysClusterConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysClusterConfigEntryPB) ProtoMessage() {}

func (x *SysClusterConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysClusterConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysClusterConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{30}
}

func (x *SysClusterConfigEntryPB) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysClusterConfigEntryPB) GetClusterUuid() string {
	if x != nil && x.ClusterUuid != nil {
		return *x.ClusterUuid
	}
	return ""
}

func (x *SysClusterConfigEntryPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetServerBlacklist() *BlacklistPB {
	if x != nil {
		return x.ServerBlacklist
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetLeaderBlacklist() *BlacklistPB {
	if x != nil {
		return x.LeaderBlacklist
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetEncryptionInfo() *EncryptionInfoPB {
	if x != nil {
		return x.EncryptionInfo
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetConsumerRegistry() *cdc.ConsumerRegistryPB {
	if x != nil {
		return x.ConsumerRegistry
	}
	return nil
}

type SysRoleEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role        []byte                   `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	CanLogin    *bool                    `protobuf:"varint,2,opt,name=can_login,json=canLogin" json:"can_login,omitempty"`
	IsSuperuser *bool                    `protobuf:"varint,3,opt,name=is_superuser,json=isSuperuser" json:"is_superuser,omitempty"`
	MemberOf    [][]byte                 `protobuf:"bytes,4,rep,name=member_of,json=memberOf" json:"member_of,omitempty"`
	SaltedHash  []byte                   `protobuf:"bytes,5,opt,name=salted_hash,json=saltedHash" json:"salted_hash,omitempty"`
	Resources   []*ResourcePermissionsPB `protobuf:"bytes,7,rep,name=resources" json:"resources,omitempty"`
}

func (x *SysRoleEntryPB) Reset() {
	*x = SysRoleEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRoleEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRoleEntryPB) ProtoMessage() {}

func (x *SysRoleEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRoleEntryPB.ProtoReflect.Descriptor instead.
func (*SysRoleEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{31}
}

func (x *SysRoleEntryPB) GetRole() []byte {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *SysRoleEntryPB) GetCanLogin() bool {
	if x != nil && x.CanLogin != nil {
		return *x.CanLogin
	}
	return false
}

func (x *SysRoleEntryPB) GetIsSuperuser() bool {
	if x != nil && x.IsSuperuser != nil {
		return *x.IsSuperuser
	}
	return false
}

func (x *SysRoleEntryPB) GetMemberOf() [][]byte {
	if x != nil {
		return x.MemberOf
	}
	return nil
}

func (x *SysRoleEntryPB) GetSaltedHash() []byte {
	if x != nil {
		return x.SaltedHash
	}
	return nil
}

func (x *SysRoleEntryPB) GetResources() []*ResourcePermissionsPB {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Cluster security configuration.
type SysSecurityConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roles configuration version. Every time a role gets created/deleted, or a permission gets
	// added/removed, we increase the version.
	RolesVersion *uint64 `protobuf:"varint,1,opt,name=roles_version,json=rolesVersion" json:"roles_version,omitempty"`
}

func (x *SysSecurityConfigEntryPB) Reset() {
	*x = SysSecurityConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysSecurityConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysSecurityConfigEntryPB) ProtoMessage() {}

func (x *SysSecurityConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysSecurityConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysSecurityConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{32}
}

func (x *SysSecurityConfigEntryPB) GetRolesVersion() uint64 {
	if x != nil && x.RolesVersion != nil {
		return *x.RolesVersion
	}
	return 0
}

// Metadata about the YSQL catalog (current only version).
type SysYSQLCatalogConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YSQL catalog version. Every time the catalog tables are changed (i.e. by DDL statements)
	// this version gets incremented.
	Version *uint64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// This is true if the master ran initdb and it finished, succesfully or not.
	InitdbDone *bool `protobuf:"varint,2,opt,name=initdb_done,json=initdbDone" json:"initdb_done,omitempty"`
	// If this is set, initdb has failed.
	InitdbError *string `protobuf:"bytes,5,opt,name=initdb_error,json=initdbError" json:"initdb_error,omitempty"`
	// true if transactional system catalogs have been enabled on this cluster. This means all
	// YSQL system catalog tables have been made transactional, both in their schema and in the tablet
	// metadata.
	TransactionalSysCatalogEnabled *bool `protobuf:"varint,6,opt,name=transactional_sys_catalog_enabled,json=transactionalSysCatalogEnabled" json:"transactional_sys_catalog_enabled,omitempty"`
}

func (x *SysYSQLCatalogConfigEntryPB) Reset() {
	*x = SysYSQLCatalogConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysYSQLCatalogConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysYSQLCatalogConfigEntryPB) ProtoMessage() {}

func (x *SysYSQLCatalogConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysYSQLCatalogConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysYSQLCatalogConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{33}
}

func (x *SysYSQLCatalogConfigEntryPB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysYSQLCatalogConfigEntryPB) GetInitdbDone() bool {
	if x != nil && x.InitdbDone != nil {
		return *x.InitdbDone
	}
	return false
}

func (x *SysYSQLCatalogConfigEntryPB) GetInitdbError() string {
	if x != nil && x.InitdbError != nil {
		return *x.InitdbError
	}
	return ""
}

func (x *SysYSQLCatalogConfigEntryPB) GetTransactionalSysCatalogEnabled() bool {
	if x != nil && x.TransactionalSysCatalogEnabled != nil {
		return *x.TransactionalSysCatalogEnabled
	}
	return false
}

// Various cluster configuration.
type SysConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//	*SysConfigEntryPB_SecurityConfig
	//	*SysConfigEntryPB_YsqlCatalogConfig
	Config isSysConfigEntryPB_Config `protobuf_oneof:"config"`
}

func (x *SysConfigEntryPB) Reset() {
	*x = SysConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysConfigEntryPB) ProtoMessage() {}

func (x *SysConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{34}
}

func (m *SysConfigEntryPB) GetConfig() isSysConfigEntryPB_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *SysConfigEntryPB) GetSecurityConfig() *SysSecurityConfigEntryPB {
	if x, ok := x.GetConfig().(*SysConfigEntryPB_SecurityConfig); ok {
		return x.SecurityConfig
	}
	return nil
}

func (x *SysConfigEntryPB) GetYsqlCatalogConfig() *SysYSQLCatalogConfigEntryPB {
	if x, ok := x.GetConfig().(*SysConfigEntryPB_YsqlCatalogConfig); ok {
		return x.YsqlCatalogConfig
	}
	return nil
}

type isSysConfigEntryPB_Config interface {
	isSysConfigEntryPB_Config()
}

type SysConfigEntryPB_SecurityConfig struct {
	SecurityConfig *SysSecurityConfigEntryPB `protobuf:"bytes,1,opt,name=security_config,json=securityConfig,oneof"`
}

type SysConfigEntryPB_YsqlCatalogConfig struct {
	YsqlCatalogConfig *SysYSQLCatalogConfigEntryPB `protobuf:"bytes,2,opt,name=ysql_catalog_config,json=ysqlCatalogConfig,oneof"`
}

func (*SysConfigEntryPB_SecurityConfig) isSysConfigEntryPB_Config() {}

func (*SysConfigEntryPB_YsqlCatalogConfig) isSysConfigEntryPB_Config() {}

type ResourcePermissionsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName      *string                 `protobuf:"bytes,1,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	CanonicalResource *string                 `protobuf:"bytes,11,opt,name=canonical_resource,json=canonicalResource" json:"canonical_resource,omitempty"`
	NamespaceName     *string                 `protobuf:"bytes,12,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	ResourceType      *common.ResourceType    `protobuf:"varint,2,opt,name=resource_type,json=resourceType,enum=yb.ResourceType" json:"resource_type,omitempty"`
	Permissions       []common.PermissionType `protobuf:"varint,13,rep,name=permissions,enum=yb.PermissionType" json:"permissions,omitempty"`
}

func (x *ResourcePermissionsPB) Reset() {
	*x = ResourcePermissionsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePermissionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePermissionsPB) ProtoMessage() {}

func (x *ResourcePermissionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePermissionsPB.ProtoReflect.Descriptor instead.
func (*ResourcePermissionsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{35}
}

func (x *ResourcePermissionsPB) GetResourceName() string {
	if x != nil && x.ResourceName != nil {
		return *x.ResourceName
	}
	return ""
}

func (x *ResourcePermissionsPB) GetCanonicalResource() string {
	if x != nil && x.CanonicalResource != nil {
		return *x.CanonicalResource
	}
	return ""
}

func (x *ResourcePermissionsPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *ResourcePermissionsPB) GetResourceType() common.ResourceType {
	if x != nil && x.ResourceType != nil {
		return *x.ResourceType
	}
	return common.ResourceType_ALL_KEYSPACES
}

func (x *ResourcePermissionsPB) GetPermissions() []common.PermissionType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Sent by the TS when it first heartbeats with a master. This sends the
// master all of the necessary information about the current instance
// of the TS.
type TSRegistrationPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *common.ServerRegistrationPB `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	// Capabilities supported byt this TS.
	Capabilities []uint32 `protobuf:"fixed32,2,rep,name=capabilities" json:"capabilities,omitempty"`
}

func (x *TSRegistrationPB) Reset() {
	*x = TSRegistrationPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSRegistrationPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSRegistrationPB) ProtoMessage() {}

func (x *TSRegistrationPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSRegistrationPB.ProtoReflect.Descriptor instead.
func (*TSRegistrationPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{36}
}

func (x *TSRegistrationPB) GetCommon() *common.ServerRegistrationPB {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *TSRegistrationPB) GetCapabilities() []uint32 {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type ReportedTabletPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId        []byte                   `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	State           *common.RaftGroupStatePB `protobuf:"varint,2,opt,name=state,enum=yb.tablet.RaftGroupStatePB,def=999" json:"state,omitempty"`
	TabletDataState *common.TabletDataState  `protobuf:"varint,6,opt,name=tablet_data_state,json=tabletDataState,enum=yb.tablet.TabletDataState,def=999" json:"tablet_data_state,omitempty"`
	// The latest _committed_ consensus state.
	// This will be missing if the tablet is not in a RUNNING state
	// (i.e. if it is BOOTSTRAPPING).
	CommittedConsensusState *common.ConsensusStatePB `protobuf:"bytes,3,opt,name=committed_consensus_state,json=committedConsensusState" json:"committed_consensus_state,omitempty"`
	Error                   *common.AppStatusPB      `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	SchemaVersion           *uint32                  `protobuf:"varint,5,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	// Replica is reporting that load balancer moves should be disabled
	ShouldDisableLbMove *bool `protobuf:"varint,7,opt,name=should_disable_lb_move,json=shouldDisableLbMove" json:"should_disable_lb_move,omitempty"`
}

// Default values for ReportedTabletPB fields.
const (
	Default_ReportedTabletPB_State           = common.RaftGroupStatePB_UNKNOWN
	Default_ReportedTabletPB_TabletDataState = common.TabletDataState_TABLET_DATA_UNKNOWN
)

func (x *ReportedTabletPB) Reset() {
	*x = ReportedTabletPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportedTabletPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportedTabletPB) ProtoMessage() {}

func (x *ReportedTabletPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportedTabletPB.ProtoReflect.Descriptor instead.
func (*ReportedTabletPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{37}
}

func (x *ReportedTabletPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ReportedTabletPB) GetState() common.RaftGroupStatePB {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_ReportedTabletPB_State
}

func (x *ReportedTabletPB) GetTabletDataState() common.TabletDataState {
	if x != nil && x.TabletDataState != nil {
		return *x.TabletDataState
	}
	return Default_ReportedTabletPB_TabletDataState
}

func (x *ReportedTabletPB) GetCommittedConsensusState() *common.ConsensusStatePB {
	if x != nil {
		return x.CommittedConsensusState
	}
	return nil
}

func (x *ReportedTabletPB) GetError() *common.AppStatusPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReportedTabletPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *ReportedTabletPB) GetShouldDisableLbMove() bool {
	if x != nil && x.ShouldDisableLbMove != nil {
		return *x.ShouldDisableLbMove
	}
	return false
}

// Sent by the tablet server to report the set of tablets hosted by that TS.
type TabletReportPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If false, then this is a full report, and any prior information about
	// tablets hosted by this server should be dropped.
	IsIncremental *bool `protobuf:"varint,1,req,name=is_incremental,json=isIncremental" json:"is_incremental,omitempty"`
	// Tablets for which to update information. If 'is_incremental' is false,
	// then this is the full set of tablets on the server, and any tablets
	// which the master is aware of but not listed in this protobuf should
	// be assumed to have been removed from this server.
	UpdatedTablets []*ReportedTabletPB `protobuf:"bytes,2,rep,name=updated_tablets,json=updatedTablets" json:"updated_tablets,omitempty"`
	// Tablet IDs which the tablet server has removed and should no longer be
	// considered hosted here. This will always be empty in a non-incremental
	// report.
	RemovedTabletIds [][]byte `protobuf:"bytes,3,rep,name=removed_tablet_ids,json=removedTabletIds" json:"removed_tablet_ids,omitempty"`
	// Every time the TS generates a tablet report, it creates a sequence
	// number. This can be useful in debugging, and also determining which
	// changes have not yet been reported to the master.
	// The first tablet report (non-incremental) is sequence number 0.
	SequenceNumber *int32 `protobuf:"varint,4,req,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// Number of tablets that could not be included in this heartbeat.
	// If 0, then all tablets have been reported to the master.
	RemainingTabletCount *int32 `protobuf:"varint,5,opt,name=remaining_tablet_count,json=remainingTabletCount" json:"remaining_tablet_count,omitempty"`
}

func (x *TabletReportPB) Reset() {
	*x = TabletReportPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletReportPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletReportPB) ProtoMessage() {}

func (x *TabletReportPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletReportPB.ProtoReflect.Descriptor instead.
func (*TabletReportPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{38}
}

func (x *TabletReportPB) GetIsIncremental() bool {
	if x != nil && x.IsIncremental != nil {
		return *x.IsIncremental
	}
	return false
}

func (x *TabletReportPB) GetUpdatedTablets() []*ReportedTabletPB {
	if x != nil {
		return x.UpdatedTablets
	}
	return nil
}

func (x *TabletReportPB) GetRemovedTabletIds() [][]byte {
	if x != nil {
		return x.RemovedTabletIds
	}
	return nil
}

func (x *TabletReportPB) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *TabletReportPB) GetRemainingTabletCount() int32 {
	if x != nil && x.RemainingTabletCount != nil {
		return *x.RemainingTabletCount
	}
	return 0
}

type ReportedTabletUpdatesPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte  `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	StateMsg *string `protobuf:"bytes,2,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
}

func (x *ReportedTabletUpdatesPB) Reset() {
	*x = ReportedTabletUpdatesPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportedTabletUpdatesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportedTabletUpdatesPB) ProtoMessage() {}

func (x *ReportedTabletUpdatesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportedTabletUpdatesPB.ProtoReflect.Descriptor instead.
func (*ReportedTabletUpdatesPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{39}
}

func (x *ReportedTabletUpdatesPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ReportedTabletUpdatesPB) GetStateMsg() string {
	if x != nil && x.StateMsg != nil {
		return *x.StateMsg
	}
	return ""
}

// Sent by the Master in response to the TS tablet report (part of the heartbeats)
type TabletReportUpdatesPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablets []*ReportedTabletUpdatesPB `protobuf:"bytes,1,rep,name=tablets" json:"tablets,omitempty"`
	// Returns true if the tablet report had to be truncated because master ran out of time.
	ProcessingTruncated *bool `protobuf:"varint,2,opt,name=processing_truncated,json=processingTruncated,def=0" json:"processing_truncated,omitempty"`
}

// Default values for TabletReportUpdatesPB fields.
const (
	Default_TabletReportUpdatesPB_ProcessingTruncated = bool(false)
)

func (x *TabletReportUpdatesPB) Reset() {
	*x = TabletReportUpdatesPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletReportUpdatesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletReportUpdatesPB) ProtoMessage() {}

func (x *TabletReportUpdatesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletReportUpdatesPB.ProtoReflect.Descriptor instead.
func (*TabletReportUpdatesPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{40}
}

func (x *TabletReportUpdatesPB) GetTablets() []*ReportedTabletUpdatesPB {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *TabletReportUpdatesPB) GetProcessingTruncated() bool {
	if x != nil && x.ProcessingTruncated != nil {
		return *x.ProcessingTruncated
	}
	return Default_TabletReportUpdatesPB_ProcessingTruncated
}

type TServerMetricsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSstFileSize        *int64                          `protobuf:"varint,1,opt,name=total_sst_file_size,json=totalSstFileSize" json:"total_sst_file_size,omitempty"`
	TotalRamUsage           *int64                          `protobuf:"varint,2,opt,name=total_ram_usage,json=totalRamUsage" json:"total_ram_usage,omitempty"`
	ReadOpsPerSec           *float64                        `protobuf:"fixed64,3,opt,name=read_ops_per_sec,json=readOpsPerSec" json:"read_ops_per_sec,omitempty"`
	WriteOpsPerSec          *float64                        `protobuf:"fixed64,4,opt,name=write_ops_per_sec,json=writeOpsPerSec" json:"write_ops_per_sec,omitempty"`
	UncompressedSstFileSize *int64                          `protobuf:"varint,5,opt,name=uncompressed_sst_file_size,json=uncompressedSstFileSize" json:"uncompressed_sst_file_size,omitempty"`
	UptimeSeconds           *uint64                         `protobuf:"varint,6,opt,name=uptime_seconds,json=uptimeSeconds" json:"uptime_seconds,omitempty"`
	NumSstFiles             *uint64                         `protobuf:"varint,7,opt,name=num_sst_files,json=numSstFiles" json:"num_sst_files,omitempty"`
	PathMetrics             []*TServerMetricsPB_PathMetrics `protobuf:"bytes,8,rep,name=path_metrics,json=pathMetrics" json:"path_metrics,omitempty"`
}

func (x *TServerMetricsPB) Reset() {
	*x = TServerMetricsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerMetricsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerMetricsPB) ProtoMessage() {}

func (x *TServerMetricsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerMetricsPB.ProtoReflect.Descriptor instead.
func (*TServerMetricsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{41}
}

func (x *TServerMetricsPB) GetTotalSstFileSize() int64 {
	if x != nil && x.TotalSstFileSize != nil {
		return *x.TotalSstFileSize
	}
	return 0
}

func (x *TServerMetricsPB) GetTotalRamUsage() int64 {
	if x != nil && x.TotalRamUsage != nil {
		return *x.TotalRamUsage
	}
	return 0
}

func (x *TServerMetricsPB) GetReadOpsPerSec() float64 {
	if x != nil && x.ReadOpsPerSec != nil {
		return *x.ReadOpsPerSec
	}
	return 0
}

func (x *TServerMetricsPB) GetWriteOpsPerSec() float64 {
	if x != nil && x.WriteOpsPerSec != nil {
		return *x.WriteOpsPerSec
	}
	return 0
}

func (x *TServerMetricsPB) GetUncompressedSstFileSize() int64 {
	if x != nil && x.UncompressedSstFileSize != nil {
		return *x.UncompressedSstFileSize
	}
	return 0
}

func (x *TServerMetricsPB) GetUptimeSeconds() uint64 {
	if x != nil && x.UptimeSeconds != nil {
		return *x.UptimeSeconds
	}
	return 0
}

func (x *TServerMetricsPB) GetNumSstFiles() uint64 {
	if x != nil && x.NumSstFiles != nil {
		return *x.NumSstFiles
	}
	return 0
}

func (x *TServerMetricsPB) GetPathMetrics() []*TServerMetricsPB_PathMetrics {
	if x != nil {
		return x.PathMetrics
	}
	return nil
}

type TabletForSplitPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId          []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SplitPartitionKey []byte `protobuf:"bytes,2,req,name=split_partition_key,json=splitPartitionKey" json:"split_partition_key,omitempty"`
	SplitEncodedKey   []byte `protobuf:"bytes,3,req,name=split_encoded_key,json=splitEncodedKey" json:"split_encoded_key,omitempty"`
}

func (x *TabletForSplitPB) Reset() {
	*x = TabletForSplitPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletForSplitPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletForSplitPB) ProtoMessage() {}

func (x *TabletForSplitPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletForSplitPB.ProtoReflect.Descriptor instead.
func (*TabletForSplitPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{42}
}

func (x *TabletForSplitPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletForSplitPB) GetSplitPartitionKey() []byte {
	if x != nil {
		return x.SplitPartitionKey
	}
	return nil
}

func (x *TabletForSplitPB) GetSplitEncodedKey() []byte {
	if x != nil {
		return x.SplitEncodedKey
	}
	return nil
}

type ListTabletsOnPathPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathId []byte                              `protobuf:"bytes,1,req,name=path_id,json=pathId" json:"path_id,omitempty"`
	Tablet []*ListTabletsOnPathPB_TabletOnPath `protobuf:"bytes,2,rep,name=tablet" json:"tablet,omitempty"`
}

func (x *ListTabletsOnPathPB) Reset() {
	*x = ListTabletsOnPathPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletsOnPathPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsOnPathPB) ProtoMessage() {}

func (x *ListTabletsOnPathPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsOnPathPB.ProtoReflect.Descriptor instead.
func (*ListTabletsOnPathPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{43}
}

func (x *ListTabletsOnPathPB) GetPathId() []byte {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *ListTabletsOnPathPB) GetTablet() []*ListTabletsOnPathPB_TabletOnPath {
	if x != nil {
		return x.Tablet
	}
	return nil
}

type TabletPathInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListPath []*ListTabletsOnPathPB `protobuf:"bytes,1,rep,name=list_path,json=listPath" json:"list_path,omitempty"`
}

func (x *TabletPathInfoPB) Reset() {
	*x = TabletPathInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletPathInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletPathInfoPB) ProtoMessage() {}

func (x *TabletPathInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletPathInfoPB.ProtoReflect.Descriptor instead.
func (*TabletPathInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{44}
}

func (x *TabletPathInfoPB) GetListPath() []*ListTabletsOnPathPB {
	if x != nil {
		return x.ListPath
	}
	return nil
}

type TSSnapshotScheduleInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     []byte  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	LastSnapshotHybridTime *uint64 `protobuf:"fixed64,2,opt,name=last_snapshot_hybrid_time,json=lastSnapshotHybridTime" json:"last_snapshot_hybrid_time,omitempty"`
}

func (x *TSSnapshotScheduleInfoPB) Reset() {
	*x = TSSnapshotScheduleInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSnapshotScheduleInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSnapshotScheduleInfoPB) ProtoMessage() {}

func (x *TSSnapshotScheduleInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSSnapshotScheduleInfoPB.ProtoReflect.Descriptor instead.
func (*TSSnapshotScheduleInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{45}
}

func (x *TSSnapshotScheduleInfoPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TSSnapshotScheduleInfoPB) GetLastSnapshotHybridTime() uint64 {
	if x != nil && x.LastSnapshotHybridTime != nil {
		return *x.LastSnapshotHybridTime
	}
	return 0
}

type TSSnapshotSchedulesInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules []*TSSnapshotScheduleInfoPB `protobuf:"bytes,1,rep,name=schedules" json:"schedules,omitempty"`
}

func (x *TSSnapshotSchedulesInfoPB) Reset() {
	*x = TSSnapshotSchedulesInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSnapshotSchedulesInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSnapshotSchedulesInfoPB) ProtoMessage() {}

func (x *TSSnapshotSchedulesInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSSnapshotSchedulesInfoPB.ProtoReflect.Descriptor instead.
func (*TSSnapshotSchedulesInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{46}
}

func (x *TSSnapshotSchedulesInfoPB) GetSchedules() []*TSSnapshotScheduleInfoPB {
	if x != nil {
		return x.Schedules
	}
	return nil
}

// Heartbeat sent from the tablet-server to the master
// to establish liveness and report back any status changes.
type TSHeartbeatRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *TSToMasterCommonPB `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	// Sent upon start-up of the TS, or in response to 'needs_reregister' on a heartbeat
	// response.
	Registration *TSRegistrationPB `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	// Sent when the tablet information has changed, or in response to
	// 'needs_full_tablet_report'.
	TabletReport *TabletReportPB `protobuf:"bytes,3,opt,name=tablet_report,json=tabletReport" json:"tablet_report,omitempty"`
	// The number of tablets that are BOOTSTRAPPING or RUNNING.
	// Used by the master to determine load when creating new tablet replicas.
	NumLiveTablets *int32            `protobuf:"varint,4,opt,name=num_live_tablets,json=numLiveTablets" json:"num_live_tablets,omitempty"`
	ConfigIndex    *int32            `protobuf:"varint,5,opt,name=config_index,json=configIndex" json:"config_index,omitempty"`
	Metrics        *TServerMetricsPB `protobuf:"bytes,6,opt,name=metrics" json:"metrics,omitempty"`
	// Number of tablets for which this ts is a leader.
	LeaderCount          *int32 `protobuf:"varint,7,opt,name=leader_count,json=leaderCount" json:"leader_count,omitempty"`
	ClusterConfigVersion *int32 `protobuf:"varint,8,opt,name=cluster_config_version,json=clusterConfigVersion" json:"cluster_config_version,omitempty"`
	// List of candidate tablets for split based on tablet splitting strategy and settings.
	TabletsForSplit []*TabletForSplitPB `protobuf:"bytes,9,rep,name=tablets_for_split,json=tabletsForSplit" json:"tablets_for_split,omitempty"`
	// Physical time on tablet server
	TsPhysicalTime *uint64 `protobuf:"fixed64,10,opt,name=ts_physical_time,json=tsPhysicalTime" json:"ts_physical_time,omitempty"`
	// Hybrid time on tablet server
	TsHybridTime *uint64 `protobuf:"fixed64,11,opt,name=ts_hybrid_time,json=tsHybridTime" json:"ts_hybrid_time,omitempty"`
	// Roundtrip time for previous heartbeat in microseconds.
	RttUs          *int64            `protobuf:"varint,12,opt,name=rtt_us,json=rttUs" json:"rtt_us,omitempty"`
	TabletPathInfo *TabletPathInfoPB `protobuf:"bytes,13,opt,name=tablet_path_info,json=tabletPathInfo" json:"tablet_path_info,omitempty"`
}

func (x *TSHeartbeatRequestPB) Reset() {
	*x = TSHeartbeatRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSHeartbeatRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSHeartbeatRequestPB) ProtoMessage() {}

func (x *TSHeartbeatRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSHeartbeatRequestPB.ProtoReflect.Descriptor instead.
func (*TSHeartbeatRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{47}
}

func (x *TSHeartbeatRequestPB) GetCommon() *TSToMasterCommonPB {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetRegistration() *TSRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetTabletReport() *TabletReportPB {
	if x != nil {
		return x.TabletReport
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetNumLiveTablets() int32 {
	if x != nil && x.NumLiveTablets != nil {
		return *x.NumLiveTablets
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetConfigIndex() int32 {
	if x != nil && x.ConfigIndex != nil {
		return *x.ConfigIndex
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetMetrics() *TServerMetricsPB {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetLeaderCount() int32 {
	if x != nil && x.LeaderCount != nil {
		return *x.LeaderCount
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetClusterConfigVersion() int32 {
	if x != nil && x.ClusterConfigVersion != nil {
		return *x.ClusterConfigVersion
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetTabletsForSplit() []*TabletForSplitPB {
	if x != nil {
		return x.TabletsForSplit
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetTsPhysicalTime() uint64 {
	if x != nil && x.TsPhysicalTime != nil {
		return *x.TsPhysicalTime
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetTsHybridTime() uint64 {
	if x != nil && x.TsHybridTime != nil {
		return *x.TsHybridTime
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetRttUs() int64 {
	if x != nil && x.RttUs != nil {
		return *x.RttUs
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetTabletPathInfo() *TabletPathInfoPB {
	if x != nil {
		return x.TabletPathInfo
	}
	return nil
}

type TSHeartbeatResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error          *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MasterInstance *common.NodeInstancePB `protobuf:"bytes,2,opt,name=master_instance,json=masterInstance" json:"master_instance,omitempty"`
	// Indicates that the server which heartbeated needs to re-register
	// with the master -- i.e send a heartbeat with the 'registration'
	// filled in.
	NeedsReregister       *bool `protobuf:"varint,3,opt,name=needs_reregister,json=needsReregister,def=0" json:"needs_reregister,omitempty"`
	NeedsFullTabletReport *bool `protobuf:"varint,4,opt,name=needs_full_tablet_report,json=needsFullTabletReport,def=0" json:"needs_full_tablet_report,omitempty"`
	// Sent when the master receives a TabletReport
	TabletReport *TabletReportUpdatesPB `protobuf:"bytes,5,opt,name=tablet_report,json=tabletReport" json:"tablet_report,omitempty"`
	// Specify whether or not the node is the leader master.
	LeaderMaster *bool `protobuf:"varint,6,opt,name=leader_master,json=leaderMaster" json:"leader_master,omitempty"`
	// Piggyback the current config as known to the master leader.
	MasterConfig *common.RaftConfigPB `protobuf:"bytes,7,opt,name=master_config,json=masterConfig" json:"master_config,omitempty"`
	// List of all live nodes that the master knows about.
	Tservers []*TSInformationPB `protobuf:"bytes,8,rep,name=tservers" json:"tservers,omitempty"`
	// Cluster UUID. Sent by the master only after registration.
	ClusterUuid *string `protobuf:"bytes,9,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	// Current YSQL catalog schema version.
	// Used by tservers and postgres backends to decide if a cache refresh is needed.
	YsqlCatalogVersion             *uint64                     `protobuf:"varint,10,opt,name=ysql_catalog_version,json=ysqlCatalogVersion" json:"ysql_catalog_version,omitempty"`
	YsqlLastBreakingCatalogVersion *uint64                     `protobuf:"varint,15,opt,name=ysql_last_breaking_catalog_version,json=ysqlLastBreakingCatalogVersion" json:"ysql_last_breaking_catalog_version,omitempty"`
	UniverseKeyRegistry            *util.UniverseKeyRegistryPB `protobuf:"bytes,11,opt,name=universe_key_registry,json=universeKeyRegistry" json:"universe_key_registry,omitempty"`
	ConsumerRegistry               *cdc.ConsumerRegistryPB     `protobuf:"bytes,12,opt,name=consumer_registry,json=consumerRegistry" json:"consumer_registry,omitempty"`
	ClusterConfigVersion           *int32                      `protobuf:"varint,13,opt,name=cluster_config_version,json=clusterConfigVersion" json:"cluster_config_version,omitempty"`
	TabletSplitSizeThresholdBytes  *int64                      `protobuf:"varint,14,opt,name=tablet_split_size_threshold_bytes,json=tabletSplitSizeThresholdBytes" json:"tablet_split_size_threshold_bytes,omitempty"`
	TabletReportLimit              *int32                      `protobuf:"varint,16,opt,name=tablet_report_limit,json=tabletReportLimit" json:"tablet_report_limit,omitempty"`
	SnapshotSchedules              *TSSnapshotSchedulesInfoPB  `protobuf:"bytes,17,opt,name=snapshot_schedules,json=snapshotSchedules" json:"snapshot_schedules,omitempty"`
}

// Default values for TSHeartbeatResponsePB fields.
const (
	Default_TSHeartbeatResponsePB_NeedsReregister       = bool(false)
	Default_TSHeartbeatResponsePB_NeedsFullTabletReport = bool(false)
)

func (x *TSHeartbeatResponsePB) Reset() {
	*x = TSHeartbeatResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSHeartbeatResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSHeartbeatResponsePB) ProtoMessage() {}

func (x *TSHeartbeatResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSHeartbeatResponsePB.ProtoReflect.Descriptor instead.
func (*TSHeartbeatResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{48}
}

func (x *TSHeartbeatResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetMasterInstance() *common.NodeInstancePB {
	if x != nil {
		return x.MasterInstance
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetNeedsReregister() bool {
	if x != nil && x.NeedsReregister != nil {
		return *x.NeedsReregister
	}
	return Default_TSHeartbeatResponsePB_NeedsReregister
}

func (x *TSHeartbeatResponsePB) GetNeedsFullTabletReport() bool {
	if x != nil && x.NeedsFullTabletReport != nil {
		return *x.NeedsFullTabletReport
	}
	return Default_TSHeartbeatResponsePB_NeedsFullTabletReport
}

func (x *TSHeartbeatResponsePB) GetTabletReport() *TabletReportUpdatesPB {
	if x != nil {
		return x.TabletReport
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetLeaderMaster() bool {
	if x != nil && x.LeaderMaster != nil {
		return *x.LeaderMaster
	}
	return false
}

func (x *TSHeartbeatResponsePB) GetMasterConfig() *common.RaftConfigPB {
	if x != nil {
		return x.MasterConfig
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetTservers() []*TSInformationPB {
	if x != nil {
		return x.Tservers
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetClusterUuid() string {
	if x != nil && x.ClusterUuid != nil {
		return *x.ClusterUuid
	}
	return ""
}

func (x *TSHeartbeatResponsePB) GetYsqlCatalogVersion() uint64 {
	if x != nil && x.YsqlCatalogVersion != nil {
		return *x.YsqlCatalogVersion
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetYsqlLastBreakingCatalogVersion() uint64 {
	if x != nil && x.YsqlLastBreakingCatalogVersion != nil {
		return *x.YsqlLastBreakingCatalogVersion
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetUniverseKeyRegistry() *util.UniverseKeyRegistryPB {
	if x != nil {
		return x.UniverseKeyRegistry
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetConsumerRegistry() *cdc.ConsumerRegistryPB {
	if x != nil {
		return x.ConsumerRegistry
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetClusterConfigVersion() int32 {
	if x != nil && x.ClusterConfigVersion != nil {
		return *x.ClusterConfigVersion
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetTabletSplitSizeThresholdBytes() int64 {
	if x != nil && x.TabletSplitSizeThresholdBytes != nil {
		return *x.TabletSplitSizeThresholdBytes
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetTabletReportLimit() int32 {
	if x != nil && x.TabletReportLimit != nil {
		return *x.TabletReportLimit
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetSnapshotSchedules() *TSSnapshotSchedulesInfoPB {
	if x != nil {
		return x.SnapshotSchedules
	}
	return nil
}

type TSInformationPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registration    *TSRegistrationPB      `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	TserverInstance *common.NodeInstancePB `protobuf:"bytes,2,req,name=tserver_instance,json=tserverInstance" json:"tserver_instance,omitempty"`
}

func (x *TSInformationPB) Reset() {
	*x = TSInformationPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSInformationPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSInformationPB) ProtoMessage() {}

func (x *TSInformationPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSInformationPB.ProtoReflect.Descriptor instead.
func (*TSInformationPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{49}
}

func (x *TSInformationPB) GetRegistration() *TSRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *TSInformationPB) GetTserverInstance() *common.NodeInstancePB {
	if x != nil {
		return x.TserverInstance
	}
	return nil
}

type TabletLocationsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// DEPRECATED.
	StartKey  []byte                         `protobuf:"bytes,2,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	EndKey    []byte                         `protobuf:"bytes,3,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	Partition *common.PartitionPB            `protobuf:"bytes,6,opt,name=partition" json:"partition,omitempty"`
	Replicas  []*TabletLocationsPB_ReplicaPB `protobuf:"bytes,4,rep,name=replicas" json:"replicas,omitempty"`
	// true if the tablet was running but no tablet server has reported it yet.
	// The set of replicas will be the last one that was hosting the tablet.
	// This should happen on Master restart when the request is issued before
	// the TS has the time to notify the Master about the tablets that is hosting.
	Stale   *bool  `protobuf:"varint,5,req,name=stale" json:"stale,omitempty"`
	TableId []byte `protobuf:"bytes,7,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Table ids for all the tables on this tablet.
	TableIds [][]byte `protobuf:"bytes,8,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	// See SysTabletsEntryPB for fields with the same name.
	SplitDepth          *uint64  `protobuf:"varint,9,opt,name=split_depth,json=splitDepth" json:"split_depth,omitempty"`
	SplitParentTabletId []byte   `protobuf:"bytes,12,opt,name=split_parent_tablet_id,json=splitParentTabletId" json:"split_parent_tablet_id,omitempty"`
	SplitTabletIds      [][]byte `protobuf:"bytes,13,rep,name=split_tablet_ids,json=splitTabletIds" json:"split_tablet_ids,omitempty"`
	// Number of expected live replicas.
	ExpectedLiveReplicas *int32 `protobuf:"varint,10,opt,name=expected_live_replicas,json=expectedLiveReplicas" json:"expected_live_replicas,omitempty"`
	// Number of expected read replicas.
	ExpectedReadReplicas *int32 `protobuf:"varint,11,opt,name=expected_read_replicas,json=expectedReadReplicas" json:"expected_read_replicas,omitempty"`
}

func (x *TabletLocationsPB) Reset() {
	*x = TabletLocationsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletLocationsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletLocationsPB) ProtoMessage() {}

func (x *TabletLocationsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletLocationsPB.ProtoReflect.Descriptor instead.
func (*TabletLocationsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{50}
}

func (x *TabletLocationsPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletLocationsPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *TabletLocationsPB) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *TabletLocationsPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *TabletLocationsPB) GetReplicas() []*TabletLocationsPB_ReplicaPB {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *TabletLocationsPB) GetStale() bool {
	if x != nil && x.Stale != nil {
		return *x.Stale
	}
	return false
}

func (x *TabletLocationsPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TabletLocationsPB) GetTableIds() [][]byte {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *TabletLocationsPB) GetSplitDepth() uint64 {
	if x != nil && x.SplitDepth != nil {
		return *x.SplitDepth
	}
	return 0
}

func (x *TabletLocationsPB) GetSplitParentTabletId() []byte {
	if x != nil {
		return x.SplitParentTabletId
	}
	return nil
}

func (x *TabletLocationsPB) GetSplitTabletIds() [][]byte {
	if x != nil {
		return x.SplitTabletIds
	}
	return nil
}

func (x *TabletLocationsPB) GetExpectedLiveReplicas() int32 {
	if x != nil && x.ExpectedLiveReplicas != nil {
		return *x.ExpectedLiveReplicas
	}
	return 0
}

func (x *TabletLocationsPB) GetExpectedReadReplicas() int32 {
	if x != nil && x.ExpectedReadReplicas != nil {
		return *x.ExpectedReadReplicas
	}
	return 0
}

// Info about a single tablet server, returned to the client as part
// of the GetTabletLocations response. This can be used on the client
// to update the local cache of where each TS UUID is located. In
// the future we may also want to transmit software version info,
// load info, topology, etc.
type TSInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermanentUuid       []byte               `protobuf:"bytes,1,req,name=permanent_uuid,json=permanentUuid" json:"permanent_uuid,omitempty"`
	PrivateRpcAddresses []*common.HostPortPB `protobuf:"bytes,2,rep,name=private_rpc_addresses,json=privateRpcAddresses" json:"private_rpc_addresses,omitempty"`
	BroadcastAddresses  []*common.HostPortPB `protobuf:"bytes,5,rep,name=broadcast_addresses,json=broadcastAddresses" json:"broadcast_addresses,omitempty"`
	CloudInfo           *common.CloudInfoPB  `protobuf:"bytes,3,opt,name=cloud_info,json=cloudInfo" json:"cloud_info,omitempty"`
	PlacementUuid       []byte               `protobuf:"bytes,4,opt,name=placement_uuid,json=placementUuid" json:"placement_uuid,omitempty"`
	// Capabilities of tablet server.
	Capabilities []uint32 `protobuf:"fixed32,6,rep,name=capabilities" json:"capabilities,omitempty"`
}

func (x *TSInfoPB) Reset() {
	*x = TSInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSInfoPB) ProtoMessage() {}

func (x *TSInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSInfoPB.ProtoReflect.Descriptor instead.
func (*TSInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{51}
}

func (x *TSInfoPB) GetPermanentUuid() []byte {
	if x != nil {
		return x.PermanentUuid
	}
	return nil
}

func (x *TSInfoPB) GetPrivateRpcAddresses() []*common.HostPortPB {
	if x != nil {
		return x.PrivateRpcAddresses
	}
	return nil
}

func (x *TSInfoPB) GetBroadcastAddresses() []*common.HostPortPB {
	if x != nil {
		return x.BroadcastAddresses
	}
	return nil
}

func (x *TSInfoPB) GetCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

func (x *TSInfoPB) GetPlacementUuid() []byte {
	if x != nil {
		return x.PlacementUuid
	}
	return nil
}

func (x *TSInfoPB) GetCapabilities() []uint32 {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type GetTabletLocationsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tablet IDs about which to fetch info.
	TabletIds [][]byte `protobuf:"bytes,1,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"`
	// If table ID is specified, table's partition_list_version will be included into response.
	TableId []byte `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *GetTabletLocationsRequestPB) Reset() {
	*x = GetTabletLocationsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletLocationsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletLocationsRequestPB) ProtoMessage() {}

func (x *GetTabletLocationsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletLocationsRequestPB.ProtoReflect.Descriptor instead.
func (*GetTabletLocationsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{52}
}

func (x *GetTabletLocationsRequestPB) GetTabletIds() [][]byte {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

func (x *GetTabletLocationsRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type GetTabletLocationsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           *MasterErrorPB       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletLocations []*TabletLocationsPB `protobuf:"bytes,2,rep,name=tablet_locations,json=tabletLocations" json:"tablet_locations,omitempty"`
	// If GetTabletLocationsRequestPB::table_id is set we return table's partition_list_version for
	// this table (see SysTablesEntryPB::partition_list_version).
	PartitionListVersion *uint32                               `protobuf:"varint,4,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	Errors               []*GetTabletLocationsResponsePB_Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
}

func (x *GetTabletLocationsResponsePB) Reset() {
	*x = GetTabletLocationsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletLocationsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletLocationsResponsePB) ProtoMessage() {}

func (x *GetTabletLocationsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletLocationsResponsePB.ProtoReflect.Descriptor instead.
func (*GetTabletLocationsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{53}
}

func (x *GetTabletLocationsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTabletLocationsResponsePB) GetTabletLocations() []*TabletLocationsPB {
	if x != nil {
		return x.TabletLocations
	}
	return nil
}

func (x *GetTabletLocationsResponsePB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *GetTabletLocationsResponsePB) GetErrors() []*GetTabletLocationsResponsePB_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Create table request (including index table)
type CreateTableRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *string                   `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Schema          *common.SchemaPB          `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	NumTablets      *int32                    `protobuf:"varint,3,opt,name=num_tablets,json=numTablets" json:"num_tablets,omitempty"` // deprecated
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,5,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	ReplicationInfo *ReplicationInfoPB        `protobuf:"bytes,6,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	TableType       *common.TableType         `protobuf:"varint,7,opt,name=table_type,json=tableType,enum=yb.TableType,def=2" json:"table_type,omitempty"`
	Namespace       *NamespaceIdentifierPB    `protobuf:"bytes,8,opt,name=namespace" json:"namespace,omitempty"`
	// For index table.
	IndexInfo         *common.IndexInfoPB `protobuf:"bytes,16,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	IndexedTableId    []byte              `protobuf:"bytes,9,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`                  // Indexed table id of this index.
	IsLocalIndex      *bool               `protobuf:"varint,10,opt,name=is_local_index,json=isLocalIndex,def=0" json:"is_local_index,omitempty"`                // Is a local index?
	IsUniqueIndex     *bool               `protobuf:"varint,11,opt,name=is_unique_index,json=isUniqueIndex,def=0" json:"is_unique_index,omitempty"`             // Is a unique index?
	SkipIndexBackfill *bool               `protobuf:"varint,18,opt,name=skip_index_backfill,json=skipIndexBackfill,def=0" json:"skip_index_backfill,omitempty"` // Skip online schema migration for
	// index?
	IsBackfillDeferred *bool `protobuf:"varint,23,opt,name=is_backfill_deferred,json=isBackfillDeferred,def=0" json:"is_backfill_deferred,omitempty"` // Defer backfill for batching later?
	// For RBAC.
	CreatorRoleName *string `protobuf:"bytes,12,opt,name=creator_role_name,json=creatorRoleName" json:"creator_role_name,omitempty"`
	// For Postgres:
	TableId          []byte `protobuf:"bytes,13,opt,name=table_id,json=tableId" json:"table_id,omitempty"`                                       // id to assign to this table.
	IsPgCatalogTable *bool  `protobuf:"varint,14,opt,name=is_pg_catalog_table,json=isPgCatalogTable,def=0" json:"is_pg_catalog_table,omitempty"` // Is this a sys catalog table?
	IsPgSharedTable  *bool  `protobuf:"varint,15,opt,name=is_pg_shared_table,json=isPgSharedTable,def=0" json:"is_pg_shared_table,omitempty"`    // Is this a shared table?
	// Is this a colocated table? This field is only applicable for a colocated database.
	Colocated *bool `protobuf:"varint,17,opt,name=colocated,def=1" json:"colocated,omitempty"`
	// This is only applicable for tablegroups. Eventually colocated will be deprecated.
	TablegroupId []byte `protobuf:"bytes,19,opt,name=tablegroup_id,json=tablegroupId" json:"tablegroup_id,omitempty"`
	// DDL Dependent upon Transaction success (abort removes). Used by YSQL.
	Transaction *common.TransactionMetadataPB `protobuf:"bytes,20,opt,name=transaction" json:"transaction,omitempty"`
	// For YSQL tables, this denotes the tablespace that this table is associated with.
	TablespaceId []byte `protobuf:"bytes,21,opt,name=tablespace_id,json=tablespaceId" json:"tablespace_id,omitempty"`
	// This field should be used to create or restore table with a fixed set of partitions.
	Partitions []*common.PartitionPB `protobuf:"bytes,22,rep,name=partitions" json:"partitions,omitempty"`
}

// Default values for CreateTableRequestPB fields.
const (
	Default_CreateTableRequestPB_TableType          = common.TableType_DEFAULT_TABLE_TYPE
	Default_CreateTableRequestPB_IsLocalIndex       = bool(false)
	Default_CreateTableRequestPB_IsUniqueIndex      = bool(false)
	Default_CreateTableRequestPB_SkipIndexBackfill  = bool(false)
	Default_CreateTableRequestPB_IsBackfillDeferred = bool(false)
	Default_CreateTableRequestPB_IsPgCatalogTable   = bool(false)
	Default_CreateTableRequestPB_IsPgSharedTable    = bool(false)
	Default_CreateTableRequestPB_Colocated          = bool(true)
)

func (x *CreateTableRequestPB) Reset() {
	*x = CreateTableRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequestPB) ProtoMessage() {}

func (x *CreateTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequestPB.ProtoReflect.Descriptor instead.
func (*CreateTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{54}
}

func (x *CreateTableRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateTableRequestPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateTableRequestPB) GetNumTablets() int32 {
	if x != nil && x.NumTablets != nil {
		return *x.NumTablets
	}
	return 0
}

func (x *CreateTableRequestPB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *CreateTableRequestPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *CreateTableRequestPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return Default_CreateTableRequestPB_TableType
}

func (x *CreateTableRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *CreateTableRequestPB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *CreateTableRequestPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

func (x *CreateTableRequestPB) GetIsLocalIndex() bool {
	if x != nil && x.IsLocalIndex != nil {
		return *x.IsLocalIndex
	}
	return Default_CreateTableRequestPB_IsLocalIndex
}

func (x *CreateTableRequestPB) GetIsUniqueIndex() bool {
	if x != nil && x.IsUniqueIndex != nil {
		return *x.IsUniqueIndex
	}
	return Default_CreateTableRequestPB_IsUniqueIndex
}

func (x *CreateTableRequestPB) GetSkipIndexBackfill() bool {
	if x != nil && x.SkipIndexBackfill != nil {
		return *x.SkipIndexBackfill
	}
	return Default_CreateTableRequestPB_SkipIndexBackfill
}

func (x *CreateTableRequestPB) GetIsBackfillDeferred() bool {
	if x != nil && x.IsBackfillDeferred != nil {
		return *x.IsBackfillDeferred
	}
	return Default_CreateTableRequestPB_IsBackfillDeferred
}

func (x *CreateTableRequestPB) GetCreatorRoleName() string {
	if x != nil && x.CreatorRoleName != nil {
		return *x.CreatorRoleName
	}
	return ""
}

func (x *CreateTableRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CreateTableRequestPB) GetIsPgCatalogTable() bool {
	if x != nil && x.IsPgCatalogTable != nil {
		return *x.IsPgCatalogTable
	}
	return Default_CreateTableRequestPB_IsPgCatalogTable
}

func (x *CreateTableRequestPB) GetIsPgSharedTable() bool {
	if x != nil && x.IsPgSharedTable != nil {
		return *x.IsPgSharedTable
	}
	return Default_CreateTableRequestPB_IsPgSharedTable
}

func (x *CreateTableRequestPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_CreateTableRequestPB_Colocated
}

func (x *CreateTableRequestPB) GetTablegroupId() []byte {
	if x != nil {
		return x.TablegroupId
	}
	return nil
}

func (x *CreateTableRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *CreateTableRequestPB) GetTablespaceId() []byte {
	if x != nil {
		return x.TablespaceId
	}
	return nil
}

func (x *CreateTableRequestPB) GetPartitions() []*common.PartitionPB {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type CreateTableResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error   *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TableId []byte         `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *CreateTableResponsePB) Reset() {
	*x = CreateTableResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponsePB) ProtoMessage() {}

func (x *CreateTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponsePB.ProtoReflect.Descriptor instead.
func (*CreateTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{55}
}

func (x *CreateTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateTableResponsePB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type IsCreateTableDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *TableIdentifierPB `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
}

func (x *IsCreateTableDoneRequestPB) Reset() {
	*x = IsCreateTableDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCreateTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateTableDoneRequestPB) ProtoMessage() {}

func (x *IsCreateTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsCreateTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{56}
}

func (x *IsCreateTableDoneRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

type IsCreateTableDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the create operation is completed, false otherwise
	Done *bool `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
}

func (x *IsCreateTableDoneResponsePB) Reset() {
	*x = IsCreateTableDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCreateTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateTableDoneResponsePB) ProtoMessage() {}

func (x *IsCreateTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsCreateTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{57}
}

func (x *IsCreateTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsCreateTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type TruncateTableRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIds [][]byte `protobuf:"bytes,1,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
}

func (x *TruncateTableRequestPB) Reset() {
	*x = TruncateTableRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateTableRequestPB) ProtoMessage() {}

func (x *TruncateTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateTableRequestPB.ProtoReflect.Descriptor instead.
func (*TruncateTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{58}
}

func (x *TruncateTableRequestPB) GetTableIds() [][]byte {
	if x != nil {
		return x.TableIds
	}
	return nil
}

type TruncateTableResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *TruncateTableResponsePB) Reset() {
	*x = TruncateTableResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateTableResponsePB) ProtoMessage() {}

func (x *TruncateTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateTableResponsePB.ProtoReflect.Descriptor instead.
func (*TruncateTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{59}
}

func (x *TruncateTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsTruncateTableDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId []byte `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *IsTruncateTableDoneRequestPB) Reset() {
	*x = IsTruncateTableDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTruncateTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTruncateTableDoneRequestPB) ProtoMessage() {}

func (x *IsTruncateTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTruncateTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsTruncateTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{60}
}

func (x *IsTruncateTableDoneRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type IsTruncateTableDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the truncate operation is completed, false otherwise
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
}

func (x *IsTruncateTableDoneResponsePB) Reset() {
	*x = IsTruncateTableDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTruncateTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTruncateTableDoneResponsePB) ProtoMessage() {}

func (x *IsTruncateTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTruncateTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsTruncateTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{61}
}

func (x *IsTruncateTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsTruncateTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type BackfillIndexRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index to backfill. Used for YSQL
	IndexIdentifier *TableIdentifierPB `protobuf:"bytes,1,opt,name=index_identifier,json=indexIdentifier" json:"index_identifier,omitempty"`
}

func (x *BackfillIndexRequestPB) Reset() {
	*x = BackfillIndexRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillIndexRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexRequestPB) ProtoMessage() {}

func (x *BackfillIndexRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexRequestPB.ProtoReflect.Descriptor instead.
func (*BackfillIndexRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{62}
}

func (x *BackfillIndexRequestPB) GetIndexIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.IndexIdentifier
	}
	return nil
}

type BackfillIndexResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// The indexed table to backfill.
	TableIdentifier *TableIdentifierPB `protobuf:"bytes,2,opt,name=table_identifier,json=tableIdentifier" json:"table_identifier,omitempty"`
}

func (x *BackfillIndexResponsePB) Reset() {
	*x = BackfillIndexResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillIndexResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexResponsePB) ProtoMessage() {}

func (x *BackfillIndexResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexResponsePB.ProtoReflect.Descriptor instead.
func (*BackfillIndexResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{63}
}

func (x *BackfillIndexResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetTableIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

type LaunchBackfillIndexForTableRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The indexed table identifier. Used for YCQL tables from yb-admin.
	TableIdentifier *TableIdentifierPB `protobuf:"bytes,1,opt,name=table_identifier,json=tableIdentifier" json:"table_identifier,omitempty"`
}

func (x *LaunchBackfillIndexForTableRequestPB) Reset() {
	*x = LaunchBackfillIndexForTableRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchBackfillIndexForTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchBackfillIndexForTableRequestPB) ProtoMessage() {}

func (x *LaunchBackfillIndexForTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchBackfillIndexForTableRequestPB.ProtoReflect.Descriptor instead.
func (*LaunchBackfillIndexForTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{64}
}

func (x *LaunchBackfillIndexForTableRequestPB) GetTableIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

type LaunchBackfillIndexForTableResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *LaunchBackfillIndexForTableResponsePB) Reset() {
	*x = LaunchBackfillIndexForTableResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchBackfillIndexForTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchBackfillIndexForTableResponsePB) ProtoMessage() {}

func (x *LaunchBackfillIndexForTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchBackfillIndexForTableResponsePB.ProtoReflect.Descriptor instead.
func (*LaunchBackfillIndexForTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{65}
}

func (x *LaunchBackfillIndexForTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Delete table request (including index table).
type DeleteTableRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table        *TableIdentifierPB `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	IsIndexTable *bool              `protobuf:"varint,2,opt,name=is_index_table,json=isIndexTable,def=0" json:"is_index_table,omitempty"`
}

// Default values for DeleteTableRequestPB fields.
const (
	Default_DeleteTableRequestPB_IsIndexTable = bool(false)
)

func (x *DeleteTableRequestPB) Reset() {
	*x = DeleteTableRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequestPB) ProtoMessage() {}

func (x *DeleteTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteTableRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DeleteTableRequestPB) GetIsIndexTable() bool {
	if x != nil && x.IsIndexTable != nil {
		return *x.IsIndexTable
	}
	return Default_DeleteTableRequestPB_IsIndexTable
}

type DeleteTableResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error   *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TableId []byte         `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// For index table, the indexed table of this index.
	IndexedTable *TableIdentifierPB `protobuf:"bytes,3,opt,name=indexed_table,json=indexedTable" json:"indexed_table,omitempty"`
}

func (x *DeleteTableResponsePB) Reset() {
	*x = DeleteTableResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableResponsePB) ProtoMessage() {}

func (x *DeleteTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{67}
}

func (x *DeleteTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteTableResponsePB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *DeleteTableResponsePB) GetIndexedTable() *TableIdentifierPB {
	if x != nil {
		return x.IndexedTable
	}
	return nil
}

type IsDeleteTableDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId []byte `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *IsDeleteTableDoneRequestPB) Reset() {
	*x = IsDeleteTableDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeleteTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteTableDoneRequestPB) ProtoMessage() {}

func (x *IsDeleteTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsDeleteTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{68}
}

func (x *IsDeleteTableDoneRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type IsDeleteTableDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the delete operation is completed, false otherwise
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
}

func (x *IsDeleteTableDoneResponsePB) Reset() {
	*x = IsDeleteTableDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeleteTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteTableDoneResponsePB) ProtoMessage() {}

func (x *IsDeleteTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsDeleteTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{69}
}

func (x *IsDeleteTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsDeleteTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type ListTablesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When used, only returns tables that satisfy a substring match on name_filter.
	NameFilter *string `protobuf:"bytes,1,opt,name=name_filter,json=nameFilter" json:"name_filter,omitempty"`
	// Can be used to list tables for this one particular namespace.
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// Exclude system tables.
	ExcludeSystemTables *bool `protobuf:"varint,3,opt,name=exclude_system_tables,json=excludeSystemTables,def=0" json:"exclude_system_tables,omitempty"`
	// Can be used to filter tables based on RelationType
	RelationTypeFilter []RelationType `protobuf:"varint,4,rep,name=relation_type_filter,json=relationTypeFilter,enum=yb.master.RelationType" json:"relation_type_filter,omitempty"`
}

// Default values for ListTablesRequestPB fields.
const (
	Default_ListTablesRequestPB_ExcludeSystemTables = bool(false)
)

func (x *ListTablesRequestPB) Reset() {
	*x = ListTablesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequestPB) ProtoMessage() {}

func (x *ListTablesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequestPB.ProtoReflect.Descriptor instead.
func (*ListTablesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{70}
}

func (x *ListTablesRequestPB) GetNameFilter() string {
	if x != nil && x.NameFilter != nil {
		return *x.NameFilter
	}
	return ""
}

func (x *ListTablesRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ListTablesRequestPB) GetExcludeSystemTables() bool {
	if x != nil && x.ExcludeSystemTables != nil {
		return *x.ExcludeSystemTables
	}
	return Default_ListTablesRequestPB_ExcludeSystemTables
}

func (x *ListTablesRequestPB) GetRelationTypeFilter() []RelationType {
	if x != nil {
		return x.RelationTypeFilter
	}
	return nil
}

type ListTablesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error  *MasterErrorPB                    `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Tables []*ListTablesResponsePB_TableInfo `protobuf:"bytes,2,rep,name=tables" json:"tables,omitempty"`
}

func (x *ListTablesResponsePB) Reset() {
	*x = ListTablesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponsePB) ProtoMessage() {}

func (x *ListTablesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponsePB.ProtoReflect.Descriptor instead.
func (*ListTablesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{71}
}

func (x *ListTablesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTablesResponsePB) GetTables() []*ListTablesResponsePB_TableInfo {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetTableLocationsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *TableIdentifierPB `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	// Partition-key range.
	PartitionKeyStart     []byte  `protobuf:"bytes,3,opt,name=partition_key_start,json=partitionKeyStart" json:"partition_key_start,omitempty"`
	PartitionKeyEnd       []byte  `protobuf:"bytes,4,opt,name=partition_key_end,json=partitionKeyEnd" json:"partition_key_end,omitempty"`
	MaxReturnedLocations  *uint32 `protobuf:"varint,5,opt,name=max_returned_locations,json=maxReturnedLocations,def=10" json:"max_returned_locations,omitempty"`
	RequireTabletsRunning *bool   `protobuf:"varint,6,opt,name=require_tablets_running,json=requireTabletsRunning" json:"require_tablets_running,omitempty"`
}

// Default values for GetTableLocationsRequestPB fields.
const (
	Default_GetTableLocationsRequestPB_MaxReturnedLocations = uint32(10)
)

func (x *GetTableLocationsRequestPB) Reset() {
	*x = GetTableLocationsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableLocationsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableLocationsRequestPB) ProtoMessage() {}

func (x *GetTableLocationsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableLocationsRequestPB.ProtoReflect.Descriptor instead.
func (*GetTableLocationsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{72}
}

func (x *GetTableLocationsRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetTableLocationsRequestPB) GetPartitionKeyStart() []byte {
	if x != nil {
		return x.PartitionKeyStart
	}
	return nil
}

func (x *GetTableLocationsRequestPB) GetPartitionKeyEnd() []byte {
	if x != nil {
		return x.PartitionKeyEnd
	}
	return nil
}

func (x *GetTableLocationsRequestPB) GetMaxReturnedLocations() uint32 {
	if x != nil && x.MaxReturnedLocations != nil {
		return *x.MaxReturnedLocations
	}
	return Default_GetTableLocationsRequestPB_MaxReturnedLocations
}

func (x *GetTableLocationsRequestPB) GetRequireTabletsRunning() bool {
	if x != nil && x.RequireTabletsRunning != nil {
		return *x.RequireTabletsRunning
	}
	return false
}

type GetTableLocationsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error           *MasterErrorPB       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletLocations []*TabletLocationsPB `protobuf:"bytes,2,rep,name=tablet_locations,json=tabletLocations" json:"tablet_locations,omitempty"`
	TableType       *common.TableType    `protobuf:"varint,3,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	// See SysTablesEntryPB for field with the same name.
	PartitionListVersion *uint32 `protobuf:"varint,4,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	Creating             *bool   `protobuf:"varint,5,opt,name=creating" json:"creating,omitempty"`
}

func (x *GetTableLocationsResponsePB) Reset() {
	*x = GetTableLocationsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableLocationsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableLocationsResponsePB) ProtoMessage() {}

func (x *GetTableLocationsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableLocationsResponsePB.ProtoReflect.Descriptor instead.
func (*GetTableLocationsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{73}
}

func (x *GetTableLocationsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTableLocationsResponsePB) GetTabletLocations() []*TabletLocationsPB {
	if x != nil {
		return x.TabletLocations
	}
	return nil
}

func (x *GetTableLocationsResponsePB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType_YQL_TABLE_TYPE
}

func (x *GetTableLocationsResponsePB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *GetTableLocationsResponsePB) GetCreating() bool {
	if x != nil && x.Creating != nil {
		return *x.Creating
	}
	return false
}

type AlterTableRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table            *TableIdentifierPB          `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	AlterSchemaSteps []*AlterTableRequestPB_Step `protobuf:"bytes,2,rep,name=alter_schema_steps,json=alterSchemaSteps" json:"alter_schema_steps,omitempty"`
	NewTableName     *string                     `protobuf:"bytes,3,opt,name=new_table_name,json=newTableName" json:"new_table_name,omitempty"`
	NewNamespace     *NamespaceIdentifierPB      `protobuf:"bytes,4,opt,name=new_namespace,json=newNamespace" json:"new_namespace,omitempty"`
	AlterProperties  *common.TablePropertiesPB   `protobuf:"bytes,5,opt,name=alter_properties,json=alterProperties" json:"alter_properties,omitempty"`
	WalRetentionSecs *uint32                     `protobuf:"varint,6,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	// If set to true, SendAlterTableRequest will be sent even if no changes are specified in this
	// request.
	// This is useful to trigger index permissions update.
	ForceSendAlterRequest *bool `protobuf:"varint,7,opt,name=force_send_alter_request,json=forceSendAlterRequest,def=0" json:"force_send_alter_request,omitempty"`
	// Replication information for this table.
	ReplicationInfo *ReplicationInfoPB `protobuf:"bytes,8,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
}

// Default values for AlterTableRequestPB fields.
const (
	Default_AlterTableRequestPB_ForceSendAlterRequest = bool(false)
)

func (x *AlterTableRequestPB) Reset() {
	*x = AlterTableRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB) ProtoMessage() {}

func (x *AlterTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{74}
}

func (x *AlterTableRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *AlterTableRequestPB) GetAlterSchemaSteps() []*AlterTableRequestPB_Step {
	if x != nil {
		return x.AlterSchemaSteps
	}
	return nil
}

func (x *AlterTableRequestPB) GetNewTableName() string {
	if x != nil && x.NewTableName != nil {
		return *x.NewTableName
	}
	return ""
}

func (x *AlterTableRequestPB) GetNewNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.NewNamespace
	}
	return nil
}

func (x *AlterTableRequestPB) GetAlterProperties() *common.TablePropertiesPB {
	if x != nil {
		return x.AlterProperties
	}
	return nil
}

func (x *AlterTableRequestPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *AlterTableRequestPB) GetForceSendAlterRequest() bool {
	if x != nil && x.ForceSendAlterRequest != nil {
		return *x.ForceSendAlterRequest
	}
	return Default_AlterTableRequestPB_ForceSendAlterRequest
}

func (x *AlterTableRequestPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

type AlterTableResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	SchemaVersion *uint32        `protobuf:"varint,2,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
}

func (x *AlterTableResponsePB) Reset() {
	*x = AlterTableResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableResponsePB) ProtoMessage() {}

func (x *AlterTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableResponsePB.ProtoReflect.Descriptor instead.
func (*AlterTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{75}
}

func (x *AlterTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AlterTableResponsePB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

type IsAlterTableDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *TableIdentifierPB `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
}

func (x *IsAlterTableDoneRequestPB) Reset() {
	*x = IsAlterTableDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAlterTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAlterTableDoneRequestPB) ProtoMessage() {}

func (x *IsAlterTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAlterTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsAlterTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{76}
}

func (x *IsAlterTableDoneRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

type IsAlterTableDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// this is the current schema, or the 'new' schema version if an alter is in progress
	SchemaVersion *uint32 `protobuf:"varint,2,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	// true if the alter operation is completed, false otherwise
	Done *bool `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
}

func (x *IsAlterTableDoneResponsePB) Reset() {
	*x = IsAlterTableDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsAlterTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAlterTableDoneResponsePB) ProtoMessage() {}

func (x *IsAlterTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAlterTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsAlterTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{77}
}

func (x *IsAlterTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsAlterTableDoneResponsePB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *IsAlterTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type GetTableSchemaRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *TableIdentifierPB `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
}

func (x *GetTableSchemaRequestPB) Reset() {
	*x = GetTableSchemaRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableSchemaRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableSchemaRequestPB) ProtoMessage() {}

func (x *GetTableSchemaRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableSchemaRequestPB.ProtoReflect.Descriptor instead.
func (*GetTableSchemaRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{78}
}

func (x *GetTableSchemaRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

type GetTableSchemaResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// This is the schema that every TS should be able to understand
	// if your alter is keeping the schema compatible.
	// In case of an alter table in progress, this is the previous schema;
	// otherwise it is the latest schema.
	Schema *common.SchemaPB `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	// Table schema version
	Version *uint32 `protobuf:"varint,9,opt,name=version" json:"version,omitempty"`
	// The table's partition schema.
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,5,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	ReplicationInfo *ReplicationInfoPB        `protobuf:"bytes,3,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	// True if the create operation is completed, false otherwise.
	CreateTableDone *bool `protobuf:"varint,6,opt,name=create_table_done,json=createTableDone" json:"create_table_done,omitempty"`
	// The table type.
	TableType *common.TableType `protobuf:"varint,7,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	// Table identifier
	Identifier *TableIdentifierPB `protobuf:"bytes,8,opt,name=identifier" json:"identifier,omitempty"`
	// Secondary indexes of the table.
	Indexes []*common.IndexInfoPB `protobuf:"bytes,10,rep,name=indexes" json:"indexes,omitempty"`
	// For index table: [to be deprecated and replaced by "index_info"]
	OBSOLETEIndexedTableId []byte `protobuf:"bytes,11,opt,name=OBSOLETE_indexed_table_id,json=OBSOLETEIndexedTableId" json:"OBSOLETE_indexed_table_id,omitempty"` // Indexed table id of this index.
	// For index table: information about this index.
	IndexInfo *common.IndexInfoPB `protobuf:"bytes,12,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// True if table is colocated.
	Colocated                       *bool `protobuf:"varint,13,opt,name=colocated" json:"colocated,omitempty"`
	IsCompatibleWithPreviousVersion *bool `protobuf:"varint,14,opt,name=is_compatible_with_previous_version,json=isCompatibleWithPreviousVersion,def=0" json:"is_compatible_with_previous_version,omitempty"`
}

// Default values for GetTableSchemaResponsePB fields.
const (
	Default_GetTableSchemaResponsePB_IsCompatibleWithPreviousVersion = bool(false)
)

func (x *GetTableSchemaResponsePB) Reset() {
	*x = GetTableSchemaResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableSchemaResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableSchemaResponsePB) ProtoMessage() {}

func (x *GetTableSchemaResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableSchemaResponsePB.ProtoReflect.Descriptor instead.
func (*GetTableSchemaResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{79}
}

func (x *GetTableSchemaResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *GetTableSchemaResponsePB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetCreateTableDone() bool {
	if x != nil && x.CreateTableDone != nil {
		return *x.CreateTableDone
	}
	return false
}

func (x *GetTableSchemaResponsePB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType_YQL_TABLE_TYPE
}

func (x *GetTableSchemaResponsePB) GetIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetOBSOLETEIndexedTableId() []byte {
	if x != nil {
		return x.OBSOLETEIndexedTableId
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return false
}

func (x *GetTableSchemaResponsePB) GetIsCompatibleWithPreviousVersion() bool {
	if x != nil && x.IsCompatibleWithPreviousVersion != nil {
		return *x.IsCompatibleWithPreviousVersion
	}
	return Default_GetTableSchemaResponsePB_IsCompatibleWithPreviousVersion
}

type GetColocatedTabletSchemaRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentColocatedTable *TableIdentifierPB `protobuf:"bytes,1,req,name=parent_colocated_table,json=parentColocatedTable" json:"parent_colocated_table,omitempty"`
}

func (x *GetColocatedTabletSchemaRequestPB) Reset() {
	*x = GetColocatedTabletSchemaRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetColocatedTabletSchemaRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColocatedTabletSchemaRequestPB) ProtoMessage() {}

func (x *GetColocatedTabletSchemaRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColocatedTabletSchemaRequestPB.ProtoReflect.Descriptor instead.
func (*GetColocatedTabletSchemaRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{80}
}

func (x *GetColocatedTabletSchemaRequestPB) GetParentColocatedTable() *TableIdentifierPB {
	if x != nil {
		return x.ParentColocatedTable
	}
	return nil
}

type GetColocatedTabletSchemaResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// List of all colocated user tables in this colocated database.
	GetTableSchemaResponsePbs []*GetTableSchemaResponsePB `protobuf:"bytes,2,rep,name=get_table_schema_response_pbs,json=getTableSchemaResponsePbs" json:"get_table_schema_response_pbs,omitempty"`
}

func (x *GetColocatedTabletSchemaResponsePB) Reset() {
	*x = GetColocatedTabletSchemaResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetColocatedTabletSchemaResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColocatedTabletSchemaResponsePB) ProtoMessage() {}

func (x *GetColocatedTabletSchemaResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColocatedTabletSchemaResponsePB.ProtoReflect.Descriptor instead.
func (*GetColocatedTabletSchemaResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{81}
}

func (x *GetColocatedTabletSchemaResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetColocatedTabletSchemaResponsePB) GetGetTableSchemaResponsePbs() []*GetTableSchemaResponsePB {
	if x != nil {
		return x.GetTableSchemaResponsePbs
	}
	return nil
}

type ListTabletServersRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true, return only the tservers which are in the primary/sync cluster.
	PrimaryOnly *bool `protobuf:"varint,1,opt,name=primary_only,json=primaryOnly,def=0" json:"primary_only,omitempty"`
}

// Default values for ListTabletServersRequestPB fields.
const (
	Default_ListTabletServersRequestPB_PrimaryOnly = bool(false)
)

func (x *ListTabletServersRequestPB) Reset() {
	*x = ListTabletServersRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletServersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletServersRequestPB) ProtoMessage() {}

func (x *ListTabletServersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletServersRequestPB.ProtoReflect.Descriptor instead.
func (*ListTabletServersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{82}
}

func (x *ListTabletServersRequestPB) GetPrimaryOnly() bool {
	if x != nil && x.PrimaryOnly != nil {
		return *x.PrimaryOnly
	}
	return Default_ListTabletServersRequestPB_PrimaryOnly
}

type ListTabletServersResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *MasterErrorPB                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Servers []*ListTabletServersResponsePB_Entry `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
}

func (x *ListTabletServersResponsePB) Reset() {
	*x = ListTabletServersResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletServersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletServersResponsePB) ProtoMessage() {}

func (x *ListTabletServersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletServersResponsePB.ProtoReflect.Descriptor instead.
func (*ListTabletServersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{83}
}

func (x *ListTabletServersResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTabletServersResponsePB) GetServers() []*ListTabletServersResponsePB_Entry {
	if x != nil {
		return x.Servers
	}
	return nil
}

// GetMasterRegistrationRequest/Response: get the instance id and
// HTTP/RPC addresses for this Master server.
type GetMasterRegistrationRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMasterRegistrationRequestPB) Reset() {
	*x = GetMasterRegistrationRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterRegistrationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterRegistrationRequestPB) ProtoMessage() {}

func (x *GetMasterRegistrationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterRegistrationRequestPB.ProtoReflect.Descriptor instead.
func (*GetMasterRegistrationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{84}
}

// TODO: Just use ServerRegistration here.
type GetMasterRegistrationResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node instance information is always set.
	InstanceId *common.NodeInstancePB `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// These fields are optional, as they won't be set if there's an
	// error retrieving the host/port information.
	Registration *common.ServerRegistrationPB `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	// This server's role in the consensus configuration.
	Role *common.RaftPeerPB_Role `protobuf:"varint,3,opt,name=role,enum=yb.consensus.RaftPeerPB_Role" json:"role,omitempty"`
	// Set if there an error retrieving the registration information.
	Error *MasterErrorPB `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (x *GetMasterRegistrationResponsePB) Reset() {
	*x = GetMasterRegistrationResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterRegistrationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterRegistrationResponsePB) ProtoMessage() {}

func (x *GetMasterRegistrationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterRegistrationResponsePB.ProtoReflect.Descriptor instead.
func (*GetMasterRegistrationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{85}
}

func (x *GetMasterRegistrationResponsePB) GetInstanceId() *common.NodeInstancePB {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *GetMasterRegistrationResponsePB) GetRegistration() *common.ServerRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *GetMasterRegistrationResponsePB) GetRole() common.RaftPeerPB_Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return common.RaftPeerPB_FOLLOWER
}

func (x *GetMasterRegistrationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// ListMastersRequest/Response: get information about all of the known
// master servers, including this node from the in-memory options.
type ListMastersRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMastersRequestPB) Reset() {
	*x = ListMastersRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMastersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMastersRequestPB) ProtoMessage() {}

func (x *ListMastersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMastersRequestPB.ProtoReflect.Descriptor instead.
func (*ListMastersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{86}
}

type ListMastersResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An entry for each individual master server.
	Masters []*common.ServerEntryPB `protobuf:"bytes,1,rep,name=masters" json:"masters,omitempty"`
	// Set only if there's an error in retrieving the list of servers or
	// in getting this server's own local registration information.
	Error *MasterErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *ListMastersResponsePB) Reset() {
	*x = ListMastersResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMastersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMastersResponsePB) ProtoMessage() {}

func (x *ListMastersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMastersResponsePB.ProtoReflect.Descriptor instead.
func (*ListMastersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{87}
}

func (x *ListMastersResponsePB) GetMasters() []*common.ServerEntryPB {
	if x != nil {
		return x.Masters
	}
	return nil
}

func (x *ListMastersResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// ListMasterRaftPeersRequest/Response: get information about all of the known servers
// which are part of this master's version of the currently active Raft quorum. This also
// captures any inflight change config operations which are not yet tracked by in-memory options
// and hence can give a more current picture of peers compared with ListMastersResponse.
type ListMasterRaftPeersRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMasterRaftPeersRequestPB) Reset() {
	*x = ListMasterRaftPeersRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMasterRaftPeersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterRaftPeersRequestPB) ProtoMessage() {}

func (x *ListMasterRaftPeersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterRaftPeersRequestPB.ProtoReflect.Descriptor instead.
func (*ListMasterRaftPeersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{88}
}

type ListMasterRaftPeersResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An entry for each individual master server.
	Masters []*common.RaftPeerPB `protobuf:"bytes,1,rep,name=masters" json:"masters,omitempty"`
	// Set only if there's an error in retrieving the list of servers or
	// in getting this server's own local registration information.
	Error *MasterErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *ListMasterRaftPeersResponsePB) Reset() {
	*x = ListMasterRaftPeersResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMasterRaftPeersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterRaftPeersResponsePB) ProtoMessage() {}

func (x *ListMasterRaftPeersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterRaftPeersResponsePB.ProtoReflect.Descriptor instead.
func (*ListMasterRaftPeersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{89}
}

func (x *ListMasterRaftPeersResponsePB) GetMasters() []*common.RaftPeerPB {
	if x != nil {
		return x.Masters
	}
	return nil
}

func (x *ListMasterRaftPeersResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Make the masters dump all their in-memory and on-disk state to their respective log files.
// Sent to the master leader first, and then propogated to its peers if peers_also is set to true.
type DumpMasterStateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dump on-disk state known to this master - including sys.catalog and raft config related info
	OnDisk *bool `protobuf:"varint,1,opt,name=on_disk,json=onDisk,def=1" json:"on_disk,omitempty"`
	// If set to true, the leader sends request to all current peers to dump their state too.
	// The on_disk is sent along to peers too.
	PeersAlso *bool `protobuf:"varint,2,opt,name=peers_also,json=peersAlso,def=0" json:"peers_also,omitempty"`
	// If set to true, the dump will be returned back as a string in the response.
	// Else the dump will be saved into the master respective log files.
	ReturnDumpAsString *bool `protobuf:"varint,3,opt,name=return_dump_as_string,json=returnDumpAsString,def=0" json:"return_dump_as_string,omitempty"`
}

// Default values for DumpMasterStateRequestPB fields.
const (
	Default_DumpMasterStateRequestPB_OnDisk             = bool(true)
	Default_DumpMasterStateRequestPB_PeersAlso          = bool(false)
	Default_DumpMasterStateRequestPB_ReturnDumpAsString = bool(false)
)

func (x *DumpMasterStateRequestPB) Reset() {
	*x = DumpMasterStateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpMasterStateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMasterStateRequestPB) ProtoMessage() {}

func (x *DumpMasterStateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMasterStateRequestPB.ProtoReflect.Descriptor instead.
func (*DumpMasterStateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{90}
}

func (x *DumpMasterStateRequestPB) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return Default_DumpMasterStateRequestPB_OnDisk
}

func (x *DumpMasterStateRequestPB) GetPeersAlso() bool {
	if x != nil && x.PeersAlso != nil {
		return *x.PeersAlso
	}
	return Default_DumpMasterStateRequestPB_PeersAlso
}

func (x *DumpMasterStateRequestPB) GetReturnDumpAsString() bool {
	if x != nil && x.ReturnDumpAsString != nil {
		return *x.ReturnDumpAsString
	}
	return Default_DumpMasterStateRequestPB_ReturnDumpAsString
}

type DumpMasterStateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Dump  *string        `protobuf:"bytes,2,opt,name=dump" json:"dump,omitempty"`
}

func (x *DumpMasterStateResponsePB) Reset() {
	*x = DumpMasterStateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpMasterStateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMasterStateResponsePB) ProtoMessage() {}

func (x *DumpMasterStateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMasterStateResponsePB.ProtoReflect.Descriptor instead.
func (*DumpMasterStateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{91}
}

func (x *DumpMasterStateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DumpMasterStateResponsePB) GetDump() string {
	if x != nil && x.Dump != nil {
		return *x.Dump
	}
	return ""
}

type ChangeLoadBalancerStateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled *bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (x *ChangeLoadBalancerStateRequestPB) Reset() {
	*x = ChangeLoadBalancerStateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeLoadBalancerStateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLoadBalancerStateRequestPB) ProtoMessage() {}

func (x *ChangeLoadBalancerStateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLoadBalancerStateRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeLoadBalancerStateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{92}
}

func (x *ChangeLoadBalancerStateRequestPB) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

type ChangeLoadBalancerStateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *ChangeLoadBalancerStateResponsePB) Reset() {
	*x = ChangeLoadBalancerStateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeLoadBalancerStateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLoadBalancerStateResponsePB) ProtoMessage() {}

func (x *ChangeLoadBalancerStateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLoadBalancerStateResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeLoadBalancerStateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{93}
}

func (x *ChangeLoadBalancerStateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetLoadBalancerStateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoadBalancerStateRequestPB) Reset() {
	*x = GetLoadBalancerStateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerStateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerStateRequestPB) ProtoMessage() {}

func (x *GetLoadBalancerStateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerStateRequestPB.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerStateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{94}
}

type GetLoadBalancerStateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	IsEnabled *bool          `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (x *GetLoadBalancerStateResponsePB) Reset() {
	*x = GetLoadBalancerStateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerStateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerStateResponsePB) ProtoMessage() {}

func (x *GetLoadBalancerStateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerStateResponsePB.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerStateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{95}
}

func (x *GetLoadBalancerStateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLoadBalancerStateResponsePB) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

// Update an ex-peer about its removal from the cluster.
type RemovedMasterUpdateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovedMasterUpdateRequestPB) Reset() {
	*x = RemovedMasterUpdateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovedMasterUpdateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovedMasterUpdateRequestPB) ProtoMessage() {}

func (x *RemovedMasterUpdateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovedMasterUpdateRequestPB.ProtoReflect.Descriptor instead.
func (*RemovedMasterUpdateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{96}
}

type RemovedMasterUpdateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *RemovedMasterUpdateResponsePB) Reset() {
	*x = RemovedMasterUpdateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovedMasterUpdateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovedMasterUpdateResponsePB) ProtoMessage() {}

func (x *RemovedMasterUpdateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovedMasterUpdateResponsePB.ProtoReflect.Descriptor instead.
func (*RemovedMasterUpdateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{97}
}

func (x *RemovedMasterUpdateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetMasterClusterConfigRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMasterClusterConfigRequestPB) Reset() {
	*x = GetMasterClusterConfigRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterClusterConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterClusterConfigRequestPB) ProtoMessage() {}

func (x *GetMasterClusterConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterClusterConfigRequestPB.ProtoReflect.Descriptor instead.
func (*GetMasterClusterConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{98}
}

type GetMasterClusterConfigResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error         *MasterErrorPB           `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ClusterConfig *SysClusterConfigEntryPB `protobuf:"bytes,2,opt,name=cluster_config,json=clusterConfig" json:"cluster_config,omitempty"`
}

func (x *GetMasterClusterConfigResponsePB) Reset() {
	*x = GetMasterClusterConfigResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterClusterConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterClusterConfigResponsePB) ProtoMessage() {}

func (x *GetMasterClusterConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterClusterConfigResponsePB.ProtoReflect.Descriptor instead.
func (*GetMasterClusterConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{99}
}

func (x *GetMasterClusterConfigResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetMasterClusterConfigResponsePB) GetClusterConfig() *SysClusterConfigEntryPB {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

type ChangeMasterClusterConfigRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterConfig *SysClusterConfigEntryPB `protobuf:"bytes,1,opt,name=cluster_config,json=clusterConfig" json:"cluster_config,omitempty"`
}

func (x *ChangeMasterClusterConfigRequestPB) Reset() {
	*x = ChangeMasterClusterConfigRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMasterClusterConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMasterClusterConfigRequestPB) ProtoMessage() {}

func (x *ChangeMasterClusterConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMasterClusterConfigRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeMasterClusterConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{100}
}

func (x *ChangeMasterClusterConfigRequestPB) GetClusterConfig() *SysClusterConfigEntryPB {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

type ChangeMasterClusterConfigResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *ChangeMasterClusterConfigResponsePB) Reset() {
	*x = ChangeMasterClusterConfigResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMasterClusterConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMasterClusterConfigResponsePB) ProtoMessage() {}

func (x *ChangeMasterClusterConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMasterClusterConfigResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeMasterClusterConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{101}
}

func (x *ChangeMasterClusterConfigResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type SetPreferredZonesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreferredZones []*common.CloudInfoPB `protobuf:"bytes,1,rep,name=preferred_zones,json=preferredZones" json:"preferred_zones,omitempty"`
}

func (x *SetPreferredZonesRequestPB) Reset() {
	*x = SetPreferredZonesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPreferredZonesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPreferredZonesRequestPB) ProtoMessage() {}

func (x *SetPreferredZonesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPreferredZonesRequestPB.ProtoReflect.Descriptor instead.
func (*SetPreferredZonesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{102}
}

func (x *SetPreferredZonesRequestPB) GetPreferredZones() []*common.CloudInfoPB {
	if x != nil {
		return x.PreferredZones
	}
	return nil
}

type SetPreferredZonesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *SetPreferredZonesResponsePB) Reset() {
	*x = SetPreferredZonesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPreferredZonesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPreferredZonesResponsePB) ProtoMessage() {}

func (x *SetPreferredZonesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPreferredZonesResponsePB.ProtoReflect.Descriptor instead.
func (*SetPreferredZonesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{103}
}

func (x *SetPreferredZonesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get the percentage of tablet data that got moved as part of a blacklist config change.
// Handled by the master leader and picked up by new leader on failover.
type GetLoadMovePercentRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoadMovePercentRequestPB) Reset() {
	*x = GetLoadMovePercentRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadMovePercentRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadMovePercentRequestPB) ProtoMessage() {}

func (x *GetLoadMovePercentRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadMovePercentRequestPB.ProtoReflect.Descriptor instead.
func (*GetLoadMovePercentRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{104}
}

// Get the percentage of tablet leadership that got moved as part of a leader blacklist config
// change. Handled by the master leader and picked up by new leader on failover.
type GetLeaderBlacklistPercentRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLeaderBlacklistPercentRequestPB) Reset() {
	*x = GetLeaderBlacklistPercentRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderBlacklistPercentRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBlacklistPercentRequestPB) ProtoMessage() {}

func (x *GetLeaderBlacklistPercentRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBlacklistPercentRequestPB.ProtoReflect.Descriptor instead.
func (*GetLeaderBlacklistPercentRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{105}
}

// When no errors, the percent reflects the progress of load removal from the blacklisted tservers.
type GetLoadMovePercentResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// To be deprecated. Replaced by "100 * (total - remaining) / total".
	Percent   *float64 `protobuf:"fixed64,2,opt,name=percent" json:"percent,omitempty"`
	Remaining *uint64  `protobuf:"varint,3,opt,name=remaining" json:"remaining,omitempty"`
	Total     *uint64  `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
}

func (x *GetLoadMovePercentResponsePB) Reset() {
	*x = GetLoadMovePercentResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadMovePercentResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadMovePercentResponsePB) ProtoMessage() {}

func (x *GetLoadMovePercentResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadMovePercentResponsePB.ProtoReflect.Descriptor instead.
func (*GetLoadMovePercentResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{106}
}

func (x *GetLoadMovePercentResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLoadMovePercentResponsePB) GetPercent() float64 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *GetLoadMovePercentResponsePB) GetRemaining() uint64 {
	if x != nil && x.Remaining != nil {
		return *x.Remaining
	}
	return 0
}

func (x *GetLoadMovePercentResponsePB) GetTotal() uint64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

// Is load balancer idle.
type IsLoadBalancerIdleRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsLoadBalancerIdleRequestPB) Reset() {
	*x = IsLoadBalancerIdleRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancerIdleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancerIdleRequestPB) ProtoMessage() {}

func (x *IsLoadBalancerIdleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancerIdleRequestPB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancerIdleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{107}
}

// When no errors, load balancer is idle.
type IsLoadBalancerIdleResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *IsLoadBalancerIdleResponsePB) Reset() {
	*x = IsLoadBalancerIdleResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancerIdleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancerIdleResponsePB) ProtoMessage() {}

func (x *IsLoadBalancerIdleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancerIdleResponsePB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancerIdleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{108}
}

func (x *IsLoadBalancerIdleResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get a master's notion being ready as the leader.
// NOTE: Should be used only for unit testing purposes.
type IsMasterLeaderReadyRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsMasterLeaderReadyRequestPB) Reset() {
	*x = IsMasterLeaderReadyRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMasterLeaderReadyRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMasterLeaderReadyRequestPB) ProtoMessage() {}

func (x *IsMasterLeaderReadyRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMasterLeaderReadyRequestPB.ProtoReflect.Descriptor instead.
func (*IsMasterLeaderReadyRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{109}
}

// When no errors, the master will be deemed ready as per its catalog manager layer.
type IsMasterLeaderReadyResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *IsMasterLeaderReadyResponsePB) Reset() {
	*x = IsMasterLeaderReadyResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMasterLeaderReadyResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMasterLeaderReadyResponsePB) ProtoMessage() {}

func (x *IsMasterLeaderReadyResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMasterLeaderReadyResponsePB.ProtoReflect.Descriptor instead.
func (*IsMasterLeaderReadyResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{110}
}

func (x *IsMasterLeaderReadyResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// When no errors, the master leader will have balanced all the load across the live tservers.
// The client can send in an optional value for the expected number of servers. If the master
// finds fewer alive in its snapshot than these, it will consider the load imbalanced.
type IsLoadBalancedRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedNumServers *int32 `protobuf:"varint,1,opt,name=expected_num_servers,json=expectedNumServers" json:"expected_num_servers,omitempty"`
}

func (x *IsLoadBalancedRequestPB) Reset() {
	*x = IsLoadBalancedRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancedRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancedRequestPB) ProtoMessage() {}

func (x *IsLoadBalancedRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancedRequestPB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancedRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{111}
}

func (x *IsLoadBalancedRequestPB) GetExpectedNumServers() int32 {
	if x != nil && x.ExpectedNumServers != nil {
		return *x.ExpectedNumServers
	}
	return 0
}

type IsLoadBalancedResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any error being set implies that the load is not balanced across the servers.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *IsLoadBalancedResponsePB) Reset() {
	*x = IsLoadBalancedResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancedResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancedResponsePB) ProtoMessage() {}

func (x *IsLoadBalancedResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancedResponsePB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancedResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{112}
}

func (x *IsLoadBalancedResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AreLeadersOnPreferredOnlyRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AreLeadersOnPreferredOnlyRequestPB) Reset() {
	*x = AreLeadersOnPreferredOnlyRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreLeadersOnPreferredOnlyRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreLeadersOnPreferredOnlyRequestPB) ProtoMessage() {}

func (x *AreLeadersOnPreferredOnlyRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreLeadersOnPreferredOnlyRequestPB.ProtoReflect.Descriptor instead.
func (*AreLeadersOnPreferredOnlyRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{113}
}

type AreLeadersOnPreferredOnlyResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any error being set implies that the leader load is not balanced across the servers.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *AreLeadersOnPreferredOnlyResponsePB) Reset() {
	*x = AreLeadersOnPreferredOnlyResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreLeadersOnPreferredOnlyResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreLeadersOnPreferredOnlyResponsePB) ProtoMessage() {}

func (x *AreLeadersOnPreferredOnlyResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreLeadersOnPreferredOnlyResponsePB.ProtoReflect.Descriptor instead.
func (*AreLeadersOnPreferredOnlyResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{114}
}

func (x *AreLeadersOnPreferredOnlyResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AreTransactionLeadersSpreadRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AreTransactionLeadersSpreadRequestPB) Reset() {
	*x = AreTransactionLeadersSpreadRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreTransactionLeadersSpreadRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreTransactionLeadersSpreadRequestPB) ProtoMessage() {}

func (x *AreTransactionLeadersSpreadRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreTransactionLeadersSpreadRequestPB.ProtoReflect.Descriptor instead.
func (*AreTransactionLeadersSpreadRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{115}
}

type AreTransactionLeadersSpreadResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any error being set implies transaction leaders are incorrectly respecting preferred zones.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *AreTransactionLeadersSpreadResponsePB) Reset() {
	*x = AreTransactionLeadersSpreadResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreTransactionLeadersSpreadResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreTransactionLeadersSpreadResponsePB) ProtoMessage() {}

func (x *AreTransactionLeadersSpreadResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreTransactionLeadersSpreadResponsePB.ProtoReflect.Descriptor instead.
func (*AreTransactionLeadersSpreadResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{116}
}

func (x *AreTransactionLeadersSpreadResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// ============================================================================
//
//	Namespace  (default namespace = ANY placement)
//
// ============================================================================
// Database type is added to metadata entries such that PGSQL clients cannot delete or connect to
// CQL database_type and vice versa.
type CreateNamespaceRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Database type.
	DatabaseType *common.YQLDatabase `protobuf:"varint,2,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
	// For RBAC.
	CreatorRoleName *string `protobuf:"bytes,3,opt,name=creator_role_name,json=creatorRoleName" json:"creator_role_name,omitempty"`
	// For Postgres:
	NamespaceId       []byte  `protobuf:"bytes,4,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`                     // id to assign to this namespace.
	SourceNamespaceId []byte  `protobuf:"bytes,5,opt,name=source_namespace_id,json=sourceNamespaceId" json:"source_namespace_id,omitempty"` // namespace id of the source database to copy from.
	NextPgOid         *uint32 `protobuf:"varint,6,opt,name=next_pg_oid,json=nextPgOid" json:"next_pg_oid,omitempty"`                        // Next oid to assign. Ignored when source_namespace_id is given
	// and the next_pg_oid from source namespace will be used.
	// DDL Dependent upon Transaction success (abort removes). Used by YSQL.
	Transaction *common.TransactionMetadataPB `protobuf:"bytes,8,opt,name=transaction" json:"transaction,omitempty"`
	// True if the namespace is colocated.
	Colocated *bool `protobuf:"varint,7,opt,name=colocated,def=0" json:"colocated,omitempty"`
}

// Default values for CreateNamespaceRequestPB fields.
const (
	Default_CreateNamespaceRequestPB_DatabaseType = common.YQLDatabase_YQL_DATABASE_CQL
	Default_CreateNamespaceRequestPB_Colocated    = bool(false)
)

func (x *CreateNamespaceRequestPB) Reset() {
	*x = CreateNamespaceRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRequestPB) ProtoMessage() {}

func (x *CreateNamespaceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRequestPB.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{117}
}

func (x *CreateNamespaceRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateNamespaceRequestPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_CreateNamespaceRequestPB_DatabaseType
}

func (x *CreateNamespaceRequestPB) GetCreatorRoleName() string {
	if x != nil && x.CreatorRoleName != nil {
		return *x.CreatorRoleName
	}
	return ""
}

func (x *CreateNamespaceRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CreateNamespaceRequestPB) GetSourceNamespaceId() []byte {
	if x != nil {
		return x.SourceNamespaceId
	}
	return nil
}

func (x *CreateNamespaceRequestPB) GetNextPgOid() uint32 {
	if x != nil && x.NextPgOid != nil {
		return *x.NextPgOid
	}
	return 0
}

func (x *CreateNamespaceRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *CreateNamespaceRequestPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_CreateNamespaceRequestPB_Colocated
}

type CreateNamespaceResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Id    []byte         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (x *CreateNamespaceResponsePB) Reset() {
	*x = CreateNamespaceResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNamespaceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceResponsePB) ProtoMessage() {}

func (x *CreateNamespaceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceResponsePB.ProtoReflect.Descriptor instead.
func (*CreateNamespaceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{118}
}

func (x *CreateNamespaceResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateNamespaceResponsePB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type IsCreateNamespaceDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *IsCreateNamespaceDoneRequestPB) Reset() {
	*x = IsCreateNamespaceDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCreateNamespaceDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateNamespaceDoneRequestPB) ProtoMessage() {}

func (x *IsCreateNamespaceDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateNamespaceDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsCreateNamespaceDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{119}
}

func (x *IsCreateNamespaceDoneRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type IsCreateNamespaceDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the create operation is completed, false otherwise
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
}

func (x *IsCreateNamespaceDoneResponsePB) Reset() {
	*x = IsCreateNamespaceDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCreateNamespaceDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateNamespaceDoneResponsePB) ProtoMessage() {}

func (x *IsCreateNamespaceDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateNamespaceDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsCreateNamespaceDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{120}
}

func (x *IsCreateNamespaceDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsCreateNamespaceDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

// Database type is added to metadata entries such that PGSQL clients cannot delete or connect to
// CQL database_type and vice versa.
type DeleteNamespaceRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// Database type.
	DatabaseType *common.YQLDatabase `protobuf:"varint,2,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
}

// Default values for DeleteNamespaceRequestPB fields.
const (
	Default_DeleteNamespaceRequestPB_DatabaseType = common.YQLDatabase_YQL_DATABASE_CQL
)

func (x *DeleteNamespaceRequestPB) Reset() {
	*x = DeleteNamespaceRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRequestPB) ProtoMessage() {}

func (x *DeleteNamespaceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{121}
}

func (x *DeleteNamespaceRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *DeleteNamespaceRequestPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_DeleteNamespaceRequestPB_DatabaseType
}

type DeleteNamespaceResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteNamespaceResponsePB) Reset() {
	*x = DeleteNamespaceResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNamespaceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceResponsePB) ProtoMessage() {}

func (x *DeleteNamespaceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{122}
}

func (x *DeleteNamespaceResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsDeleteNamespaceDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *IsDeleteNamespaceDoneRequestPB) Reset() {
	*x = IsDeleteNamespaceDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeleteNamespaceDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteNamespaceDoneRequestPB) ProtoMessage() {}

func (x *IsDeleteNamespaceDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteNamespaceDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsDeleteNamespaceDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{123}
}

func (x *IsDeleteNamespaceDoneRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type IsDeleteNamespaceDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the delete operation completed, false otherwise
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
}

func (x *IsDeleteNamespaceDoneResponsePB) Reset() {
	*x = IsDeleteNamespaceDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeleteNamespaceDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteNamespaceDoneResponsePB) ProtoMessage() {}

func (x *IsDeleteNamespaceDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteNamespaceDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsDeleteNamespaceDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{124}
}

func (x *IsDeleteNamespaceDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsDeleteNamespaceDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type AlterNamespaceRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// New name for the namespace in the alter operation.
	NewName *string `protobuf:"bytes,2,opt,name=new_name,json=newName" json:"new_name,omitempty"`
}

func (x *AlterNamespaceRequestPB) Reset() {
	*x = AlterNamespaceRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterNamespaceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNamespaceRequestPB) ProtoMessage() {}

func (x *AlterNamespaceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNamespaceRequestPB.ProtoReflect.Descriptor instead.
func (*AlterNamespaceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{125}
}

func (x *AlterNamespaceRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *AlterNamespaceRequestPB) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

type AlterNamespaceResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *AlterNamespaceResponsePB) Reset() {
	*x = AlterNamespaceResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterNamespaceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNamespaceResponsePB) ProtoMessage() {}

func (x *AlterNamespaceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNamespaceResponsePB.ProtoReflect.Descriptor instead.
func (*AlterNamespaceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{126}
}

func (x *AlterNamespaceResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListNamespacesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseType *common.YQLDatabase `protobuf:"varint,1,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
}

// Default values for ListNamespacesRequestPB fields.
const (
	Default_ListNamespacesRequestPB_DatabaseType = common.YQLDatabase_YQL_DATABASE_CQL
)

func (x *ListNamespacesRequestPB) Reset() {
	*x = ListNamespacesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesRequestPB) ProtoMessage() {}

func (x *ListNamespacesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesRequestPB.ProtoReflect.Descriptor instead.
func (*ListNamespacesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{127}
}

func (x *ListNamespacesRequestPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_ListNamespacesRequestPB_DatabaseType
}

type ListNamespacesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error      *MasterErrorPB           `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Namespaces []*NamespaceIdentifierPB `protobuf:"bytes,2,rep,name=namespaces" json:"namespaces,omitempty"`
}

func (x *ListNamespacesResponsePB) Reset() {
	*x = ListNamespacesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesResponsePB) ProtoMessage() {}

func (x *ListNamespacesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesResponsePB.ProtoReflect.Descriptor instead.
func (*ListNamespacesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{128}
}

func (x *ListNamespacesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListNamespacesResponsePB) GetNamespaces() []*NamespaceIdentifierPB {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type GetNamespaceInfoRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *GetNamespaceInfoRequestPB) Reset() {
	*x = GetNamespaceInfoRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceInfoRequestPB) ProtoMessage() {}

func (x *GetNamespaceInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetNamespaceInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{129}
}

func (x *GetNamespaceInfoRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type GetNamespaceInfoResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error     *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Colocated *bool                  `protobuf:"varint,3,opt,name=colocated" json:"colocated,omitempty"`
}

func (x *GetNamespaceInfoResponsePB) Reset() {
	*x = GetNamespaceInfoResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespaceInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceInfoResponsePB) ProtoMessage() {}

func (x *GetNamespaceInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetNamespaceInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{130}
}

func (x *GetNamespaceInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetNamespaceInfoResponsePB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *GetNamespaceInfoResponsePB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return false
}

type CreateTablegroupRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            []byte  `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	NamespaceId   []byte  `protobuf:"bytes,2,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	NamespaceName *string `protobuf:"bytes,3,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
}

func (x *CreateTablegroupRequestPB) Reset() {
	*x = CreateTablegroupRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTablegroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTablegroupRequestPB) ProtoMessage() {}

func (x *CreateTablegroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTablegroupRequestPB.ProtoReflect.Descriptor instead.
func (*CreateTablegroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{131}
}

func (x *CreateTablegroupRequestPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CreateTablegroupRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CreateTablegroupRequestPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

type CreateTablegroupResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error           *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ParentTableId   []byte         `protobuf:"bytes,2,opt,name=parent_table_id,json=parentTableId" json:"parent_table_id,omitempty"`
	ParentTableName []byte         `protobuf:"bytes,3,opt,name=parent_table_name,json=parentTableName" json:"parent_table_name,omitempty"`
}

func (x *CreateTablegroupResponsePB) Reset() {
	*x = CreateTablegroupResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTablegroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTablegroupResponsePB) ProtoMessage() {}

func (x *CreateTablegroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTablegroupResponsePB.ProtoReflect.Descriptor instead.
func (*CreateTablegroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{132}
}

func (x *CreateTablegroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateTablegroupResponsePB) GetParentTableId() []byte {
	if x != nil {
		return x.ParentTableId
	}
	return nil
}

func (x *CreateTablegroupResponsePB) GetParentTableName() []byte {
	if x != nil {
		return x.ParentTableName
	}
	return nil
}

type DeleteTablegroupRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          []byte `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	NamespaceId []byte `protobuf:"bytes,2,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
}

func (x *DeleteTablegroupRequestPB) Reset() {
	*x = DeleteTablegroupRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTablegroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTablegroupRequestPB) ProtoMessage() {}

func (x *DeleteTablegroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTablegroupRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteTablegroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{133}
}

func (x *DeleteTablegroupRequestPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteTablegroupRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type DeleteTablegroupResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ParentTableId []byte         `protobuf:"bytes,2,opt,name=parent_table_id,json=parentTableId" json:"parent_table_id,omitempty"`
}

func (x *DeleteTablegroupResponsePB) Reset() {
	*x = DeleteTablegroupResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTablegroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTablegroupResponsePB) ProtoMessage() {}

func (x *DeleteTablegroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTablegroupResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteTablegroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{134}
}

func (x *DeleteTablegroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteTablegroupResponsePB) GetParentTableId() []byte {
	if x != nil {
		return x.ParentTableId
	}
	return nil
}

type ListTablegroupsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId []byte `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
}

func (x *ListTablegroupsRequestPB) Reset() {
	*x = ListTablegroupsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablegroupsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablegroupsRequestPB) ProtoMessage() {}

func (x *ListTablegroupsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablegroupsRequestPB.ProtoReflect.Descriptor instead.
func (*ListTablegroupsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{135}
}

func (x *ListTablegroupsRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type ListTablegroupsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error       *MasterErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Tablegroups []*TablegroupIdentifierPB `protobuf:"bytes,2,rep,name=tablegroups" json:"tablegroups,omitempty"`
}

func (x *ListTablegroupsResponsePB) Reset() {
	*x = ListTablegroupsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablegroupsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablegroupsResponsePB) ProtoMessage() {}

func (x *ListTablegroupsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablegroupsResponsePB.ProtoReflect.Descriptor instead.
func (*ListTablegroupsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{136}
}

func (x *ListTablegroupsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTablegroupsResponsePB) GetTablegroups() []*TablegroupIdentifierPB {
	if x != nil {
		return x.Tablegroups
	}
	return nil
}

type CreateRoleRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SaltedHash *string `protobuf:"bytes,2,opt,name=salted_hash,json=saltedHash" json:"salted_hash,omitempty"`
	Login      *bool   `protobuf:"varint,3,opt,name=login" json:"login,omitempty"`
	Superuser  *bool   `protobuf:"varint,4,opt,name=superuser" json:"superuser,omitempty"`
	// Name of the role creating this role.
	CreatorRoleName *string `protobuf:"bytes,5,opt,name=creator_role_name,json=creatorRoleName" json:"creator_role_name,omitempty"`
}

func (x *CreateRoleRequestPB) Reset() {
	*x = CreateRoleRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleRequestPB) ProtoMessage() {}

func (x *CreateRoleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleRequestPB.ProtoReflect.Descriptor instead.
func (*CreateRoleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{137}
}

func (x *CreateRoleRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateRoleRequestPB) GetSaltedHash() string {
	if x != nil && x.SaltedHash != nil {
		return *x.SaltedHash
	}
	return ""
}

func (x *CreateRoleRequestPB) GetLogin() bool {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return false
}

func (x *CreateRoleRequestPB) GetSuperuser() bool {
	if x != nil && x.Superuser != nil {
		return *x.Superuser
	}
	return false
}

func (x *CreateRoleRequestPB) GetCreatorRoleName() string {
	if x != nil && x.CreatorRoleName != nil {
		return *x.CreatorRoleName
	}
	return ""
}

type CreateRoleResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *CreateRoleResponsePB) Reset() {
	*x = CreateRoleResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleResponsePB) ProtoMessage() {}

func (x *CreateRoleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleResponsePB.ProtoReflect.Descriptor instead.
func (*CreateRoleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{138}
}

func (x *CreateRoleResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AlterRoleRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SaltedHash *string `protobuf:"bytes,2,opt,name=salted_hash,json=saltedHash" json:"salted_hash,omitempty"`
	Login      *bool   `protobuf:"varint,3,opt,name=login" json:"login,omitempty"`
	Superuser  *bool   `protobuf:"varint,4,opt,name=superuser" json:"superuser,omitempty"`
	// Name of the role trying to alter the role.
	CurrentRole *string `protobuf:"bytes,5,opt,name=current_role,json=currentRole" json:"current_role,omitempty"`
}

func (x *AlterRoleRequestPB) Reset() {
	*x = AlterRoleRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterRoleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterRoleRequestPB) ProtoMessage() {}

func (x *AlterRoleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterRoleRequestPB.ProtoReflect.Descriptor instead.
func (*AlterRoleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{139}
}

func (x *AlterRoleRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AlterRoleRequestPB) GetSaltedHash() string {
	if x != nil && x.SaltedHash != nil {
		return *x.SaltedHash
	}
	return ""
}

func (x *AlterRoleRequestPB) GetLogin() bool {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return false
}

func (x *AlterRoleRequestPB) GetSuperuser() bool {
	if x != nil && x.Superuser != nil {
		return *x.Superuser
	}
	return false
}

func (x *AlterRoleRequestPB) GetCurrentRole() string {
	if x != nil && x.CurrentRole != nil {
		return *x.CurrentRole
	}
	return ""
}

type AlterRoleResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *AlterRoleResponsePB) Reset() {
	*x = AlterRoleResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterRoleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterRoleResponsePB) ProtoMessage() {}

func (x *AlterRoleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterRoleResponsePB.ProtoReflect.Descriptor instead.
func (*AlterRoleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{140}
}

func (x *AlterRoleResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteRoleRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of the role trying to drop the role.
	CurrentRole *string `protobuf:"bytes,2,opt,name=current_role,json=currentRole" json:"current_role,omitempty"`
}

func (x *DeleteRoleRequestPB) Reset() {
	*x = DeleteRoleRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleRequestPB) ProtoMessage() {}

func (x *DeleteRoleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteRoleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{141}
}

func (x *DeleteRoleRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeleteRoleRequestPB) GetCurrentRole() string {
	if x != nil && x.CurrentRole != nil {
		return *x.CurrentRole
	}
	return ""
}

type DeleteRoleResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteRoleResponsePB) Reset() {
	*x = DeleteRoleResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleResponsePB) ProtoMessage() {}

func (x *DeleteRoleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteRoleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{142}
}

func (x *DeleteRoleResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GrantRevokeRoleRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedRole   *string `protobuf:"bytes,1,opt,name=granted_role,json=grantedRole" json:"granted_role,omitempty"`
	RecipientRole *string `protobuf:"bytes,2,opt,name=recipient_role,json=recipientRole" json:"recipient_role,omitempty"`
	// true if this is a revoke request.
	Revoke *bool `protobuf:"varint,3,opt,name=revoke,def=0" json:"revoke,omitempty"`
}

// Default values for GrantRevokeRoleRequestPB fields.
const (
	Default_GrantRevokeRoleRequestPB_Revoke = bool(false)
)

func (x *GrantRevokeRoleRequestPB) Reset() {
	*x = GrantRevokeRoleRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantRevokeRoleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantRevokeRoleRequestPB) ProtoMessage() {}

func (x *GrantRevokeRoleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantRevokeRoleRequestPB.ProtoReflect.Descriptor instead.
func (*GrantRevokeRoleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{143}
}

func (x *GrantRevokeRoleRequestPB) GetGrantedRole() string {
	if x != nil && x.GrantedRole != nil {
		return *x.GrantedRole
	}
	return ""
}

func (x *GrantRevokeRoleRequestPB) GetRecipientRole() string {
	if x != nil && x.RecipientRole != nil {
		return *x.RecipientRole
	}
	return ""
}

func (x *GrantRevokeRoleRequestPB) GetRevoke() bool {
	if x != nil && x.Revoke != nil {
		return *x.Revoke
	}
	return Default_GrantRevokeRoleRequestPB_Revoke
}

type GrantRevokeRoleResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *GrantRevokeRoleResponsePB) Reset() {
	*x = GrantRevokeRoleResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantRevokeRoleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantRevokeRoleResponsePB) ProtoMessage() {}

func (x *GrantRevokeRoleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantRevokeRoleResponsePB.ProtoReflect.Descriptor instead.
func (*GrantRevokeRoleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{144}
}

func (x *GrantRevokeRoleResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GrantRevokePermissionRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission        *common.PermissionType `protobuf:"varint,1,opt,name=permission,enum=yb.PermissionType" json:"permission,omitempty"`
	ResourceType      *common.ResourceType   `protobuf:"varint,2,opt,name=resource_type,json=resourceType,enum=yb.ResourceType" json:"resource_type,omitempty"`
	CanonicalResource *string                `protobuf:"bytes,3,opt,name=canonical_resource,json=canonicalResource" json:"canonical_resource,omitempty"`
	ResourceName      *string                `protobuf:"bytes,4,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	Namespace         *NamespaceIdentifierPB `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
	RoleName          *string                `protobuf:"bytes,6,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	// true if this is a revoke request.
	Revoke *bool `protobuf:"varint,7,opt,name=revoke,def=0" json:"revoke,omitempty"`
}

// Default values for GrantRevokePermissionRequestPB fields.
const (
	Default_GrantRevokePermissionRequestPB_Revoke = bool(false)
)

func (x *GrantRevokePermissionRequestPB) Reset() {
	*x = GrantRevokePermissionRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantRevokePermissionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantRevokePermissionRequestPB) ProtoMessage() {}

func (x *GrantRevokePermissionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantRevokePermissionRequestPB.ProtoReflect.Descriptor instead.
func (*GrantRevokePermissionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{145}
}

func (x *GrantRevokePermissionRequestPB) GetPermission() common.PermissionType {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return common.PermissionType_ALTER_PERMISSION
}

func (x *GrantRevokePermissionRequestPB) GetResourceType() common.ResourceType {
	if x != nil && x.ResourceType != nil {
		return *x.ResourceType
	}
	return common.ResourceType_ALL_KEYSPACES
}

func (x *GrantRevokePermissionRequestPB) GetCanonicalResource() string {
	if x != nil && x.CanonicalResource != nil {
		return *x.CanonicalResource
	}
	return ""
}

func (x *GrantRevokePermissionRequestPB) GetResourceName() string {
	if x != nil && x.ResourceName != nil {
		return *x.ResourceName
	}
	return ""
}

func (x *GrantRevokePermissionRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *GrantRevokePermissionRequestPB) GetRoleName() string {
	if x != nil && x.RoleName != nil {
		return *x.RoleName
	}
	return ""
}

func (x *GrantRevokePermissionRequestPB) GetRevoke() bool {
	if x != nil && x.Revoke != nil {
		return *x.Revoke
	}
	return Default_GrantRevokePermissionRequestPB_Revoke
}

type GrantRevokePermissionResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *GrantRevokePermissionResponsePB) Reset() {
	*x = GrantRevokePermissionResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantRevokePermissionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantRevokePermissionResponsePB) ProtoMessage() {}

func (x *GrantRevokePermissionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantRevokePermissionResponsePB.ProtoReflect.Descriptor instead.
func (*GrantRevokePermissionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{146}
}

func (x *GrantRevokePermissionResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetPermissionsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only get the permissions if the cache version in the master is greater than this version.
	IfVersionGreaterThan *uint64 `protobuf:"varint,1,opt,name=if_version_greater_than,json=ifVersionGreaterThan" json:"if_version_greater_than,omitempty"`
}

func (x *GetPermissionsRequestPB) Reset() {
	*x = GetPermissionsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsRequestPB) ProtoMessage() {}

func (x *GetPermissionsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsRequestPB.ProtoReflect.Descriptor instead.
func (*GetPermissionsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{147}
}

func (x *GetPermissionsRequestPB) GetIfVersionGreaterThan() uint64 {
	if x != nil && x.IfVersionGreaterThan != nil {
		return *x.IfVersionGreaterThan
	}
	return 0
}

type ResourcePermissionInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanonicalResource *string `protobuf:"bytes,1,opt,name=canonical_resource,json=canonicalResource" json:"canonical_resource,omitempty"`
	// Bitmap representing the permissions.
	Permissions *uint32 `protobuf:"varint,2,opt,name=permissions" json:"permissions,omitempty"`
}

func (x *ResourcePermissionInfoPB) Reset() {
	*x = ResourcePermissionInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePermissionInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePermissionInfoPB) ProtoMessage() {}

func (x *ResourcePermissionInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePermissionInfoPB.ProtoReflect.Descriptor instead.
func (*ResourcePermissionInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{148}
}

func (x *ResourcePermissionInfoPB) GetCanonicalResource() string {
	if x != nil && x.CanonicalResource != nil {
		return *x.CanonicalResource
	}
	return ""
}

func (x *ResourcePermissionInfoPB) GetPermissions() uint32 {
	if x != nil && x.Permissions != nil {
		return *x.Permissions
	}
	return 0
}

type RolePermissionInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	// Bitmap representing the permissions for 'ALL KEYSPACES' and 'ALL ROLES'.
	AllKeyspacesPermissions *uint32                     `protobuf:"varint,2,opt,name=all_keyspaces_permissions,json=allKeyspacesPermissions" json:"all_keyspaces_permissions,omitempty"`
	AllRolesPermissions     *uint32                     `protobuf:"varint,3,opt,name=all_roles_permissions,json=allRolesPermissions" json:"all_roles_permissions,omitempty"`
	ResourcePermissions     []*ResourcePermissionInfoPB `protobuf:"bytes,4,rep,name=resource_permissions,json=resourcePermissions" json:"resource_permissions,omitempty"`
	SaltedHash              *string                     `protobuf:"bytes,5,opt,name=salted_hash,json=saltedHash" json:"salted_hash,omitempty"`
	CanLogin                *bool                       `protobuf:"varint,6,opt,name=can_login,json=canLogin" json:"can_login,omitempty"`
}

func (x *RolePermissionInfoPB) Reset() {
	*x = RolePermissionInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolePermissionInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolePermissionInfoPB) ProtoMessage() {}

func (x *RolePermissionInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolePermissionInfoPB.ProtoReflect.Descriptor instead.
func (*RolePermissionInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{149}
}

func (x *RolePermissionInfoPB) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *RolePermissionInfoPB) GetAllKeyspacesPermissions() uint32 {
	if x != nil && x.AllKeyspacesPermissions != nil {
		return *x.AllKeyspacesPermissions
	}
	return 0
}

func (x *RolePermissionInfoPB) GetAllRolesPermissions() uint32 {
	if x != nil && x.AllRolesPermissions != nil {
		return *x.AllRolesPermissions
	}
	return 0
}

func (x *RolePermissionInfoPB) GetResourcePermissions() []*ResourcePermissionInfoPB {
	if x != nil {
		return x.ResourcePermissions
	}
	return nil
}

func (x *RolePermissionInfoPB) GetSaltedHash() string {
	if x != nil && x.SaltedHash != nil {
		return *x.SaltedHash
	}
	return ""
}

func (x *RolePermissionInfoPB) GetCanLogin() bool {
	if x != nil && x.CanLogin != nil {
		return *x.CanLogin
	}
	return false
}

type GetPermissionsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         *uint64                 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Error           *MasterErrorPB          `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	RolePermissions []*RolePermissionInfoPB `protobuf:"bytes,3,rep,name=role_permissions,json=rolePermissions" json:"role_permissions,omitempty"`
}

func (x *GetPermissionsResponsePB) Reset() {
	*x = GetPermissionsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPermissionsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPermissionsResponsePB) ProtoMessage() {}

func (x *GetPermissionsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPermissionsResponsePB.ProtoReflect.Descriptor instead.
func (*GetPermissionsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{150}
}

func (x *GetPermissionsResponsePB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *GetPermissionsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetPermissionsResponsePB) GetRolePermissions() []*RolePermissionInfoPB {
	if x != nil {
		return x.RolePermissions
	}
	return nil
}

type RedisConfigSetRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword *string  `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Args    [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (x *RedisConfigSetRequestPB) Reset() {
	*x = RedisConfigSetRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConfigSetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigSetRequestPB) ProtoMessage() {}

func (x *RedisConfigSetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigSetRequestPB.ProtoReflect.Descriptor instead.
func (*RedisConfigSetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{151}
}

func (x *RedisConfigSetRequestPB) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *RedisConfigSetRequestPB) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type RedisConfigSetResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *RedisConfigSetResponsePB) Reset() {
	*x = RedisConfigSetResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConfigSetResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigSetResponsePB) ProtoMessage() {}

func (x *RedisConfigSetResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigSetResponsePB.ProtoReflect.Descriptor instead.
func (*RedisConfigSetResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{152}
}

func (x *RedisConfigSetResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type RedisConfigGetRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword *string `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
}

func (x *RedisConfigGetRequestPB) Reset() {
	*x = RedisConfigGetRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConfigGetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigGetRequestPB) ProtoMessage() {}

func (x *RedisConfigGetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigGetRequestPB.ProtoReflect.Descriptor instead.
func (*RedisConfigGetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{153}
}

func (x *RedisConfigGetRequestPB) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

type RedisConfigGetResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword *string        `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Args    [][]byte       `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	Error   *MasterErrorPB `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *RedisConfigGetResponsePB) Reset() {
	*x = RedisConfigGetResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConfigGetResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigGetResponsePB) ProtoMessage() {}

func (x *RedisConfigGetResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigGetResponsePB.ProtoReflect.Descriptor instead.
func (*RedisConfigGetResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{154}
}

func (x *RedisConfigGetResponsePB) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *RedisConfigGetResponsePB) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RedisConfigGetResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateUDTypeRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace  *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name       *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FieldNames []string               `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	FieldTypes []*common.QLTypePB     `protobuf:"bytes,4,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
}

func (x *CreateUDTypeRequestPB) Reset() {
	*x = CreateUDTypeRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUDTypeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUDTypeRequestPB) ProtoMessage() {}

func (x *CreateUDTypeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUDTypeRequestPB.ProtoReflect.Descriptor instead.
func (*CreateUDTypeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{155}
}

func (x *CreateUDTypeRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *CreateUDTypeRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateUDTypeRequestPB) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *CreateUDTypeRequestPB) GetFieldTypes() []*common.QLTypePB {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

type CreateUDTypeResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Id    []byte         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (x *CreateUDTypeResponsePB) Reset() {
	*x = CreateUDTypeResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUDTypeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUDTypeResponsePB) ProtoMessage() {}

func (x *CreateUDTypeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUDTypeResponsePB.ProtoReflect.Descriptor instead.
func (*CreateUDTypeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{156}
}

func (x *CreateUDTypeResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateUDTypeResponsePB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteUDTypeRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *UDTypeIdentifierPB `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (x *DeleteUDTypeRequestPB) Reset() {
	*x = DeleteUDTypeRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUDTypeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUDTypeRequestPB) ProtoMessage() {}

func (x *DeleteUDTypeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUDTypeRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteUDTypeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{157}
}

func (x *DeleteUDTypeRequestPB) GetType() *UDTypeIdentifierPB {
	if x != nil {
		return x.Type
	}
	return nil
}

type DeleteUDTypeResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteUDTypeResponsePB) Reset() {
	*x = DeleteUDTypeResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUDTypeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUDTypeResponsePB) ProtoMessage() {}

func (x *DeleteUDTypeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUDTypeResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteUDTypeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{158}
}

func (x *DeleteUDTypeResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListUDTypesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *ListUDTypesRequestPB) Reset() {
	*x = ListUDTypesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUDTypesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUDTypesRequestPB) ProtoMessage() {}

func (x *ListUDTypesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUDTypesRequestPB.ProtoReflect.Descriptor instead.
func (*ListUDTypesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{159}
}

func (x *ListUDTypesRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type ListUDTypesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error   *MasterErrorPB  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Udtypes []*UDTypeInfoPB `protobuf:"bytes,2,rep,name=udtypes" json:"udtypes,omitempty"`
}

func (x *ListUDTypesResponsePB) Reset() {
	*x = ListUDTypesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUDTypesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUDTypesResponsePB) ProtoMessage() {}

func (x *ListUDTypesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUDTypesResponsePB.ProtoReflect.Descriptor instead.
func (*ListUDTypesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{160}
}

func (x *ListUDTypesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListUDTypesResponsePB) GetUdtypes() []*UDTypeInfoPB {
	if x != nil {
		return x.Udtypes
	}
	return nil
}

type GetUDTypeInfoRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *UDTypeIdentifierPB `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (x *GetUDTypeInfoRequestPB) Reset() {
	*x = GetUDTypeInfoRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUDTypeInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUDTypeInfoRequestPB) ProtoMessage() {}

func (x *GetUDTypeInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUDTypeInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetUDTypeInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{161}
}

func (x *GetUDTypeInfoRequestPB) GetType() *UDTypeIdentifierPB {
	if x != nil {
		return x.Type
	}
	return nil
}

type GetUDTypeInfoResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error  *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Udtype *UDTypeInfoPB  `protobuf:"bytes,2,opt,name=udtype" json:"udtype,omitempty"`
}

func (x *GetUDTypeInfoResponsePB) Reset() {
	*x = GetUDTypeInfoResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUDTypeInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUDTypeInfoResponsePB) ProtoMessage() {}

func (x *GetUDTypeInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUDTypeInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetUDTypeInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{162}
}

func (x *GetUDTypeInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUDTypeInfoResponsePB) GetUdtype() *UDTypeInfoPB {
	if x != nil {
		return x.Udtype
	}
	return nil
}

type UDTypeIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table ID to fetch info.
	TypeId []byte `protobuf:"bytes,1,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	// The table name to fetch info.
	TypeName *string `protobuf:"bytes,2,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	// The table namespace (if empty - using default namespace).
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *UDTypeIdentifierPB) Reset() {
	*x = UDTypeIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTypeIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTypeIdentifierPB) ProtoMessage() {}

func (x *UDTypeIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTypeIdentifierPB.ProtoReflect.Descriptor instead.
func (*UDTypeIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{163}
}

func (x *UDTypeIdentifierPB) GetTypeId() []byte {
	if x != nil {
		return x.TypeId
	}
	return nil
}

func (x *UDTypeIdentifierPB) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *UDTypeIdentifierPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type UDTypeInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name       *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FieldNames []string               `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	FieldTypes []*common.QLTypePB     `protobuf:"bytes,4,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
	Namespace  *NamespaceIdentifierPB `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *UDTypeInfoPB) Reset() {
	*x = UDTypeInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDTypeInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTypeInfoPB) ProtoMessage() {}

func (x *UDTypeInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTypeInfoPB.ProtoReflect.Descriptor instead.
func (*UDTypeInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{164}
}

func (x *UDTypeInfoPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UDTypeInfoPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UDTypeInfoPB) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *UDTypeInfoPB) GetFieldTypes() []*common.QLTypePB {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

func (x *UDTypeInfoPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type CreateCDCStreamRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId *string               `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Options []*CDCStreamOptionsPB `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
}

func (x *CreateCDCStreamRequestPB) Reset() {
	*x = CreateCDCStreamRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamRequestPB) ProtoMessage() {}

func (x *CreateCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{165}
}

func (x *CreateCDCStreamRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetOptions() []*CDCStreamOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

// Options for CDC stream. This will include details such as:
// Stream sink: YB Universe / Kafka / Elastic Search.
// Log retention time: Amount of time to retain logs for CDC.
// Sink details: For example, Kafka cluster IP, port.
type CDCStreamOptionsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CDCStreamOptionsPB) Reset() {
	*x = CDCStreamOptionsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCStreamOptionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCStreamOptionsPB) ProtoMessage() {}

func (x *CDCStreamOptionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCStreamOptionsPB.ProtoReflect.Descriptor instead.
func (*CDCStreamOptionsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{166}
}

func (x *CDCStreamOptionsPB) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CDCStreamOptionsPB) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type CreateCDCStreamResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error    *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StreamId []byte         `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *CreateCDCStreamResponsePB) Reset() {
	*x = CreateCDCStreamResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamResponsePB) ProtoMessage() {}

func (x *CreateCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{167}
}

func (x *CreateCDCStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateCDCStreamResponsePB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type DeleteCDCStreamRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId [][]byte `protobuf:"bytes,1,rep,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *DeleteCDCStreamRequestPB) Reset() {
	*x = DeleteCDCStreamRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamRequestPB) ProtoMessage() {}

func (x *DeleteCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{168}
}

func (x *DeleteCDCStreamRequestPB) GetStreamId() [][]byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type DeleteCDCStreamResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteCDCStreamResponsePB) Reset() {
	*x = DeleteCDCStreamResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamResponsePB) ProtoMessage() {}

func (x *DeleteCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{169}
}

func (x *DeleteCDCStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListCDCStreamsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId *string `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *ListCDCStreamsRequestPB) Reset() {
	*x = ListCDCStreamsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCDCStreamsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCDCStreamsRequestPB) ProtoMessage() {}

func (x *ListCDCStreamsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCDCStreamsRequestPB.ProtoReflect.Descriptor instead.
func (*ListCDCStreamsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{170}
}

func (x *ListCDCStreamsRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type ListCDCStreamsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error   *MasterErrorPB     `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Streams []*CDCStreamInfoPB `protobuf:"bytes,2,rep,name=streams" json:"streams,omitempty"`
}

func (x *ListCDCStreamsResponsePB) Reset() {
	*x = ListCDCStreamsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCDCStreamsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCDCStreamsResponsePB) ProtoMessage() {}

func (x *ListCDCStreamsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCDCStreamsResponsePB.ProtoReflect.Descriptor instead.
func (*ListCDCStreamsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{171}
}

func (x *ListCDCStreamsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListCDCStreamsResponsePB) GetStreams() []*CDCStreamInfoPB {
	if x != nil {
		return x.Streams
	}
	return nil
}

type GetCDCStreamRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId []byte `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *GetCDCStreamRequestPB) Reset() {
	*x = GetCDCStreamRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCStreamRequestPB) ProtoMessage() {}

func (x *GetCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*GetCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{172}
}

func (x *GetCDCStreamRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type GetCDCStreamResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error  *MasterErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Stream *CDCStreamInfoPB `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
}

func (x *GetCDCStreamResponsePB) Reset() {
	*x = GetCDCStreamResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCStreamResponsePB) ProtoMessage() {}

func (x *GetCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*GetCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{173}
}

func (x *GetCDCStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCDCStreamResponsePB) GetStream() *CDCStreamInfoPB {
	if x != nil {
		return x.Stream
	}
	return nil
}

type CDCStreamInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId []byte                `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TableId  []byte                `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Options  []*CDCStreamOptionsPB `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
}

func (x *CDCStreamInfoPB) Reset() {
	*x = CDCStreamInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCStreamInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCStreamInfoPB) ProtoMessage() {}

func (x *CDCStreamInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCStreamInfoPB.ProtoReflect.Descriptor instead.
func (*CDCStreamInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{174}
}

func (x *CDCStreamInfoPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *CDCStreamInfoPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CDCStreamInfoPB) GetOptions() []*CDCStreamOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

// TODO: rename to FlushOrCompact TablesRequestPB
// https://github.com/YugaByte/yugabyte-db/issues/729
type FlushTablesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*TableIdentifierPB `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
	// Whether we want to compact the tablets instead of flushing them.
	IsCompaction *bool `protobuf:"varint,2,opt,name=is_compaction,json=isCompaction" json:"is_compaction,omitempty"`
	// Whether we want to include index tables in this flush. If there are index tables in the tables
	// field this field must be set to false, otherwise the request will fail.
	AddIndexes *bool `protobuf:"varint,3,opt,name=add_indexes,json=addIndexes" json:"add_indexes,omitempty"`
}

func (x *FlushTablesRequestPB) Reset() {
	*x = FlushTablesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushTablesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTablesRequestPB) ProtoMessage() {}

func (x *FlushTablesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTablesRequestPB.ProtoReflect.Descriptor instead.
func (*FlushTablesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{175}
}

func (x *FlushTablesRequestPB) GetTables() []*TableIdentifierPB {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *FlushTablesRequestPB) GetIsCompaction() bool {
	if x != nil && x.IsCompaction != nil {
		return *x.IsCompaction
	}
	return false
}

func (x *FlushTablesRequestPB) GetAddIndexes() bool {
	if x != nil && x.AddIndexes != nil {
		return *x.AddIndexes
	}
	return false
}

type FlushTablesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error          *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	FlushRequestId []byte         `protobuf:"bytes,2,opt,name=flush_request_id,json=flushRequestId" json:"flush_request_id,omitempty"`
}

func (x *FlushTablesResponsePB) Reset() {
	*x = FlushTablesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushTablesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTablesResponsePB) ProtoMessage() {}

func (x *FlushTablesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTablesResponsePB.ProtoReflect.Descriptor instead.
func (*FlushTablesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{176}
}

func (x *FlushTablesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FlushTablesResponsePB) GetFlushRequestId() []byte {
	if x != nil {
		return x.FlushRequestId
	}
	return nil
}

type IsFlushTablesDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlushRequestId []byte `protobuf:"bytes,1,opt,name=flush_request_id,json=flushRequestId" json:"flush_request_id,omitempty"`
}

func (x *IsFlushTablesDoneRequestPB) Reset() {
	*x = IsFlushTablesDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFlushTablesDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFlushTablesDoneRequestPB) ProtoMessage() {}

func (x *IsFlushTablesDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFlushTablesDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsFlushTablesDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{177}
}

func (x *IsFlushTablesDoneRequestPB) GetFlushRequestId() []byte {
	if x != nil {
		return x.FlushRequestId
	}
	return nil
}

type IsFlushTablesDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the flush tables operation is completed, false otherwise.
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	// true if the flush tables operation is successful.
	Success *bool `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (x *IsFlushTablesDoneResponsePB) Reset() {
	*x = IsFlushTablesDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFlushTablesDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFlushTablesDoneResponsePB) ProtoMessage() {}

func (x *IsFlushTablesDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFlushTablesDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsFlushTablesDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{178}
}

func (x *IsFlushTablesDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsFlushTablesDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsFlushTablesDoneResponsePB) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

// Reserve Postgres oid
type ReservePgsqlOidsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId []byte  `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"` // The namespace id of the Postgres database.
	NextOid     *uint32 `protobuf:"varint,2,opt,name=next_oid,json=nextOid" json:"next_oid,omitempty"`            // The next oid to reserve.
	Count       *uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`                               // The number of oids to reserve.
}

func (x *ReservePgsqlOidsRequestPB) Reset() {
	*x = ReservePgsqlOidsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservePgsqlOidsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservePgsqlOidsRequestPB) ProtoMessage() {}

func (x *ReservePgsqlOidsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservePgsqlOidsRequestPB.ProtoReflect.Descriptor instead.
func (*ReservePgsqlOidsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{179}
}

func (x *ReservePgsqlOidsRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *ReservePgsqlOidsRequestPB) GetNextOid() uint32 {
	if x != nil && x.NextOid != nil {
		return *x.NextOid
	}
	return 0
}

func (x *ReservePgsqlOidsRequestPB) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ReservePgsqlOidsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error, if an error occurred with this request.
	Error    *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	BeginOid *uint32        `protobuf:"varint,2,opt,name=begin_oid,json=beginOid" json:"begin_oid,omitempty"` // The beginning oid reserved. Can be higher than requested.
	EndOid   *uint32        `protobuf:"varint,3,opt,name=end_oid,json=endOid" json:"end_oid,omitempty"`       // The end (exclusive) oid reserved.
}

func (x *ReservePgsqlOidsResponsePB) Reset() {
	*x = ReservePgsqlOidsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservePgsqlOidsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservePgsqlOidsResponsePB) ProtoMessage() {}

func (x *ReservePgsqlOidsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservePgsqlOidsResponsePB.ProtoReflect.Descriptor instead.
func (*ReservePgsqlOidsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{180}
}

func (x *ReservePgsqlOidsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReservePgsqlOidsResponsePB) GetBeginOid() uint32 {
	if x != nil && x.BeginOid != nil {
		return *x.BeginOid
	}
	return 0
}

func (x *ReservePgsqlOidsResponsePB) GetEndOid() uint32 {
	if x != nil && x.EndOid != nil {
		return *x.EndOid
	}
	return 0
}

type GetYsqlCatalogConfigRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetYsqlCatalogConfigRequestPB) Reset() {
	*x = GetYsqlCatalogConfigRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYsqlCatalogConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYsqlCatalogConfigRequestPB) ProtoMessage() {}

func (x *GetYsqlCatalogConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYsqlCatalogConfigRequestPB.ProtoReflect.Descriptor instead.
func (*GetYsqlCatalogConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{181}
}

type GetYsqlCatalogConfigResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Version *uint64        `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (x *GetYsqlCatalogConfigResponsePB) Reset() {
	*x = GetYsqlCatalogConfigResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetYsqlCatalogConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYsqlCatalogConfigResponsePB) ProtoMessage() {}

func (x *GetYsqlCatalogConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYsqlCatalogConfigResponsePB.ProtoReflect.Descriptor instead.
func (*GetYsqlCatalogConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{182}
}

func (x *GetYsqlCatalogConfigResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetYsqlCatalogConfigResponsePB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type IsInitDbDoneRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsInitDbDoneRequestPB) Reset() {
	*x = IsInitDbDoneRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInitDbDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInitDbDoneRequestPB) ProtoMessage() {}

func (x *IsInitDbDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInitDbDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsInitDbDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{183}
}

type IsInitDbDoneResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Someone started running initdb, as indicated by the existence of template1.pg_proc.
	PgProcExists *bool `protobuf:"varint,2,opt,name=pg_proc_exists,json=pgProcExists" json:"pg_proc_exists,omitempty"`
	// This is true if the master ran initdb and it finished, successfully or not.
	Done *bool `protobuf:"varint,4,opt,name=done" json:"done,omitempty"`
	// If this is set to a non-empty string, initdb has failed.
	InitdbError *string `protobuf:"bytes,5,opt,name=initdb_error,json=initdbError" json:"initdb_error,omitempty"`
}

func (x *IsInitDbDoneResponsePB) Reset() {
	*x = IsInitDbDoneResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsInitDbDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInitDbDoneResponsePB) ProtoMessage() {}

func (x *IsInitDbDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInitDbDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsInitDbDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{184}
}

func (x *IsInitDbDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsInitDbDoneResponsePB) GetPgProcExists() bool {
	if x != nil && x.PgProcExists != nil {
		return *x.PgProcExists
	}
	return false
}

func (x *IsInitDbDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsInitDbDoneResponsePB) GetInitdbError() string {
	if x != nil && x.InitdbError != nil {
		return *x.InitdbError
	}
	return ""
}

type SetupUniverseReplicationRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId              *string              `protobuf:"bytes,1,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	ProducerMasterAddresses []*common.HostPortPB `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	ProducerTableIds        []string             `protobuf:"bytes,3,rep,name=producer_table_ids,json=producerTableIds" json:"producer_table_ids,omitempty"`
	// An id generated by the producer when BootstrapProducer rpc is called.
	ProducerBootstrapIds []string `protobuf:"bytes,4,rep,name=producer_bootstrap_ids,json=producerBootstrapIds" json:"producer_bootstrap_ids,omitempty"`
}

func (x *SetupUniverseReplicationRequestPB) Reset() {
	*x = SetupUniverseReplicationRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupUniverseReplicationRequestPB) ProtoMessage() {}

func (x *SetupUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*SetupUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{185}
}

func (x *SetupUniverseReplicationRequestPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *SetupUniverseReplicationRequestPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *SetupUniverseReplicationRequestPB) GetProducerTableIds() []string {
	if x != nil {
		return x.ProducerTableIds
	}
	return nil
}

func (x *SetupUniverseReplicationRequestPB) GetProducerBootstrapIds() []string {
	if x != nil {
		return x.ProducerBootstrapIds
	}
	return nil
}

type SetupUniverseReplicationResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *SetupUniverseReplicationResponsePB) Reset() {
	*x = SetupUniverseReplicationResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupUniverseReplicationResponsePB) ProtoMessage() {}

func (x *SetupUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*SetupUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{186}
}

func (x *SetupUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteUniverseReplicationRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId *string `protobuf:"bytes,1,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
}

func (x *DeleteUniverseReplicationRequestPB) Reset() {
	*x = DeleteUniverseReplicationRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUniverseReplicationRequestPB) ProtoMessage() {}

func (x *DeleteUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{187}
}

func (x *DeleteUniverseReplicationRequestPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

type DeleteUniverseReplicationResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteUniverseReplicationResponsePB) Reset() {
	*x = DeleteUniverseReplicationResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUniverseReplicationResponsePB) ProtoMessage() {}

func (x *DeleteUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{188}
}

func (x *DeleteUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AlterUniverseReplicationRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId *string `protobuf:"bytes,1,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	// The below options are currently mutually exclusive.  Only 1 operation at a time.
	ProducerMasterAddresses  []*common.HostPortPB `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	ProducerTableIdsToAdd    []string             `protobuf:"bytes,4,rep,name=producer_table_ids_to_add,json=producerTableIdsToAdd" json:"producer_table_ids_to_add,omitempty"`
	ProducerTableIdsToRemove []string             `protobuf:"bytes,5,rep,name=producer_table_ids_to_remove,json=producerTableIdsToRemove" json:"producer_table_ids_to_remove,omitempty"`
}

func (x *AlterUniverseReplicationRequestPB) Reset() {
	*x = AlterUniverseReplicationRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterUniverseReplicationRequestPB) ProtoMessage() {}

func (x *AlterUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*AlterUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{189}
}

func (x *AlterUniverseReplicationRequestPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *AlterUniverseReplicationRequestPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *AlterUniverseReplicationRequestPB) GetProducerTableIdsToAdd() []string {
	if x != nil {
		return x.ProducerTableIdsToAdd
	}
	return nil
}

func (x *AlterUniverseReplicationRequestPB) GetProducerTableIdsToRemove() []string {
	if x != nil {
		return x.ProducerTableIdsToRemove
	}
	return nil
}

type AlterUniverseReplicationResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *AlterUniverseReplicationResponsePB) Reset() {
	*x = AlterUniverseReplicationResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterUniverseReplicationResponsePB) ProtoMessage() {}

func (x *AlterUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*AlterUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{190}
}

func (x *AlterUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type SetUniverseReplicationEnabledRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId *string `protobuf:"bytes,1,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	IsEnabled  *bool   `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (x *SetUniverseReplicationEnabledRequestPB) Reset() {
	*x = SetUniverseReplicationEnabledRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUniverseReplicationEnabledRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUniverseReplicationEnabledRequestPB) ProtoMessage() {}

func (x *SetUniverseReplicationEnabledRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUniverseReplicationEnabledRequestPB.ProtoReflect.Descriptor instead.
func (*SetUniverseReplicationEnabledRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{191}
}

func (x *SetUniverseReplicationEnabledRequestPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *SetUniverseReplicationEnabledRequestPB) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

type SetUniverseReplicationEnabledResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *SetUniverseReplicationEnabledResponsePB) Reset() {
	*x = SetUniverseReplicationEnabledResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUniverseReplicationEnabledResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUniverseReplicationEnabledResponsePB) ProtoMessage() {}

func (x *SetUniverseReplicationEnabledResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUniverseReplicationEnabledResponsePB.ProtoReflect.Descriptor instead.
func (*SetUniverseReplicationEnabledResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{192}
}

func (x *SetUniverseReplicationEnabledResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetUniverseReplicationRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId *string `protobuf:"bytes,1,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
}

func (x *GetUniverseReplicationRequestPB) Reset() {
	*x = GetUniverseReplicationRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationRequestPB) ProtoMessage() {}

func (x *GetUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{193}
}

func (x *GetUniverseReplicationRequestPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

type GetUniverseReplicationResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB                 `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entry *SysUniverseReplicationEntryPB `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (x *GetUniverseReplicationResponsePB) Reset() {
	*x = GetUniverseReplicationResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationResponsePB) ProtoMessage() {}

func (x *GetUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{194}
}

func (x *GetUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUniverseReplicationResponsePB) GetEntry() *SysUniverseReplicationEntryPB {
	if x != nil {
		return x.Entry
	}
	return nil
}

type SplitTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
}

func (x *SplitTabletRequestPB) Reset() {
	*x = SplitTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletRequestPB) ProtoMessage() {}

func (x *SplitTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletRequestPB.ProtoReflect.Descriptor instead.
func (*SplitTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{195}
}

func (x *SplitTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type SplitTabletResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *SplitTabletResponsePB) Reset() {
	*x = SplitTabletResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletResponsePB) ProtoMessage() {}

func (x *SplitTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletResponsePB.ProtoReflect.Descriptor instead.
func (*SplitTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{196}
}

func (x *SplitTabletResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
}

func (x *DeleteTabletRequestPB) Reset() {
	*x = DeleteTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletRequestPB) ProtoMessage() {}

func (x *DeleteTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{197}
}

func (x *DeleteTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type DeleteTabletResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteTabletResponsePB) Reset() {
	*x = DeleteTabletResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletResponsePB) ProtoMessage() {}

func (x *DeleteTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{198}
}

func (x *DeleteTabletResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type TServerMetricsPB_PathMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device path provided by user in --fs_data_dirs
	PathId     []byte  `protobuf:"bytes,1,req,name=path_id,json=pathId" json:"path_id,omitempty"`
	UsedSpace  *uint64 `protobuf:"varint,2,opt,name=used_space,json=usedSpace" json:"used_space,omitempty"`
	TotalSpace *uint64 `protobuf:"varint,3,opt,name=total_space,json=totalSpace" json:"total_space,omitempty"`
}

func (x *TServerMetricsPB_PathMetrics) Reset() {
	*x = TServerMetricsPB_PathMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerMetricsPB_PathMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerMetricsPB_PathMetrics) ProtoMessage() {}

func (x *TServerMetricsPB_PathMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerMetricsPB_PathMetrics.ProtoReflect.Descriptor instead.
func (*TServerMetricsPB_PathMetrics) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{41, 0}
}

func (x *TServerMetricsPB_PathMetrics) GetPathId() []byte {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *TServerMetricsPB_PathMetrics) GetUsedSpace() uint64 {
	if x != nil && x.UsedSpace != nil {
		return *x.UsedSpace
	}
	return 0
}

func (x *TServerMetricsPB_PathMetrics) GetTotalSpace() uint64 {
	if x != nil && x.TotalSpace != nil {
		return *x.TotalSpace
	}
	return 0
}

type ListTabletsOnPathPB_TabletOnPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId                []byte  `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SstFileSize             *uint64 `protobuf:"varint,2,opt,name=sst_file_size,json=sstFileSize" json:"sst_file_size,omitempty"`
	WalFileSize             *uint64 `protobuf:"varint,3,opt,name=wal_file_size,json=walFileSize" json:"wal_file_size,omitempty"`
	UncompressedSstFileSize *uint64 `protobuf:"varint,4,opt,name=uncompressed_sst_file_size,json=uncompressedSstFileSize" json:"uncompressed_sst_file_size,omitempty"`
}

func (x *ListTabletsOnPathPB_TabletOnPath) Reset() {
	*x = ListTabletsOnPathPB_TabletOnPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletsOnPathPB_TabletOnPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsOnPathPB_TabletOnPath) ProtoMessage() {}

func (x *ListTabletsOnPathPB_TabletOnPath) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsOnPathPB_TabletOnPath.ProtoReflect.Descriptor instead.
func (*ListTabletsOnPathPB_TabletOnPath) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{43, 0}
}

func (x *ListTabletsOnPathPB_TabletOnPath) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ListTabletsOnPathPB_TabletOnPath) GetSstFileSize() uint64 {
	if x != nil && x.SstFileSize != nil {
		return *x.SstFileSize
	}
	return 0
}

func (x *ListTabletsOnPathPB_TabletOnPath) GetWalFileSize() uint64 {
	if x != nil && x.WalFileSize != nil {
		return *x.WalFileSize
	}
	return 0
}

func (x *ListTabletsOnPathPB_TabletOnPath) GetUncompressedSstFileSize() uint64 {
	if x != nil && x.UncompressedSstFileSize != nil {
		return *x.UncompressedSstFileSize
	}
	return 0
}

type TabletLocationsPB_ReplicaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsInfo     *TSInfoPB                     `protobuf:"bytes,1,req,name=ts_info,json=tsInfo" json:"ts_info,omitempty"`
	Role       *common.RaftPeerPB_Role       `protobuf:"varint,2,req,name=role,enum=yb.consensus.RaftPeerPB_Role" json:"role,omitempty"`
	MemberType *common.RaftPeerPB_MemberType `protobuf:"varint,3,opt,name=member_type,json=memberType,enum=yb.consensus.RaftPeerPB_MemberType" json:"member_type,omitempty"`
}

func (x *TabletLocationsPB_ReplicaPB) Reset() {
	*x = TabletLocationsPB_ReplicaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletLocationsPB_ReplicaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletLocationsPB_ReplicaPB) ProtoMessage() {}

func (x *TabletLocationsPB_ReplicaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletLocationsPB_ReplicaPB.ProtoReflect.Descriptor instead.
func (*TabletLocationsPB_ReplicaPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{50, 0}
}

func (x *TabletLocationsPB_ReplicaPB) GetTsInfo() *TSInfoPB {
	if x != nil {
		return x.TsInfo
	}
	return nil
}

func (x *TabletLocationsPB_ReplicaPB) GetRole() common.RaftPeerPB_Role {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return common.RaftPeerPB_FOLLOWER
}

func (x *TabletLocationsPB_ReplicaPB) GetMemberType() common.RaftPeerPB_MemberType {
	if x != nil && x.MemberType != nil {
		return *x.MemberType
	}
	return common.RaftPeerPB_UNKNOWN_MEMBER_TYPE
}

type GetTabletLocationsResponsePB_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte              `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	Status   *common.AppStatusPB `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
}

func (x *GetTabletLocationsResponsePB_Error) Reset() {
	*x = GetTabletLocationsResponsePB_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletLocationsResponsePB_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletLocationsResponsePB_Error) ProtoMessage() {}

func (x *GetTabletLocationsResponsePB_Error) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletLocationsResponsePB_Error.ProtoReflect.Descriptor instead.
func (*GetTabletLocationsResponsePB_Error) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{53, 0}
}

func (x *GetTabletLocationsResponsePB_Error) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetTabletLocationsResponsePB_Error) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListTablesResponsePB_TableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           []byte                 `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name         *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	TableType    *common.TableType      `protobuf:"varint,3,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	Namespace    *NamespaceIdentifierPB `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	RelationType *RelationType          `protobuf:"varint,5,opt,name=relation_type,json=relationType,enum=yb.master.RelationType,def=2" json:"relation_type,omitempty"`
}

// Default values for ListTablesResponsePB_TableInfo fields.
const (
	Default_ListTablesResponsePB_TableInfo_RelationType = RelationType_USER_TABLE_RELATION
)

func (x *ListTablesResponsePB_TableInfo) Reset() {
	*x = ListTablesResponsePB_TableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesResponsePB_TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponsePB_TableInfo) ProtoMessage() {}

func (x *ListTablesResponsePB_TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponsePB_TableInfo.ProtoReflect.Descriptor instead.
func (*ListTablesResponsePB_TableInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{71, 0}
}

func (x *ListTablesResponsePB_TableInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListTablesResponsePB_TableInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListTablesResponsePB_TableInfo) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType_YQL_TABLE_TYPE
}

func (x *ListTablesResponsePB_TableInfo) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ListTablesResponsePB_TableInfo) GetRelationType() RelationType {
	if x != nil && x.RelationType != nil {
		return *x.RelationType
	}
	return Default_ListTablesResponsePB_TableInfo_RelationType
}

type AlterTableRequestPB_AddColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schema to add.
	// NOTE: the 'id' field of the schema should not be provided here --
	// the server will assign an ID.
	Schema *common.ColumnSchemaPB `protobuf:"bytes,1,req,name=schema" json:"schema,omitempty"`
}

func (x *AlterTableRequestPB_AddColumn) Reset() {
	*x = AlterTableRequestPB_AddColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableRequestPB_AddColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_AddColumn) ProtoMessage() {}

func (x *AlterTableRequestPB_AddColumn) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_AddColumn.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_AddColumn) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{74, 0}
}

func (x *AlterTableRequestPB_AddColumn) GetSchema() *common.ColumnSchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

type AlterTableRequestPB_DropColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column to drop.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
}

func (x *AlterTableRequestPB_DropColumn) Reset() {
	*x = AlterTableRequestPB_DropColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableRequestPB_DropColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_DropColumn) ProtoMessage() {}

func (x *AlterTableRequestPB_DropColumn) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_DropColumn.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_DropColumn) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{74, 1}
}

func (x *AlterTableRequestPB_DropColumn) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type AlterTableRequestPB_RenameColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column to rename;
	OldName *string `protobuf:"bytes,1,req,name=old_name,json=oldName" json:"old_name,omitempty"`
	NewName *string `protobuf:"bytes,2,req,name=new_name,json=newName" json:"new_name,omitempty"`
}

func (x *AlterTableRequestPB_RenameColumn) Reset() {
	*x = AlterTableRequestPB_RenameColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableRequestPB_RenameColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_RenameColumn) ProtoMessage() {}

func (x *AlterTableRequestPB_RenameColumn) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_RenameColumn.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_RenameColumn) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{74, 2}
}

func (x *AlterTableRequestPB_RenameColumn) GetOldName() string {
	if x != nil && x.OldName != nil {
		return *x.OldName
	}
	return ""
}

func (x *AlterTableRequestPB_RenameColumn) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

type AlterTableRequestPB_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *AlterTableRequestPB_StepType `protobuf:"varint,1,opt,name=type,enum=yb.master.AlterTableRequestPB_StepType,def=0" json:"type,omitempty"`
	// Exactly one of the following must be set, based on 'type'
	AddColumn    *AlterTableRequestPB_AddColumn    `protobuf:"bytes,2,opt,name=add_column,json=addColumn" json:"add_column,omitempty"`
	DropColumn   *AlterTableRequestPB_DropColumn   `protobuf:"bytes,3,opt,name=drop_column,json=dropColumn" json:"drop_column,omitempty"`
	RenameColumn *AlterTableRequestPB_RenameColumn `protobuf:"bytes,4,opt,name=rename_column,json=renameColumn" json:"rename_column,omitempty"`
}

// Default values for AlterTableRequestPB_Step fields.
const (
	Default_AlterTableRequestPB_Step_Type = AlterTableRequestPB_UNKNOWN
)

func (x *AlterTableRequestPB_Step) Reset() {
	*x = AlterTableRequestPB_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableRequestPB_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_Step) ProtoMessage() {}

func (x *AlterTableRequestPB_Step) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_Step.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_Step) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{74, 3}
}

func (x *AlterTableRequestPB_Step) GetType() AlterTableRequestPB_StepType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AlterTableRequestPB_Step_Type
}

func (x *AlterTableRequestPB_Step) GetAddColumn() *AlterTableRequestPB_AddColumn {
	if x != nil {
		return x.AddColumn
	}
	return nil
}

func (x *AlterTableRequestPB_Step) GetDropColumn() *AlterTableRequestPB_DropColumn {
	if x != nil {
		return x.DropColumn
	}
	return nil
}

func (x *AlterTableRequestPB_Step) GetRenameColumn() *AlterTableRequestPB_RenameColumn {
	if x != nil {
		return x.RenameColumn
	}
	return nil
}

type ListTabletServersResponsePB_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId           *common.NodeInstancePB `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Registration         *TSRegistrationPB      `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	MillisSinceHeartbeat *int32                 `protobuf:"varint,3,opt,name=millis_since_heartbeat,json=millisSinceHeartbeat" json:"millis_since_heartbeat,omitempty"`
	Alive                *bool                  `protobuf:"varint,4,opt,name=alive" json:"alive,omitempty"`
	Metrics              *TServerMetricsPB      `protobuf:"bytes,5,opt,name=metrics" json:"metrics,omitempty"`
}

func (x *ListTabletServersResponsePB_Entry) Reset() {
	*x = ListTabletServersResponsePB_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletServersResponsePB_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletServersResponsePB_Entry) ProtoMessage() {}

func (x *ListTabletServersResponsePB_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletServersResponsePB_Entry.ProtoReflect.Descriptor instead.
func (*ListTabletServersResponsePB_Entry) Descriptor() ([]byte, []int) {
	return file_yb_master_master_proto_rawDescGZIP(), []int{83, 0}
}

func (x *ListTabletServersResponsePB_Entry) GetInstanceId() *common.NodeInstancePB {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *ListTabletServersResponsePB_Entry) GetRegistration() *TSRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *ListTabletServersResponsePB_Entry) GetMillisSinceHeartbeat() int32 {
	if x != nil && x.MillisSinceHeartbeat != nil {
		return *x.MillisSinceHeartbeat
	}
	return 0
}

func (x *ListTabletServersResponsePB_Entry) GetAlive() bool {
	if x != nil && x.Alive != nil {
		return *x.Alive
	}
	return false
}

func (x *ListTabletServersResponsePB_Entry) GetMetrics() *TServerMetricsPB {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_yb_master_master_proto protoreflect.FileDescriptor

var file_yb_master_master_proto_rawDesc = []byte{
	0x0a, 0x16, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x79, 0x62, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x79, 0x62, 0x2f, 0x63, 0x64,
	0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x08, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xeb, 0x07, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41,
	0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x09, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x12, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x14, 0x12,
	0x21, 0x0a, 0x1d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x41, 0x4c,
	0x4c, 0x45, 0x4c, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x1b, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x20, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x41,
	0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x1e, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e,
	0x54, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x22,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f,
	0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x24, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x25,
	0x22, 0x49, 0x0a, 0x12, 0x54, 0x53, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52,
	0x0a, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x15,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x5f, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x3f, 0x0a, 0x0d,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52,
	0x0c, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x3f, 0x0a,
	0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x40,
	0x0a, 0x13, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x12, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x95, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x24, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52,
	0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0xb9, 0x02, 0x0a, 0x0b, 0x53, 0x79, 0x73,
	0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x01,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x44, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10,
	0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x10, 0x0c, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x89, 0x07, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x2c, 0x0a,
	0x12, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x4f,
	0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x45,
	0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a,
	0x1b, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x19, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x33,
	0x0a, 0x16, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x1a, 0x42, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x22, 0xd8, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x4a, 0x6f, 0x62, 0x50, 0x42, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62,
	0x50, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x60, 0x0a, 0x12, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0xd3,
	0x0b, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x3e, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52,
	0x12, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73,
	0x5f, 0x70, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69,
	0x73, 0x50, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x42, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50, 0x42, 0x52, 0x0c, 0x62, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x59, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x22, 0x91, 0x03, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x67, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x67, 0x4f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x57, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x73,
	0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x22, 0xb8, 0x05, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68,
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0xa5,
	0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x50, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x73, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x49, 0x73, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xef, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0x53, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x37,
	0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x42, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x4b, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0d,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x42, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x40, 0x0a, 0x1f, 0x48, 0x61, 0x73, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x20, 0x48, 0x61, 0x73, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xb4, 0x03, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x47, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x22, 0xe2, 0x01, 0x0a, 0x0e,
	0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x3f, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x53, 0x79, 0x73, 0x59, 0x53, 0x51, 0x4c, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x49, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x53,
	0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12,
	0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x58, 0x0a, 0x13, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x59, 0x53, 0x51, 0x4c,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x48, 0x00, 0x52, 0x11, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x10, 0x54, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x07, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xa7, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x3a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a,
	0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x13, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x17, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x62, 0x4d, 0x6f, 0x76, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x42, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x15,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x50, 0x42, 0x12, 0x3c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xf9, 0x03,
	0x0a, 0x10, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x50, 0x42, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x73, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x12, 0x29, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x3b, 0x0a,
	0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x1a, 0x66, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xa6, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x4f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x42, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x4f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x1a, 0xb0, 0x01,
	0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x73, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x4f, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x4f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x42, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x65, 0x0a, 0x18, 0x54, 0x53, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x19, 0x54, 0x53, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xa2, 0x05, 0x0a, 0x14, 0x54, 0x53, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53,
	0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x0c, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x42, 0x52, 0x0f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x73, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x74, 0x73, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x73, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0c, 0x74, 0x73, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x74, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x72, 0x74, 0x74, 0x55, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x08,
	0x0a, 0x15, 0x54, 0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x42, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x18, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x15, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x52,
	0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x42, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x42, 0x52, 0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x79, 0x73,
	0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x22, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x79, 0x73,
	0x71, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x15,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62,
	0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x13, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x21, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x54, 0x53,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x3f, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x10, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc8, 0x05,
	0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x42, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50,
	0x42, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x53, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x06, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x42, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50,
	0x42, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x08, 0x54, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x15,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x13, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x12, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x4d, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x08, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12,
	0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x35, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12,
	0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x70, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x67, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x35, 0x0a, 0x16, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22,
	0x49, 0x0a, 0x17, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x1c, 0x49, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x49, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x92, 0x01,
	0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x6f, 0x0a, 0x24, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x25, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x77, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x37, 0x0a,
	0x1a, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1b, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xfc, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x1a, 0xf0, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42,
	0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0xb8, 0x08, 0x0a, 0x13, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a,
	0x12, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x10,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x50, 0x42, 0x52, 0x0f,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x3e, 0x0a,
	0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a,
	0x20, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x44, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xb3, 0x02, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x09, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x4a, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x0a, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x50, 0x0a, 0x0d, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x5d, 0x0a,
	0x08, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x04, 0x22, 0x6d, 0x0a, 0x14,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x19, 0x49,
	0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x87, 0x01, 0x0a,
	0x1a, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb6, 0x05, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x19, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x16, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x23, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1f, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x77,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x65,
	0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x19, 0x67, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x62, 0x73, 0x22, 0x46, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x98, 0x03,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x80, 0x02, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x33, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0xf7, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x33,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x42, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x74, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x42, 0x52,
	0x07, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x44, 0x75, 0x6d,
	0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c,
	0x73, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x73, 0x6f, 0x12, 0x38, 0x0a, 0x15, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x19, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x75, 0x6d, 0x70, 0x22, 0x41, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1f, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x6f,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x4f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x6f, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x55, 0x0a, 0x23, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x1a, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x38, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x4e, 0x0a, 0x1c, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x4f, 0x0a, 0x1d, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4b, 0x0a, 0x17, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x18, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x24, 0x0a, 0x22, 0x41, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x55, 0x0a, 0x23, 0x41, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x26, 0x0a, 0x24,
	0x41, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x22, 0x57, 0x0a, 0x25, 0x41, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf7, 0x02,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x67,
	0x5f, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x67, 0x4f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x1e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x1f, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0xa2, 0x01,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x60, 0x0a, 0x1e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x65, 0x0a, 0x1f, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x74, 0x0a, 0x17, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a,
	0x0a, 0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x10, 0x59,
	0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42,
	0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x01,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4e, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x74, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x74, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa0, 0x01,
	0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x22, 0x45, 0x0a, 0x13, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x83, 0x01,
	0x0a, 0x18, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x22, 0x4b, 0x0a, 0x19, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xdb, 0x02, 0x0a, 0x1e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x22, 0x51,
	0x0a, 0x1f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x17,
	0x69, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x69,
	0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x68, 0x61, 0x6e, 0x22, 0x6b, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xb0, 0x02, 0x0a, 0x14, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3a, 0x0a,
	0x19, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x61, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x74,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x4a, 0x0a, 0x18, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x17, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x78, 0x0a, 0x18, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x48,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x7a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x07, 0x75, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x06, 0x75,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x68, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x34, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x44, 0x43,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x34,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x15,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x46, 0x0a, 0x1a, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x1b, 0x49, 0x73, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50,
	0x67, 0x73, 0x71, 0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4f, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4f, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x6a, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x73, 0x49, 0x6e, 0x69,
	0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x22, 0xa5, 0x01, 0x0a, 0x16, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x64, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x73, 0x22,
	0x54, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x45, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x23,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x8a, 0x02, 0x0a, 0x21, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x22, 0x54, 0x0a, 0x22, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x68, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x59, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x42, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x92, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x14, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x2a, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x32, 0x82, 0x3b, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x54, 0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a,
	0x11, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x56, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x49, 0x73, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x80, 0x01, 0x0a, 0x1b,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x62, 0x0a, 0x11, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x4d, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x10, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x4d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2c,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15, 0x49, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x5f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x5c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x4f, 0x69,
	0x64, 0x73, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67, 0x73, 0x71,
	0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4d, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4a, 0x0a, 0x09, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4d, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x53, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x53, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x59, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x53, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x59, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0b, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6f, 0x0a, 0x1a, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x74,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x68, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x76, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x59, 0x0a, 0x0e, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x12, 0x49,
	0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c,
	0x65, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x41, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x65, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x65, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50,
	0x0a, 0x0b, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x62, 0x0a, 0x11, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x53, 0x0a, 0x0c, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62,
	0x44, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6b, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x77, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x77, 0x0a, 0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x86,
	0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x32, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x23, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x48,
	0x61, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x48, 0x61, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x61,
	0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50,
	0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x53, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x42, 0x12, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xf8, 0x01, 0x01,
}

var (
	file_yb_master_master_proto_rawDescOnce sync.Once
	file_yb_master_master_proto_rawDescData = file_yb_master_master_proto_rawDesc
)

func file_yb_master_master_proto_rawDescGZIP() []byte {
	file_yb_master_master_proto_rawDescOnce.Do(func() {
		file_yb_master_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_master_master_proto_rawDescData)
	})
	return file_yb_master_master_proto_rawDescData
}

var file_yb_master_master_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_yb_master_master_proto_msgTypes = make([]protoimpl.MessageInfo, 213)
var file_yb_master_master_proto_goTypes = []interface{}{
	(RelationType)(0),                               // 0: yb.master.RelationType
	(MasterErrorPB_Code)(0),                         // 1: yb.master.MasterErrorPB.Code
	(SysRowEntry_Type)(0),                           // 2: yb.master.SysRowEntry.Type
	(SysTabletsEntryPB_State)(0),                    // 3: yb.master.SysTabletsEntryPB.State
	(BackfillJobPB_State)(0),                        // 4: yb.master.BackfillJobPB.State
	(SysTablesEntryPB_State)(0),                     // 5: yb.master.SysTablesEntryPB.State
	(SysNamespaceEntryPB_State)(0),                  // 6: yb.master.SysNamespaceEntryPB.State
	(SysCDCStreamEntryPB_State)(0),                  // 7: yb.master.SysCDCStreamEntryPB.State
	(SysUniverseReplicationEntryPB_State)(0),        // 8: yb.master.SysUniverseReplicationEntryPB.State
	(AlterTableRequestPB_StepType)(0),               // 9: yb.master.AlterTableRequestPB.StepType
	(*MasterErrorPB)(nil),                           // 10: yb.master.MasterErrorPB
	(*TSToMasterCommonPB)(nil),                      // 11: yb.master.TSToMasterCommonPB
	(*NamespaceIdentifierPB)(nil),                   // 12: yb.master.NamespaceIdentifierPB
	(*TableIdentifierPB)(nil),                       // 13: yb.master.TableIdentifierPB
	(*TablegroupIdentifierPB)(nil),                  // 14: yb.master.TablegroupIdentifierPB
	(*PlacementBlockPB)(nil),                        // 15: yb.master.PlacementBlockPB
	(*PlacementInfoPB)(nil),                         // 16: yb.master.PlacementInfoPB
	(*ReplicationInfoPB)(nil),                       // 17: yb.master.ReplicationInfoPB
	(*BlacklistPB)(nil),                             // 18: yb.master.BlacklistPB
	(*SysRowEntry)(nil),                             // 19: yb.master.SysRowEntry
	(*SysRowEntries)(nil),                           // 20: yb.master.SysRowEntries
	(*SysTabletsEntryPB)(nil),                       // 21: yb.master.SysTabletsEntryPB
	(*BackfillJobPB)(nil),                           // 22: yb.master.BackfillJobPB
	(*SysTablesEntryPB)(nil),                        // 23: yb.master.SysTablesEntryPB
	(*SysNamespaceEntryPB)(nil),                     // 24: yb.master.SysNamespaceEntryPB
	(*SysUDTypeEntryPB)(nil),                        // 25: yb.master.SysUDTypeEntryPB
	(*SysRedisConfigEntryPB)(nil),                   // 26: yb.master.SysRedisConfigEntryPB
	(*SysCDCStreamEntryPB)(nil),                     // 27: yb.master.SysCDCStreamEntryPB
	(*SysUniverseReplicationEntryPB)(nil),           // 28: yb.master.SysUniverseReplicationEntryPB
	(*ChangeEncryptionInfoRequestPB)(nil),           // 29: yb.master.ChangeEncryptionInfoRequestPB
	(*ChangeEncryptionInfoResponsePB)(nil),          // 30: yb.master.ChangeEncryptionInfoResponsePB
	(*IsEncryptionEnabledRequestPB)(nil),            // 31: yb.master.IsEncryptionEnabledRequestPB
	(*IsEncryptionEnabledResponsePB)(nil),           // 32: yb.master.IsEncryptionEnabledResponsePB
	(*EncryptionInfoPB)(nil),                        // 33: yb.master.EncryptionInfoPB
	(*AddUniverseKeysRequestPB)(nil),                // 34: yb.master.AddUniverseKeysRequestPB
	(*AddUniverseKeysResponsePB)(nil),               // 35: yb.master.AddUniverseKeysResponsePB
	(*GetUniverseKeyRegistryRequestPB)(nil),         // 36: yb.master.GetUniverseKeyRegistryRequestPB
	(*GetUniverseKeyRegistryResponsePB)(nil),        // 37: yb.master.GetUniverseKeyRegistryResponsePB
	(*HasUniverseKeyInMemoryRequestPB)(nil),         // 38: yb.master.HasUniverseKeyInMemoryRequestPB
	(*HasUniverseKeyInMemoryResponsePB)(nil),        // 39: yb.master.HasUniverseKeyInMemoryResponsePB
	(*SysClusterConfigEntryPB)(nil),                 // 40: yb.master.SysClusterConfigEntryPB
	(*SysRoleEntryPB)(nil),                          // 41: yb.master.SysRoleEntryPB
	(*SysSecurityConfigEntryPB)(nil),                // 42: yb.master.SysSecurityConfigEntryPB
	(*SysYSQLCatalogConfigEntryPB)(nil),             // 43: yb.master.SysYSQLCatalogConfigEntryPB
	(*SysConfigEntryPB)(nil),                        // 44: yb.master.SysConfigEntryPB
	(*ResourcePermissionsPB)(nil),                   // 45: yb.master.ResourcePermissionsPB
	(*TSRegistrationPB)(nil),                        // 46: yb.master.TSRegistrationPB
	(*ReportedTabletPB)(nil),                        // 47: yb.master.ReportedTabletPB
	(*TabletReportPB)(nil),                          // 48: yb.master.TabletReportPB
	(*ReportedTabletUpdatesPB)(nil),                 // 49: yb.master.ReportedTabletUpdatesPB
	(*TabletReportUpdatesPB)(nil),                   // 50: yb.master.TabletReportUpdatesPB
	(*TServerMetricsPB)(nil),                        // 51: yb.master.TServerMetricsPB
	(*TabletForSplitPB)(nil),                        // 52: yb.master.TabletForSplitPB
	(*ListTabletsOnPathPB)(nil),                     // 53: yb.master.ListTabletsOnPathPB
	(*TabletPathInfoPB)(nil),                        // 54: yb.master.TabletPathInfoPB
	(*TSSnapshotScheduleInfoPB)(nil),                // 55: yb.master.TSSnapshotScheduleInfoPB
	(*TSSnapshotSchedulesInfoPB)(nil),               // 56: yb.master.TSSnapshotSchedulesInfoPB
	(*TSHeartbeatRequestPB)(nil),                    // 57: yb.master.TSHeartbeatRequestPB
	(*TSHeartbeatResponsePB)(nil),                   // 58: yb.master.TSHeartbeatResponsePB
	(*TSInformationPB)(nil),                         // 59: yb.master.TSInformationPB
	(*TabletLocationsPB)(nil),                       // 60: yb.master.TabletLocationsPB
	(*TSInfoPB)(nil),                                // 61: yb.master.TSInfoPB
	(*GetTabletLocationsRequestPB)(nil),             // 62: yb.master.GetTabletLocationsRequestPB
	(*GetTabletLocationsResponsePB)(nil),            // 63: yb.master.GetTabletLocationsResponsePB
	(*CreateTableRequestPB)(nil),                    // 64: yb.master.CreateTableRequestPB
	(*CreateTableResponsePB)(nil),                   // 65: yb.master.CreateTableResponsePB
	(*IsCreateTableDoneRequestPB)(nil),              // 66: yb.master.IsCreateTableDoneRequestPB
	(*IsCreateTableDoneResponsePB)(nil),             // 67: yb.master.IsCreateTableDoneResponsePB
	(*TruncateTableRequestPB)(nil),                  // 68: yb.master.TruncateTableRequestPB
	(*TruncateTableResponsePB)(nil),                 // 69: yb.master.TruncateTableResponsePB
	(*IsTruncateTableDoneRequestPB)(nil),            // 70: yb.master.IsTruncateTableDoneRequestPB
	(*IsTruncateTableDoneResponsePB)(nil),           // 71: yb.master.IsTruncateTableDoneResponsePB
	(*BackfillIndexRequestPB)(nil),                  // 72: yb.master.BackfillIndexRequestPB
	(*BackfillIndexResponsePB)(nil),                 // 73: yb.master.BackfillIndexResponsePB
	(*LaunchBackfillIndexForTableRequestPB)(nil),    // 74: yb.master.LaunchBackfillIndexForTableRequestPB
	(*LaunchBackfillIndexForTableResponsePB)(nil),   // 75: yb.master.LaunchBackfillIndexForTableResponsePB
	(*DeleteTableRequestPB)(nil),                    // 76: yb.master.DeleteTableRequestPB
	(*DeleteTableResponsePB)(nil),                   // 77: yb.master.DeleteTableResponsePB
	(*IsDeleteTableDoneRequestPB)(nil),              // 78: yb.master.IsDeleteTableDoneRequestPB
	(*IsDeleteTableDoneResponsePB)(nil),             // 79: yb.master.IsDeleteTableDoneResponsePB
	(*ListTablesRequestPB)(nil),                     // 80: yb.master.ListTablesRequestPB
	(*ListTablesResponsePB)(nil),                    // 81: yb.master.ListTablesResponsePB
	(*GetTableLocationsRequestPB)(nil),              // 82: yb.master.GetTableLocationsRequestPB
	(*GetTableLocationsResponsePB)(nil),             // 83: yb.master.GetTableLocationsResponsePB
	(*AlterTableRequestPB)(nil),                     // 84: yb.master.AlterTableRequestPB
	(*AlterTableResponsePB)(nil),                    // 85: yb.master.AlterTableResponsePB
	(*IsAlterTableDoneRequestPB)(nil),               // 86: yb.master.IsAlterTableDoneRequestPB
	(*IsAlterTableDoneResponsePB)(nil),              // 87: yb.master.IsAlterTableDoneResponsePB
	(*GetTableSchemaRequestPB)(nil),                 // 88: yb.master.GetTableSchemaRequestPB
	(*GetTableSchemaResponsePB)(nil),                // 89: yb.master.GetTableSchemaResponsePB
	(*GetColocatedTabletSchemaRequestPB)(nil),       // 90: yb.master.GetColocatedTabletSchemaRequestPB
	(*GetColocatedTabletSchemaResponsePB)(nil),      // 91: yb.master.GetColocatedTabletSchemaResponsePB
	(*ListTabletServersRequestPB)(nil),              // 92: yb.master.ListTabletServersRequestPB
	(*ListTabletServersResponsePB)(nil),             // 93: yb.master.ListTabletServersResponsePB
	(*GetMasterRegistrationRequestPB)(nil),          // 94: yb.master.GetMasterRegistrationRequestPB
	(*GetMasterRegistrationResponsePB)(nil),         // 95: yb.master.GetMasterRegistrationResponsePB
	(*ListMastersRequestPB)(nil),                    // 96: yb.master.ListMastersRequestPB
	(*ListMastersResponsePB)(nil),                   // 97: yb.master.ListMastersResponsePB
	(*ListMasterRaftPeersRequestPB)(nil),            // 98: yb.master.ListMasterRaftPeersRequestPB
	(*ListMasterRaftPeersResponsePB)(nil),           // 99: yb.master.ListMasterRaftPeersResponsePB
	(*DumpMasterStateRequestPB)(nil),                // 100: yb.master.DumpMasterStateRequestPB
	(*DumpMasterStateResponsePB)(nil),               // 101: yb.master.DumpMasterStateResponsePB
	(*ChangeLoadBalancerStateRequestPB)(nil),        // 102: yb.master.ChangeLoadBalancerStateRequestPB
	(*ChangeLoadBalancerStateResponsePB)(nil),       // 103: yb.master.ChangeLoadBalancerStateResponsePB
	(*GetLoadBalancerStateRequestPB)(nil),           // 104: yb.master.GetLoadBalancerStateRequestPB
	(*GetLoadBalancerStateResponsePB)(nil),          // 105: yb.master.GetLoadBalancerStateResponsePB
	(*RemovedMasterUpdateRequestPB)(nil),            // 106: yb.master.RemovedMasterUpdateRequestPB
	(*RemovedMasterUpdateResponsePB)(nil),           // 107: yb.master.RemovedMasterUpdateResponsePB
	(*GetMasterClusterConfigRequestPB)(nil),         // 108: yb.master.GetMasterClusterConfigRequestPB
	(*GetMasterClusterConfigResponsePB)(nil),        // 109: yb.master.GetMasterClusterConfigResponsePB
	(*ChangeMasterClusterConfigRequestPB)(nil),      // 110: yb.master.ChangeMasterClusterConfigRequestPB
	(*ChangeMasterClusterConfigResponsePB)(nil),     // 111: yb.master.ChangeMasterClusterConfigResponsePB
	(*SetPreferredZonesRequestPB)(nil),              // 112: yb.master.SetPreferredZonesRequestPB
	(*SetPreferredZonesResponsePB)(nil),             // 113: yb.master.SetPreferredZonesResponsePB
	(*GetLoadMovePercentRequestPB)(nil),             // 114: yb.master.GetLoadMovePercentRequestPB
	(*GetLeaderBlacklistPercentRequestPB)(nil),      // 115: yb.master.GetLeaderBlacklistPercentRequestPB
	(*GetLoadMovePercentResponsePB)(nil),            // 116: yb.master.GetLoadMovePercentResponsePB
	(*IsLoadBalancerIdleRequestPB)(nil),             // 117: yb.master.IsLoadBalancerIdleRequestPB
	(*IsLoadBalancerIdleResponsePB)(nil),            // 118: yb.master.IsLoadBalancerIdleResponsePB
	(*IsMasterLeaderReadyRequestPB)(nil),            // 119: yb.master.IsMasterLeaderReadyRequestPB
	(*IsMasterLeaderReadyResponsePB)(nil),           // 120: yb.master.IsMasterLeaderReadyResponsePB
	(*IsLoadBalancedRequestPB)(nil),                 // 121: yb.master.IsLoadBalancedRequestPB
	(*IsLoadBalancedResponsePB)(nil),                // 122: yb.master.IsLoadBalancedResponsePB
	(*AreLeadersOnPreferredOnlyRequestPB)(nil),      // 123: yb.master.AreLeadersOnPreferredOnlyRequestPB
	(*AreLeadersOnPreferredOnlyResponsePB)(nil),     // 124: yb.master.AreLeadersOnPreferredOnlyResponsePB
	(*AreTransactionLeadersSpreadRequestPB)(nil),    // 125: yb.master.AreTransactionLeadersSpreadRequestPB
	(*AreTransactionLeadersSpreadResponsePB)(nil),   // 126: yb.master.AreTransactionLeadersSpreadResponsePB
	(*CreateNamespaceRequestPB)(nil),                // 127: yb.master.CreateNamespaceRequestPB
	(*CreateNamespaceResponsePB)(nil),               // 128: yb.master.CreateNamespaceResponsePB
	(*IsCreateNamespaceDoneRequestPB)(nil),          // 129: yb.master.IsCreateNamespaceDoneRequestPB
	(*IsCreateNamespaceDoneResponsePB)(nil),         // 130: yb.master.IsCreateNamespaceDoneResponsePB
	(*DeleteNamespaceRequestPB)(nil),                // 131: yb.master.DeleteNamespaceRequestPB
	(*DeleteNamespaceResponsePB)(nil),               // 132: yb.master.DeleteNamespaceResponsePB
	(*IsDeleteNamespaceDoneRequestPB)(nil),          // 133: yb.master.IsDeleteNamespaceDoneRequestPB
	(*IsDeleteNamespaceDoneResponsePB)(nil),         // 134: yb.master.IsDeleteNamespaceDoneResponsePB
	(*AlterNamespaceRequestPB)(nil),                 // 135: yb.master.AlterNamespaceRequestPB
	(*AlterNamespaceResponsePB)(nil),                // 136: yb.master.AlterNamespaceResponsePB
	(*ListNamespacesRequestPB)(nil),                 // 137: yb.master.ListNamespacesRequestPB
	(*ListNamespacesResponsePB)(nil),                // 138: yb.master.ListNamespacesResponsePB
	(*GetNamespaceInfoRequestPB)(nil),               // 139: yb.master.GetNamespaceInfoRequestPB
	(*GetNamespaceInfoResponsePB)(nil),              // 140: yb.master.GetNamespaceInfoResponsePB
	(*CreateTablegroupRequestPB)(nil),               // 141: yb.master.CreateTablegroupRequestPB
	(*CreateTablegroupResponsePB)(nil),              // 142: yb.master.CreateTablegroupResponsePB
	(*DeleteTablegroupRequestPB)(nil),               // 143: yb.master.DeleteTablegroupRequestPB
	(*DeleteTablegroupResponsePB)(nil),              // 144: yb.master.DeleteTablegroupResponsePB
	(*ListTablegroupsRequestPB)(nil),                // 145: yb.master.ListTablegroupsRequestPB
	(*ListTablegroupsResponsePB)(nil),               // 146: yb.master.ListTablegroupsResponsePB
	(*CreateRoleRequestPB)(nil),                     // 147: yb.master.CreateRoleRequestPB
	(*CreateRoleResponsePB)(nil),                    // 148: yb.master.CreateRoleResponsePB
	(*AlterRoleRequestPB)(nil),                      // 149: yb.master.AlterRoleRequestPB
	(*AlterRoleResponsePB)(nil),                     // 150: yb.master.AlterRoleResponsePB
	(*DeleteRoleRequestPB)(nil),                     // 151: yb.master.DeleteRoleRequestPB
	(*DeleteRoleResponsePB)(nil),                    // 152: yb.master.DeleteRoleResponsePB
	(*GrantRevokeRoleRequestPB)(nil),                // 153: yb.master.GrantRevokeRoleRequestPB
	(*GrantRevokeRoleResponsePB)(nil),               // 154: yb.master.GrantRevokeRoleResponsePB
	(*GrantRevokePermissionRequestPB)(nil),          // 155: yb.master.GrantRevokePermissionRequestPB
	(*GrantRevokePermissionResponsePB)(nil),         // 156: yb.master.GrantRevokePermissionResponsePB
	(*GetPermissionsRequestPB)(nil),                 // 157: yb.master.GetPermissionsRequestPB
	(*ResourcePermissionInfoPB)(nil),                // 158: yb.master.ResourcePermissionInfoPB
	(*RolePermissionInfoPB)(nil),                    // 159: yb.master.RolePermissionInfoPB
	(*GetPermissionsResponsePB)(nil),                // 160: yb.master.GetPermissionsResponsePB
	(*RedisConfigSetRequestPB)(nil),                 // 161: yb.master.RedisConfigSetRequestPB
	(*RedisConfigSetResponsePB)(nil),                // 162: yb.master.RedisConfigSetResponsePB
	(*RedisConfigGetRequestPB)(nil),                 // 163: yb.master.RedisConfigGetRequestPB
	(*RedisConfigGetResponsePB)(nil),                // 164: yb.master.RedisConfigGetResponsePB
	(*CreateUDTypeRequestPB)(nil),                   // 165: yb.master.CreateUDTypeRequestPB
	(*CreateUDTypeResponsePB)(nil),                  // 166: yb.master.CreateUDTypeResponsePB
	(*DeleteUDTypeRequestPB)(nil),                   // 167: yb.master.DeleteUDTypeRequestPB
	(*DeleteUDTypeResponsePB)(nil),                  // 168: yb.master.DeleteUDTypeResponsePB
	(*ListUDTypesRequestPB)(nil),                    // 169: yb.master.ListUDTypesRequestPB
	(*ListUDTypesResponsePB)(nil),                   // 170: yb.master.ListUDTypesResponsePB
	(*GetUDTypeInfoRequestPB)(nil),                  // 171: yb.master.GetUDTypeInfoRequestPB
	(*GetUDTypeInfoResponsePB)(nil),                 // 172: yb.master.GetUDTypeInfoResponsePB
	(*UDTypeIdentifierPB)(nil),                      // 173: yb.master.UDTypeIdentifierPB
	(*UDTypeInfoPB)(nil),                            // 174: yb.master.UDTypeInfoPB
	(*CreateCDCStreamRequestPB)(nil),                // 175: yb.master.CreateCDCStreamRequestPB
	(*CDCStreamOptionsPB)(nil),                      // 176: yb.master.CDCStreamOptionsPB
	(*CreateCDCStreamResponsePB)(nil),               // 177: yb.master.CreateCDCStreamResponsePB
	(*DeleteCDCStreamRequestPB)(nil),                // 178: yb.master.DeleteCDCStreamRequestPB
	(*DeleteCDCStreamResponsePB)(nil),               // 179: yb.master.DeleteCDCStreamResponsePB
	(*ListCDCStreamsRequestPB)(nil),                 // 180: yb.master.ListCDCStreamsRequestPB
	(*ListCDCStreamsResponsePB)(nil),                // 181: yb.master.ListCDCStreamsResponsePB
	(*GetCDCStreamRequestPB)(nil),                   // 182: yb.master.GetCDCStreamRequestPB
	(*GetCDCStreamResponsePB)(nil),                  // 183: yb.master.GetCDCStreamResponsePB
	(*CDCStreamInfoPB)(nil),                         // 184: yb.master.CDCStreamInfoPB
	(*FlushTablesRequestPB)(nil),                    // 185: yb.master.FlushTablesRequestPB
	(*FlushTablesResponsePB)(nil),                   // 186: yb.master.FlushTablesResponsePB
	(*IsFlushTablesDoneRequestPB)(nil),              // 187: yb.master.IsFlushTablesDoneRequestPB
	(*IsFlushTablesDoneResponsePB)(nil),             // 188: yb.master.IsFlushTablesDoneResponsePB
	(*ReservePgsqlOidsRequestPB)(nil),               // 189: yb.master.ReservePgsqlOidsRequestPB
	(*ReservePgsqlOidsResponsePB)(nil),              // 190: yb.master.ReservePgsqlOidsResponsePB
	(*GetYsqlCatalogConfigRequestPB)(nil),           // 191: yb.master.GetYsqlCatalogConfigRequestPB
	(*GetYsqlCatalogConfigResponsePB)(nil),          // 192: yb.master.GetYsqlCatalogConfigResponsePB
	(*IsInitDbDoneRequestPB)(nil),                   // 193: yb.master.IsInitDbDoneRequestPB
	(*IsInitDbDoneResponsePB)(nil),                  // 194: yb.master.IsInitDbDoneResponsePB
	(*SetupUniverseReplicationRequestPB)(nil),       // 195: yb.master.SetupUniverseReplicationRequestPB
	(*SetupUniverseReplicationResponsePB)(nil),      // 196: yb.master.SetupUniverseReplicationResponsePB
	(*DeleteUniverseReplicationRequestPB)(nil),      // 197: yb.master.DeleteUniverseReplicationRequestPB
	(*DeleteUniverseReplicationResponsePB)(nil),     // 198: yb.master.DeleteUniverseReplicationResponsePB
	(*AlterUniverseReplicationRequestPB)(nil),       // 199: yb.master.AlterUniverseReplicationRequestPB
	(*AlterUniverseReplicationResponsePB)(nil),      // 200: yb.master.AlterUniverseReplicationResponsePB
	(*SetUniverseReplicationEnabledRequestPB)(nil),  // 201: yb.master.SetUniverseReplicationEnabledRequestPB
	(*SetUniverseReplicationEnabledResponsePB)(nil), // 202: yb.master.SetUniverseReplicationEnabledResponsePB
	(*GetUniverseReplicationRequestPB)(nil),         // 203: yb.master.GetUniverseReplicationRequestPB
	(*GetUniverseReplicationResponsePB)(nil),        // 204: yb.master.GetUniverseReplicationResponsePB
	(*SplitTabletRequestPB)(nil),                    // 205: yb.master.SplitTabletRequestPB
	(*SplitTabletResponsePB)(nil),                   // 206: yb.master.SplitTabletResponsePB
	(*DeleteTabletRequestPB)(nil),                   // 207: yb.master.DeleteTabletRequestPB
	(*DeleteTabletResponsePB)(nil),                  // 208: yb.master.DeleteTabletResponsePB
	nil,                                             // 209: yb.master.SysTabletsEntryPB.BackfilledUntilEntry
	nil,                                             // 210: yb.master.BackfillJobPB.BackfillStateEntry
	nil,                                             // 211: yb.master.SysUniverseReplicationEntryPB.ValidatedTablesEntry
	nil,                                             // 212: yb.master.SysUniverseReplicationEntryPB.TableStreamsEntry
	(*TServerMetricsPB_PathMetrics)(nil),            // 213: yb.master.TServerMetricsPB.PathMetrics
	(*ListTabletsOnPathPB_TabletOnPath)(nil),        // 214: yb.master.ListTabletsOnPathPB.TabletOnPath
	(*TabletLocationsPB_ReplicaPB)(nil),             // 215: yb.master.TabletLocationsPB.ReplicaPB
	(*GetTabletLocationsResponsePB_Error)(nil),      // 216: yb.master.GetTabletLocationsResponsePB.Error
	(*ListTablesResponsePB_TableInfo)(nil),          // 217: yb.master.ListTablesResponsePB.TableInfo
	(*AlterTableRequestPB_AddColumn)(nil),           // 218: yb.master.AlterTableRequestPB.AddColumn
	(*AlterTableRequestPB_DropColumn)(nil),          // 219: yb.master.AlterTableRequestPB.DropColumn
	(*AlterTableRequestPB_RenameColumn)(nil),        // 220: yb.master.AlterTableRequestPB.RenameColumn
	(*AlterTableRequestPB_Step)(nil),                // 221: yb.master.AlterTableRequestPB.Step
	(*ListTabletServersResponsePB_Entry)(nil),       // 222: yb.master.ListTabletServersResponsePB.Entry
	(*common.AppStatusPB)(nil),                      // 223: yb.AppStatusPB
	(*common.NodeInstancePB)(nil),                   // 224: yb.NodeInstancePB
	(common.YQLDatabase)(0),                         // 225: yb.YQLDatabase
	(*common.CloudInfoPB)(nil),                      // 226: yb.CloudInfoPB
	(*common.HostPortPB)(nil),                       // 227: yb.HostPortPB
	(*common.PartitionPB)(nil),                      // 228: yb.PartitionPB
	(*common.ConsensusStatePB)(nil),                 // 229: yb.consensus.ConsensusStatePB
	(*common.IndexInfoPB)(nil),                      // 230: yb.IndexInfoPB
	(common.TableType)(0),                           // 231: yb.TableType
	(*common.SchemaPB)(nil),                         // 232: yb.SchemaPB
	(*common.PartitionSchemaPB)(nil),                // 233: yb.PartitionSchemaPB
	(*common.TransactionMetadataPB)(nil),            // 234: yb.TransactionMetadataPB
	(*common.QLTypePB)(nil),                         // 235: yb.QLTypePB
	(*util.UniverseKeysPB)(nil),                     // 236: yb.UniverseKeysPB
	(*cdc.ConsumerRegistryPB)(nil),                  // 237: yb.cdc.ConsumerRegistryPB
	(common.ResourceType)(0),                        // 238: yb.ResourceType
	(common.PermissionType)(0),                      // 239: yb.PermissionType
	(*common.ServerRegistrationPB)(nil),             // 240: yb.ServerRegistrationPB
	(common.RaftGroupStatePB)(0),                    // 241: yb.tablet.RaftGroupStatePB
	(common.TabletDataState)(0),                     // 242: yb.tablet.TabletDataState
	(*common.RaftConfigPB)(nil),                     // 243: yb.consensus.RaftConfigPB
	(*util.UniverseKeyRegistryPB)(nil),              // 244: yb.UniverseKeyRegistryPB
	(*common.TablePropertiesPB)(nil),                // 245: yb.TablePropertiesPB
	(common.RaftPeerPB_Role)(0),                     // 246: yb.consensus.RaftPeerPB.Role
	(*common.ServerEntryPB)(nil),                    // 247: yb.ServerEntryPB
	(*common.RaftPeerPB)(nil),                       // 248: yb.consensus.RaftPeerPB
	(common.RaftPeerPB_MemberType)(0),               // 249: yb.consensus.RaftPeerPB.MemberType
	(*common.ColumnSchemaPB)(nil),                   // 250: yb.ColumnSchemaPB
}
var file_yb_master_master_proto_depIdxs = []int32{
	1,   // 0: yb.master.MasterErrorPB.code:type_name -> yb.master.MasterErrorPB.Code
	223, // 1: yb.master.MasterErrorPB.status:type_name -> yb.AppStatusPB
	224, // 2: yb.master.TSToMasterCommonPB.ts_instance:type_name -> yb.NodeInstancePB
	225, // 3: yb.master.NamespaceIdentifierPB.database_type:type_name -> yb.YQLDatabase
	12,  // 4: yb.master.TableIdentifierPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	226, // 5: yb.master.PlacementBlockPB.cloud_info:type_name -> yb.CloudInfoPB
	15,  // 6: yb.master.PlacementInfoPB.placement_blocks:type_name -> yb.master.PlacementBlockPB
	16,  // 7: yb.master.ReplicationInfoPB.live_replicas:type_name -> yb.master.PlacementInfoPB
	16,  // 8: yb.master.ReplicationInfoPB.read_replicas:type_name -> yb.master.PlacementInfoPB
	226, // 9: yb.master.ReplicationInfoPB.affinitized_leaders:type_name -> yb.CloudInfoPB
	227, // 10: yb.master.BlacklistPB.hosts:type_name -> yb.HostPortPB
	2,   // 11: yb.master.SysRowEntry.type:type_name -> yb.master.SysRowEntry.Type
	19,  // 12: yb.master.SysRowEntries.entries:type_name -> yb.master.SysRowEntry
	228, // 13: yb.master.SysTabletsEntryPB.partition:type_name -> yb.PartitionPB
	229, // 14: yb.master.SysTabletsEntryPB.committed_consensus_state:type_name -> yb.consensus.ConsensusStatePB
	3,   // 15: yb.master.SysTabletsEntryPB.state:type_name -> yb.master.SysTabletsEntryPB.State
	209, // 16: yb.master.SysTabletsEntryPB.backfilled_until:type_name -> yb.master.SysTabletsEntryPB.BackfilledUntilEntry
	230, // 17: yb.master.BackfillJobPB.indexes:type_name -> yb.IndexInfoPB
	210, // 18: yb.master.BackfillJobPB.backfill_state:type_name -> yb.master.BackfillJobPB.BackfillStateEntry
	231, // 19: yb.master.SysTablesEntryPB.table_type:type_name -> yb.TableType
	232, // 20: yb.master.SysTablesEntryPB.schema:type_name -> yb.SchemaPB
	232, // 21: yb.master.SysTablesEntryPB.fully_applied_schema:type_name -> yb.SchemaPB
	233, // 22: yb.master.SysTablesEntryPB.partition_schema:type_name -> yb.PartitionSchemaPB
	17,  // 23: yb.master.SysTablesEntryPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	5,   // 24: yb.master.SysTablesEntryPB.state:type_name -> yb.master.SysTablesEntryPB.State
	230, // 25: yb.master.SysTablesEntryPB.indexes:type_name -> yb.IndexInfoPB
	230, // 26: yb.master.SysTablesEntryPB.index_info:type_name -> yb.IndexInfoPB
	230, // 27: yb.master.SysTablesEntryPB.fully_applied_indexes:type_name -> yb.IndexInfoPB
	230, // 28: yb.master.SysTablesEntryPB.fully_applied_index_info:type_name -> yb.IndexInfoPB
	234, // 29: yb.master.SysTablesEntryPB.transaction:type_name -> yb.TransactionMetadataPB
	22,  // 30: yb.master.SysTablesEntryPB.backfill_jobs:type_name -> yb.master.BackfillJobPB
	225, // 31: yb.master.SysNamespaceEntryPB.database_type:type_name -> yb.YQLDatabase
	234, // 32: yb.master.SysNamespaceEntryPB.transaction:type_name -> yb.TransactionMetadataPB
	6,   // 33: yb.master.SysNamespaceEntryPB.state:type_name -> yb.master.SysNamespaceEntryPB.State
	235, // 34: yb.master.SysUDTypeEntryPB.field_types:type_name -> yb.QLTypePB
	176, // 35: yb.master.SysCDCStreamEntryPB.options:type_name -> yb.master.CDCStreamOptionsPB
	7,   // 36: yb.master.SysCDCStreamEntryPB.state:type_name -> yb.master.SysCDCStreamEntryPB.State
	227, // 37: yb.master.SysUniverseReplicationEntryPB.producer_master_addresses:type_name -> yb.HostPortPB
	8,   // 38: yb.master.SysUniverseReplicationEntryPB.state:type_name -> yb.master.SysUniverseReplicationEntryPB.State
	211, // 39: yb.master.SysUniverseReplicationEntryPB.validated_tables:type_name -> yb.master.SysUniverseReplicationEntryPB.ValidatedTablesEntry
	212, // 40: yb.master.SysUniverseReplicationEntryPB.table_streams:type_name -> yb.master.SysUniverseReplicationEntryPB.TableStreamsEntry
	10,  // 41: yb.master.ChangeEncryptionInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 42: yb.master.IsEncryptionEnabledResponsePB.error:type_name -> yb.master.MasterErrorPB
	236, // 43: yb.master.AddUniverseKeysRequestPB.universe_keys:type_name -> yb.UniverseKeysPB
	10,  // 44: yb.master.AddUniverseKeysResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 45: yb.master.GetUniverseKeyRegistryResponsePB.error:type_name -> yb.master.MasterErrorPB
	236, // 46: yb.master.GetUniverseKeyRegistryResponsePB.universe_keys:type_name -> yb.UniverseKeysPB
	10,  // 47: yb.master.HasUniverseKeyInMemoryResponsePB.error:type_name -> yb.master.MasterErrorPB
	17,  // 48: yb.master.SysClusterConfigEntryPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	18,  // 49: yb.master.SysClusterConfigEntryPB.server_blacklist:type_name -> yb.master.BlacklistPB
	18,  // 50: yb.master.SysClusterConfigEntryPB.leader_blacklist:type_name -> yb.master.BlacklistPB
	33,  // 51: yb.master.SysClusterConfigEntryPB.encryption_info:type_name -> yb.master.EncryptionInfoPB
	237, // 52: yb.master.SysClusterConfigEntryPB.consumer_registry:type_name -> yb.cdc.ConsumerRegistryPB
	45,  // 53: yb.master.SysRoleEntryPB.resources:type_name -> yb.master.ResourcePermissionsPB
	42,  // 54: yb.master.SysConfigEntryPB.security_config:type_name -> yb.master.SysSecurityConfigEntryPB
	43,  // 55: yb.master.SysConfigEntryPB.ysql_catalog_config:type_name -> yb.master.SysYSQLCatalogConfigEntryPB
	238, // 56: yb.master.ResourcePermissionsPB.resource_type:type_name -> yb.ResourceType
	239, // 57: yb.master.ResourcePermissionsPB.permissions:type_name -> yb.PermissionType
	240, // 58: yb.master.TSRegistrationPB.common:type_name -> yb.ServerRegistrationPB
	241, // 59: yb.master.ReportedTabletPB.state:type_name -> yb.tablet.RaftGroupStatePB
	242, // 60: yb.master.ReportedTabletPB.tablet_data_state:type_name -> yb.tablet.TabletDataState
	229, // 61: yb.master.ReportedTabletPB.committed_consensus_state:type_name -> yb.consensus.ConsensusStatePB
	223, // 62: yb.master.ReportedTabletPB.error:type_name -> yb.AppStatusPB
	47,  // 63: yb.master.TabletReportPB.updated_tablets:type_name -> yb.master.ReportedTabletPB
	49,  // 64: yb.master.TabletReportUpdatesPB.tablets:type_name -> yb.master.ReportedTabletUpdatesPB
	213, // 65: yb.master.TServerMetricsPB.path_metrics:type_name -> yb.master.TServerMetricsPB.PathMetrics
	214, // 66: yb.master.ListTabletsOnPathPB.tablet:type_name -> yb.master.ListTabletsOnPathPB.TabletOnPath
	53,  // 67: yb.master.TabletPathInfoPB.list_path:type_name -> yb.master.ListTabletsOnPathPB
	55,  // 68: yb.master.TSSnapshotSchedulesInfoPB.schedules:type_name -> yb.master.TSSnapshotScheduleInfoPB
	11,  // 69: yb.master.TSHeartbeatRequestPB.common:type_name -> yb.master.TSToMasterCommonPB
	46,  // 70: yb.master.TSHeartbeatRequestPB.registration:type_name -> yb.master.TSRegistrationPB
	48,  // 71: yb.master.TSHeartbeatRequestPB.tablet_report:type_name -> yb.master.TabletReportPB
	51,  // 72: yb.master.TSHeartbeatRequestPB.metrics:type_name -> yb.master.TServerMetricsPB
	52,  // 73: yb.master.TSHeartbeatRequestPB.tablets_for_split:type_name -> yb.master.TabletForSplitPB
	54,  // 74: yb.master.TSHeartbeatRequestPB.tablet_path_info:type_name -> yb.master.TabletPathInfoPB
	10,  // 75: yb.master.TSHeartbeatResponsePB.error:type_name -> yb.master.MasterErrorPB
	224, // 76: yb.master.TSHeartbeatResponsePB.master_instance:type_name -> yb.NodeInstancePB
	50,  // 77: yb.master.TSHeartbeatResponsePB.tablet_report:type_name -> yb.master.TabletReportUpdatesPB
	243, // 78: yb.master.TSHeartbeatResponsePB.master_config:type_name -> yb.consensus.RaftConfigPB
	59,  // 79: yb.master.TSHeartbeatResponsePB.tservers:type_name -> yb.master.TSInformationPB
	244, // 80: yb.master.TSHeartbeatResponsePB.universe_key_registry:type_name -> yb.UniverseKeyRegistryPB
	237, // 81: yb.master.TSHeartbeatResponsePB.consumer_registry:type_name -> yb.cdc.ConsumerRegistryPB
	56,  // 82: yb.master.TSHeartbeatResponsePB.snapshot_schedules:type_name -> yb.master.TSSnapshotSchedulesInfoPB
	46,  // 83: yb.master.TSInformationPB.registration:type_name -> yb.master.TSRegistrationPB
	224, // 84: yb.master.TSInformationPB.tserver_instance:type_name -> yb.NodeInstancePB
	228, // 85: yb.master.TabletLocationsPB.partition:type_name -> yb.PartitionPB
	215, // 86: yb.master.TabletLocationsPB.replicas:type_name -> yb.master.TabletLocationsPB.ReplicaPB
	227, // 87: yb.master.TSInfoPB.private_rpc_addresses:type_name -> yb.HostPortPB
	227, // 88: yb.master.TSInfoPB.broadcast_addresses:type_name -> yb.HostPortPB
	226, // 89: yb.master.TSInfoPB.cloud_info:type_name -> yb.CloudInfoPB
	10,  // 90: yb.master.GetTabletLocationsResponsePB.error:type_name -> yb.master.MasterErrorPB
	60,  // 91: yb.master.GetTabletLocationsResponsePB.tablet_locations:type_name -> yb.master.TabletLocationsPB
	216, // 92: yb.master.GetTabletLocationsResponsePB.errors:type_name -> yb.master.GetTabletLocationsResponsePB.Error
	232, // 93: yb.master.CreateTableRequestPB.schema:type_name -> yb.SchemaPB
	233, // 94: yb.master.CreateTableRequestPB.partition_schema:type_name -> yb.PartitionSchemaPB
	17,  // 95: yb.master.CreateTableRequestPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	231, // 96: yb.master.CreateTableRequestPB.table_type:type_name -> yb.TableType
	12,  // 97: yb.master.CreateTableRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	230, // 98: yb.master.CreateTableRequestPB.index_info:type_name -> yb.IndexInfoPB
	234, // 99: yb.master.CreateTableRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	228, // 100: yb.master.CreateTableRequestPB.partitions:type_name -> yb.PartitionPB
	10,  // 101: yb.master.CreateTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	13,  // 102: yb.master.IsCreateTableDoneRequestPB.table:type_name -> yb.master.TableIdentifierPB
	10,  // 103: yb.master.IsCreateTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 104: yb.master.TruncateTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 105: yb.master.IsTruncateTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	13,  // 106: yb.master.BackfillIndexRequestPB.index_identifier:type_name -> yb.master.TableIdentifierPB
	10,  // 107: yb.master.BackfillIndexResponsePB.error:type_name -> yb.master.MasterErrorPB
	13,  // 108: yb.master.BackfillIndexResponsePB.table_identifier:type_name -> yb.master.TableIdentifierPB
	13,  // 109: yb.master.LaunchBackfillIndexForTableRequestPB.table_identifier:type_name -> yb.master.TableIdentifierPB
	10,  // 110: yb.master.LaunchBackfillIndexForTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	13,  // 111: yb.master.DeleteTableRequestPB.table:type_name -> yb.master.TableIdentifierPB
	10,  // 112: yb.master.DeleteTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	13,  // 113: yb.master.DeleteTableResponsePB.indexed_table:type_name -> yb.master.TableIdentifierPB
	10,  // 114: yb.master.IsDeleteTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 115: yb.master.ListTablesRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	0,   // 116: yb.master.ListTablesRequestPB.relation_type_filter:type_name -> yb.master.RelationType
	10,  // 117: yb.master.ListTablesResponsePB.error:type_name -> yb.master.MasterErrorPB
	217, // 118: yb.master.ListTablesResponsePB.tables:type_name -> yb.master.ListTablesResponsePB.TableInfo
	13,  // 119: yb.master.GetTableLocationsRequestPB.table:type_name -> yb.master.TableIdentifierPB
	10,  // 120: yb.master.GetTableLocationsResponsePB.error:type_name -> yb.master.MasterErrorPB
	60,  // 121: yb.master.GetTableLocationsResponsePB.tablet_locations:type_name -> yb.master.TabletLocationsPB
	231, // 122: yb.master.GetTableLocationsResponsePB.table_type:type_name -> yb.TableType
	13,  // 123: yb.master.AlterTableRequestPB.table:type_name -> yb.master.TableIdentifierPB
	221, // 124: yb.master.AlterTableRequestPB.alter_schema_steps:type_name -> yb.master.AlterTableRequestPB.Step
	12,  // 125: yb.master.AlterTableRequestPB.new_namespace:type_name -> yb.master.NamespaceIdentifierPB
	245, // 126: yb.master.AlterTableRequestPB.alter_properties:type_name -> yb.TablePropertiesPB
	17,  // 127: yb.master.AlterTableRequestPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	10,  // 128: yb.master.AlterTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	13,  // 129: yb.master.IsAlterTableDoneRequestPB.table:type_name -> yb.master.TableIdentifierPB
	10,  // 130: yb.master.IsAlterTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	13,  // 131: yb.master.GetTableSchemaRequestPB.table:type_name -> yb.master.TableIdentifierPB
	10,  // 132: yb.master.GetTableSchemaResponsePB.error:type_name -> yb.master.MasterErrorPB
	232, // 133: yb.master.GetTableSchemaResponsePB.schema:type_name -> yb.SchemaPB
	233, // 134: yb.master.GetTableSchemaResponsePB.partition_schema:type_name -> yb.PartitionSchemaPB
	17,  // 135: yb.master.GetTableSchemaResponsePB.replication_info:type_name -> yb.master.ReplicationInfoPB
	231, // 136: yb.master.GetTableSchemaResponsePB.table_type:type_name -> yb.TableType
	13,  // 137: yb.master.GetTableSchemaResponsePB.identifier:type_name -> yb.master.TableIdentifierPB
	230, // 138: yb.master.GetTableSchemaResponsePB.indexes:type_name -> yb.IndexInfoPB
	230, // 139: yb.master.GetTableSchemaResponsePB.index_info:type_name -> yb.IndexInfoPB
	13,  // 140: yb.master.GetColocatedTabletSchemaRequestPB.parent_colocated_table:type_name -> yb.master.TableIdentifierPB
	10,  // 141: yb.master.GetColocatedTabletSchemaResponsePB.error:type_name -> yb.master.MasterErrorPB
	89,  // 142: yb.master.GetColocatedTabletSchemaResponsePB.get_table_schema_response_pbs:type_name -> yb.master.GetTableSchemaResponsePB
	10,  // 143: yb.master.ListTabletServersResponsePB.error:type_name -> yb.master.MasterErrorPB
	222, // 144: yb.master.ListTabletServersResponsePB.servers:type_name -> yb.master.ListTabletServersResponsePB.Entry
	224, // 145: yb.master.GetMasterRegistrationResponsePB.instance_id:type_name -> yb.NodeInstancePB
	240, // 146: yb.master.GetMasterRegistrationResponsePB.registration:type_name -> yb.ServerRegistrationPB
	246, // 147: yb.master.GetMasterRegistrationResponsePB.role:type_name -> yb.consensus.RaftPeerPB.Role
	10,  // 148: yb.master.GetMasterRegistrationResponsePB.error:type_name -> yb.master.MasterErrorPB
	247, // 149: yb.master.ListMastersResponsePB.masters:type_name -> yb.ServerEntryPB
	10,  // 150: yb.master.ListMastersResponsePB.error:type_name -> yb.master.MasterErrorPB
	248, // 151: yb.master.ListMasterRaftPeersResponsePB.masters:type_name -> yb.consensus.RaftPeerPB
	10,  // 152: yb.master.ListMasterRaftPeersResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 153: yb.master.DumpMasterStateResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 154: yb.master.ChangeLoadBalancerStateResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 155: yb.master.GetLoadBalancerStateResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 156: yb.master.RemovedMasterUpdateResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 157: yb.master.GetMasterClusterConfigResponsePB.error:type_name -> yb.master.MasterErrorPB
	40,  // 158: yb.master.GetMasterClusterConfigResponsePB.cluster_config:type_name -> yb.master.SysClusterConfigEntryPB
	40,  // 159: yb.master.ChangeMasterClusterConfigRequestPB.cluster_config:type_name -> yb.master.SysClusterConfigEntryPB
	10,  // 160: yb.master.ChangeMasterClusterConfigResponsePB.error:type_name -> yb.master.MasterErrorPB
	226, // 161: yb.master.SetPreferredZonesRequestPB.preferred_zones:type_name -> yb.CloudInfoPB
	10,  // 162: yb.master.SetPreferredZonesResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 163: yb.master.GetLoadMovePercentResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 164: yb.master.IsLoadBalancerIdleResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 165: yb.master.IsMasterLeaderReadyResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 166: yb.master.IsLoadBalancedResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 167: yb.master.AreLeadersOnPreferredOnlyResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 168: yb.master.AreTransactionLeadersSpreadResponsePB.error:type_name -> yb.master.MasterErrorPB
	225, // 169: yb.master.CreateNamespaceRequestPB.database_type:type_name -> yb.YQLDatabase
	234, // 170: yb.master.CreateNamespaceRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	10,  // 171: yb.master.CreateNamespaceResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 172: yb.master.IsCreateNamespaceDoneRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	10,  // 173: yb.master.IsCreateNamespaceDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 174: yb.master.DeleteNamespaceRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	225, // 175: yb.master.DeleteNamespaceRequestPB.database_type:type_name -> yb.YQLDatabase
	10,  // 176: yb.master.DeleteNamespaceResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 177: yb.master.IsDeleteNamespaceDoneRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	10,  // 178: yb.master.IsDeleteNamespaceDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 179: yb.master.AlterNamespaceRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	10,  // 180: yb.master.AlterNamespaceResponsePB.error:type_name -> yb.master.MasterErrorPB
	225, // 181: yb.master.ListNamespacesRequestPB.database_type:type_name -> yb.YQLDatabase
	10,  // 182: yb.master.ListNamespacesResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 183: yb.master.ListNamespacesResponsePB.namespaces:type_name -> yb.master.NamespaceIdentifierPB
	12,  // 184: yb.master.GetNamespaceInfoRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	10,  // 185: yb.master.GetNamespaceInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 186: yb.master.GetNamespaceInfoResponsePB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	10,  // 187: yb.master.CreateTablegroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 188: yb.master.DeleteTablegroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 189: yb.master.ListTablegroupsResponsePB.error:type_name -> yb.master.MasterErrorPB
	14,  // 190: yb.master.ListTablegroupsResponsePB.tablegroups:type_name -> yb.master.TablegroupIdentifierPB
	10,  // 191: yb.master.CreateRoleResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 192: yb.master.AlterRoleResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 193: yb.master.DeleteRoleResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 194: yb.master.GrantRevokeRoleResponsePB.error:type_name -> yb.master.MasterErrorPB
	239, // 195: yb.master.GrantRevokePermissionRequestPB.permission:type_name -> yb.PermissionType
	238, // 196: yb.master.GrantRevokePermissionRequestPB.resource_type:type_name -> yb.ResourceType
	12,  // 197: yb.master.GrantRevokePermissionRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	10,  // 198: yb.master.GrantRevokePermissionResponsePB.error:type_name -> yb.master.MasterErrorPB
	158, // 199: yb.master.RolePermissionInfoPB.resource_permissions:type_name -> yb.master.ResourcePermissionInfoPB
	10,  // 200: yb.master.GetPermissionsResponsePB.error:type_name -> yb.master.MasterErrorPB
	159, // 201: yb.master.GetPermissionsResponsePB.role_permissions:type_name -> yb.master.RolePermissionInfoPB
	10,  // 202: yb.master.RedisConfigSetResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 203: yb.master.RedisConfigGetResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 204: yb.master.CreateUDTypeRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	235, // 205: yb.master.CreateUDTypeRequestPB.field_types:type_name -> yb.QLTypePB
	10,  // 206: yb.master.CreateUDTypeResponsePB.error:type_name -> yb.master.MasterErrorPB
	173, // 207: yb.master.DeleteUDTypeRequestPB.type:type_name -> yb.master.UDTypeIdentifierPB
	10,  // 208: yb.master.DeleteUDTypeResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 209: yb.master.ListUDTypesRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	10,  // 210: yb.master.ListUDTypesResponsePB.error:type_name -> yb.master.MasterErrorPB
	174, // 211: yb.master.ListUDTypesResponsePB.udtypes:type_name -> yb.master.UDTypeInfoPB
	173, // 212: yb.master.GetUDTypeInfoRequestPB.type:type_name -> yb.master.UDTypeIdentifierPB
	10,  // 213: yb.master.GetUDTypeInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	174, // 214: yb.master.GetUDTypeInfoResponsePB.udtype:type_name -> yb.master.UDTypeInfoPB
	12,  // 215: yb.master.UDTypeIdentifierPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	235, // 216: yb.master.UDTypeInfoPB.field_types:type_name -> yb.QLTypePB
	12,  // 217: yb.master.UDTypeInfoPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	176, // 218: yb.master.CreateCDCStreamRequestPB.options:type_name -> yb.master.CDCStreamOptionsPB
	10,  // 219: yb.master.CreateCDCStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 220: yb.master.DeleteCDCStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 221: yb.master.ListCDCStreamsResponsePB.error:type_name -> yb.master.MasterErrorPB
	184, // 222: yb.master.ListCDCStreamsResponsePB.streams:type_name -> yb.master.CDCStreamInfoPB
	10,  // 223: yb.master.GetCDCStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	184, // 224: yb.master.GetCDCStreamResponsePB.stream:type_name -> yb.master.CDCStreamInfoPB
	176, // 225: yb.master.CDCStreamInfoPB.options:type_name -> yb.master.CDCStreamOptionsPB
	13,  // 226: yb.master.FlushTablesRequestPB.tables:type_name -> yb.master.TableIdentifierPB
	10,  // 227: yb.master.FlushTablesResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 228: yb.master.IsFlushTablesDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 229: yb.master.ReservePgsqlOidsResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 230: yb.master.GetYsqlCatalogConfigResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 231: yb.master.IsInitDbDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	227, // 232: yb.master.SetupUniverseReplicationRequestPB.producer_master_addresses:type_name -> yb.HostPortPB
	10,  // 233: yb.master.SetupUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 234: yb.master.DeleteUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	227, // 235: yb.master.AlterUniverseReplicationRequestPB.producer_master_addresses:type_name -> yb.HostPortPB
	10,  // 236: yb.master.AlterUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 237: yb.master.SetUniverseReplicationEnabledResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 238: yb.master.GetUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	28,  // 239: yb.master.GetUniverseReplicationResponsePB.entry:type_name -> yb.master.SysUniverseReplicationEntryPB
	10,  // 240: yb.master.SplitTabletResponsePB.error:type_name -> yb.master.MasterErrorPB
	10,  // 241: yb.master.DeleteTabletResponsePB.error:type_name -> yb.master.MasterErrorPB
	4,   // 242: yb.master.BackfillJobPB.BackfillStateEntry.value:type_name -> yb.master.BackfillJobPB.State
	61,  // 243: yb.master.TabletLocationsPB.ReplicaPB.ts_info:type_name -> yb.master.TSInfoPB
	246, // 244: yb.master.TabletLocationsPB.ReplicaPB.role:type_name -> yb.consensus.RaftPeerPB.Role
	249, // 245: yb.master.TabletLocationsPB.ReplicaPB.member_type:type_name -> yb.consensus.RaftPeerPB.MemberType
	223, // 246: yb.master.GetTabletLocationsResponsePB.Error.status:type_name -> yb.AppStatusPB
	231, // 247: yb.master.ListTablesResponsePB.TableInfo.table_type:type_name -> yb.TableType
	12,  // 248: yb.master.ListTablesResponsePB.TableInfo.namespace:type_name -> yb.master.NamespaceIdentifierPB
	0,   // 249: yb.master.ListTablesResponsePB.TableInfo.relation_type:type_name -> yb.master.RelationType
	250, // 250: yb.master.AlterTableRequestPB.AddColumn.schema:type_name -> yb.ColumnSchemaPB
	9,   // 251: yb.master.AlterTableRequestPB.Step.type:type_name -> yb.master.AlterTableRequestPB.StepType
	218, // 252: yb.master.AlterTableRequestPB.Step.add_column:type_name -> yb.master.AlterTableRequestPB.AddColumn
	219, // 253: yb.master.AlterTableRequestPB.Step.drop_column:type_name -> yb.master.AlterTableRequestPB.DropColumn
	220, // 254: yb.master.AlterTableRequestPB.Step.rename_column:type_name -> yb.master.AlterTableRequestPB.RenameColumn
	224, // 255: yb.master.ListTabletServersResponsePB.Entry.instance_id:type_name -> yb.NodeInstancePB
	46,  // 256: yb.master.ListTabletServersResponsePB.Entry.registration:type_name -> yb.master.TSRegistrationPB
	51,  // 257: yb.master.ListTabletServersResponsePB.Entry.metrics:type_name -> yb.master.TServerMetricsPB
	57,  // 258: yb.master.MasterService.TSHeartbeat:input_type -> yb.master.TSHeartbeatRequestPB
	62,  // 259: yb.master.MasterService.GetTabletLocations:input_type -> yb.master.GetTabletLocationsRequestPB
	64,  // 260: yb.master.MasterService.CreateTable:input_type -> yb.master.CreateTableRequestPB
	66,  // 261: yb.master.MasterService.IsCreateTableDone:input_type -> yb.master.IsCreateTableDoneRequestPB
	68,  // 262: yb.master.MasterService.TruncateTable:input_type -> yb.master.TruncateTableRequestPB
	70,  // 263: yb.master.MasterService.IsTruncateTableDone:input_type -> yb.master.IsTruncateTableDoneRequestPB
	72,  // 264: yb.master.MasterService.BackfillIndex:input_type -> yb.master.BackfillIndexRequestPB
	74,  // 265: yb.master.MasterService.LaunchBackfillIndexForTable:input_type -> yb.master.LaunchBackfillIndexForTableRequestPB
	76,  // 266: yb.master.MasterService.DeleteTable:input_type -> yb.master.DeleteTableRequestPB
	78,  // 267: yb.master.MasterService.IsDeleteTableDone:input_type -> yb.master.IsDeleteTableDoneRequestPB
	84,  // 268: yb.master.MasterService.AlterTable:input_type -> yb.master.AlterTableRequestPB
	86,  // 269: yb.master.MasterService.IsAlterTableDone:input_type -> yb.master.IsAlterTableDoneRequestPB
	80,  // 270: yb.master.MasterService.ListTables:input_type -> yb.master.ListTablesRequestPB
	82,  // 271: yb.master.MasterService.GetTableLocations:input_type -> yb.master.GetTableLocationsRequestPB
	88,  // 272: yb.master.MasterService.GetTableSchema:input_type -> yb.master.GetTableSchemaRequestPB
	90,  // 273: yb.master.MasterService.GetColocatedTabletSchema:input_type -> yb.master.GetColocatedTabletSchemaRequestPB
	127, // 274: yb.master.MasterService.CreateNamespace:input_type -> yb.master.CreateNamespaceRequestPB
	129, // 275: yb.master.MasterService.IsCreateNamespaceDone:input_type -> yb.master.IsCreateNamespaceDoneRequestPB
	131, // 276: yb.master.MasterService.DeleteNamespace:input_type -> yb.master.DeleteNamespaceRequestPB
	133, // 277: yb.master.MasterService.IsDeleteNamespaceDone:input_type -> yb.master.IsDeleteNamespaceDoneRequestPB
	135, // 278: yb.master.MasterService.AlterNamespace:input_type -> yb.master.AlterNamespaceRequestPB
	137, // 279: yb.master.MasterService.ListNamespaces:input_type -> yb.master.ListNamespacesRequestPB
	139, // 280: yb.master.MasterService.GetNamespaceInfo:input_type -> yb.master.GetNamespaceInfoRequestPB
	141, // 281: yb.master.MasterService.CreateTablegroup:input_type -> yb.master.CreateTablegroupRequestPB
	143, // 282: yb.master.MasterService.DeleteTablegroup:input_type -> yb.master.DeleteTablegroupRequestPB
	145, // 283: yb.master.MasterService.ListTablegroups:input_type -> yb.master.ListTablegroupsRequestPB
	189, // 284: yb.master.MasterService.ReservePgsqlOids:input_type -> yb.master.ReservePgsqlOidsRequestPB
	191, // 285: yb.master.MasterService.GetYsqlCatalogConfig:input_type -> yb.master.GetYsqlCatalogConfigRequestPB
	147, // 286: yb.master.MasterService.CreateRole:input_type -> yb.master.CreateRoleRequestPB
	149, // 287: yb.master.MasterService.AlterRole:input_type -> yb.master.AlterRoleRequestPB
	151, // 288: yb.master.MasterService.DeleteRole:input_type -> yb.master.DeleteRoleRequestPB
	153, // 289: yb.master.MasterService.GrantRevokeRole:input_type -> yb.master.GrantRevokeRoleRequestPB
	155, // 290: yb.master.MasterService.GrantRevokePermission:input_type -> yb.master.GrantRevokePermissionRequestPB
	157, // 291: yb.master.MasterService.GetPermissions:input_type -> yb.master.GetPermissionsRequestPB
	165, // 292: yb.master.MasterService.CreateUDType:input_type -> yb.master.CreateUDTypeRequestPB
	167, // 293: yb.master.MasterService.DeleteUDType:input_type -> yb.master.DeleteUDTypeRequestPB
	169, // 294: yb.master.MasterService.ListUDTypes:input_type -> yb.master.ListUDTypesRequestPB
	171, // 295: yb.master.MasterService.GetUDTypeInfo:input_type -> yb.master.GetUDTypeInfoRequestPB
	175, // 296: yb.master.MasterService.CreateCDCStream:input_type -> yb.master.CreateCDCStreamRequestPB
	178, // 297: yb.master.MasterService.DeleteCDCStream:input_type -> yb.master.DeleteCDCStreamRequestPB
	180, // 298: yb.master.MasterService.ListCDCStreams:input_type -> yb.master.ListCDCStreamsRequestPB
	182, // 299: yb.master.MasterService.GetCDCStream:input_type -> yb.master.GetCDCStreamRequestPB
	161, // 300: yb.master.MasterService.RedisConfigSet:input_type -> yb.master.RedisConfigSetRequestPB
	163, // 301: yb.master.MasterService.RedisConfigGet:input_type -> yb.master.RedisConfigGetRequestPB
	92,  // 302: yb.master.MasterService.ListTabletServers:input_type -> yb.master.ListTabletServersRequestPB
	96,  // 303: yb.master.MasterService.ListMasters:input_type -> yb.master.ListMastersRequestPB
	98,  // 304: yb.master.MasterService.ListMasterRaftPeers:input_type -> yb.master.ListMasterRaftPeersRequestPB
	94,  // 305: yb.master.MasterService.GetMasterRegistration:input_type -> yb.master.GetMasterRegistrationRequestPB
	119, // 306: yb.master.MasterService.IsMasterLeaderServiceReady:input_type -> yb.master.IsMasterLeaderReadyRequestPB
	100, // 307: yb.master.MasterService.DumpState:input_type -> yb.master.DumpMasterStateRequestPB
	102, // 308: yb.master.MasterService.ChangeLoadBalancerState:input_type -> yb.master.ChangeLoadBalancerStateRequestPB
	104, // 309: yb.master.MasterService.GetLoadBalancerState:input_type -> yb.master.GetLoadBalancerStateRequestPB
	106, // 310: yb.master.MasterService.RemovedMasterUpdate:input_type -> yb.master.RemovedMasterUpdateRequestPB
	112, // 311: yb.master.MasterService.SetPreferredZones:input_type -> yb.master.SetPreferredZonesRequestPB
	108, // 312: yb.master.MasterService.GetMasterClusterConfig:input_type -> yb.master.GetMasterClusterConfigRequestPB
	110, // 313: yb.master.MasterService.ChangeMasterClusterConfig:input_type -> yb.master.ChangeMasterClusterConfigRequestPB
	114, // 314: yb.master.MasterService.GetLoadMoveCompletion:input_type -> yb.master.GetLoadMovePercentRequestPB
	115, // 315: yb.master.MasterService.GetLeaderBlacklistCompletion:input_type -> yb.master.GetLeaderBlacklistPercentRequestPB
	121, // 316: yb.master.MasterService.IsLoadBalanced:input_type -> yb.master.IsLoadBalancedRequestPB
	117, // 317: yb.master.MasterService.IsLoadBalancerIdle:input_type -> yb.master.IsLoadBalancerIdleRequestPB
	123, // 318: yb.master.MasterService.AreLeadersOnPreferredOnly:input_type -> yb.master.AreLeadersOnPreferredOnlyRequestPB
	185, // 319: yb.master.MasterService.FlushTables:input_type -> yb.master.FlushTablesRequestPB
	187, // 320: yb.master.MasterService.IsFlushTablesDone:input_type -> yb.master.IsFlushTablesDoneRequestPB
	193, // 321: yb.master.MasterService.IsInitDbDone:input_type -> yb.master.IsInitDbDoneRequestPB
	29,  // 322: yb.master.MasterService.ChangeEncryptionInfo:input_type -> yb.master.ChangeEncryptionInfoRequestPB
	31,  // 323: yb.master.MasterService.IsEncryptionEnabled:input_type -> yb.master.IsEncryptionEnabledRequestPB
	195, // 324: yb.master.MasterService.SetupUniverseReplication:input_type -> yb.master.SetupUniverseReplicationRequestPB
	197, // 325: yb.master.MasterService.DeleteUniverseReplication:input_type -> yb.master.DeleteUniverseReplicationRequestPB
	199, // 326: yb.master.MasterService.AlterUniverseReplication:input_type -> yb.master.AlterUniverseReplicationRequestPB
	201, // 327: yb.master.MasterService.SetUniverseReplicationEnabled:input_type -> yb.master.SetUniverseReplicationEnabledRequestPB
	203, // 328: yb.master.MasterService.GetUniverseReplication:input_type -> yb.master.GetUniverseReplicationRequestPB
	34,  // 329: yb.master.MasterService.AddUniverseKeys:input_type -> yb.master.AddUniverseKeysRequestPB
	36,  // 330: yb.master.MasterService.GetUniverseKeyRegistry:input_type -> yb.master.GetUniverseKeyRegistryRequestPB
	38,  // 331: yb.master.MasterService.HasUniverseKeyInMemory:input_type -> yb.master.HasUniverseKeyInMemoryRequestPB
	205, // 332: yb.master.MasterService.SplitTablet:input_type -> yb.master.SplitTabletRequestPB
	207, // 333: yb.master.MasterService.DeleteTablet:input_type -> yb.master.DeleteTabletRequestPB
	58,  // 334: yb.master.MasterService.TSHeartbeat:output_type -> yb.master.TSHeartbeatResponsePB
	63,  // 335: yb.master.MasterService.GetTabletLocations:output_type -> yb.master.GetTabletLocationsResponsePB
	65,  // 336: yb.master.MasterService.CreateTable:output_type -> yb.master.CreateTableResponsePB
	67,  // 337: yb.master.MasterService.IsCreateTableDone:output_type -> yb.master.IsCreateTableDoneResponsePB
	69,  // 338: yb.master.MasterService.TruncateTable:output_type -> yb.master.TruncateTableResponsePB
	71,  // 339: yb.master.MasterService.IsTruncateTableDone:output_type -> yb.master.IsTruncateTableDoneResponsePB
	73,  // 340: yb.master.MasterService.BackfillIndex:output_type -> yb.master.BackfillIndexResponsePB
	75,  // 341: yb.master.MasterService.LaunchBackfillIndexForTable:output_type -> yb.master.LaunchBackfillIndexForTableResponsePB
	77,  // 342: yb.master.MasterService.DeleteTable:output_type -> yb.master.DeleteTableResponsePB
	79,  // 343: yb.master.MasterService.IsDeleteTableDone:output_type -> yb.master.IsDeleteTableDoneResponsePB
	85,  // 344: yb.master.MasterService.AlterTable:output_type -> yb.master.AlterTableResponsePB
	87,  // 345: yb.master.MasterService.IsAlterTableDone:output_type -> yb.master.IsAlterTableDoneResponsePB
	81,  // 346: yb.master.MasterService.ListTables:output_type -> yb.master.ListTablesResponsePB
	83,  // 347: yb.master.MasterService.GetTableLocations:output_type -> yb.master.GetTableLocationsResponsePB
	89,  // 348: yb.master.MasterService.GetTableSchema:output_type -> yb.master.GetTableSchemaResponsePB
	91,  // 349: yb.master.MasterService.GetColocatedTabletSchema:output_type -> yb.master.GetColocatedTabletSchemaResponsePB
	128, // 350: yb.master.MasterService.CreateNamespace:output_type -> yb.master.CreateNamespaceResponsePB
	130, // 351: yb.master.MasterService.IsCreateNamespaceDone:output_type -> yb.master.IsCreateNamespaceDoneResponsePB
	132, // 352: yb.master.MasterService.DeleteNamespace:output_type -> yb.master.DeleteNamespaceResponsePB
	134, // 353: yb.master.MasterService.IsDeleteNamespaceDone:output_type -> yb.master.IsDeleteNamespaceDoneResponsePB
	136, // 354: yb.master.MasterService.AlterNamespace:output_type -> yb.master.AlterNamespaceResponsePB
	138, // 355: yb.master.MasterService.ListNamespaces:output_type -> yb.master.ListNamespacesResponsePB
	140, // 356: yb.master.MasterService.GetNamespaceInfo:output_type -> yb.master.GetNamespaceInfoResponsePB
	142, // 357: yb.master.MasterService.CreateTablegroup:output_type -> yb.master.CreateTablegroupResponsePB
	144, // 358: yb.master.MasterService.DeleteTablegroup:output_type -> yb.master.DeleteTablegroupResponsePB
	146, // 359: yb.master.MasterService.ListTablegroups:output_type -> yb.master.ListTablegroupsResponsePB
	190, // 360: yb.master.MasterService.ReservePgsqlOids:output_type -> yb.master.ReservePgsqlOidsResponsePB
	192, // 361: yb.master.MasterService.GetYsqlCatalogConfig:output_type -> yb.master.GetYsqlCatalogConfigResponsePB
	148, // 362: yb.master.MasterService.CreateRole:output_type -> yb.master.CreateRoleResponsePB
	150, // 363: yb.master.MasterService.AlterRole:output_type -> yb.master.AlterRoleResponsePB
	152, // 364: yb.master.MasterService.DeleteRole:output_type -> yb.master.DeleteRoleResponsePB
	154, // 365: yb.master.MasterService.GrantRevokeRole:output_type -> yb.master.GrantRevokeRoleResponsePB
	156, // 366: yb.master.MasterService.GrantRevokePermission:output_type -> yb.master.GrantRevokePermissionResponsePB
	160, // 367: yb.master.MasterService.GetPermissions:output_type -> yb.master.GetPermissionsResponsePB
	166, // 368: yb.master.MasterService.CreateUDType:output_type -> yb.master.CreateUDTypeResponsePB
	168, // 369: yb.master.MasterService.DeleteUDType:output_type -> yb.master.DeleteUDTypeResponsePB
	170, // 370: yb.master.MasterService.ListUDTypes:output_type -> yb.master.ListUDTypesResponsePB
	172, // 371: yb.master.MasterService.GetUDTypeInfo:output_type -> yb.master.GetUDTypeInfoResponsePB
	177, // 372: yb.master.MasterService.CreateCDCStream:output_type -> yb.master.CreateCDCStreamResponsePB
	179, // 373: yb.master.MasterService.DeleteCDCStream:output_type -> yb.master.DeleteCDCStreamResponsePB
	181, // 374: yb.master.MasterService.ListCDCStreams:output_type -> yb.master.ListCDCStreamsResponsePB
	183, // 375: yb.master.MasterService.GetCDCStream:output_type -> yb.master.GetCDCStreamResponsePB
	162, // 376: yb.master.MasterService.RedisConfigSet:output_type -> yb.master.RedisConfigSetResponsePB
	164, // 377: yb.master.MasterService.RedisConfigGet:output_type -> yb.master.RedisConfigGetResponsePB
	93,  // 378: yb.master.MasterService.ListTabletServers:output_type -> yb.master.ListTabletServersResponsePB
	97,  // 379: yb.master.MasterService.ListMasters:output_type -> yb.master.ListMastersResponsePB
	99,  // 380: yb.master.MasterService.ListMasterRaftPeers:output_type -> yb.master.ListMasterRaftPeersResponsePB
	95,  // 381: yb.master.MasterService.GetMasterRegistration:output_type -> yb.master.GetMasterRegistrationResponsePB
	120, // 382: yb.master.MasterService.IsMasterLeaderServiceReady:output_type -> yb.master.IsMasterLeaderReadyResponsePB
	101, // 383: yb.master.MasterService.DumpState:output_type -> yb.master.DumpMasterStateResponsePB
	103, // 384: yb.master.MasterService.ChangeLoadBalancerState:output_type -> yb.master.ChangeLoadBalancerStateResponsePB
	105, // 385: yb.master.MasterService.GetLoadBalancerState:output_type -> yb.master.GetLoadBalancerStateResponsePB
	107, // 386: yb.master.MasterService.RemovedMasterUpdate:output_type -> yb.master.RemovedMasterUpdateResponsePB
	113, // 387: yb.master.MasterService.SetPreferredZones:output_type -> yb.master.SetPreferredZonesResponsePB
	109, // 388: yb.master.MasterService.GetMasterClusterConfig:output_type -> yb.master.GetMasterClusterConfigResponsePB
	111, // 389: yb.master.MasterService.ChangeMasterClusterConfig:output_type -> yb.master.ChangeMasterClusterConfigResponsePB
	116, // 390: yb.master.MasterService.GetLoadMoveCompletion:output_type -> yb.master.GetLoadMovePercentResponsePB
	116, // 391: yb.master.MasterService.GetLeaderBlacklistCompletion:output_type -> yb.master.GetLoadMovePercentResponsePB
	122, // 392: yb.master.MasterService.IsLoadBalanced:output_type -> yb.master.IsLoadBalancedResponsePB
	118, // 393: yb.master.MasterService.IsLoadBalancerIdle:output_type -> yb.master.IsLoadBalancerIdleResponsePB
	124, // 394: yb.master.MasterService.AreLeadersOnPreferredOnly:output_type -> yb.master.AreLeadersOnPreferredOnlyResponsePB
	186, // 395: yb.master.MasterService.FlushTables:output_type -> yb.master.FlushTablesResponsePB
	188, // 396: yb.master.MasterService.IsFlushTablesDone:output_type -> yb.master.IsFlushTablesDoneResponsePB
	194, // 397: yb.master.MasterService.IsInitDbDone:output_type -> yb.master.IsInitDbDoneResponsePB
	30,  // 398: yb.master.MasterService.ChangeEncryptionInfo:output_type -> yb.master.ChangeEncryptionInfoResponsePB
	32,  // 399: yb.master.MasterService.IsEncryptionEnabled:output_type -> yb.master.IsEncryptionEnabledResponsePB
	196, // 400: yb.master.MasterService.SetupUniverseReplication:output_type -> yb.master.SetupUniverseReplicationResponsePB
	198, // 401: yb.master.MasterService.DeleteUniverseReplication:output_type -> yb.master.DeleteUniverseReplicationResponsePB
	200, // 402: yb.master.MasterService.AlterUniverseReplication:output_type -> yb.master.AlterUniverseReplicationResponsePB
	202, // 403: yb.master.MasterService.SetUniverseReplicationEnabled:output_type -> yb.master.SetUniverseReplicationEnabledResponsePB
	204, // 404: yb.master.MasterService.GetUniverseReplication:output_type -> yb.master.GetUniverseReplicationResponsePB
	35,  // 405: yb.master.MasterService.AddUniverseKeys:output_type -> yb.master.AddUniverseKeysResponsePB
	37,  // 406: yb.master.MasterService.GetUniverseKeyRegistry:output_type -> yb.master.GetUniverseKeyRegistryResponsePB
	39,  // 407: yb.master.MasterService.HasUniverseKeyInMemory:output_type -> yb.master.HasUniverseKeyInMemoryResponsePB
	206, // 408: yb.master.MasterService.SplitTablet:output_type -> yb.master.SplitTabletResponsePB
	208, // 409: yb.master.MasterService.DeleteTablet:output_type -> yb.master.DeleteTabletResponsePB
	334, // [334:410] is the sub-list for method output_type
	258, // [258:334] is the sub-list for method input_type
	258, // [258:258] is the sub-list for extension type_name
	258, // [258:258] is the sub-list for extension extendee
	0,   // [0:258] is the sub-list for field type_name
}

func init() { file_yb_master_master_proto_init() }
func file_yb_master_master_proto_init() {
	if File_yb_master_master_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yb_master_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterErrorPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSToMasterCommonPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablegroupIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementBlockPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRowEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRowEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTabletsEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillJobPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysNamespaceEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysUDTypeEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRedisConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCDCStreamEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysUniverseReplicationEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEncryptionInfoRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEncryptionInfoResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEncryptionEnabledRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsEncryptionEnabledResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUniverseKeysRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUniverseKeysResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniverseKeyRegistryRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniverseKeyRegistryResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasUniverseKeyInMemoryRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasUniverseKeyInMemoryResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysClusterConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRoleEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysSecurityConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysYSQLCatalogConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePermissionsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSRegistrationPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportedTabletPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletReportPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportedTabletUpdatesPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletReportUpdatesPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerMetricsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletForSplitPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletsOnPathPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletPathInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSnapshotScheduleInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSnapshotSchedulesInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSHeartbeatRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSHeartbeatResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSInformationPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletLocationsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabletLocationsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabletLocationsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCreateTableDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCreateTableDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateTableRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateTableResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTruncateTableDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTruncateTableDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillIndexRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillIndexResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchBackfillIndexForTableRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchBackfillIndexForTableResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeleteTableDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeleteTableDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableLocationsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableLocationsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAlterTableDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsAlterTableDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableSchemaRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableSchemaResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetColocatedTabletSchemaRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetColocatedTabletSchemaResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletServersRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletServersResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterRegistrationRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterRegistrationResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMastersRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMastersResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMasterRaftPeersRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMasterRaftPeersResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpMasterStateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpMasterStateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeLoadBalancerStateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeLoadBalancerStateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerStateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerStateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovedMasterUpdateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovedMasterUpdateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterClusterConfigRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterClusterConfigResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMasterClusterConfigRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMasterClusterConfigResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPreferredZonesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPreferredZonesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadMovePercentRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderBlacklistPercentRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadMovePercentResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancerIdleRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancerIdleResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMasterLeaderReadyRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMasterLeaderReadyResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancedRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancedResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreLeadersOnPreferredOnlyRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreLeadersOnPreferredOnlyResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreTransactionLeadersSpreadRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreTransactionLeadersSpreadResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNamespaceResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCreateNamespaceDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCreateNamespaceDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNamespaceResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeleteNamespaceDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeleteNamespaceDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterNamespaceRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterNamespaceResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceInfoRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespaceInfoResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTablegroupRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTablegroupResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTablegroupRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTablegroupResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablegroupsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablegroupsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoleRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoleResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterRoleRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterRoleResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRoleRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRoleResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantRevokeRoleRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantRevokeRoleResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantRevokePermissionRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantRevokePermissionResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePermissionInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolePermissionInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPermissionsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConfigSetRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConfigSetResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConfigGetRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConfigGetResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUDTypeRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUDTypeResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUDTypeRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUDTypeResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUDTypesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUDTypesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUDTypeInfoRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUDTypeInfoResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTypeIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDTypeInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCDCStreamRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCStreamOptionsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCDCStreamResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCDCStreamRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCDCStreamResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCDCStreamsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCDCStreamsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCDCStreamRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCDCStreamResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCStreamInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushTablesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushTablesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFlushTablesDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFlushTablesDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservePgsqlOidsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservePgsqlOidsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYsqlCatalogConfigRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetYsqlCatalogConfigResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInitDbDoneRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsInitDbDoneResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupUniverseReplicationRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupUniverseReplicationResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUniverseReplicationRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUniverseReplicationResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterUniverseReplicationRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterUniverseReplicationResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUniverseReplicationEnabledRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUniverseReplicationEnabledResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniverseReplicationRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniverseReplicationResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTabletResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTabletResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerMetricsPB_PathMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletsOnPathPB_TabletOnPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletLocationsPB_ReplicaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabletLocationsResponsePB_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesResponsePB_TableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableRequestPB_AddColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableRequestPB_DropColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableRequestPB_RenameColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableRequestPB_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletServersResponsePB_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yb_master_master_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*SysConfigEntryPB_SecurityConfig)(nil),
		(*SysConfigEntryPB_YsqlCatalogConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_master_master_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   213,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_master_master_proto_goTypes,
		DependencyIndexes: file_yb_master_master_proto_depIdxs,
		EnumInfos:         file_yb_master_master_proto_enumTypes,
		MessageInfos:      file_yb_master_master_proto_msgTypes,
	}.Build()
	File_yb_master_master_proto = out.File
	file_yb_master_master_proto_rawDesc = nil
	file_yb_master_master_proto_goTypes = nil
	file_yb_master_master_proto_depIdxs = nil
}
