// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/master/master_client.proto

package master

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	consensus "github.com/yugabyte/yb-tools/yugatool/api/yb/consensus"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Info about a single tablet server, returned to the client as part
// of the GetTabletLocations response. This can be used on the client
// to update the local cache of where each TS UUID is located. In
// the future we may also want to transmit software version info,
// load info, topology, etc.
type TSInfoPB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PermanentUuid       []byte                 `protobuf:"bytes,1,req,name=permanent_uuid,json=permanentUuid" json:"permanent_uuid,omitempty"`
	PrivateRpcAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=private_rpc_addresses,json=privateRpcAddresses" json:"private_rpc_addresses,omitempty"`
	BroadcastAddresses  []*common.HostPortPB   `protobuf:"bytes,5,rep,name=broadcast_addresses,json=broadcastAddresses" json:"broadcast_addresses,omitempty"`
	CloudInfo           *common.CloudInfoPB    `protobuf:"bytes,3,opt,name=cloud_info,json=cloudInfo" json:"cloud_info,omitempty"`
	PlacementUuid       []byte                 `protobuf:"bytes,4,opt,name=placement_uuid,json=placementUuid" json:"placement_uuid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TSInfoPB) Reset() {
	*x = TSInfoPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TSInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSInfoPB) ProtoMessage() {}

func (x *TSInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSInfoPB.ProtoReflect.Descriptor instead.
func (*TSInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{0}
}

func (x *TSInfoPB) GetPermanentUuid() []byte {
	if x != nil {
		return x.PermanentUuid
	}
	return nil
}

func (x *TSInfoPB) GetPrivateRpcAddresses() []*common.HostPortPB {
	if x != nil {
		return x.PrivateRpcAddresses
	}
	return nil
}

func (x *TSInfoPB) GetBroadcastAddresses() []*common.HostPortPB {
	if x != nil {
		return x.BroadcastAddresses
	}
	return nil
}

func (x *TSInfoPB) GetCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

func (x *TSInfoPB) GetPlacementUuid() []byte {
	if x != nil {
		return x.PlacementUuid
	}
	return nil
}

type TabletLocationsPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TabletId []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// DEPRECATED.
	StartKey  []byte                         `protobuf:"bytes,2,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	EndKey    []byte                         `protobuf:"bytes,3,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	Partition *common.PartitionPB            `protobuf:"bytes,6,opt,name=partition" json:"partition,omitempty"`
	Replicas  []*TabletLocationsPB_ReplicaPB `protobuf:"bytes,4,rep,name=replicas" json:"replicas,omitempty"`
	// true if the tablet was running but no tablet server has reported it yet.
	// The set of replicas will be the last one that was hosting the tablet.
	// This should happen on Master restart when the request is issued before
	// the TS has the time to notify the Master about the tablets that is hosting.
	Stale   *bool  `protobuf:"varint,5,req,name=stale" json:"stale,omitempty"`
	TableId []byte `protobuf:"bytes,7,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Table ids for all the tables on this tablet.
	TableIds [][]byte `protobuf:"bytes,8,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	// See SysTabletsEntryPB for fields with the same name.
	SplitDepth          *uint64  `protobuf:"varint,9,opt,name=split_depth,json=splitDepth" json:"split_depth,omitempty"`
	SplitParentTabletId []byte   `protobuf:"bytes,12,opt,name=split_parent_tablet_id,json=splitParentTabletId" json:"split_parent_tablet_id,omitempty"`
	SplitTabletIds      [][]byte `protobuf:"bytes,13,rep,name=split_tablet_ids,json=splitTabletIds" json:"split_tablet_ids,omitempty"`
	// Number of expected live replicas.
	ExpectedLiveReplicas *int32 `protobuf:"varint,10,opt,name=expected_live_replicas,json=expectedLiveReplicas" json:"expected_live_replicas,omitempty"`
	// Number of expected read replicas.
	ExpectedReadReplicas *int32 `protobuf:"varint,11,opt,name=expected_read_replicas,json=expectedReadReplicas" json:"expected_read_replicas,omitempty"`
	// Whether or not this tablet has been deleted.
	IsDeleted *bool `protobuf:"varint,14,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// OpId of Committed Raft Config sent back to a tablet server when it requests a meta-
	// -cache refresh. This OpId helps the tablet server determine if its meta-cache entry
	// is stale by comparing this against its current raft_config_opid_index
	RaftConfigOpidIndex *int64 `protobuf:"varint,15,opt,name=raft_config_opid_index,json=raftConfigOpidIndex" json:"raft_config_opid_index,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TabletLocationsPB) Reset() {
	*x = TabletLocationsPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletLocationsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletLocationsPB) ProtoMessage() {}

func (x *TabletLocationsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletLocationsPB.ProtoReflect.Descriptor instead.
func (*TabletLocationsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{1}
}

func (x *TabletLocationsPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletLocationsPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *TabletLocationsPB) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *TabletLocationsPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *TabletLocationsPB) GetReplicas() []*TabletLocationsPB_ReplicaPB {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *TabletLocationsPB) GetStale() bool {
	if x != nil && x.Stale != nil {
		return *x.Stale
	}
	return false
}

func (x *TabletLocationsPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TabletLocationsPB) GetTableIds() [][]byte {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *TabletLocationsPB) GetSplitDepth() uint64 {
	if x != nil && x.SplitDepth != nil {
		return *x.SplitDepth
	}
	return 0
}

func (x *TabletLocationsPB) GetSplitParentTabletId() []byte {
	if x != nil {
		return x.SplitParentTabletId
	}
	return nil
}

func (x *TabletLocationsPB) GetSplitTabletIds() [][]byte {
	if x != nil {
		return x.SplitTabletIds
	}
	return nil
}

func (x *TabletLocationsPB) GetExpectedLiveReplicas() int32 {
	if x != nil && x.ExpectedLiveReplicas != nil {
		return *x.ExpectedLiveReplicas
	}
	return 0
}

func (x *TabletLocationsPB) GetExpectedReadReplicas() int32 {
	if x != nil && x.ExpectedReadReplicas != nil {
		return *x.ExpectedReadReplicas
	}
	return 0
}

func (x *TabletLocationsPB) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

func (x *TabletLocationsPB) GetRaftConfigOpidIndex() int64 {
	if x != nil && x.RaftConfigOpidIndex != nil {
		return *x.RaftConfigOpidIndex
	}
	return 0
}

type GetIndexBackfillProgressRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexIds      []string               `protobuf:"bytes,1,rep,name=index_ids,json=indexIds" json:"index_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIndexBackfillProgressRequestPB) Reset() {
	*x = GetIndexBackfillProgressRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexBackfillProgressRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexBackfillProgressRequestPB) ProtoMessage() {}

func (x *GetIndexBackfillProgressRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexBackfillProgressRequestPB.ProtoReflect.Descriptor instead.
func (*GetIndexBackfillProgressRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{2}
}

func (x *GetIndexBackfillProgressRequestPB) GetIndexIds() []string {
	if x != nil {
		return x.IndexIds
	}
	return nil
}

type GetIndexBackfillProgressResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// The ordering of the indexes' results here is expected to be the same as the ordering in the
	// corresponding request PB (GetIndexBackfillProgressRequestPB).
	RowsProcessedEntries []uint64 `protobuf:"varint,2,rep,name=rows_processed_entries,json=rowsProcessedEntries" json:"rows_processed_entries,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetIndexBackfillProgressResponsePB) Reset() {
	*x = GetIndexBackfillProgressResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIndexBackfillProgressResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIndexBackfillProgressResponsePB) ProtoMessage() {}

func (x *GetIndexBackfillProgressResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIndexBackfillProgressResponsePB.ProtoReflect.Descriptor instead.
func (*GetIndexBackfillProgressResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{3}
}

func (x *GetIndexBackfillProgressResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetIndexBackfillProgressResponsePB) GetRowsProcessedEntries() []uint64 {
	if x != nil {
		return x.RowsProcessedEntries
	}
	return nil
}

type GetTabletLocationsRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tablet IDs about which to fetch info.
	TabletIds [][]byte `protobuf:"bytes,1,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"`
	// If table ID is specified, table's partition_list_version will be included into response.
	TableId []byte `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// If true, then return any hidden tablets as well. Does not work with partition key ranges.
	IncludeInactive *bool `protobuf:"varint,3,opt,name=include_inactive,json=includeInactive" json:"include_inactive,omitempty"`
	// If true, then return any deleted tablets as well (marked with is_deleted in the returned
	// tablet locations).
	IncludeDeleted *bool `protobuf:"varint,4,opt,name=include_deleted,json=includeDeleted" json:"include_deleted,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetTabletLocationsRequestPB) Reset() {
	*x = GetTabletLocationsRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletLocationsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletLocationsRequestPB) ProtoMessage() {}

func (x *GetTabletLocationsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletLocationsRequestPB.ProtoReflect.Descriptor instead.
func (*GetTabletLocationsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{4}
}

func (x *GetTabletLocationsRequestPB) GetTabletIds() [][]byte {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

func (x *GetTabletLocationsRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *GetTabletLocationsRequestPB) GetIncludeInactive() bool {
	if x != nil && x.IncludeInactive != nil {
		return *x.IncludeInactive
	}
	return false
}

func (x *GetTabletLocationsRequestPB) GetIncludeDeleted() bool {
	if x != nil && x.IncludeDeleted != nil {
		return *x.IncludeDeleted
	}
	return false
}

type GetTabletLocationsResponsePB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Error           *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletLocations []*TabletLocationsPB   `protobuf:"bytes,2,rep,name=tablet_locations,json=tabletLocations" json:"tablet_locations,omitempty"`
	// If GetTabletLocationsRequestPB::table_id is set we return table's partition_list_version for
	// this table (see SysTablesEntryPB::partition_list_version).
	PartitionListVersion *uint32                               `protobuf:"varint,4,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	Errors               []*GetTabletLocationsResponsePB_Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetTabletLocationsResponsePB) Reset() {
	*x = GetTabletLocationsResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletLocationsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletLocationsResponsePB) ProtoMessage() {}

func (x *GetTabletLocationsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletLocationsResponsePB.ProtoReflect.Descriptor instead.
func (*GetTabletLocationsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{5}
}

func (x *GetTabletLocationsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTabletLocationsResponsePB) GetTabletLocations() []*TabletLocationsPB {
	if x != nil {
		return x.TabletLocations
	}
	return nil
}

func (x *GetTabletLocationsResponsePB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *GetTabletLocationsResponsePB) GetErrors() []*GetTabletLocationsResponsePB_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetTableLocationsRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Table *TableIdentifierPB     `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	// Partition-key range.
	PartitionKeyStart     []byte  `protobuf:"bytes,3,opt,name=partition_key_start,json=partitionKeyStart" json:"partition_key_start,omitempty"`
	PartitionKeyEnd       []byte  `protobuf:"bytes,4,opt,name=partition_key_end,json=partitionKeyEnd" json:"partition_key_end,omitempty"`
	MaxReturnedLocations  *uint32 `protobuf:"varint,5,opt,name=max_returned_locations,json=maxReturnedLocations,def=10" json:"max_returned_locations,omitempty"`
	RequireTabletsRunning *bool   `protobuf:"varint,6,opt,name=require_tablets_running,json=requireTabletsRunning" json:"require_tablets_running,omitempty"`
	// If true, then return any hidden tablets as well. Does not work with partition key ranges.
	IncludeInactive *bool `protobuf:"varint,7,opt,name=include_inactive,json=includeInactive" json:"include_inactive,omitempty"`
	// When set, the TabletLocationsPBs in the response will only have basic fields and
	// partition-related fields set. The fields set are table_id, tablet_id, partition, split_depth,
	// split_parent_tablet_id, and stale.
	PartitionsOnly *bool `protobuf:"varint,8,opt,name=partitions_only,json=partitionsOnly" json:"partitions_only,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for GetTableLocationsRequestPB fields.
const (
	Default_GetTableLocationsRequestPB_MaxReturnedLocations = uint32(10)
)

func (x *GetTableLocationsRequestPB) Reset() {
	*x = GetTableLocationsRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableLocationsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableLocationsRequestPB) ProtoMessage() {}

func (x *GetTableLocationsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableLocationsRequestPB.ProtoReflect.Descriptor instead.
func (*GetTableLocationsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{6}
}

func (x *GetTableLocationsRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetTableLocationsRequestPB) GetPartitionKeyStart() []byte {
	if x != nil {
		return x.PartitionKeyStart
	}
	return nil
}

func (x *GetTableLocationsRequestPB) GetPartitionKeyEnd() []byte {
	if x != nil {
		return x.PartitionKeyEnd
	}
	return nil
}

func (x *GetTableLocationsRequestPB) GetMaxReturnedLocations() uint32 {
	if x != nil && x.MaxReturnedLocations != nil {
		return *x.MaxReturnedLocations
	}
	return Default_GetTableLocationsRequestPB_MaxReturnedLocations
}

func (x *GetTableLocationsRequestPB) GetRequireTabletsRunning() bool {
	if x != nil && x.RequireTabletsRunning != nil {
		return *x.RequireTabletsRunning
	}
	return false
}

func (x *GetTableLocationsRequestPB) GetIncludeInactive() bool {
	if x != nil && x.IncludeInactive != nil {
		return *x.IncludeInactive
	}
	return false
}

func (x *GetTableLocationsRequestPB) GetPartitionsOnly() bool {
	if x != nil && x.PartitionsOnly != nil {
		return *x.PartitionsOnly
	}
	return false
}

type GetTableLocationsResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error           *MasterErrorPB       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletLocations []*TabletLocationsPB `protobuf:"bytes,2,rep,name=tablet_locations,json=tabletLocations" json:"tablet_locations,omitempty"`
	TableType       *common.TableType    `protobuf:"varint,3,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	// See SysTablesEntryPB for field with the same name.
	PartitionListVersion *uint32 `protobuf:"varint,4,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	Creating             *bool   `protobuf:"varint,5,opt,name=creating" json:"creating,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetTableLocationsResponsePB) Reset() {
	*x = GetTableLocationsResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableLocationsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableLocationsResponsePB) ProtoMessage() {}

func (x *GetTableLocationsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableLocationsResponsePB.ProtoReflect.Descriptor instead.
func (*GetTableLocationsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{7}
}

func (x *GetTableLocationsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTableLocationsResponsePB) GetTabletLocations() []*TabletLocationsPB {
	if x != nil {
		return x.TabletLocations
	}
	return nil
}

func (x *GetTableLocationsResponsePB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType(2)
}

func (x *GetTableLocationsResponsePB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *GetTableLocationsResponsePB) GetCreating() bool {
	if x != nil && x.Creating != nil {
		return *x.Creating
	}
	return false
}

type GetTransactionStatusTabletsRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Placement to use when deciding which local transaction tables should be considered.
	// No local transaction tablets will be returned if not set.
	Placement     *common.CloudInfoPB `protobuf:"bytes,1,opt,name=placement" json:"placement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionStatusTabletsRequestPB) Reset() {
	*x = GetTransactionStatusTabletsRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusTabletsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusTabletsRequestPB) ProtoMessage() {}

func (x *GetTransactionStatusTabletsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusTabletsRequestPB.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusTabletsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{8}
}

func (x *GetTransactionStatusTabletsRequestPB) GetPlacement() *common.CloudInfoPB {
	if x != nil {
		return x.Placement
	}
	return nil
}

type GetTransactionStatusTabletsResponsePB struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Error                  *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	GlobalTabletId         [][]byte               `protobuf:"bytes,2,rep,name=global_tablet_id,json=globalTabletId" json:"global_tablet_id,omitempty"`
	PlacementLocalTabletId [][]byte               `protobuf:"bytes,3,rep,name=placement_local_tablet_id,json=placementLocalTabletId" json:"placement_local_tablet_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetTransactionStatusTabletsResponsePB) Reset() {
	*x = GetTransactionStatusTabletsResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusTabletsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusTabletsResponsePB) ProtoMessage() {}

func (x *GetTransactionStatusTabletsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusTabletsResponsePB.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusTabletsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{9}
}

func (x *GetTransactionStatusTabletsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTransactionStatusTabletsResponsePB) GetGlobalTabletId() [][]byte {
	if x != nil {
		return x.GlobalTabletId
	}
	return nil
}

func (x *GetTransactionStatusTabletsResponsePB) GetPlacementLocalTabletId() [][]byte {
	if x != nil {
		return x.PlacementLocalTabletId
	}
	return nil
}

// Reserve Postgres oid
type ReservePgsqlOidsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   []byte                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"` // The namespace id of the Postgres database.
	NextOid       *uint32                `protobuf:"varint,2,opt,name=next_oid,json=nextOid" json:"next_oid,omitempty"`            // The next oid to reserve.
	Count         *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`                               // The number of oids to reserve.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReservePgsqlOidsRequestPB) Reset() {
	*x = ReservePgsqlOidsRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReservePgsqlOidsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservePgsqlOidsRequestPB) ProtoMessage() {}

func (x *ReservePgsqlOidsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservePgsqlOidsRequestPB.ProtoReflect.Descriptor instead.
func (*ReservePgsqlOidsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{10}
}

func (x *ReservePgsqlOidsRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *ReservePgsqlOidsRequestPB) GetNextOid() uint32 {
	if x != nil && x.NextOid != nil {
		return *x.NextOid
	}
	return 0
}

func (x *ReservePgsqlOidsRequestPB) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ReservePgsqlOidsResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	BeginOid      *uint32        `protobuf:"varint,2,opt,name=begin_oid,json=beginOid" json:"begin_oid,omitempty"` // The beginning oid reserved. Can be higher than requested.
	EndOid        *uint32        `protobuf:"varint,3,opt,name=end_oid,json=endOid" json:"end_oid,omitempty"`       // The end (exclusive) oid reserved.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReservePgsqlOidsResponsePB) Reset() {
	*x = ReservePgsqlOidsResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReservePgsqlOidsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservePgsqlOidsResponsePB) ProtoMessage() {}

func (x *ReservePgsqlOidsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservePgsqlOidsResponsePB.ProtoReflect.Descriptor instead.
func (*ReservePgsqlOidsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{11}
}

func (x *ReservePgsqlOidsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReservePgsqlOidsResponsePB) GetBeginOid() uint32 {
	if x != nil && x.BeginOid != nil {
		return *x.BeginOid
	}
	return 0
}

func (x *ReservePgsqlOidsResponsePB) GetEndOid() uint32 {
	if x != nil && x.EndOid != nil {
		return *x.EndOid
	}
	return 0
}

type GetYsqlCatalogConfigRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYsqlCatalogConfigRequestPB) Reset() {
	*x = GetYsqlCatalogConfigRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYsqlCatalogConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYsqlCatalogConfigRequestPB) ProtoMessage() {}

func (x *GetYsqlCatalogConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYsqlCatalogConfigRequestPB.ProtoReflect.Descriptor instead.
func (*GetYsqlCatalogConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{12}
}

type GetYsqlCatalogConfigResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Version       *uint64                `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetYsqlCatalogConfigResponsePB) Reset() {
	*x = GetYsqlCatalogConfigResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetYsqlCatalogConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetYsqlCatalogConfigResponsePB) ProtoMessage() {}

func (x *GetYsqlCatalogConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetYsqlCatalogConfigResponsePB.ProtoReflect.Descriptor instead.
func (*GetYsqlCatalogConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{13}
}

func (x *GetYsqlCatalogConfigResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetYsqlCatalogConfigResponsePB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type RedisConfigSetRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyword       *string                `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Args          [][]byte               `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisConfigSetRequestPB) Reset() {
	*x = RedisConfigSetRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisConfigSetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigSetRequestPB) ProtoMessage() {}

func (x *RedisConfigSetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigSetRequestPB.ProtoReflect.Descriptor instead.
func (*RedisConfigSetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{14}
}

func (x *RedisConfigSetRequestPB) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *RedisConfigSetRequestPB) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type RedisConfigSetResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisConfigSetResponsePB) Reset() {
	*x = RedisConfigSetResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisConfigSetResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigSetResponsePB) ProtoMessage() {}

func (x *RedisConfigSetResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigSetResponsePB.ProtoReflect.Descriptor instead.
func (*RedisConfigSetResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{15}
}

func (x *RedisConfigSetResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type RedisConfigGetRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyword       *string                `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisConfigGetRequestPB) Reset() {
	*x = RedisConfigGetRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisConfigGetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigGetRequestPB) ProtoMessage() {}

func (x *RedisConfigGetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigGetRequestPB.ProtoReflect.Descriptor instead.
func (*RedisConfigGetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{16}
}

func (x *RedisConfigGetRequestPB) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

type RedisConfigGetResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keyword       *string                `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Args          [][]byte               `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	Error         *MasterErrorPB         `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisConfigGetResponsePB) Reset() {
	*x = RedisConfigGetResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisConfigGetResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfigGetResponsePB) ProtoMessage() {}

func (x *RedisConfigGetResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfigGetResponsePB.ProtoReflect.Descriptor instead.
func (*RedisConfigGetResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{17}
}

func (x *RedisConfigGetResponsePB) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *RedisConfigGetResponsePB) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RedisConfigGetResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetStatefulServiceLocationRequestPB struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	ServiceKind   *common.StatefulServiceKind `protobuf:"varint,1,opt,name=service_kind,json=serviceKind,enum=yb.StatefulServiceKind" json:"service_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatefulServiceLocationRequestPB) Reset() {
	*x = GetStatefulServiceLocationRequestPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatefulServiceLocationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatefulServiceLocationRequestPB) ProtoMessage() {}

func (x *GetStatefulServiceLocationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatefulServiceLocationRequestPB.ProtoReflect.Descriptor instead.
func (*GetStatefulServiceLocationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{18}
}

func (x *GetStatefulServiceLocationRequestPB) GetServiceKind() common.StatefulServiceKind {
	if x != nil && x.ServiceKind != nil {
		return *x.ServiceKind
	}
	return common.StatefulServiceKind(0)
}

type StatefulServiceInfoPB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PermanentUuid       []byte                 `protobuf:"bytes,1,opt,name=permanent_uuid,json=permanentUuid" json:"permanent_uuid,omitempty"`
	PrivateRpcAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=private_rpc_addresses,json=privateRpcAddresses" json:"private_rpc_addresses,omitempty"`
	BroadcastAddresses  []*common.HostPortPB   `protobuf:"bytes,3,rep,name=broadcast_addresses,json=broadcastAddresses" json:"broadcast_addresses,omitempty"`
	CloudInfo           *common.CloudInfoPB    `protobuf:"bytes,4,opt,name=cloud_info,json=cloudInfo" json:"cloud_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StatefulServiceInfoPB) Reset() {
	*x = StatefulServiceInfoPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatefulServiceInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatefulServiceInfoPB) ProtoMessage() {}

func (x *StatefulServiceInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatefulServiceInfoPB.ProtoReflect.Descriptor instead.
func (*StatefulServiceInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{19}
}

func (x *StatefulServiceInfoPB) GetPermanentUuid() []byte {
	if x != nil {
		return x.PermanentUuid
	}
	return nil
}

func (x *StatefulServiceInfoPB) GetPrivateRpcAddresses() []*common.HostPortPB {
	if x != nil {
		return x.PrivateRpcAddresses
	}
	return nil
}

func (x *StatefulServiceInfoPB) GetBroadcastAddresses() []*common.HostPortPB {
	if x != nil {
		return x.BroadcastAddresses
	}
	return nil
}

func (x *StatefulServiceInfoPB) GetCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

type GetStatefulServiceLocationResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ServiceInfo   *StatefulServiceInfoPB `protobuf:"bytes,2,opt,name=service_info,json=serviceInfo" json:"service_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatefulServiceLocationResponsePB) Reset() {
	*x = GetStatefulServiceLocationResponsePB{}
	mi := &file_yb_master_master_client_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatefulServiceLocationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatefulServiceLocationResponsePB) ProtoMessage() {}

func (x *GetStatefulServiceLocationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatefulServiceLocationResponsePB.ProtoReflect.Descriptor instead.
func (*GetStatefulServiceLocationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatefulServiceLocationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetStatefulServiceLocationResponsePB) GetServiceInfo() *StatefulServiceInfoPB {
	if x != nil {
		return x.ServiceInfo
	}
	return nil
}

type TabletLocationsPB_ReplicaPB struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	TsInfo        *TSInfoPB                 `protobuf:"bytes,1,req,name=ts_info,json=tsInfo" json:"ts_info,omitempty"`
	Role          *common.PeerRole          `protobuf:"varint,2,req,name=role,enum=yb.PeerRole" json:"role,omitempty"`
	MemberType    *consensus.PeerMemberType `protobuf:"varint,3,opt,name=member_type,json=memberType,enum=yb.consensus.PeerMemberType" json:"member_type,omitempty"`
	State         *tablet.RaftGroupStatePB  `protobuf:"varint,4,opt,name=state,enum=yb.tablet.RaftGroupStatePB" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TabletLocationsPB_ReplicaPB) Reset() {
	*x = TabletLocationsPB_ReplicaPB{}
	mi := &file_yb_master_master_client_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletLocationsPB_ReplicaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletLocationsPB_ReplicaPB) ProtoMessage() {}

func (x *TabletLocationsPB_ReplicaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletLocationsPB_ReplicaPB.ProtoReflect.Descriptor instead.
func (*TabletLocationsPB_ReplicaPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TabletLocationsPB_ReplicaPB) GetTsInfo() *TSInfoPB {
	if x != nil {
		return x.TsInfo
	}
	return nil
}

func (x *TabletLocationsPB_ReplicaPB) GetRole() common.PeerRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return common.PeerRole(0)
}

func (x *TabletLocationsPB_ReplicaPB) GetMemberType() consensus.PeerMemberType {
	if x != nil && x.MemberType != nil {
		return *x.MemberType
	}
	return consensus.PeerMemberType(999)
}

func (x *TabletLocationsPB_ReplicaPB) GetState() tablet.RaftGroupStatePB {
	if x != nil && x.State != nil {
		return *x.State
	}
	return tablet.RaftGroupStatePB(999)
}

type GetTabletLocationsResponsePB_Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	Status        *common.AppStatusPB    `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletLocationsResponsePB_Error) Reset() {
	*x = GetTabletLocationsResponsePB_Error{}
	mi := &file_yb_master_master_client_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletLocationsResponsePB_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletLocationsResponsePB_Error) ProtoMessage() {}

func (x *GetTabletLocationsResponsePB_Error) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_client_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletLocationsResponsePB_Error.ProtoReflect.Descriptor instead.
func (*GetTabletLocationsResponsePB_Error) Descriptor() ([]byte, []int) {
	return file_yb_master_master_client_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetTabletLocationsResponsePB_Error) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetTabletLocationsResponsePB_Error) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_yb_master_master_client_proto protoreflect.FileDescriptor

var file_yb_master_master_client_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x08, 0x54,
	0x53, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x0d, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x42,
	0x0a, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x13, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52,
	0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x22, 0xb7, 0x06, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x50, 0x42, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x70, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xcd, 0x01, 0x0a, 0x09, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x42, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x06,
	0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x42, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x22, 0x8a, 0x01, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x14, 0x72, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42,
	0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x4d,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf2, 0x02,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x02, 0x31, 0x30,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x55, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x6f, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67, 0x73, 0x71,
	0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4f, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x65, 0x6e, 0x64, 0x4f, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x59, 0x73,
	0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x6a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x59,
	0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x4a, 0x0a,
	0x18, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x17, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x78,
	0x0a, 0x18, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x15,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x13, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x12, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0xf5, 0x07, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x80, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x4f, 0x69,
	0x64, 0x73, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x67, 0x73, 0x71,
	0x6c, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x59, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x77, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x59, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47,
	0x65, 0x74, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7d, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x1a, 0x1b, 0xda, 0xb5, 0x18, 0x17,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
})

var (
	file_yb_master_master_client_proto_rawDescOnce sync.Once
	file_yb_master_master_client_proto_rawDescData []byte
)

func file_yb_master_master_client_proto_rawDescGZIP() []byte {
	file_yb_master_master_client_proto_rawDescOnce.Do(func() {
		file_yb_master_master_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_master_master_client_proto_rawDesc), len(file_yb_master_master_client_proto_rawDesc)))
	})
	return file_yb_master_master_client_proto_rawDescData
}

var file_yb_master_master_client_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yb_master_master_client_proto_goTypes = []any{
	(*TSInfoPB)(nil),                              // 0: yb.master.TSInfoPB
	(*TabletLocationsPB)(nil),                     // 1: yb.master.TabletLocationsPB
	(*GetIndexBackfillProgressRequestPB)(nil),     // 2: yb.master.GetIndexBackfillProgressRequestPB
	(*GetIndexBackfillProgressResponsePB)(nil),    // 3: yb.master.GetIndexBackfillProgressResponsePB
	(*GetTabletLocationsRequestPB)(nil),           // 4: yb.master.GetTabletLocationsRequestPB
	(*GetTabletLocationsResponsePB)(nil),          // 5: yb.master.GetTabletLocationsResponsePB
	(*GetTableLocationsRequestPB)(nil),            // 6: yb.master.GetTableLocationsRequestPB
	(*GetTableLocationsResponsePB)(nil),           // 7: yb.master.GetTableLocationsResponsePB
	(*GetTransactionStatusTabletsRequestPB)(nil),  // 8: yb.master.GetTransactionStatusTabletsRequestPB
	(*GetTransactionStatusTabletsResponsePB)(nil), // 9: yb.master.GetTransactionStatusTabletsResponsePB
	(*ReservePgsqlOidsRequestPB)(nil),             // 10: yb.master.ReservePgsqlOidsRequestPB
	(*ReservePgsqlOidsResponsePB)(nil),            // 11: yb.master.ReservePgsqlOidsResponsePB
	(*GetYsqlCatalogConfigRequestPB)(nil),         // 12: yb.master.GetYsqlCatalogConfigRequestPB
	(*GetYsqlCatalogConfigResponsePB)(nil),        // 13: yb.master.GetYsqlCatalogConfigResponsePB
	(*RedisConfigSetRequestPB)(nil),               // 14: yb.master.RedisConfigSetRequestPB
	(*RedisConfigSetResponsePB)(nil),              // 15: yb.master.RedisConfigSetResponsePB
	(*RedisConfigGetRequestPB)(nil),               // 16: yb.master.RedisConfigGetRequestPB
	(*RedisConfigGetResponsePB)(nil),              // 17: yb.master.RedisConfigGetResponsePB
	(*GetStatefulServiceLocationRequestPB)(nil),   // 18: yb.master.GetStatefulServiceLocationRequestPB
	(*StatefulServiceInfoPB)(nil),                 // 19: yb.master.StatefulServiceInfoPB
	(*GetStatefulServiceLocationResponsePB)(nil),  // 20: yb.master.GetStatefulServiceLocationResponsePB
	(*TabletLocationsPB_ReplicaPB)(nil),           // 21: yb.master.TabletLocationsPB.ReplicaPB
	(*GetTabletLocationsResponsePB_Error)(nil),    // 22: yb.master.GetTabletLocationsResponsePB.Error
	(*common.HostPortPB)(nil),                     // 23: yb.HostPortPB
	(*common.CloudInfoPB)(nil),                    // 24: yb.CloudInfoPB
	(*common.PartitionPB)(nil),                    // 25: yb.PartitionPB
	(*MasterErrorPB)(nil),                         // 26: yb.master.MasterErrorPB
	(*TableIdentifierPB)(nil),                     // 27: yb.master.TableIdentifierPB
	(common.TableType)(0),                         // 28: yb.TableType
	(common.StatefulServiceKind)(0),               // 29: yb.StatefulServiceKind
	(common.PeerRole)(0),                          // 30: yb.PeerRole
	(consensus.PeerMemberType)(0),                 // 31: yb.consensus.PeerMemberType
	(tablet.RaftGroupStatePB)(0),                  // 32: yb.tablet.RaftGroupStatePB
	(*common.AppStatusPB)(nil),                    // 33: yb.AppStatusPB
}
var file_yb_master_master_client_proto_depIdxs = []int32{
	23, // 0: yb.master.TSInfoPB.private_rpc_addresses:type_name -> yb.HostPortPB
	23, // 1: yb.master.TSInfoPB.broadcast_addresses:type_name -> yb.HostPortPB
	24, // 2: yb.master.TSInfoPB.cloud_info:type_name -> yb.CloudInfoPB
	25, // 3: yb.master.TabletLocationsPB.partition:type_name -> yb.PartitionPB
	21, // 4: yb.master.TabletLocationsPB.replicas:type_name -> yb.master.TabletLocationsPB.ReplicaPB
	26, // 5: yb.master.GetIndexBackfillProgressResponsePB.error:type_name -> yb.master.MasterErrorPB
	26, // 6: yb.master.GetTabletLocationsResponsePB.error:type_name -> yb.master.MasterErrorPB
	1,  // 7: yb.master.GetTabletLocationsResponsePB.tablet_locations:type_name -> yb.master.TabletLocationsPB
	22, // 8: yb.master.GetTabletLocationsResponsePB.errors:type_name -> yb.master.GetTabletLocationsResponsePB.Error
	27, // 9: yb.master.GetTableLocationsRequestPB.table:type_name -> yb.master.TableIdentifierPB
	26, // 10: yb.master.GetTableLocationsResponsePB.error:type_name -> yb.master.MasterErrorPB
	1,  // 11: yb.master.GetTableLocationsResponsePB.tablet_locations:type_name -> yb.master.TabletLocationsPB
	28, // 12: yb.master.GetTableLocationsResponsePB.table_type:type_name -> yb.TableType
	24, // 13: yb.master.GetTransactionStatusTabletsRequestPB.placement:type_name -> yb.CloudInfoPB
	26, // 14: yb.master.GetTransactionStatusTabletsResponsePB.error:type_name -> yb.master.MasterErrorPB
	26, // 15: yb.master.ReservePgsqlOidsResponsePB.error:type_name -> yb.master.MasterErrorPB
	26, // 16: yb.master.GetYsqlCatalogConfigResponsePB.error:type_name -> yb.master.MasterErrorPB
	26, // 17: yb.master.RedisConfigSetResponsePB.error:type_name -> yb.master.MasterErrorPB
	26, // 18: yb.master.RedisConfigGetResponsePB.error:type_name -> yb.master.MasterErrorPB
	29, // 19: yb.master.GetStatefulServiceLocationRequestPB.service_kind:type_name -> yb.StatefulServiceKind
	23, // 20: yb.master.StatefulServiceInfoPB.private_rpc_addresses:type_name -> yb.HostPortPB
	23, // 21: yb.master.StatefulServiceInfoPB.broadcast_addresses:type_name -> yb.HostPortPB
	24, // 22: yb.master.StatefulServiceInfoPB.cloud_info:type_name -> yb.CloudInfoPB
	26, // 23: yb.master.GetStatefulServiceLocationResponsePB.error:type_name -> yb.master.MasterErrorPB
	19, // 24: yb.master.GetStatefulServiceLocationResponsePB.service_info:type_name -> yb.master.StatefulServiceInfoPB
	0,  // 25: yb.master.TabletLocationsPB.ReplicaPB.ts_info:type_name -> yb.master.TSInfoPB
	30, // 26: yb.master.TabletLocationsPB.ReplicaPB.role:type_name -> yb.PeerRole
	31, // 27: yb.master.TabletLocationsPB.ReplicaPB.member_type:type_name -> yb.consensus.PeerMemberType
	32, // 28: yb.master.TabletLocationsPB.ReplicaPB.state:type_name -> yb.tablet.RaftGroupStatePB
	33, // 29: yb.master.GetTabletLocationsResponsePB.Error.status:type_name -> yb.AppStatusPB
	4,  // 30: yb.master.MasterClient.GetTabletLocations:input_type -> yb.master.GetTabletLocationsRequestPB
	6,  // 31: yb.master.MasterClient.GetTableLocations:input_type -> yb.master.GetTableLocationsRequestPB
	8,  // 32: yb.master.MasterClient.GetTransactionStatusTablets:input_type -> yb.master.GetTransactionStatusTabletsRequestPB
	10, // 33: yb.master.MasterClient.ReservePgsqlOids:input_type -> yb.master.ReservePgsqlOidsRequestPB
	12, // 34: yb.master.MasterClient.GetYsqlCatalogConfig:input_type -> yb.master.GetYsqlCatalogConfigRequestPB
	2,  // 35: yb.master.MasterClient.GetIndexBackfillProgress:input_type -> yb.master.GetIndexBackfillProgressRequestPB
	14, // 36: yb.master.MasterClient.RedisConfigSet:input_type -> yb.master.RedisConfigSetRequestPB
	16, // 37: yb.master.MasterClient.RedisConfigGet:input_type -> yb.master.RedisConfigGetRequestPB
	18, // 38: yb.master.MasterClient.GetStatefulServiceLocation:input_type -> yb.master.GetStatefulServiceLocationRequestPB
	5,  // 39: yb.master.MasterClient.GetTabletLocations:output_type -> yb.master.GetTabletLocationsResponsePB
	7,  // 40: yb.master.MasterClient.GetTableLocations:output_type -> yb.master.GetTableLocationsResponsePB
	9,  // 41: yb.master.MasterClient.GetTransactionStatusTablets:output_type -> yb.master.GetTransactionStatusTabletsResponsePB
	11, // 42: yb.master.MasterClient.ReservePgsqlOids:output_type -> yb.master.ReservePgsqlOidsResponsePB
	13, // 43: yb.master.MasterClient.GetYsqlCatalogConfig:output_type -> yb.master.GetYsqlCatalogConfigResponsePB
	3,  // 44: yb.master.MasterClient.GetIndexBackfillProgress:output_type -> yb.master.GetIndexBackfillProgressResponsePB
	15, // 45: yb.master.MasterClient.RedisConfigSet:output_type -> yb.master.RedisConfigSetResponsePB
	17, // 46: yb.master.MasterClient.RedisConfigGet:output_type -> yb.master.RedisConfigGetResponsePB
	20, // 47: yb.master.MasterClient.GetStatefulServiceLocation:output_type -> yb.master.GetStatefulServiceLocationResponsePB
	39, // [39:48] is the sub-list for method output_type
	30, // [30:39] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_yb_master_master_client_proto_init() }
func file_yb_master_master_client_proto_init() {
	if File_yb_master_master_client_proto != nil {
		return
	}
	file_yb_master_master_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_master_master_client_proto_rawDesc), len(file_yb_master_master_client_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_master_master_client_proto_goTypes,
		DependencyIndexes: file_yb_master_master_client_proto_depIdxs,
		MessageInfos:      file_yb_master_master_client_proto_msgTypes,
	}.Build()
	File_yb_master_master_client_proto = out.File
	file_yb_master_master_client_proto_goTypes = nil
	file_yb_master_master_client_proto_depIdxs = nil
}
