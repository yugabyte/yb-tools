// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterAdmin
// service: MasterAdmin
type MasterAdmin interface {
	FlushTables(request *FlushTablesRequestPB) (*FlushTablesResponsePB, error)
	IsFlushTablesDone(request *IsFlushTablesDoneRequestPB) (*IsFlushTablesDoneResponsePB, error)
	FlushSysCatalog(request *FlushSysCatalogRequestPB) (*FlushSysCatalogResponsePB, error)
	CompactSysCatalog(request *CompactSysCatalogRequestPB) (*CompactSysCatalogResponsePB, error)
	GetCompactionStatus(request *GetCompactionStatusRequestPB) (*GetCompactionStatusResponsePB, error)
	IsInitDbDone(request *IsInitDbDoneRequestPB) (*IsInitDbDoneResponsePB, error)
	SplitTablet(request *SplitTabletRequestPB) (*SplitTabletResponsePB, error)
	CreateTransactionStatusTable(request *CreateTransactionStatusTableRequestPB) (*CreateTransactionStatusTableResponsePB, error)
	AddTransactionStatusTablet(request *AddTransactionStatusTabletRequestPB) (*AddTransactionStatusTabletResponsePB, error)
	DeleteNotServingTablet(request *DeleteNotServingTabletRequestPB) (*DeleteNotServingTabletResponsePB, error)
	DisableTabletSplitting(request *DisableTabletSplittingRequestPB) (*DisableTabletSplittingResponsePB, error)
	IsTabletSplittingComplete(request *IsTabletSplittingCompleteRequestPB) (*IsTabletSplittingCompleteResponsePB, error)
	AreNodesSafeToTakeDown(request *AreNodesSafeToTakeDownRequestPB) (*AreNodesSafeToTakeDownResponsePB, error)
	GetMasterHeartbeatDelays(request *GetMasterHeartbeatDelaysRequestPB) (*GetMasterHeartbeatDelaysResponsePB, error)
	DdlLog(request *DdlLogRequestPB) (*DdlLogResponsePB, error)
	StartYsqlMajorVersionUpgradeInitdb(request *StartYsqlMajorVersionUpgradeInitdbRequestPB) (*StartYsqlMajorVersionUpgradeInitdbResponsePB, error)
	IsYsqlMajorVersionUpgradeInitdbDone(request *IsYsqlMajorVersionUpgradeInitdbDoneRequestPB) (*IsYsqlMajorVersionUpgradeInitdbDoneResponsePB, error)
	RollbackYsqlMajorVersionUpgrade(request *RollbackYsqlMajorVersionUpgradeRequestPB) (*RollbackYsqlMajorVersionUpgradeResponsePB, error)
	CheckIfPitrActive(request *CheckIfPitrActiveRequestPB) (*CheckIfPitrActiveResponsePB, error)
	AccessYsqlBackendsManagerTestRegister(request *AccessYsqlBackendsManagerTestRegisterRequestPB) (*AccessYsqlBackendsManagerTestRegisterResponsePB, error)
	WaitForYsqlBackendsCatalogVersion(request *WaitForYsqlBackendsCatalogVersionRequestPB) (*WaitForYsqlBackendsCatalogVersionResponsePB, error)
	DumpSysCatalogEntries(request *DumpSysCatalogEntriesRequestPB) (*DumpSysCatalogEntriesResponsePB, error)
	WriteSysCatalogEntry(request *WriteSysCatalogEntryRequestPB) (*WriteSysCatalogEntryResponsePB, error)
}

type MasterAdminImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

func (s *MasterAdminImpl) FlushTables(request *FlushTablesRequestPB) (*FlushTablesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "FlushTables", "request", request)
	response := &FlushTablesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "FlushTables", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "FlushTables", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) IsFlushTablesDone(request *IsFlushTablesDoneRequestPB) (*IsFlushTablesDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "IsFlushTablesDone", "request", request)
	response := &IsFlushTablesDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "IsFlushTablesDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "IsFlushTablesDone", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) FlushSysCatalog(request *FlushSysCatalogRequestPB) (*FlushSysCatalogResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "FlushSysCatalog", "request", request)
	response := &FlushSysCatalogResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "FlushSysCatalog", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "FlushSysCatalog", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) CompactSysCatalog(request *CompactSysCatalogRequestPB) (*CompactSysCatalogResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "CompactSysCatalog", "request", request)
	response := &CompactSysCatalogResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "CompactSysCatalog", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "CompactSysCatalog", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) GetCompactionStatus(request *GetCompactionStatusRequestPB) (*GetCompactionStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "GetCompactionStatus", "request", request)
	response := &GetCompactionStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "GetCompactionStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "GetCompactionStatus", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) IsInitDbDone(request *IsInitDbDoneRequestPB) (*IsInitDbDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "IsInitDbDone", "request", request)
	response := &IsInitDbDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "IsInitDbDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "IsInitDbDone", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) SplitTablet(request *SplitTabletRequestPB) (*SplitTabletResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "SplitTablet", "request", request)
	response := &SplitTabletResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "SplitTablet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "SplitTablet", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) CreateTransactionStatusTable(request *CreateTransactionStatusTableRequestPB) (*CreateTransactionStatusTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "CreateTransactionStatusTable", "request", request)
	response := &CreateTransactionStatusTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "CreateTransactionStatusTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "CreateTransactionStatusTable", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) AddTransactionStatusTablet(request *AddTransactionStatusTabletRequestPB) (*AddTransactionStatusTabletResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "AddTransactionStatusTablet", "request", request)
	response := &AddTransactionStatusTabletResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "AddTransactionStatusTablet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "AddTransactionStatusTablet", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) DeleteNotServingTablet(request *DeleteNotServingTabletRequestPB) (*DeleteNotServingTabletResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "DeleteNotServingTablet", "request", request)
	response := &DeleteNotServingTabletResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "DeleteNotServingTablet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "DeleteNotServingTablet", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) DisableTabletSplitting(request *DisableTabletSplittingRequestPB) (*DisableTabletSplittingResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "DisableTabletSplitting", "request", request)
	response := &DisableTabletSplittingResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "DisableTabletSplitting", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "DisableTabletSplitting", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) IsTabletSplittingComplete(request *IsTabletSplittingCompleteRequestPB) (*IsTabletSplittingCompleteResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "IsTabletSplittingComplete", "request", request)
	response := &IsTabletSplittingCompleteResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "IsTabletSplittingComplete", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "IsTabletSplittingComplete", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) AreNodesSafeToTakeDown(request *AreNodesSafeToTakeDownRequestPB) (*AreNodesSafeToTakeDownResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "AreNodesSafeToTakeDown", "request", request)
	response := &AreNodesSafeToTakeDownResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "AreNodesSafeToTakeDown", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "AreNodesSafeToTakeDown", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) GetMasterHeartbeatDelays(request *GetMasterHeartbeatDelaysRequestPB) (*GetMasterHeartbeatDelaysResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "GetMasterHeartbeatDelays", "request", request)
	response := &GetMasterHeartbeatDelaysResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "GetMasterHeartbeatDelays", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "GetMasterHeartbeatDelays", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) DdlLog(request *DdlLogRequestPB) (*DdlLogResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "DdlLog", "request", request)
	response := &DdlLogResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "DdlLog", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "DdlLog", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) StartYsqlMajorVersionUpgradeInitdb(request *StartYsqlMajorVersionUpgradeInitdbRequestPB) (*StartYsqlMajorVersionUpgradeInitdbResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "StartYsqlMajorVersionUpgradeInitdb", "request", request)
	response := &StartYsqlMajorVersionUpgradeInitdbResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "StartYsqlMajorVersionUpgradeInitdb", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "StartYsqlMajorVersionUpgradeInitdb", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) IsYsqlMajorVersionUpgradeInitdbDone(request *IsYsqlMajorVersionUpgradeInitdbDoneRequestPB) (*IsYsqlMajorVersionUpgradeInitdbDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "IsYsqlMajorVersionUpgradeInitdbDone", "request", request)
	response := &IsYsqlMajorVersionUpgradeInitdbDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "IsYsqlMajorVersionUpgradeInitdbDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "IsYsqlMajorVersionUpgradeInitdbDone", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) RollbackYsqlMajorVersionUpgrade(request *RollbackYsqlMajorVersionUpgradeRequestPB) (*RollbackYsqlMajorVersionUpgradeResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "RollbackYsqlMajorVersionUpgrade", "request", request)
	response := &RollbackYsqlMajorVersionUpgradeResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "RollbackYsqlMajorVersionUpgrade", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "RollbackYsqlMajorVersionUpgrade", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) CheckIfPitrActive(request *CheckIfPitrActiveRequestPB) (*CheckIfPitrActiveResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "CheckIfPitrActive", "request", request)
	response := &CheckIfPitrActiveResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "CheckIfPitrActive", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "CheckIfPitrActive", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) AccessYsqlBackendsManagerTestRegister(request *AccessYsqlBackendsManagerTestRegisterRequestPB) (*AccessYsqlBackendsManagerTestRegisterResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "AccessYsqlBackendsManagerTestRegister", "request", request)
	response := &AccessYsqlBackendsManagerTestRegisterResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "AccessYsqlBackendsManagerTestRegister", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "AccessYsqlBackendsManagerTestRegister", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) WaitForYsqlBackendsCatalogVersion(request *WaitForYsqlBackendsCatalogVersionRequestPB) (*WaitForYsqlBackendsCatalogVersionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "WaitForYsqlBackendsCatalogVersion", "request", request)
	response := &WaitForYsqlBackendsCatalogVersionResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "WaitForYsqlBackendsCatalogVersion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "WaitForYsqlBackendsCatalogVersion", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) DumpSysCatalogEntries(request *DumpSysCatalogEntriesRequestPB) (*DumpSysCatalogEntriesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "DumpSysCatalogEntries", "request", request)
	response := &DumpSysCatalogEntriesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "DumpSysCatalogEntries", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "DumpSysCatalogEntries", "response", response)

	return response, nil
}

func (s *MasterAdminImpl) WriteSysCatalogEntry(request *WriteSysCatalogEntryRequestPB) (*WriteSysCatalogEntryResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterAdmin", "method", "WriteSysCatalogEntry", "request", request)
	response := &WriteSysCatalogEntryResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterAdmin", "WriteSysCatalogEntry", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterAdmin", "method", "WriteSysCatalogEntry", "response", response)

	return response, nil
}
