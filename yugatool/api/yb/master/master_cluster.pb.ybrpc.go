// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterCluster
// service: MasterCluster
type MasterCluster interface {
	ListTabletServers(request *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error)
	ListLiveTabletServers(request *ListLiveTabletServersRequestPB) (*ListLiveTabletServersResponsePB, error)
	ListMasters(request *ListMastersRequestPB) (*ListMastersResponsePB, error)
	ListMasterRaftPeers(request *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error)
	GetMasterRegistration(request *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error)
	GetAutoFlagsConfig(request *GetAutoFlagsConfigRequestPB) (*GetAutoFlagsConfigResponsePB, error)
	PromoteAutoFlags(request *PromoteAutoFlagsRequestPB) (*PromoteAutoFlagsResponsePB, error)
	RollbackAutoFlags(request *RollbackAutoFlagsRequestPB) (*RollbackAutoFlagsResponsePB, error)
	PromoteSingleAutoFlag(request *PromoteSingleAutoFlagRequestPB) (*PromoteSingleAutoFlagResponsePB, error)
	DemoteSingleAutoFlag(request *DemoteSingleAutoFlagRequestPB) (*DemoteSingleAutoFlagResponsePB, error)
	ValidateAutoFlagsConfig(request *ValidateAutoFlagsConfigRequestPB) (*ValidateAutoFlagsConfigResponsePB, error)
	IsMasterLeaderServiceReady(request *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error)
	DumpState(request *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error)
	ChangeLoadBalancerState(request *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error)
	GetLoadBalancerState(request *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error)
	RemovedMasterUpdate(request *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error)
	SetPreferredZones(request *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error)
	GetMasterClusterConfig(request *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error)
	GetMasterXClusterConfig(request *GetMasterXClusterConfigRequestPB) (*GetMasterXClusterConfigResponsePB, error)
	ChangeMasterClusterConfig(request *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error)
	GetLoadMoveCompletion(request *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	GetLeaderBlacklistCompletion(request *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	IsLoadBalanced(request *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error)
	IsLoadBalancerIdle(request *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error)
	AreLeadersOnPreferredOnly(request *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error)
	CheckMasterTabletHealth(request *CheckMasterTabletHealthRequestPB) (*CheckMasterTabletHealthResponsePB, error)
}

type MasterClusterImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

// Administrative/monitoring RPCs

func (s *MasterClusterImpl) ListTabletServers(request *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "ListTabletServers", "request", request)
	response := &ListTabletServersResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "ListTabletServers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "ListTabletServers", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) ListLiveTabletServers(request *ListLiveTabletServersRequestPB) (*ListLiveTabletServersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "ListLiveTabletServers", "request", request)
	response := &ListLiveTabletServersResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "ListLiveTabletServers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "ListLiveTabletServers", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) ListMasters(request *ListMastersRequestPB) (*ListMastersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "ListMasters", "request", request)
	response := &ListMastersResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "ListMasters", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "ListMasters", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) ListMasterRaftPeers(request *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "ListMasterRaftPeers", "request", request)
	response := &ListMasterRaftPeersResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "ListMasterRaftPeers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "ListMasterRaftPeers", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) GetMasterRegistration(request *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "GetMasterRegistration", "request", request)
	response := &GetMasterRegistrationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "GetMasterRegistration", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "GetMasterRegistration", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) GetAutoFlagsConfig(request *GetAutoFlagsConfigRequestPB) (*GetAutoFlagsConfigResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "GetAutoFlagsConfig", "request", request)
	response := &GetAutoFlagsConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "GetAutoFlagsConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "GetAutoFlagsConfig", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) PromoteAutoFlags(request *PromoteAutoFlagsRequestPB) (*PromoteAutoFlagsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "PromoteAutoFlags", "request", request)
	response := &PromoteAutoFlagsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "PromoteAutoFlags", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "PromoteAutoFlags", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) RollbackAutoFlags(request *RollbackAutoFlagsRequestPB) (*RollbackAutoFlagsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "RollbackAutoFlags", "request", request)
	response := &RollbackAutoFlagsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "RollbackAutoFlags", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "RollbackAutoFlags", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) PromoteSingleAutoFlag(request *PromoteSingleAutoFlagRequestPB) (*PromoteSingleAutoFlagResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "PromoteSingleAutoFlag", "request", request)
	response := &PromoteSingleAutoFlagResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "PromoteSingleAutoFlag", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "PromoteSingleAutoFlag", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) DemoteSingleAutoFlag(request *DemoteSingleAutoFlagRequestPB) (*DemoteSingleAutoFlagResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "DemoteSingleAutoFlag", "request", request)
	response := &DemoteSingleAutoFlagResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "DemoteSingleAutoFlag", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "DemoteSingleAutoFlag", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) ValidateAutoFlagsConfig(request *ValidateAutoFlagsConfigRequestPB) (*ValidateAutoFlagsConfigResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "ValidateAutoFlagsConfig", "request", request)
	response := &ValidateAutoFlagsConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "ValidateAutoFlagsConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "ValidateAutoFlagsConfig", "response", response)

	return response, nil
}

// Get the ready status from the catalog manager for this master.
// NOTE: Should be used only for unit testing purposes.

func (s *MasterClusterImpl) IsMasterLeaderServiceReady(request *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "IsMasterLeaderServiceReady", "request", request)
	response := &IsMasterLeaderReadyResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "IsMasterLeaderServiceReady", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "IsMasterLeaderServiceReady", "response", response)

	return response, nil
}

// Dump master state from all the peers in the current master's quorum

func (s *MasterClusterImpl) DumpState(request *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "DumpState", "request", request)
	response := &DumpMasterStateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "DumpState", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "DumpState", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) ChangeLoadBalancerState(request *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "ChangeLoadBalancerState", "request", request)
	response := &ChangeLoadBalancerStateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "ChangeLoadBalancerState", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "ChangeLoadBalancerState", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) GetLoadBalancerState(request *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "GetLoadBalancerState", "request", request)
	response := &GetLoadBalancerStateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "GetLoadBalancerState", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "GetLoadBalancerState", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) RemovedMasterUpdate(request *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "RemovedMasterUpdate", "request", request)
	response := &RemovedMasterUpdateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "RemovedMasterUpdate", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "RemovedMasterUpdate", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) SetPreferredZones(request *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "SetPreferredZones", "request", request)
	response := &SetPreferredZonesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "SetPreferredZones", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "SetPreferredZones", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) GetMasterClusterConfig(request *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "GetMasterClusterConfig", "request", request)
	response := &GetMasterClusterConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "GetMasterClusterConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "GetMasterClusterConfig", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) GetMasterXClusterConfig(request *GetMasterXClusterConfigRequestPB) (*GetMasterXClusterConfigResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "GetMasterXClusterConfig", "request", request)
	response := &GetMasterXClusterConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "GetMasterXClusterConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "GetMasterXClusterConfig", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) ChangeMasterClusterConfig(request *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "ChangeMasterClusterConfig", "request", request)
	response := &ChangeMasterClusterConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "ChangeMasterClusterConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "ChangeMasterClusterConfig", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) GetLoadMoveCompletion(request *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "GetLoadMoveCompletion", "request", request)
	response := &GetLoadMovePercentResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "GetLoadMoveCompletion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "GetLoadMoveCompletion", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) GetLeaderBlacklistCompletion(request *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "GetLeaderBlacklistCompletion", "request", request)
	response := &GetLoadMovePercentResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "GetLeaderBlacklistCompletion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "GetLeaderBlacklistCompletion", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) IsLoadBalanced(request *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "IsLoadBalanced", "request", request)
	response := &IsLoadBalancedResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "IsLoadBalanced", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "IsLoadBalanced", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) IsLoadBalancerIdle(request *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "IsLoadBalancerIdle", "request", request)
	response := &IsLoadBalancerIdleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "IsLoadBalancerIdle", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "IsLoadBalancerIdle", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) AreLeadersOnPreferredOnly(request *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "AreLeadersOnPreferredOnly", "request", request)
	response := &AreLeadersOnPreferredOnlyResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "AreLeadersOnPreferredOnly", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "AreLeadersOnPreferredOnly", "response", response)

	return response, nil
}

func (s *MasterClusterImpl) CheckMasterTabletHealth(request *CheckMasterTabletHealthRequestPB) (*CheckMasterTabletHealthResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterCluster", "method", "CheckMasterTabletHealth", "request", request)
	response := &CheckMasterTabletHealthResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterCluster", "CheckMasterTabletHealth", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterCluster", "method", "CheckMasterTabletHealth", "response", response)

	return response, nil
}
