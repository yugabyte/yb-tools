// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/master/master_replication.proto

package master

import (
	cdc "github.com/yugabyte/yb-tools/yugatool/api/yb/cdc"
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdTypePB int32

const (
	IdTypePB_TABLE_ID     IdTypePB = 1
	IdTypePB_NAMESPACE_ID IdTypePB = 2
)

// Enum value maps for IdTypePB.
var (
	IdTypePB_name = map[int32]string{
		1: "TABLE_ID",
		2: "NAMESPACE_ID",
	}
	IdTypePB_value = map[string]int32{
		"TABLE_ID":     1,
		"NAMESPACE_ID": 2,
	}
)

func (x IdTypePB) Enum() *IdTypePB {
	p := new(IdTypePB)
	*p = x
	return p
}

func (x IdTypePB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdTypePB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_replication_proto_enumTypes[0].Descriptor()
}

func (IdTypePB) Type() protoreflect.EnumType {
	return &file_yb_master_master_replication_proto_enumTypes[0]
}

func (x IdTypePB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IdTypePB) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IdTypePB(num)
	return nil
}

// Deprecated: Use IdTypePB.Descriptor instead.
func (IdTypePB) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{0}
}

type SetupReplicationWithBootstrapStatePB int32

const (
	SetupReplicationWithBootstrapStatePB_BOOTSTRAP_PRODUCER       SetupReplicationWithBootstrapStatePB = 1
	SetupReplicationWithBootstrapStatePB_CREATE_PRODUCER_SNAPSHOT SetupReplicationWithBootstrapStatePB = 2
	SetupReplicationWithBootstrapStatePB_IMPORT_SNAPSHOT          SetupReplicationWithBootstrapStatePB = 3
	SetupReplicationWithBootstrapStatePB_CREATE_CONSUMER_SNAPSHOT SetupReplicationWithBootstrapStatePB = 4
	SetupReplicationWithBootstrapStatePB_TRANSFER_SNAPSHOT        SetupReplicationWithBootstrapStatePB = 5
	SetupReplicationWithBootstrapStatePB_RESTORE_SNAPSHOT         SetupReplicationWithBootstrapStatePB = 6
	SetupReplicationWithBootstrapStatePB_SETUP_REPLICATION        SetupReplicationWithBootstrapStatePB = 7
)

// Enum value maps for SetupReplicationWithBootstrapStatePB.
var (
	SetupReplicationWithBootstrapStatePB_name = map[int32]string{
		1: "BOOTSTRAP_PRODUCER",
		2: "CREATE_PRODUCER_SNAPSHOT",
		3: "IMPORT_SNAPSHOT",
		4: "CREATE_CONSUMER_SNAPSHOT",
		5: "TRANSFER_SNAPSHOT",
		6: "RESTORE_SNAPSHOT",
		7: "SETUP_REPLICATION",
	}
	SetupReplicationWithBootstrapStatePB_value = map[string]int32{
		"BOOTSTRAP_PRODUCER":       1,
		"CREATE_PRODUCER_SNAPSHOT": 2,
		"IMPORT_SNAPSHOT":          3,
		"CREATE_CONSUMER_SNAPSHOT": 4,
		"TRANSFER_SNAPSHOT":        5,
		"RESTORE_SNAPSHOT":         6,
		"SETUP_REPLICATION":        7,
	}
)

func (x SetupReplicationWithBootstrapStatePB) Enum() *SetupReplicationWithBootstrapStatePB {
	p := new(SetupReplicationWithBootstrapStatePB)
	*p = x
	return p
}

func (x SetupReplicationWithBootstrapStatePB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetupReplicationWithBootstrapStatePB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_replication_proto_enumTypes[1].Descriptor()
}

func (SetupReplicationWithBootstrapStatePB) Type() protoreflect.EnumType {
	return &file_yb_master_master_replication_proto_enumTypes[1]
}

func (x SetupReplicationWithBootstrapStatePB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SetupReplicationWithBootstrapStatePB) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SetupReplicationWithBootstrapStatePB(num)
	return nil
}

// Deprecated: Use SetupReplicationWithBootstrapStatePB.Descriptor instead.
func (SetupReplicationWithBootstrapStatePB) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{1}
}

type XClusterSafeTimeFilter int32

const (
	XClusterSafeTimeFilter_NONE      XClusterSafeTimeFilter = 1
	XClusterSafeTimeFilter_DDL_QUEUE XClusterSafeTimeFilter = 2
)

// Enum value maps for XClusterSafeTimeFilter.
var (
	XClusterSafeTimeFilter_name = map[int32]string{
		1: "NONE",
		2: "DDL_QUEUE",
	}
	XClusterSafeTimeFilter_value = map[string]int32{
		"NONE":      1,
		"DDL_QUEUE": 2,
	}
)

func (x XClusterSafeTimeFilter) Enum() *XClusterSafeTimeFilter {
	p := new(XClusterSafeTimeFilter)
	*p = x
	return p
}

func (x XClusterSafeTimeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XClusterSafeTimeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_replication_proto_enumTypes[2].Descriptor()
}

func (XClusterSafeTimeFilter) Type() protoreflect.EnumType {
	return &file_yb_master_master_replication_proto_enumTypes[2]
}

func (x XClusterSafeTimeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *XClusterSafeTimeFilter) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = XClusterSafeTimeFilter(num)
	return nil
}

// Deprecated: Use XClusterSafeTimeFilter.Descriptor instead.
func (XClusterSafeTimeFilter) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{2}
}

type CDCStreamInfoOptionsPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This field stores the type of the LSN being used by the replication slot.
	CdcsdkYsqlReplicationSlotLsnType *common.ReplicationSlotLsnType `protobuf:"varint,1,opt,name=cdcsdk_ysql_replication_slot_lsn_type,json=cdcsdkYsqlReplicationSlotLsnType,enum=yb.ReplicationSlotLsnType,def=0" json:"cdcsdk_ysql_replication_slot_lsn_type,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

// Default values for CDCStreamInfoOptionsPB fields.
const (
	Default_CDCStreamInfoOptionsPB_CdcsdkYsqlReplicationSlotLsnType = common.ReplicationSlotLsnType(0) // common.ReplicationSlotLsnType_ReplicationSlotLsnType_UNSPECIFIED
)

func (x *CDCStreamInfoOptionsPB) Reset() {
	*x = CDCStreamInfoOptionsPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCStreamInfoOptionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCStreamInfoOptionsPB) ProtoMessage() {}

func (x *CDCStreamInfoOptionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCStreamInfoOptionsPB.ProtoReflect.Descriptor instead.
func (*CDCStreamInfoOptionsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{0}
}

func (x *CDCStreamInfoOptionsPB) GetCdcsdkYsqlReplicationSlotLsnType() common.ReplicationSlotLsnType {
	if x != nil && x.CdcsdkYsqlReplicationSlotLsnType != nil {
		return *x.CdcsdkYsqlReplicationSlotLsnType
	}
	return Default_CDCStreamInfoOptionsPB_CdcsdkYsqlReplicationSlotLsnType
}

type CDCStreamInfoPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StreamId []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// For CDCSDK, table_id contains the qualified list of tables for the stream.
	TableId                        [][]byte                     `protobuf:"bytes,2,rep,name=table_id,json=tableId" json:"table_id,omitempty"`
	Options                        []*CDCStreamOptionsPB        `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
	NamespaceId                    []byte                       `protobuf:"bytes,4,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	Transactional                  *bool                        `protobuf:"varint,5,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	CdcsdkYsqlReplicationSlotName  *string                      `protobuf:"bytes,6,opt,name=cdcsdk_ysql_replication_slot_name,json=cdcsdkYsqlReplicationSlotName" json:"cdcsdk_ysql_replication_slot_name,omitempty"`
	CdcsdkConsistentSnapshotTime   *uint64                      `protobuf:"varint,7,opt,name=cdcsdk_consistent_snapshot_time,json=cdcsdkConsistentSnapshotTime" json:"cdcsdk_consistent_snapshot_time,omitempty"`
	CdcsdkConsistentSnapshotOption *common.CDCSDKSnapshotOption `protobuf:"varint,8,opt,name=cdcsdk_consistent_snapshot_option,json=cdcsdkConsistentSnapshotOption,enum=yb.CDCSDKSnapshotOption" json:"cdcsdk_consistent_snapshot_option,omitempty"`
	StreamCreationTime             *uint64                      `protobuf:"varint,9,opt,name=stream_creation_time,json=streamCreationTime" json:"stream_creation_time,omitempty"`
	// This map stores the replica identity for each table in the stream at the time of stream
	// creation. The key for this map is table_id and the value is replica identity for that table.
	ReplicaIdentityMap                  map[string]common.PgReplicaIdentity `protobuf:"bytes,10,rep,name=replica_identity_map,json=replicaIdentityMap" json:"replica_identity_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=yb.PgReplicaIdentity"`
	CdcsdkYsqlReplicationSlotPluginName *string                             `protobuf:"bytes,11,opt,name=cdcsdk_ysql_replication_slot_plugin_name,json=cdcsdkYsqlReplicationSlotPluginName" json:"cdcsdk_ysql_replication_slot_plugin_name,omitempty"`
	// Dynamic tables are the tables which are created after the creation of the stream.
	// This field controls if dynamic tables should automatically be added to the CDC stream or not.
	// If set to true, dynamic table wont get added to the CDC stream.
	CdcsdkDisableDynamicTableAddition *bool `protobuf:"varint,12,opt,name=cdcsdk_disable_dynamic_table_addition,json=cdcsdkDisableDynamicTableAddition" json:"cdcsdk_disable_dynamic_table_addition,omitempty"`
	// This field stores the list of user created tables that have been removed from CDCSDK
	// stream.
	UnqualifiedTableId [][]byte `protobuf:"bytes,13,rep,name=unqualified_table_id,json=unqualifiedTableId" json:"unqualified_table_id,omitempty"`
	// Field to store all the metadata related to a CDC stream.
	CdcStreamInfoOptions *CDCStreamInfoOptionsPB `protobuf:"bytes,14,opt,name=cdc_stream_info_options,json=cdcStreamInfoOptions" json:"cdc_stream_info_options,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CDCStreamInfoPB) Reset() {
	*x = CDCStreamInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCStreamInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCStreamInfoPB) ProtoMessage() {}

func (x *CDCStreamInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCStreamInfoPB.ProtoReflect.Descriptor instead.
func (*CDCStreamInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{1}
}

func (x *CDCStreamInfoPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *CDCStreamInfoPB) GetTableId() [][]byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CDCStreamInfoPB) GetOptions() []*CDCStreamOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CDCStreamInfoPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CDCStreamInfoPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *CDCStreamInfoPB) GetCdcsdkYsqlReplicationSlotName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotName != nil {
		return *x.CdcsdkYsqlReplicationSlotName
	}
	return ""
}

func (x *CDCStreamInfoPB) GetCdcsdkConsistentSnapshotTime() uint64 {
	if x != nil && x.CdcsdkConsistentSnapshotTime != nil {
		return *x.CdcsdkConsistentSnapshotTime
	}
	return 0
}

func (x *CDCStreamInfoPB) GetCdcsdkConsistentSnapshotOption() common.CDCSDKSnapshotOption {
	if x != nil && x.CdcsdkConsistentSnapshotOption != nil {
		return *x.CdcsdkConsistentSnapshotOption
	}
	return common.CDCSDKSnapshotOption(1)
}

func (x *CDCStreamInfoPB) GetStreamCreationTime() uint64 {
	if x != nil && x.StreamCreationTime != nil {
		return *x.StreamCreationTime
	}
	return 0
}

func (x *CDCStreamInfoPB) GetReplicaIdentityMap() map[string]common.PgReplicaIdentity {
	if x != nil {
		return x.ReplicaIdentityMap
	}
	return nil
}

func (x *CDCStreamInfoPB) GetCdcsdkYsqlReplicationSlotPluginName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotPluginName != nil {
		return *x.CdcsdkYsqlReplicationSlotPluginName
	}
	return ""
}

func (x *CDCStreamInfoPB) GetCdcsdkDisableDynamicTableAddition() bool {
	if x != nil && x.CdcsdkDisableDynamicTableAddition != nil {
		return *x.CdcsdkDisableDynamicTableAddition
	}
	return false
}

func (x *CDCStreamInfoPB) GetUnqualifiedTableId() [][]byte {
	if x != nil {
		return x.UnqualifiedTableId
	}
	return nil
}

func (x *CDCStreamInfoPB) GetCdcStreamInfoOptions() *CDCStreamInfoOptionsPB {
	if x != nil {
		return x.CdcStreamInfoOptions
	}
	return nil
}

type ValidateReplicationInfoRequestPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReplicationInfo *ReplicationInfoPB     `protobuf:"bytes,1,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidateReplicationInfoRequestPB) Reset() {
	*x = ValidateReplicationInfoRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateReplicationInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateReplicationInfoRequestPB) ProtoMessage() {}

func (x *ValidateReplicationInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateReplicationInfoRequestPB.ProtoReflect.Descriptor instead.
func (*ValidateReplicationInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{2}
}

func (x *ValidateReplicationInfoRequestPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

type ValidateReplicationInfoResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateReplicationInfoResponsePB) Reset() {
	*x = ValidateReplicationInfoResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateReplicationInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateReplicationInfoResponsePB) ProtoMessage() {}

func (x *ValidateReplicationInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateReplicationInfoResponsePB.ProtoReflect.Descriptor instead.
func (*ValidateReplicationInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateReplicationInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateCDCStreamRequestPB struct {
	state                               protoimpl.MessageState       `protogen:"open.v1"`
	TableId                             *string                      `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Options                             []*CDCStreamOptionsPB        `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
	InitialState                        *SysCDCStreamEntryPB_State   `protobuf:"varint,4,opt,name=initial_state,json=initialState,enum=yb.master.SysCDCStreamEntryPB_State" json:"initial_state,omitempty"`
	DbStreamId                          *string                      `protobuf:"bytes,5,opt,name=db_stream_id,json=dbStreamId" json:"db_stream_id,omitempty"`
	Transactional                       *bool                        `protobuf:"varint,6,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	NamespaceId                         *string                      `protobuf:"bytes,7,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	CdcsdkYsqlReplicationSlotName       *string                      `protobuf:"bytes,8,opt,name=cdcsdk_ysql_replication_slot_name,json=cdcsdkYsqlReplicationSlotName" json:"cdcsdk_ysql_replication_slot_name,omitempty"`
	CdcsdkConsistentSnapshotOption      *common.CDCSDKSnapshotOption `protobuf:"varint,9,opt,name=cdcsdk_consistent_snapshot_option,json=cdcsdkConsistentSnapshotOption,enum=yb.CDCSDKSnapshotOption" json:"cdcsdk_consistent_snapshot_option,omitempty"`
	CdcsdkYsqlReplicationSlotPluginName *string                      `protobuf:"bytes,10,opt,name=cdcsdk_ysql_replication_slot_plugin_name,json=cdcsdkYsqlReplicationSlotPluginName" json:"cdcsdk_ysql_replication_slot_plugin_name,omitempty"`
	// cdcsdk_stream_create_options field should be used for adding more stream creation options
	// related to CDCSDK in future.
	CdcsdkStreamCreateOptions *common.CDCSDKStreamCreateOptionsPB `protobuf:"bytes,11,opt,name=cdcsdk_stream_create_options,json=cdcsdkStreamCreateOptions" json:"cdcsdk_stream_create_options,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CreateCDCStreamRequestPB) Reset() {
	*x = CreateCDCStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamRequestPB) ProtoMessage() {}

func (x *CreateCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCDCStreamRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetOptions() []*CDCStreamOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateCDCStreamRequestPB) GetInitialState() SysCDCStreamEntryPB_State {
	if x != nil && x.InitialState != nil {
		return *x.InitialState
	}
	return SysCDCStreamEntryPB_INITIATED
}

func (x *CreateCDCStreamRequestPB) GetDbStreamId() string {
	if x != nil && x.DbStreamId != nil {
		return *x.DbStreamId
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *CreateCDCStreamRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetCdcsdkYsqlReplicationSlotName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotName != nil {
		return *x.CdcsdkYsqlReplicationSlotName
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetCdcsdkConsistentSnapshotOption() common.CDCSDKSnapshotOption {
	if x != nil && x.CdcsdkConsistentSnapshotOption != nil {
		return *x.CdcsdkConsistentSnapshotOption
	}
	return common.CDCSDKSnapshotOption(1)
}

func (x *CreateCDCStreamRequestPB) GetCdcsdkYsqlReplicationSlotPluginName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotPluginName != nil {
		return *x.CdcsdkYsqlReplicationSlotPluginName
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetCdcsdkStreamCreateOptions() *common.CDCSDKStreamCreateOptionsPB {
	if x != nil {
		return x.CdcsdkStreamCreateOptions
	}
	return nil
}

type CreateCDCStreamResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error                        *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StreamId                     []byte         `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	CdcsdkConsistentSnapshotTime *uint64        `protobuf:"varint,3,opt,name=cdcsdk_consistent_snapshot_time,json=cdcsdkConsistentSnapshotTime" json:"cdcsdk_consistent_snapshot_time,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *CreateCDCStreamResponsePB) Reset() {
	*x = CreateCDCStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamResponsePB) ProtoMessage() {}

func (x *CreateCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCDCStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateCDCStreamResponsePB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *CreateCDCStreamResponsePB) GetCdcsdkConsistentSnapshotTime() uint64 {
	if x != nil && x.CdcsdkConsistentSnapshotTime != nil {
		return *x.CdcsdkConsistentSnapshotTime
	}
	return 0
}

type DeleteCDCStreamRequestPB struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	StreamId                      [][]byte               `protobuf:"bytes,1,rep,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	IgnoreErrors                  *bool                  `protobuf:"varint,2,opt,name=ignore_errors,json=ignoreErrors,def=0" json:"ignore_errors,omitempty"`
	ForceDelete                   *bool                  `protobuf:"varint,3,opt,name=force_delete,json=forceDelete,def=0" json:"force_delete,omitempty"`
	CdcsdkYsqlReplicationSlotName []string               `protobuf:"bytes,4,rep,name=cdcsdk_ysql_replication_slot_name,json=cdcsdkYsqlReplicationSlotName" json:"cdcsdk_ysql_replication_slot_name,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

// Default values for DeleteCDCStreamRequestPB fields.
const (
	Default_DeleteCDCStreamRequestPB_IgnoreErrors = bool(false)
	Default_DeleteCDCStreamRequestPB_ForceDelete  = bool(false)
)

func (x *DeleteCDCStreamRequestPB) Reset() {
	*x = DeleteCDCStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamRequestPB) ProtoMessage() {}

func (x *DeleteCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCDCStreamRequestPB) GetStreamId() [][]byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *DeleteCDCStreamRequestPB) GetIgnoreErrors() bool {
	if x != nil && x.IgnoreErrors != nil {
		return *x.IgnoreErrors
	}
	return Default_DeleteCDCStreamRequestPB_IgnoreErrors
}

func (x *DeleteCDCStreamRequestPB) GetForceDelete() bool {
	if x != nil && x.ForceDelete != nil {
		return *x.ForceDelete
	}
	return Default_DeleteCDCStreamRequestPB_ForceDelete
}

func (x *DeleteCDCStreamRequestPB) GetCdcsdkYsqlReplicationSlotName() []string {
	if x != nil {
		return x.CdcsdkYsqlReplicationSlotName
	}
	return nil
}

type DeleteCDCStreamResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error                                  *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NotFoundStreamIds                      [][]byte       `protobuf:"bytes,2,rep,name=not_found_stream_ids,json=notFoundStreamIds" json:"not_found_stream_ids,omitempty"`
	NotFoundCdcsdkYsqlReplicationSlotNames []string       `protobuf:"bytes,3,rep,name=not_found_cdcsdk_ysql_replication_slot_names,json=notFoundCdcsdkYsqlReplicationSlotNames" json:"not_found_cdcsdk_ysql_replication_slot_names,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *DeleteCDCStreamResponsePB) Reset() {
	*x = DeleteCDCStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamResponsePB) ProtoMessage() {}

func (x *DeleteCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCDCStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteCDCStreamResponsePB) GetNotFoundStreamIds() [][]byte {
	if x != nil {
		return x.NotFoundStreamIds
	}
	return nil
}

func (x *DeleteCDCStreamResponsePB) GetNotFoundCdcsdkYsqlReplicationSlotNames() []string {
	if x != nil {
		return x.NotFoundCdcsdkYsqlReplicationSlotNames
	}
	return nil
}

type ListCDCStreamsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       *string                `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	NamespaceId   *string                `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	IdType        *IdTypePB              `protobuf:"varint,3,opt,name=id_type,json=idType,enum=yb.master.IdTypePB,def=1" json:"id_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ListCDCStreamsRequestPB fields.
const (
	Default_ListCDCStreamsRequestPB_IdType = IdTypePB_TABLE_ID
)

func (x *ListCDCStreamsRequestPB) Reset() {
	*x = ListCDCStreamsRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCDCStreamsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCDCStreamsRequestPB) ProtoMessage() {}

func (x *ListCDCStreamsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCDCStreamsRequestPB.ProtoReflect.Descriptor instead.
func (*ListCDCStreamsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{8}
}

func (x *ListCDCStreamsRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *ListCDCStreamsRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *ListCDCStreamsRequestPB) GetIdType() IdTypePB {
	if x != nil && x.IdType != nil {
		return *x.IdType
	}
	return Default_ListCDCStreamsRequestPB_IdType
}

type ListCDCStreamsResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB     `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Streams       []*CDCStreamInfoPB `protobuf:"bytes,2,rep,name=streams" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCDCStreamsResponsePB) Reset() {
	*x = ListCDCStreamsResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCDCStreamsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCDCStreamsResponsePB) ProtoMessage() {}

func (x *ListCDCStreamsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCDCStreamsResponsePB.ProtoReflect.Descriptor instead.
func (*ListCDCStreamsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{9}
}

func (x *ListCDCStreamsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListCDCStreamsResponsePB) GetStreams() []*CDCStreamInfoPB {
	if x != nil {
		return x.Streams
	}
	return nil
}

type IsObjectPartOfXReplRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       *string                `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsObjectPartOfXReplRequestPB) Reset() {
	*x = IsObjectPartOfXReplRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsObjectPartOfXReplRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsObjectPartOfXReplRequestPB) ProtoMessage() {}

func (x *IsObjectPartOfXReplRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsObjectPartOfXReplRequestPB.ProtoReflect.Descriptor instead.
func (*IsObjectPartOfXReplRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{10}
}

func (x *IsObjectPartOfXReplRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type IsObjectPartOfXReplResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error               *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	IsObjectPartOfXrepl *bool          `protobuf:"varint,2,req,name=is_object_part_of_xrepl,json=isObjectPartOfXrepl" json:"is_object_part_of_xrepl,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *IsObjectPartOfXReplResponsePB) Reset() {
	*x = IsObjectPartOfXReplResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsObjectPartOfXReplResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsObjectPartOfXReplResponsePB) ProtoMessage() {}

func (x *IsObjectPartOfXReplResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsObjectPartOfXReplResponsePB.ProtoReflect.Descriptor instead.
func (*IsObjectPartOfXReplResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{11}
}

func (x *IsObjectPartOfXReplResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsObjectPartOfXReplResponsePB) GetIsObjectPartOfXrepl() bool {
	if x != nil && x.IsObjectPartOfXrepl != nil {
		return *x.IsObjectPartOfXrepl
	}
	return false
}

type GetCDCStreamRequestPB struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	StreamId                      []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	CdcsdkYsqlReplicationSlotName *string                `protobuf:"bytes,2,opt,name=cdcsdk_ysql_replication_slot_name,json=cdcsdkYsqlReplicationSlotName" json:"cdcsdk_ysql_replication_slot_name,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GetCDCStreamRequestPB) Reset() {
	*x = GetCDCStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCStreamRequestPB) ProtoMessage() {}

func (x *GetCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*GetCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{12}
}

func (x *GetCDCStreamRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *GetCDCStreamRequestPB) GetCdcsdkYsqlReplicationSlotName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotName != nil {
		return *x.CdcsdkYsqlReplicationSlotName
	}
	return ""
}

type GetCDCStreamResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Stream        *CDCStreamInfoPB `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCDCStreamResponsePB) Reset() {
	*x = GetCDCStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCStreamResponsePB) ProtoMessage() {}

func (x *GetCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*GetCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{13}
}

func (x *GetCDCStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCDCStreamResponsePB) GetStream() *CDCStreamInfoPB {
	if x != nil {
		return x.Stream
	}
	return nil
}

type GetCDCDBStreamInfoRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbStreamId    []byte                 `protobuf:"bytes,1,opt,name=db_stream_id,json=dbStreamId" json:"db_stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCDCDBStreamInfoRequestPB) Reset() {
	*x = GetCDCDBStreamInfoRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCDCDBStreamInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCDBStreamInfoRequestPB) ProtoMessage() {}

func (x *GetCDCDBStreamInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCDBStreamInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetCDCDBStreamInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{14}
}

func (x *GetCDCDBStreamInfoRequestPB) GetDbStreamId() []byte {
	if x != nil {
		return x.DbStreamId
	}
	return nil
}

type GetCDCDBStreamInfoResponsePB struct {
	state                protoimpl.MessageState                    `protogen:"open.v1"`
	Error                *MasterErrorPB                            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TableInfo            []*GetCDCDBStreamInfoResponsePB_TableInfo `protobuf:"bytes,2,rep,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	NamespaceId          []byte                                    `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	UnqualifiedTableInfo []*GetCDCDBStreamInfoResponsePB_TableInfo `protobuf:"bytes,4,rep,name=unqualified_table_info,json=unqualifiedTableInfo" json:"unqualified_table_info,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetCDCDBStreamInfoResponsePB) Reset() {
	*x = GetCDCDBStreamInfoResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCDCDBStreamInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCDBStreamInfoResponsePB) ProtoMessage() {}

func (x *GetCDCDBStreamInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCDBStreamInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetCDCDBStreamInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{15}
}

func (x *GetCDCDBStreamInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCDCDBStreamInfoResponsePB) GetTableInfo() []*GetCDCDBStreamInfoResponsePB_TableInfo {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *GetCDCDBStreamInfoResponsePB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *GetCDCDBStreamInfoResponsePB) GetUnqualifiedTableInfo() []*GetCDCDBStreamInfoResponsePB_TableInfo {
	if x != nil {
		return x.UnqualifiedTableInfo
	}
	return nil
}

type UpdateCDCStreamRequestPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	StreamId []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Entry    *SysCDCStreamEntryPB   `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	// For batch update.
	Streams       []*UpdateCDCStreamRequestPB_StreamUpdateInfo `protobuf:"bytes,3,rep,name=streams" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCDCStreamRequestPB) Reset() {
	*x = UpdateCDCStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCDCStreamRequestPB) ProtoMessage() {}

func (x *UpdateCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateCDCStreamRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *UpdateCDCStreamRequestPB) GetEntry() *SysCDCStreamEntryPB {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *UpdateCDCStreamRequestPB) GetStreams() []*UpdateCDCStreamRequestPB_StreamUpdateInfo {
	if x != nil {
		return x.Streams
	}
	return nil
}

type UpdateCDCStreamResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCDCStreamResponsePB) Reset() {
	*x = UpdateCDCStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCDCStreamResponsePB) ProtoMessage() {}

func (x *UpdateCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateCDCStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type BootstrapProducerRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbType        *common.YQLDatabase    `protobuf:"varint,1,req,name=db_type,json=dbType,enum=yb.YQLDatabase" json:"db_type,omitempty"`
	NamespaceName *string                `protobuf:"bytes,2,req,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	PgSchemaName  []string               `protobuf:"bytes,3,rep,name=pg_schema_name,json=pgSchemaName" json:"pg_schema_name,omitempty"`
	TableName     []string               `protobuf:"bytes,4,rep,name=table_name,json=tableName" json:"table_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapProducerRequestPB) Reset() {
	*x = BootstrapProducerRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapProducerRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapProducerRequestPB) ProtoMessage() {}

func (x *BootstrapProducerRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapProducerRequestPB.ProtoReflect.Descriptor instead.
func (*BootstrapProducerRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{18}
}

func (x *BootstrapProducerRequestPB) GetDbType() common.YQLDatabase {
	if x != nil && x.DbType != nil {
		return *x.DbType
	}
	return common.YQLDatabase(1)
}

func (x *BootstrapProducerRequestPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *BootstrapProducerRequestPB) GetPgSchemaName() []string {
	if x != nil {
		return x.PgSchemaName
	}
	return nil
}

func (x *BootstrapProducerRequestPB) GetTableName() []string {
	if x != nil {
		return x.TableName
	}
	return nil
}

type BootstrapProducerResponsePB struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Error        *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TableIds     []string               `protobuf:"bytes,2,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	BootstrapIds [][]byte               `protobuf:"bytes,3,rep,name=bootstrap_ids,json=bootstrapIds" json:"bootstrap_ids,omitempty"`
	// Minimum time after which data is available on all the bootstrapped streams.
	BootstrapTime *uint64 `protobuf:"fixed64,4,opt,name=bootstrap_time,json=bootstrapTime" json:"bootstrap_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BootstrapProducerResponsePB) Reset() {
	*x = BootstrapProducerResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootstrapProducerResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapProducerResponsePB) ProtoMessage() {}

func (x *BootstrapProducerResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapProducerResponsePB.ProtoReflect.Descriptor instead.
func (*BootstrapProducerResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{19}
}

func (x *BootstrapProducerResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BootstrapProducerResponsePB) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *BootstrapProducerResponsePB) GetBootstrapIds() [][]byte {
	if x != nil {
		return x.BootstrapIds
	}
	return nil
}

func (x *BootstrapProducerResponsePB) GetBootstrapTime() uint64 {
	if x != nil && x.BootstrapTime != nil {
		return *x.BootstrapTime
	}
	return 0
}

type IsBootstrapRequiredRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableIds      []string               `protobuf:"bytes,1,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	StreamIds     []string               `protobuf:"bytes,2,rep,name=stream_ids,json=streamIds" json:"stream_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBootstrapRequiredRequestPB) Reset() {
	*x = IsBootstrapRequiredRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBootstrapRequiredRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrapRequiredRequestPB) ProtoMessage() {}

func (x *IsBootstrapRequiredRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrapRequiredRequestPB.ProtoReflect.Descriptor instead.
func (*IsBootstrapRequiredRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{20}
}

func (x *IsBootstrapRequiredRequestPB) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *IsBootstrapRequiredRequestPB) GetStreamIds() []string {
	if x != nil {
		return x.StreamIds
	}
	return nil
}

type IsBootstrapRequiredResponsePB struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Error         *MasterErrorPB                               `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Results       []*IsBootstrapRequiredResponsePB_TableResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBootstrapRequiredResponsePB) Reset() {
	*x = IsBootstrapRequiredResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBootstrapRequiredResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrapRequiredResponsePB) ProtoMessage() {}

func (x *IsBootstrapRequiredResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrapRequiredResponsePB.ProtoReflect.Descriptor instead.
func (*IsBootstrapRequiredResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{21}
}

func (x *IsBootstrapRequiredResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsBootstrapRequiredResponsePB) GetResults() []*IsBootstrapRequiredResponsePB_TableResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetUDTypeMetadataRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The table namespace (if empty - uses default namespace).
	Namespace       *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	PgEnumInfo      *bool                  `protobuf:"varint,2,opt,name=pg_enum_info,json=pgEnumInfo,def=0" json:"pg_enum_info,omitempty"`
	PgCompositeInfo *bool                  `protobuf:"varint,3,opt,name=pg_composite_info,json=pgCompositeInfo,def=0" json:"pg_composite_info,omitempty"`
	PgTypeOid       *uint32                `protobuf:"varint,4,opt,name=pg_type_oid,json=pgTypeOid" json:"pg_type_oid,omitempty"` // if set, metadata only of this type will be fetched.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for GetUDTypeMetadataRequestPB fields.
const (
	Default_GetUDTypeMetadataRequestPB_PgEnumInfo      = bool(false)
	Default_GetUDTypeMetadataRequestPB_PgCompositeInfo = bool(false)
)

func (x *GetUDTypeMetadataRequestPB) Reset() {
	*x = GetUDTypeMetadataRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUDTypeMetadataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUDTypeMetadataRequestPB) ProtoMessage() {}

func (x *GetUDTypeMetadataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUDTypeMetadataRequestPB.ProtoReflect.Descriptor instead.
func (*GetUDTypeMetadataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{22}
}

func (x *GetUDTypeMetadataRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *GetUDTypeMetadataRequestPB) GetPgEnumInfo() bool {
	if x != nil && x.PgEnumInfo != nil {
		return *x.PgEnumInfo
	}
	return Default_GetUDTypeMetadataRequestPB_PgEnumInfo
}

func (x *GetUDTypeMetadataRequestPB) GetPgCompositeInfo() bool {
	if x != nil && x.PgCompositeInfo != nil {
		return *x.PgCompositeInfo
	}
	return Default_GetUDTypeMetadataRequestPB_PgCompositeInfo
}

func (x *GetUDTypeMetadataRequestPB) GetPgTypeOid() uint32 {
	if x != nil && x.PgTypeOid != nil {
		return *x.PgTypeOid
	}
	return 0
}

type PgEnumInfoPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PG enum Oid.
	Oid *uint32 `protobuf:"varint,1,req,name=oid" json:"oid,omitempty"`
	// PG enum label.
	Label         *string `protobuf:"bytes,2,req,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgEnumInfoPB) Reset() {
	*x = PgEnumInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgEnumInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgEnumInfoPB) ProtoMessage() {}

func (x *PgEnumInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgEnumInfoPB.ProtoReflect.Descriptor instead.
func (*PgEnumInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{23}
}

func (x *PgEnumInfoPB) GetOid() uint32 {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return 0
}

func (x *PgEnumInfoPB) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

type PgAttributePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attrelid      *uint32                `protobuf:"varint,1,req,name=attrelid" json:"attrelid,omitempty"`
	Attname       *string                `protobuf:"bytes,2,req,name=attname" json:"attname,omitempty"`
	Atttypid      *uint32                `protobuf:"varint,3,req,name=atttypid" json:"atttypid,omitempty"`
	Attstattarget *int32                 `protobuf:"varint,4,req,name=attstattarget" json:"attstattarget,omitempty"`
	Attlen        *int32                 `protobuf:"varint,5,req,name=attlen" json:"attlen,omitempty"`
	Attnum        *int32                 `protobuf:"varint,6,req,name=attnum" json:"attnum,omitempty"`
	Attndims      *int32                 `protobuf:"varint,7,req,name=attndims" json:"attndims,omitempty"`
	Attcacheoff   *int32                 `protobuf:"varint,8,req,name=attcacheoff" json:"attcacheoff,omitempty"`
	Atttypmod     *int32                 `protobuf:"varint,9,req,name=atttypmod" json:"atttypmod,omitempty"`
	Attbyval      *bool                  `protobuf:"varint,10,req,name=attbyval" json:"attbyval,omitempty"`
	Attstorage    *int32                 `protobuf:"varint,11,req,name=attstorage" json:"attstorage,omitempty"`
	Attalign      *int32                 `protobuf:"varint,12,req,name=attalign" json:"attalign,omitempty"`
	Attnotnull    *bool                  `protobuf:"varint,13,req,name=attnotnull" json:"attnotnull,omitempty"`
	Atthasdef     *bool                  `protobuf:"varint,14,req,name=atthasdef" json:"atthasdef,omitempty"`
	Atthasmissing *bool                  `protobuf:"varint,15,req,name=atthasmissing" json:"atthasmissing,omitempty"`
	Attidentity   *int32                 `protobuf:"varint,16,req,name=attidentity" json:"attidentity,omitempty"`
	Attisdropped  *bool                  `protobuf:"varint,17,req,name=attisdropped" json:"attisdropped,omitempty"`
	Attislocal    *bool                  `protobuf:"varint,18,req,name=attislocal" json:"attislocal,omitempty"`
	Attinhcount   *int32                 `protobuf:"varint,19,req,name=attinhcount" json:"attinhcount,omitempty"`
	Attcollation  *uint32                `protobuf:"varint,20,req,name=attcollation" json:"attcollation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgAttributePB) Reset() {
	*x = PgAttributePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgAttributePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgAttributePB) ProtoMessage() {}

func (x *PgAttributePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgAttributePB.ProtoReflect.Descriptor instead.
func (*PgAttributePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{24}
}

func (x *PgAttributePB) GetAttrelid() uint32 {
	if x != nil && x.Attrelid != nil {
		return *x.Attrelid
	}
	return 0
}

func (x *PgAttributePB) GetAttname() string {
	if x != nil && x.Attname != nil {
		return *x.Attname
	}
	return ""
}

func (x *PgAttributePB) GetAtttypid() uint32 {
	if x != nil && x.Atttypid != nil {
		return *x.Atttypid
	}
	return 0
}

func (x *PgAttributePB) GetAttstattarget() int32 {
	if x != nil && x.Attstattarget != nil {
		return *x.Attstattarget
	}
	return 0
}

func (x *PgAttributePB) GetAttlen() int32 {
	if x != nil && x.Attlen != nil {
		return *x.Attlen
	}
	return 0
}

func (x *PgAttributePB) GetAttnum() int32 {
	if x != nil && x.Attnum != nil {
		return *x.Attnum
	}
	return 0
}

func (x *PgAttributePB) GetAttndims() int32 {
	if x != nil && x.Attndims != nil {
		return *x.Attndims
	}
	return 0
}

func (x *PgAttributePB) GetAttcacheoff() int32 {
	if x != nil && x.Attcacheoff != nil {
		return *x.Attcacheoff
	}
	return 0
}

func (x *PgAttributePB) GetAtttypmod() int32 {
	if x != nil && x.Atttypmod != nil {
		return *x.Atttypmod
	}
	return 0
}

func (x *PgAttributePB) GetAttbyval() bool {
	if x != nil && x.Attbyval != nil {
		return *x.Attbyval
	}
	return false
}

func (x *PgAttributePB) GetAttstorage() int32 {
	if x != nil && x.Attstorage != nil {
		return *x.Attstorage
	}
	return 0
}

func (x *PgAttributePB) GetAttalign() int32 {
	if x != nil && x.Attalign != nil {
		return *x.Attalign
	}
	return 0
}

func (x *PgAttributePB) GetAttnotnull() bool {
	if x != nil && x.Attnotnull != nil {
		return *x.Attnotnull
	}
	return false
}

func (x *PgAttributePB) GetAtthasdef() bool {
	if x != nil && x.Atthasdef != nil {
		return *x.Atthasdef
	}
	return false
}

func (x *PgAttributePB) GetAtthasmissing() bool {
	if x != nil && x.Atthasmissing != nil {
		return *x.Atthasmissing
	}
	return false
}

func (x *PgAttributePB) GetAttidentity() int32 {
	if x != nil && x.Attidentity != nil {
		return *x.Attidentity
	}
	return 0
}

func (x *PgAttributePB) GetAttisdropped() bool {
	if x != nil && x.Attisdropped != nil {
		return *x.Attisdropped
	}
	return false
}

func (x *PgAttributePB) GetAttislocal() bool {
	if x != nil && x.Attislocal != nil {
		return *x.Attislocal
	}
	return false
}

func (x *PgAttributePB) GetAttinhcount() int32 {
	if x != nil && x.Attinhcount != nil {
		return *x.Attinhcount
	}
	return 0
}

func (x *PgAttributePB) GetAttcollation() uint32 {
	if x != nil && x.Attcollation != nil {
		return *x.Attcollation
	}
	return 0
}

type PgCompositeInfoPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PG composite type oid.
	Oid *uint32 `protobuf:"varint,1,req,name=oid" json:"oid,omitempty"`
	// Attributes of composite type.
	Attributes    []*PgAttributePB `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCompositeInfoPB) Reset() {
	*x = PgCompositeInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCompositeInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCompositeInfoPB) ProtoMessage() {}

func (x *PgCompositeInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCompositeInfoPB.ProtoReflect.Descriptor instead.
func (*PgCompositeInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{25}
}

func (x *PgCompositeInfoPB) GetOid() uint32 {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return 0
}

func (x *PgCompositeInfoPB) GetAttributes() []*PgAttributePB {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type GetUDTypeMetadataResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Enums         []*PgEnumInfoPB      `protobuf:"bytes,2,rep,name=enums" json:"enums,omitempty"`
	Composites    []*PgCompositeInfoPB `protobuf:"bytes,3,rep,name=composites" json:"composites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUDTypeMetadataResponsePB) Reset() {
	*x = GetUDTypeMetadataResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUDTypeMetadataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUDTypeMetadataResponsePB) ProtoMessage() {}

func (x *GetUDTypeMetadataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUDTypeMetadataResponsePB.ProtoReflect.Descriptor instead.
func (*GetUDTypeMetadataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{26}
}

func (x *GetUDTypeMetadataResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUDTypeMetadataResponsePB) GetEnums() []*PgEnumInfoPB {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *GetUDTypeMetadataResponsePB) GetComposites() []*PgCompositeInfoPB {
	if x != nil {
		return x.Composites
	}
	return nil
}

type SetupNamespaceReplicationWithBootstrapRequestPB struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ReplicationId           *string                `protobuf:"bytes,1,req,name=replication_id,json=replicationId" json:"replication_id,omitempty"`
	ProducerMasterAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	ProducerNamespace       *NamespaceIdentifierPB `protobuf:"bytes,3,req,name=producer_namespace,json=producerNamespace" json:"producer_namespace,omitempty"`
	// Is the created replication group transactionally consistent.
	Transactional *bool `protobuf:"varint,4,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetupNamespaceReplicationWithBootstrapRequestPB) Reset() {
	*x = SetupNamespaceReplicationWithBootstrapRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetupNamespaceReplicationWithBootstrapRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupNamespaceReplicationWithBootstrapRequestPB) ProtoMessage() {}

func (x *SetupNamespaceReplicationWithBootstrapRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupNamespaceReplicationWithBootstrapRequestPB.ProtoReflect.Descriptor instead.
func (*SetupNamespaceReplicationWithBootstrapRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{27}
}

func (x *SetupNamespaceReplicationWithBootstrapRequestPB) GetReplicationId() string {
	if x != nil && x.ReplicationId != nil {
		return *x.ReplicationId
	}
	return ""
}

func (x *SetupNamespaceReplicationWithBootstrapRequestPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *SetupNamespaceReplicationWithBootstrapRequestPB) GetProducerNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.ProducerNamespace
	}
	return nil
}

func (x *SetupNamespaceReplicationWithBootstrapRequestPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

type SetupNamespaceReplicationWithBootstrapResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetupNamespaceReplicationWithBootstrapResponsePB) Reset() {
	*x = SetupNamespaceReplicationWithBootstrapResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetupNamespaceReplicationWithBootstrapResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupNamespaceReplicationWithBootstrapResponsePB) ProtoMessage() {}

func (x *SetupNamespaceReplicationWithBootstrapResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupNamespaceReplicationWithBootstrapResponsePB.ProtoReflect.Descriptor instead.
func (*SetupNamespaceReplicationWithBootstrapResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{28}
}

func (x *SetupNamespaceReplicationWithBootstrapResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type SetupUniverseReplicationRequestPB struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId      *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	ProducerMasterAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	ProducerTableIds        []string               `protobuf:"bytes,3,rep,name=producer_table_ids,json=producerTableIds" json:"producer_table_ids,omitempty"`
	// An id generated by the producer when BootstrapProducer rpc is called.
	ProducerBootstrapIds []string `protobuf:"bytes,4,rep,name=producer_bootstrap_ids,json=producerBootstrapIds" json:"producer_bootstrap_ids,omitempty"`
	// Is the created replication group transactionally consistent.
	Transactional *bool `protobuf:"varint,5,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	// Used for DB Scoped replication. transactional must be set.
	// Both id and name must be set. Only YQL_DATABASE_PGSQL are allowed.
	ProducerNamespaces []*NamespaceIdentifierPB `protobuf:"bytes,6,rep,name=producer_namespaces,json=producerNamespaces" json:"producer_namespaces,omitempty"`
	// Whether automatic DDL replication is enabled - Creates the
	// yb_xcluster_ddl_replication extension and sequences_data table.
	// Requires DB Scoped replication, transactional and producer_namespace to be
	// set.
	AutomaticDdlMode *bool `protobuf:"varint,7,opt,name=automatic_ddl_mode,json=automaticDdlMode" json:"automatic_ddl_mode,omitempty"` // [default = false]
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SetupUniverseReplicationRequestPB) Reset() {
	*x = SetupUniverseReplicationRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetupUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupUniverseReplicationRequestPB) ProtoMessage() {}

func (x *SetupUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*SetupUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{29}
}

func (x *SetupUniverseReplicationRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *SetupUniverseReplicationRequestPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *SetupUniverseReplicationRequestPB) GetProducerTableIds() []string {
	if x != nil {
		return x.ProducerTableIds
	}
	return nil
}

func (x *SetupUniverseReplicationRequestPB) GetProducerBootstrapIds() []string {
	if x != nil {
		return x.ProducerBootstrapIds
	}
	return nil
}

func (x *SetupUniverseReplicationRequestPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *SetupUniverseReplicationRequestPB) GetProducerNamespaces() []*NamespaceIdentifierPB {
	if x != nil {
		return x.ProducerNamespaces
	}
	return nil
}

func (x *SetupUniverseReplicationRequestPB) GetAutomaticDdlMode() bool {
	if x != nil && x.AutomaticDdlMode != nil {
		return *x.AutomaticDdlMode
	}
	return false
}

type SetupUniverseReplicationResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	UniverseUuid  *string                `protobuf:"bytes,2,opt,name=universe_uuid,json=universeUuid" json:"universe_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetupUniverseReplicationResponsePB) Reset() {
	*x = SetupUniverseReplicationResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetupUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupUniverseReplicationResponsePB) ProtoMessage() {}

func (x *SetupUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*SetupUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{30}
}

func (x *SetupUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SetupUniverseReplicationResponsePB) GetUniverseUuid() string {
	if x != nil && x.UniverseUuid != nil {
		return *x.UniverseUuid
	}
	return ""
}

type DeleteUniverseReplicationRequestPB struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId         *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	IgnoreErrors               *bool                  `protobuf:"varint,2,opt,name=ignore_errors,json=ignoreErrors,def=0" json:"ignore_errors,omitempty"`
	SkipProducerStreamDeletion *bool                  `protobuf:"varint,3,opt,name=skip_producer_stream_deletion,json=skipProducerStreamDeletion,def=0" json:"skip_producer_stream_deletion,omitempty"`
	// Used to validate that the request is sent to the correct universe.
	UniverseUuid  *string `protobuf:"bytes,4,opt,name=universe_uuid,json=universeUuid" json:"universe_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for DeleteUniverseReplicationRequestPB fields.
const (
	Default_DeleteUniverseReplicationRequestPB_IgnoreErrors               = bool(false)
	Default_DeleteUniverseReplicationRequestPB_SkipProducerStreamDeletion = bool(false)
)

func (x *DeleteUniverseReplicationRequestPB) Reset() {
	*x = DeleteUniverseReplicationRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUniverseReplicationRequestPB) ProtoMessage() {}

func (x *DeleteUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteUniverseReplicationRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *DeleteUniverseReplicationRequestPB) GetIgnoreErrors() bool {
	if x != nil && x.IgnoreErrors != nil {
		return *x.IgnoreErrors
	}
	return Default_DeleteUniverseReplicationRequestPB_IgnoreErrors
}

func (x *DeleteUniverseReplicationRequestPB) GetSkipProducerStreamDeletion() bool {
	if x != nil && x.SkipProducerStreamDeletion != nil {
		return *x.SkipProducerStreamDeletion
	}
	return Default_DeleteUniverseReplicationRequestPB_SkipProducerStreamDeletion
}

func (x *DeleteUniverseReplicationRequestPB) GetUniverseUuid() string {
	if x != nil && x.UniverseUuid != nil {
		return *x.UniverseUuid
	}
	return ""
}

type DeleteUniverseReplicationResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// In case force is set, then still return any ignored warnings.
	Warnings      []*common.AppStatusPB `protobuf:"bytes,2,rep,name=warnings" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUniverseReplicationResponsePB) Reset() {
	*x = DeleteUniverseReplicationResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUniverseReplicationResponsePB) ProtoMessage() {}

func (x *DeleteUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteUniverseReplicationResponsePB) GetWarnings() []*common.AppStatusPB {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type AlterUniverseReplicationRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	// The below options are currently mutually exclusive.  Only 1 operation at a time.
	ProducerMasterAddresses         []*common.HostPortPB `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	ProducerTableIdsToAdd           []string             `protobuf:"bytes,4,rep,name=producer_table_ids_to_add,json=producerTableIdsToAdd" json:"producer_table_ids_to_add,omitempty"`
	ProducerTableIdsToRemove        []string             `protobuf:"bytes,5,rep,name=producer_table_ids_to_remove,json=producerTableIdsToRemove" json:"producer_table_ids_to_remove,omitempty"`
	DEPRECATEDNewReplicationGroupId *string              `protobuf:"bytes,7,opt,name=DEPRECATED_new_replication_group_id,json=DEPRECATEDNewReplicationGroupId" json:"DEPRECATED_new_replication_group_id,omitempty"`
	// Optional bootstrap ids for the add table operation.
	ProducerBootstrapIdsToAdd []string `protobuf:"bytes,6,rep,name=producer_bootstrap_ids_to_add,json=producerBootstrapIdsToAdd" json:"producer_bootstrap_ids_to_add,omitempty"`
	RemoveTableIgnoreErrors   *bool    `protobuf:"varint,8,opt,name=remove_table_ignore_errors,json=removeTableIgnoreErrors,def=0" json:"remove_table_ignore_errors,omitempty"`
	// Used to validate the requests are sent to the correct universe.
	UniverseUuid *string `protobuf:"bytes,9,opt,name=universe_uuid,json=universeUuid" json:"universe_uuid,omitempty"`
	// Used for DB Scoped replication.
	// Both id and name must be set. Only YQL_DATABASE_PGSQL are allowed.
	ProducerNamespaceToAdd      *NamespaceIdentifierPB `protobuf:"bytes,10,opt,name=producer_namespace_to_add,json=producerNamespaceToAdd" json:"producer_namespace_to_add,omitempty"`
	ProducerNamespaceIdToRemove *string                `protobuf:"bytes,11,opt,name=producer_namespace_id_to_remove,json=producerNamespaceIdToRemove" json:"producer_namespace_id_to_remove,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for AlterUniverseReplicationRequestPB fields.
const (
	Default_AlterUniverseReplicationRequestPB_RemoveTableIgnoreErrors = bool(false)
)

func (x *AlterUniverseReplicationRequestPB) Reset() {
	*x = AlterUniverseReplicationRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterUniverseReplicationRequestPB) ProtoMessage() {}

func (x *AlterUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*AlterUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{33}
}

func (x *AlterUniverseReplicationRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *AlterUniverseReplicationRequestPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *AlterUniverseReplicationRequestPB) GetProducerTableIdsToAdd() []string {
	if x != nil {
		return x.ProducerTableIdsToAdd
	}
	return nil
}

func (x *AlterUniverseReplicationRequestPB) GetProducerTableIdsToRemove() []string {
	if x != nil {
		return x.ProducerTableIdsToRemove
	}
	return nil
}

func (x *AlterUniverseReplicationRequestPB) GetDEPRECATEDNewReplicationGroupId() string {
	if x != nil && x.DEPRECATEDNewReplicationGroupId != nil {
		return *x.DEPRECATEDNewReplicationGroupId
	}
	return ""
}

func (x *AlterUniverseReplicationRequestPB) GetProducerBootstrapIdsToAdd() []string {
	if x != nil {
		return x.ProducerBootstrapIdsToAdd
	}
	return nil
}

func (x *AlterUniverseReplicationRequestPB) GetRemoveTableIgnoreErrors() bool {
	if x != nil && x.RemoveTableIgnoreErrors != nil {
		return *x.RemoveTableIgnoreErrors
	}
	return Default_AlterUniverseReplicationRequestPB_RemoveTableIgnoreErrors
}

func (x *AlterUniverseReplicationRequestPB) GetUniverseUuid() string {
	if x != nil && x.UniverseUuid != nil {
		return *x.UniverseUuid
	}
	return ""
}

func (x *AlterUniverseReplicationRequestPB) GetProducerNamespaceToAdd() *NamespaceIdentifierPB {
	if x != nil {
		return x.ProducerNamespaceToAdd
	}
	return nil
}

func (x *AlterUniverseReplicationRequestPB) GetProducerNamespaceIdToRemove() string {
	if x != nil && x.ProducerNamespaceIdToRemove != nil {
		return *x.ProducerNamespaceIdToRemove
	}
	return ""
}

type AlterUniverseReplicationResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterUniverseReplicationResponsePB) Reset() {
	*x = AlterUniverseReplicationResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterUniverseReplicationResponsePB) ProtoMessage() {}

func (x *AlterUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*AlterUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{34}
}

func (x *AlterUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ChangeXClusterRoleRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *cdc.XClusterRole      `protobuf:"varint,1,opt,name=role,enum=yb.cdc.XClusterRole" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeXClusterRoleRequestPB) Reset() {
	*x = ChangeXClusterRoleRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeXClusterRoleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeXClusterRoleRequestPB) ProtoMessage() {}

func (x *ChangeXClusterRoleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeXClusterRoleRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeXClusterRoleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{35}
}

func (x *ChangeXClusterRoleRequestPB) GetRole() cdc.XClusterRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return cdc.XClusterRole(0)
}

type ChangeXClusterRoleResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeXClusterRoleResponsePB) Reset() {
	*x = ChangeXClusterRoleResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeXClusterRoleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeXClusterRoleResponsePB) ProtoMessage() {}

func (x *ChangeXClusterRoleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeXClusterRoleResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeXClusterRoleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{36}
}

func (x *ChangeXClusterRoleResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type SetUniverseReplicationEnabledRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	IsEnabled          *bool                  `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SetUniverseReplicationEnabledRequestPB) Reset() {
	*x = SetUniverseReplicationEnabledRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUniverseReplicationEnabledRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUniverseReplicationEnabledRequestPB) ProtoMessage() {}

func (x *SetUniverseReplicationEnabledRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUniverseReplicationEnabledRequestPB.ProtoReflect.Descriptor instead.
func (*SetUniverseReplicationEnabledRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{37}
}

func (x *SetUniverseReplicationEnabledRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *SetUniverseReplicationEnabledRequestPB) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

type SetUniverseReplicationEnabledResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetUniverseReplicationEnabledResponsePB) Reset() {
	*x = SetUniverseReplicationEnabledResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUniverseReplicationEnabledResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUniverseReplicationEnabledResponsePB) ProtoMessage() {}

func (x *SetUniverseReplicationEnabledResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUniverseReplicationEnabledResponsePB.ProtoReflect.Descriptor instead.
func (*SetUniverseReplicationEnabledResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{38}
}

func (x *SetUniverseReplicationEnabledResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type PauseResumeXClusterProducerStreamsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamIds     []string               `protobuf:"bytes,1,rep,name=stream_ids,json=streamIds" json:"stream_ids,omitempty"`
	IsPaused      *bool                  `protobuf:"varint,2,opt,name=is_paused,json=isPaused" json:"is_paused,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseResumeXClusterProducerStreamsRequestPB) Reset() {
	*x = PauseResumeXClusterProducerStreamsRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseResumeXClusterProducerStreamsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResumeXClusterProducerStreamsRequestPB) ProtoMessage() {}

func (x *PauseResumeXClusterProducerStreamsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResumeXClusterProducerStreamsRequestPB.ProtoReflect.Descriptor instead.
func (*PauseResumeXClusterProducerStreamsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{39}
}

func (x *PauseResumeXClusterProducerStreamsRequestPB) GetStreamIds() []string {
	if x != nil {
		return x.StreamIds
	}
	return nil
}

func (x *PauseResumeXClusterProducerStreamsRequestPB) GetIsPaused() bool {
	if x != nil && x.IsPaused != nil {
		return *x.IsPaused
	}
	return false
}

type PauseResumeXClusterProducerStreamsResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseResumeXClusterProducerStreamsResponsePB) Reset() {
	*x = PauseResumeXClusterProducerStreamsResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseResumeXClusterProducerStreamsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseResumeXClusterProducerStreamsResponsePB) ProtoMessage() {}

func (x *PauseResumeXClusterProducerStreamsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseResumeXClusterProducerStreamsResponsePB.ProtoReflect.Descriptor instead.
func (*PauseResumeXClusterProducerStreamsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{40}
}

func (x *PauseResumeXClusterProducerStreamsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetUniverseReplicationRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetUniverseReplicationRequestPB) Reset() {
	*x = GetUniverseReplicationRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationRequestPB) ProtoMessage() {}

func (x *GetUniverseReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{41}
}

func (x *GetUniverseReplicationRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

type GetUniverseReplicationResponsePB struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Error         *MasterErrorPB                 `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entry         *SysUniverseReplicationEntryPB `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUniverseReplicationResponsePB) Reset() {
	*x = GetUniverseReplicationResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationResponsePB) ProtoMessage() {}

func (x *GetUniverseReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{42}
}

func (x *GetUniverseReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUniverseReplicationResponsePB) GetEntry() *SysUniverseReplicationEntryPB {
	if x != nil {
		return x.Entry
	}
	return nil
}

type IsSetupUniverseReplicationDoneRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IsSetupUniverseReplicationDoneRequestPB) Reset() {
	*x = IsSetupUniverseReplicationDoneRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSetupUniverseReplicationDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSetupUniverseReplicationDoneRequestPB) ProtoMessage() {}

func (x *IsSetupUniverseReplicationDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSetupUniverseReplicationDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsSetupUniverseReplicationDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{43}
}

func (x *IsSetupUniverseReplicationDoneRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

type IsSetupUniverseReplicationDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// True if the universe is properly setup for replication, false otherwise.
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	// The more specific error that occurred during replication, or OK if we succeeded.
	ReplicationError *common.AppStatusPB `protobuf:"bytes,3,opt,name=replication_error,json=replicationError" json:"replication_error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IsSetupUniverseReplicationDoneResponsePB) Reset() {
	*x = IsSetupUniverseReplicationDoneResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSetupUniverseReplicationDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSetupUniverseReplicationDoneResponsePB) ProtoMessage() {}

func (x *IsSetupUniverseReplicationDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSetupUniverseReplicationDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsSetupUniverseReplicationDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{44}
}

func (x *IsSetupUniverseReplicationDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsSetupUniverseReplicationDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsSetupUniverseReplicationDoneResponsePB) GetReplicationError() *common.AppStatusPB {
	if x != nil {
		return x.ReplicationError
	}
	return nil
}

type IsSetupNamespaceReplicationWithBootstrapDoneRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) Reset() {
	*x = IsSetupNamespaceReplicationWithBootstrapDoneRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) ProtoMessage() {}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSetupNamespaceReplicationWithBootstrapDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{45}
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

type IsSetupNamespaceReplicationWithBootstrapDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// True if the bootstrapping is complete, false otherwise.
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	// The current state of the bootstrap.
	State *SysUniverseReplicationBootstrapEntryPB_State `protobuf:"varint,3,opt,name=state,enum=yb.master.SysUniverseReplicationBootstrapEntryPB_State" json:"state,omitempty"`
	// The more specific error that occurred during replication, or OK if we
	// succeeded.
	BootstrapError *common.AppStatusPB `protobuf:"bytes,4,opt,name=bootstrap_error,json=bootstrapError" json:"bootstrap_error,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) Reset() {
	*x = IsSetupNamespaceReplicationWithBootstrapDoneResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) ProtoMessage() {}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsSetupNamespaceReplicationWithBootstrapDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{46}
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) GetState() SysUniverseReplicationBootstrapEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SysUniverseReplicationBootstrapEntryPB_INITIALIZING
}

func (x *IsSetupNamespaceReplicationWithBootstrapDoneResponsePB) GetBootstrapError() *common.AppStatusPB {
	if x != nil {
		return x.BootstrapError
	}
	return nil
}

type ProducerSplitTabletInfoPB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TabletId          []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	NewTablet1Id      []byte                 `protobuf:"bytes,2,req,name=new_tablet1_id,json=newTablet1Id" json:"new_tablet1_id,omitempty"`
	NewTablet2Id      []byte                 `protobuf:"bytes,3,req,name=new_tablet2_id,json=newTablet2Id" json:"new_tablet2_id,omitempty"`
	SplitPartitionKey []byte                 `protobuf:"bytes,4,req,name=split_partition_key,json=splitPartitionKey" json:"split_partition_key,omitempty"`
	SplitEncodedKey   []byte                 `protobuf:"bytes,5,req,name=split_encoded_key,json=splitEncodedKey" json:"split_encoded_key,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProducerSplitTabletInfoPB) Reset() {
	*x = ProducerSplitTabletInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProducerSplitTabletInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProducerSplitTabletInfoPB) ProtoMessage() {}

func (x *ProducerSplitTabletInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProducerSplitTabletInfoPB.ProtoReflect.Descriptor instead.
func (*ProducerSplitTabletInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{47}
}

func (x *ProducerSplitTabletInfoPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ProducerSplitTabletInfoPB) GetNewTablet1Id() []byte {
	if x != nil {
		return x.NewTablet1Id
	}
	return nil
}

func (x *ProducerSplitTabletInfoPB) GetNewTablet2Id() []byte {
	if x != nil {
		return x.NewTablet2Id
	}
	return nil
}

func (x *ProducerSplitTabletInfoPB) GetSplitPartitionKey() []byte {
	if x != nil {
		return x.SplitPartitionKey
	}
	return nil
}

func (x *ProducerSplitTabletInfoPB) GetSplitEncodedKey() []byte {
	if x != nil {
		return x.SplitEncodedKey
	}
	return nil
}

type UpdateConsumerOnProducerSplitRequestPB struct {
	state                   protoimpl.MessageState     `protogen:"open.v1"`
	ReplicationGroupId      *string                    `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	StreamId                *string                    `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	ProducerSplitTabletInfo *ProducerSplitTabletInfoPB `protobuf:"bytes,3,opt,name=producer_split_tablet_info,json=producerSplitTabletInfo" json:"producer_split_tablet_info,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UpdateConsumerOnProducerSplitRequestPB) Reset() {
	*x = UpdateConsumerOnProducerSplitRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConsumerOnProducerSplitRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerOnProducerSplitRequestPB) ProtoMessage() {}

func (x *UpdateConsumerOnProducerSplitRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerOnProducerSplitRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateConsumerOnProducerSplitRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateConsumerOnProducerSplitRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *UpdateConsumerOnProducerSplitRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *UpdateConsumerOnProducerSplitRequestPB) GetProducerSplitTabletInfo() *ProducerSplitTabletInfoPB {
	if x != nil {
		return x.ProducerSplitTabletInfo
	}
	return nil
}

type UpdateConsumerOnProducerSplitResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConsumerOnProducerSplitResponsePB) Reset() {
	*x = UpdateConsumerOnProducerSplitResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConsumerOnProducerSplitResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerOnProducerSplitResponsePB) ProtoMessage() {}

func (x *UpdateConsumerOnProducerSplitResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerOnProducerSplitResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateConsumerOnProducerSplitResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateConsumerOnProducerSplitResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetReplicationStatusRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filters by the replication group if non-empty.
	ReplicationGroupId *string `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetReplicationStatusRequestPB) Reset() {
	*x = GetReplicationStatusRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReplicationStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplicationStatusRequestPB) ProtoMessage() {}

func (x *GetReplicationStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplicationStatusRequestPB.ProtoReflect.Descriptor instead.
func (*GetReplicationStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{50}
}

func (x *GetReplicationStatusRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

type ReplicationStatusErrorPB struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Error         *common.ReplicationErrorPb `protobuf:"varint,1,req,name=error,enum=yb.ReplicationErrorPb" json:"error,omitempty"`
	ErrorDetail   *string                    `protobuf:"bytes,2,req,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationStatusErrorPB) Reset() {
	*x = ReplicationStatusErrorPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatusErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusErrorPB) ProtoMessage() {}

func (x *ReplicationStatusErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusErrorPB.ProtoReflect.Descriptor instead.
func (*ReplicationStatusErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{51}
}

func (x *ReplicationStatusErrorPB) GetError() common.ReplicationErrorPb {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return common.ReplicationErrorPb(0)
}

func (x *ReplicationStatusErrorPB) GetErrorDetail() string {
	if x != nil && x.ErrorDetail != nil {
		return *x.ErrorDetail
	}
	return ""
}

type ReplicationStatusPB struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	TableId       []byte                      `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	StreamId      []byte                      `protobuf:"bytes,2,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Errors        []*ReplicationStatusErrorPB `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationStatusPB) Reset() {
	*x = ReplicationStatusPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationStatusPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationStatusPB) ProtoMessage() {}

func (x *ReplicationStatusPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationStatusPB.ProtoReflect.Descriptor instead.
func (*ReplicationStatusPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{52}
}

func (x *ReplicationStatusPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *ReplicationStatusPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *ReplicationStatusPB) GetErrors() []*ReplicationStatusErrorPB {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GetReplicationStatusResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Statuses      []*ReplicationStatusPB `protobuf:"bytes,2,rep,name=statuses" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReplicationStatusResponsePB) Reset() {
	*x = GetReplicationStatusResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReplicationStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplicationStatusResponsePB) ProtoMessage() {}

func (x *GetReplicationStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplicationStatusResponsePB.ProtoReflect.Descriptor instead.
func (*GetReplicationStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{53}
}

func (x *GetReplicationStatusResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetReplicationStatusResponsePB) GetStatuses() []*ReplicationStatusPB {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type WaitForReplicationDrainRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamIds     [][]byte               `protobuf:"bytes,1,rep,name=stream_ids,json=streamIds" json:"stream_ids,omitempty"`
	TargetTime    *uint64                `protobuf:"varint,2,opt,name=target_time,json=targetTime" json:"target_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForReplicationDrainRequestPB) Reset() {
	*x = WaitForReplicationDrainRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForReplicationDrainRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForReplicationDrainRequestPB) ProtoMessage() {}

func (x *WaitForReplicationDrainRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForReplicationDrainRequestPB.ProtoReflect.Descriptor instead.
func (*WaitForReplicationDrainRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{54}
}

func (x *WaitForReplicationDrainRequestPB) GetStreamIds() [][]byte {
	if x != nil {
		return x.StreamIds
	}
	return nil
}

func (x *WaitForReplicationDrainRequestPB) GetTargetTime() uint64 {
	if x != nil && x.TargetTime != nil {
		return *x.TargetTime
	}
	return 0
}

type WaitForReplicationDrainResponsePB struct {
	state               protoimpl.MessageState                                     `protogen:"open.v1"`
	Error               *MasterErrorPB                                             `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	UndrainedStreamInfo []*WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB `protobuf:"bytes,2,rep,name=undrained_stream_info,json=undrainedStreamInfo" json:"undrained_stream_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WaitForReplicationDrainResponsePB) Reset() {
	*x = WaitForReplicationDrainResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForReplicationDrainResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForReplicationDrainResponsePB) ProtoMessage() {}

func (x *WaitForReplicationDrainResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForReplicationDrainResponsePB.ProtoReflect.Descriptor instead.
func (*WaitForReplicationDrainResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{55}
}

func (x *WaitForReplicationDrainResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WaitForReplicationDrainResponsePB) GetUndrainedStreamInfo() []*WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB {
	if x != nil {
		return x.UndrainedStreamInfo
	}
	return nil
}

type UpdateConsumerOnProducerMetadataRequestPB struct {
	state                         protoimpl.MessageState          `protogen:"open.v1"`
	ReplicationGroupId            *string                         `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	StreamId                      *string                         `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	ConsumerTabletId              *string                         `protobuf:"bytes,3,opt,name=consumer_tablet_id,json=consumerTabletId" json:"consumer_tablet_id,omitempty"`
	ProducerChangeMetadataRequest *tablet.ChangeMetadataRequestPB `protobuf:"bytes,4,opt,name=producer_change_metadata_request,json=producerChangeMetadataRequest" json:"producer_change_metadata_request,omitempty"`
	ColocationId                  *uint32                         `protobuf:"varint,5,opt,name=colocation_id,json=colocationId" json:"colocation_id,omitempty"`
	ProducerSchemaVersion         *uint32                         `protobuf:"varint,6,opt,name=producer_schema_version,json=producerSchemaVersion" json:"producer_schema_version,omitempty"`
	ConsumerSchemaVersion         *uint32                         `protobuf:"varint,7,opt,name=consumer_schema_version,json=consumerSchemaVersion" json:"consumer_schema_version,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) Reset() {
	*x = UpdateConsumerOnProducerMetadataRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerOnProducerMetadataRequestPB) ProtoMessage() {}

func (x *UpdateConsumerOnProducerMetadataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerOnProducerMetadataRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateConsumerOnProducerMetadataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) GetConsumerTabletId() string {
	if x != nil && x.ConsumerTabletId != nil {
		return *x.ConsumerTabletId
	}
	return ""
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) GetProducerChangeMetadataRequest() *tablet.ChangeMetadataRequestPB {
	if x != nil {
		return x.ProducerChangeMetadataRequest
	}
	return nil
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) GetColocationId() uint32 {
	if x != nil && x.ColocationId != nil {
		return *x.ColocationId
	}
	return 0
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) GetProducerSchemaVersion() uint32 {
	if x != nil && x.ProducerSchemaVersion != nil {
		return *x.ProducerSchemaVersion
	}
	return 0
}

func (x *UpdateConsumerOnProducerMetadataRequestPB) GetConsumerSchemaVersion() uint32 {
	if x != nil && x.ConsumerSchemaVersion != nil {
		return *x.ConsumerSchemaVersion
	}
	return 0
}

type UpdateConsumerOnProducerMetadataResponsePB struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Error      *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ShouldWait *bool                  `protobuf:"varint,2,opt,name=should_wait,json=shouldWait,def=1" json:"should_wait,omitempty"`
	// The last Consumer schema version that was EquivalentForDataCopy with the Producer
	LastCompatibleConsumerSchemaVersion *uint32               `protobuf:"varint,3,opt,name=last_compatible_consumer_schema_version,json=lastCompatibleConsumerSchemaVersion" json:"last_compatible_consumer_schema_version,omitempty"`
	SchemaVersions                      *cdc.SchemaVersionsPB `protobuf:"bytes,4,opt,name=schema_versions,json=schemaVersions" json:"schema_versions,omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

// Default values for UpdateConsumerOnProducerMetadataResponsePB fields.
const (
	Default_UpdateConsumerOnProducerMetadataResponsePB_ShouldWait = bool(true)
)

func (x *UpdateConsumerOnProducerMetadataResponsePB) Reset() {
	*x = UpdateConsumerOnProducerMetadataResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConsumerOnProducerMetadataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerOnProducerMetadataResponsePB) ProtoMessage() {}

func (x *UpdateConsumerOnProducerMetadataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerOnProducerMetadataResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateConsumerOnProducerMetadataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateConsumerOnProducerMetadataResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateConsumerOnProducerMetadataResponsePB) GetShouldWait() bool {
	if x != nil && x.ShouldWait != nil {
		return *x.ShouldWait
	}
	return Default_UpdateConsumerOnProducerMetadataResponsePB_ShouldWait
}

func (x *UpdateConsumerOnProducerMetadataResponsePB) GetLastCompatibleConsumerSchemaVersion() uint32 {
	if x != nil && x.LastCompatibleConsumerSchemaVersion != nil {
		return *x.LastCompatibleConsumerSchemaVersion
	}
	return 0
}

func (x *UpdateConsumerOnProducerMetadataResponsePB) GetSchemaVersions() *cdc.SchemaVersionsPB {
	if x != nil {
		return x.SchemaVersions
	}
	return nil
}

type InsertPackedSchemaForXClusterTargetRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TableId              []byte                 `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	PackedSchema         *common.SchemaPB       `protobuf:"bytes,2,opt,name=packed_schema,json=packedSchema" json:"packed_schema,omitempty"`
	CurrentSchemaVersion *uint32                `protobuf:"varint,3,opt,name=current_schema_version,json=currentSchemaVersion" json:"current_schema_version,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InsertPackedSchemaForXClusterTargetRequestPB) Reset() {
	*x = InsertPackedSchemaForXClusterTargetRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertPackedSchemaForXClusterTargetRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertPackedSchemaForXClusterTargetRequestPB) ProtoMessage() {}

func (x *InsertPackedSchemaForXClusterTargetRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertPackedSchemaForXClusterTargetRequestPB.ProtoReflect.Descriptor instead.
func (*InsertPackedSchemaForXClusterTargetRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{58}
}

func (x *InsertPackedSchemaForXClusterTargetRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *InsertPackedSchemaForXClusterTargetRequestPB) GetPackedSchema() *common.SchemaPB {
	if x != nil {
		return x.PackedSchema
	}
	return nil
}

func (x *InsertPackedSchemaForXClusterTargetRequestPB) GetCurrentSchemaVersion() uint32 {
	if x != nil && x.CurrentSchemaVersion != nil {
		return *x.CurrentSchemaVersion
	}
	return 0
}

type InsertPackedSchemaForXClusterTargetResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertPackedSchemaForXClusterTargetResponsePB) Reset() {
	*x = InsertPackedSchemaForXClusterTargetResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertPackedSchemaForXClusterTargetResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertPackedSchemaForXClusterTargetResponsePB) ProtoMessage() {}

func (x *InsertPackedSchemaForXClusterTargetResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertPackedSchemaForXClusterTargetResponsePB.ProtoReflect.Descriptor instead.
func (*InsertPackedSchemaForXClusterTargetResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{59}
}

func (x *InsertPackedSchemaForXClusterTargetResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetXClusterSafeTimeRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterSafeTimeRequestPB) Reset() {
	*x = GetXClusterSafeTimeRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterSafeTimeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterSafeTimeRequestPB) ProtoMessage() {}

func (x *GetXClusterSafeTimeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterSafeTimeRequestPB.ProtoReflect.Descriptor instead.
func (*GetXClusterSafeTimeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{60}
}

type GetXClusterSafeTimeResponsePB struct {
	state              protoimpl.MessageState                               `protogen:"open.v1"`
	Error              *MasterErrorPB                                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NamespaceSafeTimes []*GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB `protobuf:"bytes,2,rep,name=namespace_safe_times,json=namespaceSafeTimes" json:"namespace_safe_times,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetXClusterSafeTimeResponsePB) Reset() {
	*x = GetXClusterSafeTimeResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterSafeTimeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterSafeTimeResponsePB) ProtoMessage() {}

func (x *GetXClusterSafeTimeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterSafeTimeResponsePB.ProtoReflect.Descriptor instead.
func (*GetXClusterSafeTimeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{61}
}

func (x *GetXClusterSafeTimeResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetXClusterSafeTimeResponsePB) GetNamespaceSafeTimes() []*GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB {
	if x != nil {
		return x.NamespaceSafeTimes
	}
	return nil
}

type GetXClusterSafeTimeForNamespaceRequestPB struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId *string                `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	// Ignore safe times from these types of tables.
	// If this filters out all tables, then will return master leader safe time.
	Filter        *XClusterSafeTimeFilter `protobuf:"varint,2,opt,name=filter,enum=yb.master.XClusterSafeTimeFilter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterSafeTimeForNamespaceRequestPB) Reset() {
	*x = GetXClusterSafeTimeForNamespaceRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterSafeTimeForNamespaceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterSafeTimeForNamespaceRequestPB) ProtoMessage() {}

func (x *GetXClusterSafeTimeForNamespaceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterSafeTimeForNamespaceRequestPB.ProtoReflect.Descriptor instead.
func (*GetXClusterSafeTimeForNamespaceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{62}
}

func (x *GetXClusterSafeTimeForNamespaceRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *GetXClusterSafeTimeForNamespaceRequestPB) GetFilter() XClusterSafeTimeFilter {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return XClusterSafeTimeFilter_NONE
}

type GetXClusterSafeTimeForNamespaceResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	SafeTimeHt    *uint64                `protobuf:"fixed64,2,opt,name=safe_time_ht,json=safeTimeHt" json:"safe_time_ht,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterSafeTimeForNamespaceResponsePB) Reset() {
	*x = GetXClusterSafeTimeForNamespaceResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterSafeTimeForNamespaceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterSafeTimeForNamespaceResponsePB) ProtoMessage() {}

func (x *GetXClusterSafeTimeForNamespaceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterSafeTimeForNamespaceResponsePB.ProtoReflect.Descriptor instead.
func (*GetXClusterSafeTimeForNamespaceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{63}
}

func (x *GetXClusterSafeTimeForNamespaceResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetXClusterSafeTimeForNamespaceResponsePB) GetSafeTimeHt() uint64 {
	if x != nil && x.SafeTimeHt != nil {
		return *x.SafeTimeHt
	}
	return 0
}

type GetTableSchemaFromSysCatalogRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *TableIdentifierPB     `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	ReadTime      *int64                 `protobuf:"varint,2,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableSchemaFromSysCatalogRequestPB) Reset() {
	*x = GetTableSchemaFromSysCatalogRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableSchemaFromSysCatalogRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableSchemaFromSysCatalogRequestPB) ProtoMessage() {}

func (x *GetTableSchemaFromSysCatalogRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableSchemaFromSysCatalogRequestPB.ProtoReflect.Descriptor instead.
func (*GetTableSchemaFromSysCatalogRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{64}
}

func (x *GetTableSchemaFromSysCatalogRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetTableSchemaFromSysCatalogRequestPB) GetReadTime() int64 {
	if x != nil && x.ReadTime != nil {
		return *x.ReadTime
	}
	return 0
}

type GetTableSchemaFromSysCatalogResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// This is the schema that every TS should be able to understand
	// if your alter is keeping the schema compatible.
	// In case of an alter table in progress, this is the previous schema;
	// otherwise it is the latest schema.
	Schema *common.SchemaPB `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	// Table schema version
	Version       *uint32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableSchemaFromSysCatalogResponsePB) Reset() {
	*x = GetTableSchemaFromSysCatalogResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableSchemaFromSysCatalogResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableSchemaFromSysCatalogResponsePB) ProtoMessage() {}

func (x *GetTableSchemaFromSysCatalogResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableSchemaFromSysCatalogResponsePB.ProtoReflect.Descriptor instead.
func (*GetTableSchemaFromSysCatalogResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{65}
}

func (x *GetTableSchemaFromSysCatalogResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTableSchemaFromSysCatalogResponsePB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetTableSchemaFromSysCatalogResponsePB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type XClusterReportNewAutoFlagConfigVersionRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId    *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	AutoFlagConfigVersion *uint32                `protobuf:"varint,2,req,name=auto_flag_config_version,json=autoFlagConfigVersion" json:"auto_flag_config_version,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *XClusterReportNewAutoFlagConfigVersionRequestPB) Reset() {
	*x = XClusterReportNewAutoFlagConfigVersionRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterReportNewAutoFlagConfigVersionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterReportNewAutoFlagConfigVersionRequestPB) ProtoMessage() {}

func (x *XClusterReportNewAutoFlagConfigVersionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterReportNewAutoFlagConfigVersionRequestPB.ProtoReflect.Descriptor instead.
func (*XClusterReportNewAutoFlagConfigVersionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{66}
}

func (x *XClusterReportNewAutoFlagConfigVersionRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *XClusterReportNewAutoFlagConfigVersionRequestPB) GetAutoFlagConfigVersion() uint32 {
	if x != nil && x.AutoFlagConfigVersion != nil {
		return *x.AutoFlagConfigVersion
	}
	return 0
}

type XClusterReportNewAutoFlagConfigVersionResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XClusterReportNewAutoFlagConfigVersionResponsePB) Reset() {
	*x = XClusterReportNewAutoFlagConfigVersionResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterReportNewAutoFlagConfigVersionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterReportNewAutoFlagConfigVersionResponsePB) ProtoMessage() {}

func (x *XClusterReportNewAutoFlagConfigVersionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterReportNewAutoFlagConfigVersionResponsePB.ProtoReflect.Descriptor instead.
func (*XClusterReportNewAutoFlagConfigVersionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{67}
}

func (x *XClusterReportNewAutoFlagConfigVersionResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	StreamId                      []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	CdcsdkYsqlReplicationSlotName *string                `protobuf:"bytes,2,opt,name=cdcsdk_ysql_replication_slot_name,json=cdcsdkYsqlReplicationSlotName" json:"cdcsdk_ysql_replication_slot_name,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) Reset() {
	*x = YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) ProtoMessage() {}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB.ProtoReflect.Descriptor instead.
func (*YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{68}
}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) GetCdcsdkYsqlReplicationSlotName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotName != nil {
		return *x.CdcsdkYsqlReplicationSlotName
	}
	return ""
}

type YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB) Reset() {
	*x = YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB) ProtoMessage() {}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB.ProtoReflect.Descriptor instead.
func (*YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{69}
}

func (x *YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type XClusterCreateOutboundReplicationGroupRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	NamespaceIds       []string               `protobuf:"bytes,2,rep,name=namespace_ids,json=namespaceIds" json:"namespace_ids,omitempty"`
	AutomaticDdlMode   *bool                  `protobuf:"varint,3,opt,name=automatic_ddl_mode,json=automaticDdlMode" json:"automatic_ddl_mode,omitempty"` // [default = false]
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *XClusterCreateOutboundReplicationGroupRequestPB) Reset() {
	*x = XClusterCreateOutboundReplicationGroupRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterCreateOutboundReplicationGroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterCreateOutboundReplicationGroupRequestPB) ProtoMessage() {}

func (x *XClusterCreateOutboundReplicationGroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterCreateOutboundReplicationGroupRequestPB.ProtoReflect.Descriptor instead.
func (*XClusterCreateOutboundReplicationGroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{70}
}

func (x *XClusterCreateOutboundReplicationGroupRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *XClusterCreateOutboundReplicationGroupRequestPB) GetNamespaceIds() []string {
	if x != nil {
		return x.NamespaceIds
	}
	return nil
}

func (x *XClusterCreateOutboundReplicationGroupRequestPB) GetAutomaticDdlMode() bool {
	if x != nil && x.AutomaticDdlMode != nil {
		return *x.AutomaticDdlMode
	}
	return false
}

type XClusterCreateOutboundReplicationGroupResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XClusterCreateOutboundReplicationGroupResponsePB) Reset() {
	*x = XClusterCreateOutboundReplicationGroupResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterCreateOutboundReplicationGroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterCreateOutboundReplicationGroupResponsePB) ProtoMessage() {}

func (x *XClusterCreateOutboundReplicationGroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterCreateOutboundReplicationGroupResponsePB.ProtoReflect.Descriptor instead.
func (*XClusterCreateOutboundReplicationGroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{71}
}

func (x *XClusterCreateOutboundReplicationGroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type XClusterAddNamespaceToOutboundReplicationGroupRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	NamespaceId        *string                `protobuf:"bytes,2,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *XClusterAddNamespaceToOutboundReplicationGroupRequestPB) Reset() {
	*x = XClusterAddNamespaceToOutboundReplicationGroupRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterAddNamespaceToOutboundReplicationGroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterAddNamespaceToOutboundReplicationGroupRequestPB) ProtoMessage() {}

func (x *XClusterAddNamespaceToOutboundReplicationGroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterAddNamespaceToOutboundReplicationGroupRequestPB.ProtoReflect.Descriptor instead.
func (*XClusterAddNamespaceToOutboundReplicationGroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{72}
}

func (x *XClusterAddNamespaceToOutboundReplicationGroupRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *XClusterAddNamespaceToOutboundReplicationGroupRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

type XClusterAddNamespaceToOutboundReplicationGroupResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XClusterAddNamespaceToOutboundReplicationGroupResponsePB) Reset() {
	*x = XClusterAddNamespaceToOutboundReplicationGroupResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterAddNamespaceToOutboundReplicationGroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterAddNamespaceToOutboundReplicationGroupResponsePB) ProtoMessage() {}

func (x *XClusterAddNamespaceToOutboundReplicationGroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterAddNamespaceToOutboundReplicationGroupResponsePB.ProtoReflect.Descriptor instead.
func (*XClusterAddNamespaceToOutboundReplicationGroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{73}
}

func (x *XClusterAddNamespaceToOutboundReplicationGroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	NamespaceId        *string                `protobuf:"bytes,2,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	// Optional. When set target cluster is also cleaned up.
	TargetMasterAddresses []*common.HostPortPB `protobuf:"bytes,3,rep,name=target_master_addresses,json=targetMasterAddresses" json:"target_master_addresses,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) Reset() {
	*x = XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) ProtoMessage() {}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB.ProtoReflect.Descriptor instead.
func (*XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{74}
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) GetTargetMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.TargetMasterAddresses
	}
	return nil
}

type XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB) Reset() {
	*x = XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB) ProtoMessage() {}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB.ProtoReflect.Descriptor instead.
func (*XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{75}
}

func (x *XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type XClusterDeleteOutboundReplicationGroupRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	// Optional. When set target cluster is also cleaned up.
	TargetMasterAddresses []*common.HostPortPB `protobuf:"bytes,2,rep,name=target_master_addresses,json=targetMasterAddresses" json:"target_master_addresses,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *XClusterDeleteOutboundReplicationGroupRequestPB) Reset() {
	*x = XClusterDeleteOutboundReplicationGroupRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterDeleteOutboundReplicationGroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterDeleteOutboundReplicationGroupRequestPB) ProtoMessage() {}

func (x *XClusterDeleteOutboundReplicationGroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterDeleteOutboundReplicationGroupRequestPB.ProtoReflect.Descriptor instead.
func (*XClusterDeleteOutboundReplicationGroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{76}
}

func (x *XClusterDeleteOutboundReplicationGroupRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *XClusterDeleteOutboundReplicationGroupRequestPB) GetTargetMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.TargetMasterAddresses
	}
	return nil
}

type XClusterDeleteOutboundReplicationGroupResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XClusterDeleteOutboundReplicationGroupResponsePB) Reset() {
	*x = XClusterDeleteOutboundReplicationGroupResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterDeleteOutboundReplicationGroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterDeleteOutboundReplicationGroupResponsePB) ProtoMessage() {}

func (x *XClusterDeleteOutboundReplicationGroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterDeleteOutboundReplicationGroupResponsePB.ProtoReflect.Descriptor instead.
func (*XClusterDeleteOutboundReplicationGroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{77}
}

func (x *XClusterDeleteOutboundReplicationGroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsXClusterBootstrapRequiredRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	NamespaceId        *string                `protobuf:"bytes,2,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IsXClusterBootstrapRequiredRequestPB) Reset() {
	*x = IsXClusterBootstrapRequiredRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsXClusterBootstrapRequiredRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsXClusterBootstrapRequiredRequestPB) ProtoMessage() {}

func (x *IsXClusterBootstrapRequiredRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsXClusterBootstrapRequiredRequestPB.ProtoReflect.Descriptor instead.
func (*IsXClusterBootstrapRequiredRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{78}
}

func (x *IsXClusterBootstrapRequiredRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *IsXClusterBootstrapRequiredRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

type IsXClusterBootstrapRequiredResponsePB struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Error                    *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NotReady                 *bool                  `protobuf:"varint,2,opt,name=not_ready,json=notReady" json:"not_ready,omitempty"`
	InitialBootstrapRequired *bool                  `protobuf:"varint,3,opt,name=initial_bootstrap_required,json=initialBootstrapRequired" json:"initial_bootstrap_required,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *IsXClusterBootstrapRequiredResponsePB) Reset() {
	*x = IsXClusterBootstrapRequiredResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsXClusterBootstrapRequiredResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsXClusterBootstrapRequiredResponsePB) ProtoMessage() {}

func (x *IsXClusterBootstrapRequiredResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsXClusterBootstrapRequiredResponsePB.ProtoReflect.Descriptor instead.
func (*IsXClusterBootstrapRequiredResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{79}
}

func (x *IsXClusterBootstrapRequiredResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsXClusterBootstrapRequiredResponsePB) GetNotReady() bool {
	if x != nil && x.NotReady != nil {
		return *x.NotReady
	}
	return false
}

func (x *IsXClusterBootstrapRequiredResponsePB) GetInitialBootstrapRequired() bool {
	if x != nil && x.InitialBootstrapRequired != nil {
		return *x.InitialBootstrapRequired
	}
	return false
}

type XClusterEnsureSequenceUpdatesAreInWalRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	NamespaceIds       []string               `protobuf:"bytes,2,rep,name=namespace_ids,json=namespaceIds" json:"namespace_ids,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *XClusterEnsureSequenceUpdatesAreInWalRequestPB) Reset() {
	*x = XClusterEnsureSequenceUpdatesAreInWalRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterEnsureSequenceUpdatesAreInWalRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterEnsureSequenceUpdatesAreInWalRequestPB) ProtoMessage() {}

func (x *XClusterEnsureSequenceUpdatesAreInWalRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterEnsureSequenceUpdatesAreInWalRequestPB.ProtoReflect.Descriptor instead.
func (*XClusterEnsureSequenceUpdatesAreInWalRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{80}
}

func (x *XClusterEnsureSequenceUpdatesAreInWalRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *XClusterEnsureSequenceUpdatesAreInWalRequestPB) GetNamespaceIds() []string {
	if x != nil {
		return x.NamespaceIds
	}
	return nil
}

type XClusterEnsureSequenceUpdatesAreInWalResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XClusterEnsureSequenceUpdatesAreInWalResponsePB) Reset() {
	*x = XClusterEnsureSequenceUpdatesAreInWalResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterEnsureSequenceUpdatesAreInWalResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterEnsureSequenceUpdatesAreInWalResponsePB) ProtoMessage() {}

func (x *XClusterEnsureSequenceUpdatesAreInWalResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterEnsureSequenceUpdatesAreInWalResponsePB.ProtoReflect.Descriptor instead.
func (*XClusterEnsureSequenceUpdatesAreInWalResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{81}
}

func (x *XClusterEnsureSequenceUpdatesAreInWalResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetXClusterStreamsRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	NamespaceId        *string                `protobuf:"bytes,2,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	// Only one of the following fields should be set. If both are empty, return all tables.
	TableInfos     []*GetXClusterStreamsRequestPB_TableInfo `protobuf:"bytes,3,rep,name=table_infos,json=tableInfos" json:"table_infos,omitempty"`
	SourceTableIds [][]byte                                 `protobuf:"bytes,4,rep,name=source_table_ids,json=sourceTableIds" json:"source_table_ids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetXClusterStreamsRequestPB) Reset() {
	*x = GetXClusterStreamsRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterStreamsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterStreamsRequestPB) ProtoMessage() {}

func (x *GetXClusterStreamsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterStreamsRequestPB.ProtoReflect.Descriptor instead.
func (*GetXClusterStreamsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{82}
}

func (x *GetXClusterStreamsRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *GetXClusterStreamsRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *GetXClusterStreamsRequestPB) GetTableInfos() []*GetXClusterStreamsRequestPB_TableInfo {
	if x != nil {
		return x.TableInfos
	}
	return nil
}

func (x *GetXClusterStreamsRequestPB) GetSourceTableIds() [][]byte {
	if x != nil {
		return x.SourceTableIds
	}
	return nil
}

type GetXClusterStreamsResponsePB struct {
	state                    protoimpl.MessageState                    `protogen:"open.v1"`
	Error                    *MasterErrorPB                            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NotReady                 *bool                                     `protobuf:"varint,2,opt,name=not_ready,json=notReady" json:"not_ready,omitempty"`                                                   // [default = false]
	InitialBootstrapRequired *bool                                     `protobuf:"varint,3,opt,name=initial_bootstrap_required,json=initialBootstrapRequired" json:"initial_bootstrap_required,omitempty"` // [default = false]
	TableInfos               []*GetXClusterStreamsResponsePB_TableInfo `protobuf:"bytes,4,rep,name=table_infos,json=tableInfos" json:"table_infos,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetXClusterStreamsResponsePB) Reset() {
	*x = GetXClusterStreamsResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterStreamsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterStreamsResponsePB) ProtoMessage() {}

func (x *GetXClusterStreamsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterStreamsResponsePB.ProtoReflect.Descriptor instead.
func (*GetXClusterStreamsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{83}
}

func (x *GetXClusterStreamsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetXClusterStreamsResponsePB) GetNotReady() bool {
	if x != nil && x.NotReady != nil {
		return *x.NotReady
	}
	return false
}

func (x *GetXClusterStreamsResponsePB) GetInitialBootstrapRequired() bool {
	if x != nil && x.InitialBootstrapRequired != nil {
		return *x.InitialBootstrapRequired
	}
	return false
}

func (x *GetXClusterStreamsResponsePB) GetTableInfos() []*GetXClusterStreamsResponsePB_TableInfo {
	if x != nil {
		return x.TableInfos
	}
	return nil
}

type CreateXClusterReplicationRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId    *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	TargetMasterAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=target_master_addresses,json=targetMasterAddresses" json:"target_master_addresses,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CreateXClusterReplicationRequestPB) Reset() {
	*x = CreateXClusterReplicationRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateXClusterReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXClusterReplicationRequestPB) ProtoMessage() {}

func (x *CreateXClusterReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXClusterReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*CreateXClusterReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{84}
}

func (x *CreateXClusterReplicationRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *CreateXClusterReplicationRequestPB) GetTargetMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.TargetMasterAddresses
	}
	return nil
}

type CreateXClusterReplicationResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateXClusterReplicationResponsePB) Reset() {
	*x = CreateXClusterReplicationResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateXClusterReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateXClusterReplicationResponsePB) ProtoMessage() {}

func (x *CreateXClusterReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateXClusterReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*CreateXClusterReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{85}
}

func (x *CreateXClusterReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsCreateXClusterReplicationDoneRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId    *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	TargetMasterAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=target_master_addresses,json=targetMasterAddresses" json:"target_master_addresses,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *IsCreateXClusterReplicationDoneRequestPB) Reset() {
	*x = IsCreateXClusterReplicationDoneRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCreateXClusterReplicationDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateXClusterReplicationDoneRequestPB) ProtoMessage() {}

func (x *IsCreateXClusterReplicationDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateXClusterReplicationDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsCreateXClusterReplicationDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{86}
}

func (x *IsCreateXClusterReplicationDoneRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *IsCreateXClusterReplicationDoneRequestPB) GetTargetMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.TargetMasterAddresses
	}
	return nil
}

type IsCreateXClusterReplicationDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Done  *bool                  `protobuf:"varint,2,opt,name=done" json:"done,omitempty"` // [default = false]
	// Only set when done is true. OK if the created succeeded or the error if it
	// failed.
	ReplicationError *common.AppStatusPB `protobuf:"bytes,3,opt,name=replication_error,json=replicationError" json:"replication_error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IsCreateXClusterReplicationDoneResponsePB) Reset() {
	*x = IsCreateXClusterReplicationDoneResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCreateXClusterReplicationDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateXClusterReplicationDoneResponsePB) ProtoMessage() {}

func (x *IsCreateXClusterReplicationDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateXClusterReplicationDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsCreateXClusterReplicationDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{87}
}

func (x *IsCreateXClusterReplicationDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsCreateXClusterReplicationDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsCreateXClusterReplicationDoneResponsePB) GetReplicationError() *common.AppStatusPB {
	if x != nil {
		return x.ReplicationError
	}
	return nil
}

type AddNamespaceToXClusterReplicationRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId    *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	TargetMasterAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=target_master_addresses,json=targetMasterAddresses" json:"target_master_addresses,omitempty"`
	NamespaceId           *string                `protobuf:"bytes,3,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AddNamespaceToXClusterReplicationRequestPB) Reset() {
	*x = AddNamespaceToXClusterReplicationRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNamespaceToXClusterReplicationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNamespaceToXClusterReplicationRequestPB) ProtoMessage() {}

func (x *AddNamespaceToXClusterReplicationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNamespaceToXClusterReplicationRequestPB.ProtoReflect.Descriptor instead.
func (*AddNamespaceToXClusterReplicationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{88}
}

func (x *AddNamespaceToXClusterReplicationRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *AddNamespaceToXClusterReplicationRequestPB) GetTargetMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.TargetMasterAddresses
	}
	return nil
}

func (x *AddNamespaceToXClusterReplicationRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

type AddNamespaceToXClusterReplicationResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddNamespaceToXClusterReplicationResponsePB) Reset() {
	*x = AddNamespaceToXClusterReplicationResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddNamespaceToXClusterReplicationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNamespaceToXClusterReplicationResponsePB) ProtoMessage() {}

func (x *AddNamespaceToXClusterReplicationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNamespaceToXClusterReplicationResponsePB.ProtoReflect.Descriptor instead.
func (*AddNamespaceToXClusterReplicationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{89}
}

func (x *AddNamespaceToXClusterReplicationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsAlterXClusterReplicationDoneRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId    *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	TargetMasterAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=target_master_addresses,json=targetMasterAddresses" json:"target_master_addresses,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *IsAlterXClusterReplicationDoneRequestPB) Reset() {
	*x = IsAlterXClusterReplicationDoneRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAlterXClusterReplicationDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAlterXClusterReplicationDoneRequestPB) ProtoMessage() {}

func (x *IsAlterXClusterReplicationDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAlterXClusterReplicationDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsAlterXClusterReplicationDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{90}
}

func (x *IsAlterXClusterReplicationDoneRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *IsAlterXClusterReplicationDoneRequestPB) GetTargetMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.TargetMasterAddresses
	}
	return nil
}

type IsAlterXClusterReplicationDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Done  *bool                  `protobuf:"varint,2,opt,name=done" json:"done,omitempty"` // [default = false]
	// Only set when done is true. OK if the created succeeded or the error if it
	// failed.
	ReplicationError *common.AppStatusPB `protobuf:"bytes,3,opt,name=replication_error,json=replicationError" json:"replication_error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IsAlterXClusterReplicationDoneResponsePB) Reset() {
	*x = IsAlterXClusterReplicationDoneResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAlterXClusterReplicationDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAlterXClusterReplicationDoneResponsePB) ProtoMessage() {}

func (x *IsAlterXClusterReplicationDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAlterXClusterReplicationDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsAlterXClusterReplicationDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{91}
}

func (x *IsAlterXClusterReplicationDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsAlterXClusterReplicationDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsAlterXClusterReplicationDoneResponsePB) GetReplicationError() *common.AppStatusPB {
	if x != nil {
		return x.ReplicationError
	}
	return nil
}

type RepairOutboundXClusterReplicationGroupAddTableRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	TableId            []byte                 `protobuf:"bytes,2,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	StreamId           []byte                 `protobuf:"bytes,3,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RepairOutboundXClusterReplicationGroupAddTableRequestPB) Reset() {
	*x = RepairOutboundXClusterReplicationGroupAddTableRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairOutboundXClusterReplicationGroupAddTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairOutboundXClusterReplicationGroupAddTableRequestPB) ProtoMessage() {}

func (x *RepairOutboundXClusterReplicationGroupAddTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairOutboundXClusterReplicationGroupAddTableRequestPB.ProtoReflect.Descriptor instead.
func (*RepairOutboundXClusterReplicationGroupAddTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{92}
}

func (x *RepairOutboundXClusterReplicationGroupAddTableRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *RepairOutboundXClusterReplicationGroupAddTableRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *RepairOutboundXClusterReplicationGroupAddTableRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type RepairOutboundXClusterReplicationGroupAddTableResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepairOutboundXClusterReplicationGroupAddTableResponsePB) Reset() {
	*x = RepairOutboundXClusterReplicationGroupAddTableResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairOutboundXClusterReplicationGroupAddTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairOutboundXClusterReplicationGroupAddTableResponsePB) ProtoMessage() {}

func (x *RepairOutboundXClusterReplicationGroupAddTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairOutboundXClusterReplicationGroupAddTableResponsePB.ProtoReflect.Descriptor instead.
func (*RepairOutboundXClusterReplicationGroupAddTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{93}
}

func (x *RepairOutboundXClusterReplicationGroupAddTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type RepairOutboundXClusterReplicationGroupRemoveTableRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	TableId            []byte                 `protobuf:"bytes,2,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) Reset() {
	*x = RepairOutboundXClusterReplicationGroupRemoveTableRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) ProtoMessage() {}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairOutboundXClusterReplicationGroupRemoveTableRequestPB.ProtoReflect.Descriptor instead.
func (*RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{94}
}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type RepairOutboundXClusterReplicationGroupRemoveTableResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableResponsePB) Reset() {
	*x = RepairOutboundXClusterReplicationGroupRemoveTableResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepairOutboundXClusterReplicationGroupRemoveTableResponsePB) ProtoMessage() {}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepairOutboundXClusterReplicationGroupRemoveTableResponsePB.ProtoReflect.Descriptor instead.
func (*RepairOutboundXClusterReplicationGroupRemoveTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{95}
}

func (x *RepairOutboundXClusterReplicationGroupRemoveTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetXClusterOutboundReplicationGroupsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   *string                `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterOutboundReplicationGroupsRequestPB) Reset() {
	*x = GetXClusterOutboundReplicationGroupsRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterOutboundReplicationGroupsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterOutboundReplicationGroupsRequestPB) ProtoMessage() {}

func (x *GetXClusterOutboundReplicationGroupsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterOutboundReplicationGroupsRequestPB.ProtoReflect.Descriptor instead.
func (*GetXClusterOutboundReplicationGroupsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{96}
}

func (x *GetXClusterOutboundReplicationGroupsRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

type GetXClusterOutboundReplicationGroupsResponsePB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Error               *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ReplicationGroupIds []string               `protobuf:"bytes,2,rep,name=replication_group_ids,json=replicationGroupIds" json:"replication_group_ids,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetXClusterOutboundReplicationGroupsResponsePB) Reset() {
	*x = GetXClusterOutboundReplicationGroupsResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterOutboundReplicationGroupsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterOutboundReplicationGroupsResponsePB) ProtoMessage() {}

func (x *GetXClusterOutboundReplicationGroupsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterOutboundReplicationGroupsResponsePB.ProtoReflect.Descriptor instead.
func (*GetXClusterOutboundReplicationGroupsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{97}
}

func (x *GetXClusterOutboundReplicationGroupsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetXClusterOutboundReplicationGroupsResponsePB) GetReplicationGroupIds() []string {
	if x != nil {
		return x.ReplicationGroupIds
	}
	return nil
}

type GetXClusterOutboundReplicationGroupInfoRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetXClusterOutboundReplicationGroupInfoRequestPB) Reset() {
	*x = GetXClusterOutboundReplicationGroupInfoRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterOutboundReplicationGroupInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterOutboundReplicationGroupInfoRequestPB) ProtoMessage() {}

func (x *GetXClusterOutboundReplicationGroupInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterOutboundReplicationGroupInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetXClusterOutboundReplicationGroupInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{98}
}

func (x *GetXClusterOutboundReplicationGroupInfoRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

type GetXClusterOutboundReplicationGroupInfoResponsePB struct {
	state            protoimpl.MessageState                                               `protogen:"open.v1"`
	Error            *MasterErrorPB                                                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NamespaceInfos   []*GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB `protobuf:"bytes,2,rep,name=namespace_infos,json=namespaceInfos" json:"namespace_infos,omitempty"`
	AutomaticDdlMode *bool                                                                `protobuf:"varint,4,opt,name=automatic_ddl_mode,json=automaticDdlMode" json:"automatic_ddl_mode,omitempty"` // [default = false]
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB) Reset() {
	*x = GetXClusterOutboundReplicationGroupInfoResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterOutboundReplicationGroupInfoResponsePB) ProtoMessage() {}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterOutboundReplicationGroupInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetXClusterOutboundReplicationGroupInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{99}
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB) GetNamespaceInfos() []*GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB {
	if x != nil {
		return x.NamespaceInfos
	}
	return nil
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB) GetAutomaticDdlMode() bool {
	if x != nil && x.AutomaticDdlMode != nil {
		return *x.AutomaticDdlMode
	}
	return false
}

type GetUniverseReplicationsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   *string                `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUniverseReplicationsRequestPB) Reset() {
	*x = GetUniverseReplicationsRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationsRequestPB) ProtoMessage() {}

func (x *GetUniverseReplicationsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationsRequestPB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{100}
}

func (x *GetUniverseReplicationsRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

type GetUniverseReplicationsResponsePB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Error               *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ReplicationGroupIds []string               `protobuf:"bytes,2,rep,name=replication_group_ids,json=replicationGroupIds" json:"replication_group_ids,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetUniverseReplicationsResponsePB) Reset() {
	*x = GetUniverseReplicationsResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationsResponsePB) ProtoMessage() {}

func (x *GetUniverseReplicationsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationsResponsePB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{101}
}

func (x *GetUniverseReplicationsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUniverseReplicationsResponsePB) GetReplicationGroupIds() []string {
	if x != nil {
		return x.ReplicationGroupIds
	}
	return nil
}

type GetUniverseReplicationInfoRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId *string                `protobuf:"bytes,1,req,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetUniverseReplicationInfoRequestPB) Reset() {
	*x = GetUniverseReplicationInfoRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationInfoRequestPB) ProtoMessage() {}

func (x *GetUniverseReplicationInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{102}
}

func (x *GetUniverseReplicationInfoRequestPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

type GetUniverseReplicationInfoResponsePB struct {
	state                 protoimpl.MessageState                                 `protogen:"open.v1"`
	Error                 *MasterErrorPB                                         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ReplicationType       *common.XClusterReplicationType                        `protobuf:"varint,2,opt,name=replication_type,json=replicationType,enum=yb.XClusterReplicationType" json:"replication_type,omitempty"`
	SourceMasterAddresses *string                                                `protobuf:"bytes,3,opt,name=source_master_addresses,json=sourceMasterAddresses" json:"source_master_addresses,omitempty"`
	TableInfos            []*GetUniverseReplicationInfoResponsePB_TableInfoPB    `protobuf:"bytes,4,rep,name=table_infos,json=tableInfos" json:"table_infos,omitempty"`
	DbScopedInfos         []*GetUniverseReplicationInfoResponsePB_DbScopedInfoPB `protobuf:"bytes,5,rep,name=db_scoped_infos,json=dbScopedInfos" json:"db_scoped_infos,omitempty"`
	AutomaticDdlMode      *bool                                                  `protobuf:"varint,6,opt,name=automatic_ddl_mode,json=automaticDdlMode" json:"automatic_ddl_mode,omitempty"` // [default = false]
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetUniverseReplicationInfoResponsePB) Reset() {
	*x = GetUniverseReplicationInfoResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationInfoResponsePB) ProtoMessage() {}

func (x *GetUniverseReplicationInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{103}
}

func (x *GetUniverseReplicationInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUniverseReplicationInfoResponsePB) GetReplicationType() common.XClusterReplicationType {
	if x != nil && x.ReplicationType != nil {
		return *x.ReplicationType
	}
	return common.XClusterReplicationType(0)
}

func (x *GetUniverseReplicationInfoResponsePB) GetSourceMasterAddresses() string {
	if x != nil && x.SourceMasterAddresses != nil {
		return *x.SourceMasterAddresses
	}
	return ""
}

func (x *GetUniverseReplicationInfoResponsePB) GetTableInfos() []*GetUniverseReplicationInfoResponsePB_TableInfoPB {
	if x != nil {
		return x.TableInfos
	}
	return nil
}

func (x *GetUniverseReplicationInfoResponsePB) GetDbScopedInfos() []*GetUniverseReplicationInfoResponsePB_DbScopedInfoPB {
	if x != nil {
		return x.DbScopedInfos
	}
	return nil
}

func (x *GetUniverseReplicationInfoResponsePB) GetAutomaticDdlMode() bool {
	if x != nil && x.AutomaticDdlMode != nil {
		return *x.AutomaticDdlMode
	}
	return false
}

type DisableDynamicTableAdditionOnCDCSDKStreamRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      *string                `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) Reset() {
	*x = DisableDynamicTableAdditionOnCDCSDKStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) ProtoMessage() {}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDynamicTableAdditionOnCDCSDKStreamRequestPB.ProtoReflect.Descriptor instead.
func (*DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{104}
}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

type DisableDynamicTableAdditionOnCDCSDKStreamResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamResponsePB) Reset() {
	*x = DisableDynamicTableAdditionOnCDCSDKStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDynamicTableAdditionOnCDCSDKStreamResponsePB) ProtoMessage() {}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDynamicTableAdditionOnCDCSDKStreamResponsePB.ProtoReflect.Descriptor instead.
func (*DisableDynamicTableAdditionOnCDCSDKStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{105}
}

func (x *DisableDynamicTableAdditionOnCDCSDKStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type RemoveUserTableFromCDCSDKStreamRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      *string                `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TableId       *string                `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserTableFromCDCSDKStreamRequestPB) Reset() {
	*x = RemoveUserTableFromCDCSDKStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserTableFromCDCSDKStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserTableFromCDCSDKStreamRequestPB) ProtoMessage() {}

func (x *RemoveUserTableFromCDCSDKStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserTableFromCDCSDKStreamRequestPB.ProtoReflect.Descriptor instead.
func (*RemoveUserTableFromCDCSDKStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{106}
}

func (x *RemoveUserTableFromCDCSDKStreamRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *RemoveUserTableFromCDCSDKStreamRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type RemoveUserTableFromCDCSDKStreamResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveUserTableFromCDCSDKStreamResponsePB) Reset() {
	*x = RemoveUserTableFromCDCSDKStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveUserTableFromCDCSDKStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserTableFromCDCSDKStreamResponsePB) ProtoMessage() {}

func (x *RemoveUserTableFromCDCSDKStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserTableFromCDCSDKStreamResponsePB.ProtoReflect.Descriptor instead.
func (*RemoveUserTableFromCDCSDKStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{107}
}

func (x *RemoveUserTableFromCDCSDKStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      *string                `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) Reset() {
	*x = ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) ProtoMessage() {}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB.ProtoReflect.Descriptor instead.
func (*ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{108}
}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

type ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	UpdatedTabletEntries []string               `protobuf:"bytes,2,rep,name=updated_tablet_entries,json=updatedTabletEntries" json:"updated_tablet_entries,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB) Reset() {
	*x = ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB) ProtoMessage() {}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB.ProtoReflect.Descriptor instead.
func (*ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{109}
}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB) GetUpdatedTabletEntries() []string {
	if x != nil {
		return x.UpdatedTabletEntries
	}
	return nil
}

type RemoveTablesFromCDCSDKStreamRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      *string                `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TableIds      []string               `protobuf:"bytes,2,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTablesFromCDCSDKStreamRequestPB) Reset() {
	*x = RemoveTablesFromCDCSDKStreamRequestPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTablesFromCDCSDKStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTablesFromCDCSDKStreamRequestPB) ProtoMessage() {}

func (x *RemoveTablesFromCDCSDKStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTablesFromCDCSDKStreamRequestPB.ProtoReflect.Descriptor instead.
func (*RemoveTablesFromCDCSDKStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{110}
}

func (x *RemoveTablesFromCDCSDKStreamRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *RemoveTablesFromCDCSDKStreamRequestPB) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

type RemoveTablesFromCDCSDKStreamResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTablesFromCDCSDKStreamResponsePB) Reset() {
	*x = RemoveTablesFromCDCSDKStreamResponsePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTablesFromCDCSDKStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTablesFromCDCSDKStreamResponsePB) ProtoMessage() {}

func (x *RemoveTablesFromCDCSDKStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTablesFromCDCSDKStreamResponsePB.ProtoReflect.Descriptor instead.
func (*RemoveTablesFromCDCSDKStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{111}
}

func (x *RemoveTablesFromCDCSDKStreamResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetCDCDBStreamInfoResponsePB_TableInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TableId       []byte                 `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCDCDBStreamInfoResponsePB_TableInfo) Reset() {
	*x = GetCDCDBStreamInfoResponsePB_TableInfo{}
	mi := &file_yb_master_master_replication_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCDCDBStreamInfoResponsePB_TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCDCDBStreamInfoResponsePB_TableInfo) ProtoMessage() {}

func (x *GetCDCDBStreamInfoResponsePB_TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCDCDBStreamInfoResponsePB_TableInfo.ProtoReflect.Descriptor instead.
func (*GetCDCDBStreamInfoResponsePB_TableInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetCDCDBStreamInfoResponsePB_TableInfo) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *GetCDCDBStreamInfoResponsePB_TableInfo) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type UpdateCDCStreamRequestPB_StreamUpdateInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	Entry         *SysCDCStreamEntryPB   `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCDCStreamRequestPB_StreamUpdateInfo) Reset() {
	*x = UpdateCDCStreamRequestPB_StreamUpdateInfo{}
	mi := &file_yb_master_master_replication_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCDCStreamRequestPB_StreamUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCDCStreamRequestPB_StreamUpdateInfo) ProtoMessage() {}

func (x *UpdateCDCStreamRequestPB_StreamUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCDCStreamRequestPB_StreamUpdateInfo.ProtoReflect.Descriptor instead.
func (*UpdateCDCStreamRequestPB_StreamUpdateInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{16, 0}
}

func (x *UpdateCDCStreamRequestPB_StreamUpdateInfo) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *UpdateCDCStreamRequestPB_StreamUpdateInfo) GetEntry() *SysCDCStreamEntryPB {
	if x != nil {
		return x.Entry
	}
	return nil
}

type IsBootstrapRequiredResponsePB_TableResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TableId           []byte                 `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	BootstrapRequired *bool                  `protobuf:"varint,2,opt,name=bootstrap_required,json=bootstrapRequired" json:"bootstrap_required,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IsBootstrapRequiredResponsePB_TableResult) Reset() {
	*x = IsBootstrapRequiredResponsePB_TableResult{}
	mi := &file_yb_master_master_replication_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBootstrapRequiredResponsePB_TableResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrapRequiredResponsePB_TableResult) ProtoMessage() {}

func (x *IsBootstrapRequiredResponsePB_TableResult) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrapRequiredResponsePB_TableResult.ProtoReflect.Descriptor instead.
func (*IsBootstrapRequiredResponsePB_TableResult) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{21, 0}
}

func (x *IsBootstrapRequiredResponsePB_TableResult) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *IsBootstrapRequiredResponsePB_TableResult) GetBootstrapRequired() bool {
	if x != nil && x.BootstrapRequired != nil {
		return *x.BootstrapRequired
	}
	return false
}

// Metadata regarding replication status of a stream set up on a tablet.
type WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      []byte                 `protobuf:"bytes,1,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TabletId      []byte                 `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB) Reset() {
	*x = WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB) ProtoMessage() {}

func (x *WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB.ProtoReflect.Descriptor instead.
func (*WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{55, 0}
}

func (x *WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   *string                `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	SafeTimeHt    *uint64                `protobuf:"fixed64,2,opt,name=safe_time_ht,json=safeTimeHt" json:"safe_time_ht,omitempty"`
	SafeTimeLag   *uint64                `protobuf:"varint,3,opt,name=safe_time_lag,json=safeTimeLag" json:"safe_time_lag,omitempty"`
	SafeTimeSkew  *uint64                `protobuf:"varint,4,opt,name=safe_time_skew,json=safeTimeSkew" json:"safe_time_skew,omitempty"`
	NamespaceName *string                `protobuf:"bytes,5,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) Reset() {
	*x = GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) ProtoMessage() {}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB.ProtoReflect.Descriptor instead.
func (*GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{61, 0}
}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) GetSafeTimeHt() uint64 {
	if x != nil && x.SafeTimeHt != nil {
		return *x.SafeTimeHt
	}
	return 0
}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) GetSafeTimeLag() uint64 {
	if x != nil && x.SafeTimeLag != nil {
		return *x.SafeTimeLag
	}
	return 0
}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) GetSafeTimeSkew() uint64 {
	if x != nil && x.SafeTimeSkew != nil {
		return *x.SafeTimeSkew
	}
	return 0
}

func (x *GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

type GetXClusterStreamsRequestPB_TableInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     *string                `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	PgSchemaName  *string                `protobuf:"bytes,2,req,name=pg_schema_name,json=pgSchemaName" json:"pg_schema_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterStreamsRequestPB_TableInfo) Reset() {
	*x = GetXClusterStreamsRequestPB_TableInfo{}
	mi := &file_yb_master_master_replication_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterStreamsRequestPB_TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterStreamsRequestPB_TableInfo) ProtoMessage() {}

func (x *GetXClusterStreamsRequestPB_TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterStreamsRequestPB_TableInfo.ProtoReflect.Descriptor instead.
func (*GetXClusterStreamsRequestPB_TableInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{82, 0}
}

func (x *GetXClusterStreamsRequestPB_TableInfo) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *GetXClusterStreamsRequestPB_TableInfo) GetPgSchemaName() string {
	if x != nil && x.PgSchemaName != nil {
		return *x.PgSchemaName
	}
	return ""
}

type GetXClusterStreamsResponsePB_TableInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       []byte                 `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	XreplStreamId []byte                 `protobuf:"bytes,2,req,name=xrepl_stream_id,json=xreplStreamId" json:"xrepl_stream_id,omitempty"`
	TableName     *string                `protobuf:"bytes,3,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	PgSchemaName  *string                `protobuf:"bytes,4,req,name=pg_schema_name,json=pgSchemaName" json:"pg_schema_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterStreamsResponsePB_TableInfo) Reset() {
	*x = GetXClusterStreamsResponsePB_TableInfo{}
	mi := &file_yb_master_master_replication_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterStreamsResponsePB_TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterStreamsResponsePB_TableInfo) ProtoMessage() {}

func (x *GetXClusterStreamsResponsePB_TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterStreamsResponsePB_TableInfo.ProtoReflect.Descriptor instead.
func (*GetXClusterStreamsResponsePB_TableInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{83, 0}
}

func (x *GetXClusterStreamsResponsePB_TableInfo) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *GetXClusterStreamsResponsePB_TableInfo) GetXreplStreamId() []byte {
	if x != nil {
		return x.XreplStreamId
	}
	return nil
}

func (x *GetXClusterStreamsResponsePB_TableInfo) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *GetXClusterStreamsResponsePB_TableInfo) GetPgSchemaName() string {
	if x != nil && x.PgSchemaName != nil {
		return *x.PgSchemaName
	}
	return ""
}

type GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId *string                `protobuf:"bytes,1,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	// Map of Source TableId to xCluster StreamId
	TableStreams  map[string]string `protobuf:"bytes,2,rep,name=table_streams,json=tableStreams" json:"table_streams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB) Reset() {
	*x = GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB) ProtoMessage() {}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB.ProtoReflect.Descriptor instead.
func (*GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{99, 0}
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB) GetTableStreams() map[string]string {
	if x != nil {
		return x.TableStreams
	}
	return nil
}

type GetUniverseReplicationInfoResponsePB_TableInfoPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetTableId *string                `protobuf:"bytes,1,req,name=target_table_id,json=targetTableId" json:"target_table_id,omitempty"`
	SourceTableId *string                `protobuf:"bytes,2,req,name=source_table_id,json=sourceTableId" json:"source_table_id,omitempty"`
	StreamId      *string                `protobuf:"bytes,3,req,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUniverseReplicationInfoResponsePB_TableInfoPB) Reset() {
	*x = GetUniverseReplicationInfoResponsePB_TableInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationInfoResponsePB_TableInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationInfoResponsePB_TableInfoPB) ProtoMessage() {}

func (x *GetUniverseReplicationInfoResponsePB_TableInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationInfoResponsePB_TableInfoPB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationInfoResponsePB_TableInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{103, 0}
}

func (x *GetUniverseReplicationInfoResponsePB_TableInfoPB) GetTargetTableId() string {
	if x != nil && x.TargetTableId != nil {
		return *x.TargetTableId
	}
	return ""
}

func (x *GetUniverseReplicationInfoResponsePB_TableInfoPB) GetSourceTableId() string {
	if x != nil && x.SourceTableId != nil {
		return *x.SourceTableId
	}
	return ""
}

func (x *GetUniverseReplicationInfoResponsePB_TableInfoPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

type GetUniverseReplicationInfoResponsePB_DbScopedInfoPB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TargetNamespaceId *string                `protobuf:"bytes,1,req,name=target_namespace_id,json=targetNamespaceId" json:"target_namespace_id,omitempty"`
	SourceNamespaceId *string                `protobuf:"bytes,2,req,name=source_namespace_id,json=sourceNamespaceId" json:"source_namespace_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetUniverseReplicationInfoResponsePB_DbScopedInfoPB) Reset() {
	*x = GetUniverseReplicationInfoResponsePB_DbScopedInfoPB{}
	mi := &file_yb_master_master_replication_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUniverseReplicationInfoResponsePB_DbScopedInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseReplicationInfoResponsePB_DbScopedInfoPB) ProtoMessage() {}

func (x *GetUniverseReplicationInfoResponsePB_DbScopedInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_replication_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseReplicationInfoResponsePB_DbScopedInfoPB.ProtoReflect.Descriptor instead.
func (*GetUniverseReplicationInfoResponsePB_DbScopedInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_replication_proto_rawDescGZIP(), []int{103, 1}
}

func (x *GetUniverseReplicationInfoResponsePB_DbScopedInfoPB) GetTargetNamespaceId() string {
	if x != nil && x.TargetNamespaceId != nil {
		return *x.TargetNamespaceId
	}
	return ""
}

func (x *GetUniverseReplicationInfoResponsePB_DbScopedInfoPB) GetSourceNamespaceId() string {
	if x != nil && x.SourceNamespaceId != nil {
		return *x.SourceNamespaceId
	}
	return ""
}

var File_yb_master_master_replication_proto protoreflect.FileDescriptor

var file_yb_master_master_replication_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a,
	0x19, 0x79, 0x62, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xaa, 0x01, 0x0a, 0x16, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x8f, 0x01, 0x0a, 0x25,
	0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x73, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x22, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x52, 0x20, 0x63, 0x64, 0x63,
	0x73, 0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xec, 0x07,
	0x0a, 0x0f, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x21, 0x63,
	0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59, 0x73,
	0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c,
	0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x21,
	0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x44, 0x43,
	0x53, 0x44, 0x4b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x1e, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x28, 0x63, 0x64, 0x63,
	0x73, 0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x63, 0x64, 0x63,
	0x73, 0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x25, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x21, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x12, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x17, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x14, 0x63, 0x64, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5c,
	0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e,
	0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x20,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x21, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8c,
	0x05, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x49, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x62,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f,
	0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1d, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x63, 0x0a, 0x21, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x28, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79,
	0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59, 0x73,
	0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x1c, 0x63,
	0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x42, 0x52, 0x19, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x64, 0x63, 0x73,
	0x64, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1c, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xd7, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0d, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x48, 0x0a, 0x21, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x64, 0x63, 0x73,
	0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x2c, 0x6e, 0x6f, 0x74, 0x5f,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71,
	0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x26,
	0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59, 0x73,
	0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x3a, 0x08, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x44,
	0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x39, 0x0a, 0x1c, 0x49,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52, 0x65,
	0x70, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x49, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52, 0x65, 0x70, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x78, 0x72,
	0x65, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x72, 0x65, 0x70, 0x6c, 0x22, 0x7e,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79,
	0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x3f, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x20, 0x0a, 0x0c, 0x64,
	0x62, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x64, 0x62, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xf1, 0x02,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x16, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x43, 0x0a, 0x09,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xa4, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x4e, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x1a, 0x65, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1b, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c,
	0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1c, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x22,
	0xf8, 0x01, 0x0a, 0x1d, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x57, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x62,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x67, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x31, 0x0a, 0x11, 0x70, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x70, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x0c, 0x50, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xfb, 0x04,
	0x0a, 0x0d, 0x50, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x42, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x65, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x74, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x74, 0x79, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74, 0x74, 0x74, 0x79, 0x70, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x73, 0x74, 0x61, 0x74, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x73, 0x74, 0x61,
	0x74, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x74, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x6e, 0x64,
	0x69, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x6e, 0x64,
	0x69, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x6f,
	0x66, 0x66, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x6f, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x74, 0x79, 0x70, 0x6d,
	0x6f, 0x64, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x74, 0x79, 0x70,
	0x6d, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x62, 0x79, 0x76, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x61, 0x74, 0x74, 0x62, 0x79, 0x76, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x6e, 0x6f, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x6e, 0x6f, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x68, 0x61, 0x73, 0x64, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x74, 0x74, 0x68, 0x61, 0x73, 0x64, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x68, 0x61, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x68, 0x61, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x69, 0x73, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x69, 0x73, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x69, 0x73, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x69, 0x73,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x68, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x68, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x11, 0x50,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x42,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x05,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x2f, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x4f, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x62, 0x0a, 0x30, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xac, 0x03, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x22, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xf1, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x1d, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x23, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xb7,
	0x05, 0x0a, 0x21, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x3e, 0x0a, 0x1c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x23,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x42, 0x0a, 0x1a,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x54, 0x0a, 0x22, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x47,
	0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x28, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x64, 0x63, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x79, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x59, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x69, 0x0a,
	0x2b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x58, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x2c, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x53, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x92, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x5b, 0x0a, 0x27, 0x49, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0xac, 0x01, 0x0a, 0x28, 0x49, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x12, 0x3c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x10, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x69,
	0x0a, 0x35, 0x49, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x36, 0x49, 0x73,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x31,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x32, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x32, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x22, 0xda, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x61,
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x59, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x6b, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x62, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x8a, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x20, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x02, 0x0a,
	0x21, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x76, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e,
	0x55, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x13, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x51, 0x0a, 0x15, 0x55, 0x6e,
	0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xaa, 0x03,
	0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x2a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x57, 0x61, 0x69, 0x74,
	0x12, 0x54, 0x0a, 0x27, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x2c, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x46, 0x6f, 0x72, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f,
	0x0a, 0x2d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x46, 0x6f, 0x72, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x8d, 0x03, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x6e, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x61, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x12, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0a, 0x73, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x6b, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x61, 0x66, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x6b, 0x65, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x29, 0x47, 0x65,
	0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x73,
	0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x74, 0x22, 0x78, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c,
	0x01, 0x0a, 0x2f, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a,
	0x30, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x65, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x9f, 0x01, 0x0a, 0x36, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x64, 0x63,
	0x73, 0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x37, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb6,
	0x01, 0x0a, 0x2f, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x30, 0x58, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x37,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x38,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xdb, 0x01, 0x0a, 0x3c, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52,
	0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x3d, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xab, 0x01, 0x0a, 0x2f, 0x58, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x15,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x30, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7b, 0x0a, 0x24, 0x49, 0x73, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x25, 0x49, 0x73, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3c, 0x0a,
	0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x2e,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72, 0x65,
	0x49, 0x6e, 0x57, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30,
	0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x2f, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72, 0x65, 0x49, 0x6e, 0x57, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc1, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x50, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x67, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x03, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x93, 0x01, 0x0a,
	0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x78, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d,
	0x78, 0x72, 0x65, 0x70, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x17, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x15, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x28, 0x49,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x17, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0xad, 0x01, 0x0a, 0x29, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xc9, 0x01, 0x0a, 0x2a, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x6f, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x17, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x50, 0x42, 0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a,
	0x2b, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa3, 0x01, 0x0a,
	0x27, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x17, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x15, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x28, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xa3, 0x01, 0x0a, 0x37, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x38, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x3a, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x6d, 0x0a, 0x3b, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52,
	0x0a, 0x2d, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x30, 0x47, 0x65, 0x74,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x86, 0x04, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x0f, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x45, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x87, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0xb8, 0x05, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x64, 0x62, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x2e, 0x44, 0x62, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x0d, 0x64, 0x62, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64,
	0x64, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x7a, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x70, 0x0a, 0x0e, 0x44,
	0x62, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a,
	0x32, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x43, 0x44,
	0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x33, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x62, 0x0a, 0x28, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44,
	0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x29, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x36, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43,
	0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0x9f, 0x01, 0x0a, 0x37, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53,
	0x79, 0x6e, 0x63, 0x43, 0x44, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x61, 0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x58, 0x0a, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x2a,
	0x0a, 0x08, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x4d, 0x45,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x2a, 0xd3, 0x01, 0x0a, 0x24, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45,
	0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x54,
	0x55, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07,
	0x2a, 0x31, 0x0a, 0x16, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x44, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x10, 0x02, 0x32, 0xf3, 0x37, 0x0a, 0x11, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x17, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x5c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x49, 0x73, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52, 0x65, 0x70, 0x6c, 0x12, 0x27, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52, 0x65, 0x70, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x58, 0x52, 0x65, 0x70, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x53, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44,
	0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x44, 0x43, 0x44, 0x42, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x49, 0x73,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x74, 0x0a, 0x17, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72,
	0x61, 0x69, 0x6e, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x83,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x79,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0xa1, 0x01, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12,
	0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x3b, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x77, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x7a, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x77, 0x0a,
	0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x32, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x95, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x37,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xb3, 0x01, 0x0a, 0x2c, 0x49,
	0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x41, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x53, 0x65, 0x74, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x89, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x32, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x32, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x8f, 0x01, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x35, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x98,
	0x01, 0x0a, 0x23, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x6f, 0x72, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x6f, 0x72, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x38, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x46, 0x6f,
	0x72, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x7d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2f, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6b,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x8c, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x34,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xa1, 0x01, 0x0a, 0x26, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x75,
	0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65,
	0x77, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x3b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x74,
	0x6f, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xb6, 0x01, 0x0a,
	0x2d, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x6f, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x41,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x59, 0x73, 0x71, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x43, 0x44, 0x43, 0x53,
	0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x42, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x59, 0x73,
	0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x43,
	0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xa1, 0x01, 0x0a, 0x26, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x3b, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xb9, 0x01, 0x0a, 0x2e, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x43, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xc8, 0x01, 0x0a, 0x33, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x48, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0xa1, 0x01, 0x0a, 0x26, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x3b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x49, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x9e, 0x01, 0x0a, 0x25, 0x58, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72, 0x65, 0x49, 0x6e, 0x57, 0x61,
	0x6c, 0x12, 0x39, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72, 0x65, 0x49, 0x6e,
	0x57, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x3a, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72, 0x65, 0x49, 0x6e, 0x57, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x26,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0xb9, 0x01, 0x0a, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x42, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x43, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xc2, 0x01, 0x0a, 0x31,
	0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x45, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x58, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x46, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x9b, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x38, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x39, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xa4,
	0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x3c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x8c, 0x01, 0x0a, 0x1f, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x34, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x92, 0x01, 0x0a, 0x21, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x6f, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54,
	0x6f, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x36, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x6f, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x58, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x33, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0xaa, 0x01, 0x0a, 0x29, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x3e,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x8c,
	0x01, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0xb6, 0x01,
	0x0a, 0x2d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x44, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x41, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x44, 0x43,
	0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x42, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44,
	0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x1a, 0x1b, 0xda, 0xb5,
	0x18, 0x17, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
})

var (
	file_yb_master_master_replication_proto_rawDescOnce sync.Once
	file_yb_master_master_replication_proto_rawDescData []byte
)

func file_yb_master_master_replication_proto_rawDescGZIP() []byte {
	file_yb_master_master_replication_proto_rawDescOnce.Do(func() {
		file_yb_master_master_replication_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_master_master_replication_proto_rawDesc), len(file_yb_master_master_replication_proto_rawDesc)))
	})
	return file_yb_master_master_replication_proto_rawDescData
}

var file_yb_master_master_replication_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yb_master_master_replication_proto_msgTypes = make([]protoimpl.MessageInfo, 124)
var file_yb_master_master_replication_proto_goTypes = []any{
	(IdTypePB)(0), // 0: yb.master.IdTypePB
	(SetupReplicationWithBootstrapStatePB)(0),                             // 1: yb.master.SetupReplicationWithBootstrapStatePB
	(XClusterSafeTimeFilter)(0),                                           // 2: yb.master.XClusterSafeTimeFilter
	(*CDCStreamInfoOptionsPB)(nil),                                        // 3: yb.master.CDCStreamInfoOptionsPB
	(*CDCStreamInfoPB)(nil),                                               // 4: yb.master.CDCStreamInfoPB
	(*ValidateReplicationInfoRequestPB)(nil),                              // 5: yb.master.ValidateReplicationInfoRequestPB
	(*ValidateReplicationInfoResponsePB)(nil),                             // 6: yb.master.ValidateReplicationInfoResponsePB
	(*CreateCDCStreamRequestPB)(nil),                                      // 7: yb.master.CreateCDCStreamRequestPB
	(*CreateCDCStreamResponsePB)(nil),                                     // 8: yb.master.CreateCDCStreamResponsePB
	(*DeleteCDCStreamRequestPB)(nil),                                      // 9: yb.master.DeleteCDCStreamRequestPB
	(*DeleteCDCStreamResponsePB)(nil),                                     // 10: yb.master.DeleteCDCStreamResponsePB
	(*ListCDCStreamsRequestPB)(nil),                                       // 11: yb.master.ListCDCStreamsRequestPB
	(*ListCDCStreamsResponsePB)(nil),                                      // 12: yb.master.ListCDCStreamsResponsePB
	(*IsObjectPartOfXReplRequestPB)(nil),                                  // 13: yb.master.IsObjectPartOfXReplRequestPB
	(*IsObjectPartOfXReplResponsePB)(nil),                                 // 14: yb.master.IsObjectPartOfXReplResponsePB
	(*GetCDCStreamRequestPB)(nil),                                         // 15: yb.master.GetCDCStreamRequestPB
	(*GetCDCStreamResponsePB)(nil),                                        // 16: yb.master.GetCDCStreamResponsePB
	(*GetCDCDBStreamInfoRequestPB)(nil),                                   // 17: yb.master.GetCDCDBStreamInfoRequestPB
	(*GetCDCDBStreamInfoResponsePB)(nil),                                  // 18: yb.master.GetCDCDBStreamInfoResponsePB
	(*UpdateCDCStreamRequestPB)(nil),                                      // 19: yb.master.UpdateCDCStreamRequestPB
	(*UpdateCDCStreamResponsePB)(nil),                                     // 20: yb.master.UpdateCDCStreamResponsePB
	(*BootstrapProducerRequestPB)(nil),                                    // 21: yb.master.BootstrapProducerRequestPB
	(*BootstrapProducerResponsePB)(nil),                                   // 22: yb.master.BootstrapProducerResponsePB
	(*IsBootstrapRequiredRequestPB)(nil),                                  // 23: yb.master.IsBootstrapRequiredRequestPB
	(*IsBootstrapRequiredResponsePB)(nil),                                 // 24: yb.master.IsBootstrapRequiredResponsePB
	(*GetUDTypeMetadataRequestPB)(nil),                                    // 25: yb.master.GetUDTypeMetadataRequestPB
	(*PgEnumInfoPB)(nil),                                                  // 26: yb.master.PgEnumInfoPB
	(*PgAttributePB)(nil),                                                 // 27: yb.master.PgAttributePB
	(*PgCompositeInfoPB)(nil),                                             // 28: yb.master.PgCompositeInfoPB
	(*GetUDTypeMetadataResponsePB)(nil),                                   // 29: yb.master.GetUDTypeMetadataResponsePB
	(*SetupNamespaceReplicationWithBootstrapRequestPB)(nil),               // 30: yb.master.SetupNamespaceReplicationWithBootstrapRequestPB
	(*SetupNamespaceReplicationWithBootstrapResponsePB)(nil),              // 31: yb.master.SetupNamespaceReplicationWithBootstrapResponsePB
	(*SetupUniverseReplicationRequestPB)(nil),                             // 32: yb.master.SetupUniverseReplicationRequestPB
	(*SetupUniverseReplicationResponsePB)(nil),                            // 33: yb.master.SetupUniverseReplicationResponsePB
	(*DeleteUniverseReplicationRequestPB)(nil),                            // 34: yb.master.DeleteUniverseReplicationRequestPB
	(*DeleteUniverseReplicationResponsePB)(nil),                           // 35: yb.master.DeleteUniverseReplicationResponsePB
	(*AlterUniverseReplicationRequestPB)(nil),                             // 36: yb.master.AlterUniverseReplicationRequestPB
	(*AlterUniverseReplicationResponsePB)(nil),                            // 37: yb.master.AlterUniverseReplicationResponsePB
	(*ChangeXClusterRoleRequestPB)(nil),                                   // 38: yb.master.ChangeXClusterRoleRequestPB
	(*ChangeXClusterRoleResponsePB)(nil),                                  // 39: yb.master.ChangeXClusterRoleResponsePB
	(*SetUniverseReplicationEnabledRequestPB)(nil),                        // 40: yb.master.SetUniverseReplicationEnabledRequestPB
	(*SetUniverseReplicationEnabledResponsePB)(nil),                       // 41: yb.master.SetUniverseReplicationEnabledResponsePB
	(*PauseResumeXClusterProducerStreamsRequestPB)(nil),                   // 42: yb.master.PauseResumeXClusterProducerStreamsRequestPB
	(*PauseResumeXClusterProducerStreamsResponsePB)(nil),                  // 43: yb.master.PauseResumeXClusterProducerStreamsResponsePB
	(*GetUniverseReplicationRequestPB)(nil),                               // 44: yb.master.GetUniverseReplicationRequestPB
	(*GetUniverseReplicationResponsePB)(nil),                              // 45: yb.master.GetUniverseReplicationResponsePB
	(*IsSetupUniverseReplicationDoneRequestPB)(nil),                       // 46: yb.master.IsSetupUniverseReplicationDoneRequestPB
	(*IsSetupUniverseReplicationDoneResponsePB)(nil),                      // 47: yb.master.IsSetupUniverseReplicationDoneResponsePB
	(*IsSetupNamespaceReplicationWithBootstrapDoneRequestPB)(nil),         // 48: yb.master.IsSetupNamespaceReplicationWithBootstrapDoneRequestPB
	(*IsSetupNamespaceReplicationWithBootstrapDoneResponsePB)(nil),        // 49: yb.master.IsSetupNamespaceReplicationWithBootstrapDoneResponsePB
	(*ProducerSplitTabletInfoPB)(nil),                                     // 50: yb.master.ProducerSplitTabletInfoPB
	(*UpdateConsumerOnProducerSplitRequestPB)(nil),                        // 51: yb.master.UpdateConsumerOnProducerSplitRequestPB
	(*UpdateConsumerOnProducerSplitResponsePB)(nil),                       // 52: yb.master.UpdateConsumerOnProducerSplitResponsePB
	(*GetReplicationStatusRequestPB)(nil),                                 // 53: yb.master.GetReplicationStatusRequestPB
	(*ReplicationStatusErrorPB)(nil),                                      // 54: yb.master.ReplicationStatusErrorPB
	(*ReplicationStatusPB)(nil),                                           // 55: yb.master.ReplicationStatusPB
	(*GetReplicationStatusResponsePB)(nil),                                // 56: yb.master.GetReplicationStatusResponsePB
	(*WaitForReplicationDrainRequestPB)(nil),                              // 57: yb.master.WaitForReplicationDrainRequestPB
	(*WaitForReplicationDrainResponsePB)(nil),                             // 58: yb.master.WaitForReplicationDrainResponsePB
	(*UpdateConsumerOnProducerMetadataRequestPB)(nil),                     // 59: yb.master.UpdateConsumerOnProducerMetadataRequestPB
	(*UpdateConsumerOnProducerMetadataResponsePB)(nil),                    // 60: yb.master.UpdateConsumerOnProducerMetadataResponsePB
	(*InsertPackedSchemaForXClusterTargetRequestPB)(nil),                  // 61: yb.master.InsertPackedSchemaForXClusterTargetRequestPB
	(*InsertPackedSchemaForXClusterTargetResponsePB)(nil),                 // 62: yb.master.InsertPackedSchemaForXClusterTargetResponsePB
	(*GetXClusterSafeTimeRequestPB)(nil),                                  // 63: yb.master.GetXClusterSafeTimeRequestPB
	(*GetXClusterSafeTimeResponsePB)(nil),                                 // 64: yb.master.GetXClusterSafeTimeResponsePB
	(*GetXClusterSafeTimeForNamespaceRequestPB)(nil),                      // 65: yb.master.GetXClusterSafeTimeForNamespaceRequestPB
	(*GetXClusterSafeTimeForNamespaceResponsePB)(nil),                     // 66: yb.master.GetXClusterSafeTimeForNamespaceResponsePB
	(*GetTableSchemaFromSysCatalogRequestPB)(nil),                         // 67: yb.master.GetTableSchemaFromSysCatalogRequestPB
	(*GetTableSchemaFromSysCatalogResponsePB)(nil),                        // 68: yb.master.GetTableSchemaFromSysCatalogResponsePB
	(*XClusterReportNewAutoFlagConfigVersionRequestPB)(nil),               // 69: yb.master.XClusterReportNewAutoFlagConfigVersionRequestPB
	(*XClusterReportNewAutoFlagConfigVersionResponsePB)(nil),              // 70: yb.master.XClusterReportNewAutoFlagConfigVersionResponsePB
	(*YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB)(nil),        // 71: yb.master.YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB
	(*YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB)(nil),       // 72: yb.master.YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB
	(*XClusterCreateOutboundReplicationGroupRequestPB)(nil),               // 73: yb.master.XClusterCreateOutboundReplicationGroupRequestPB
	(*XClusterCreateOutboundReplicationGroupResponsePB)(nil),              // 74: yb.master.XClusterCreateOutboundReplicationGroupResponsePB
	(*XClusterAddNamespaceToOutboundReplicationGroupRequestPB)(nil),       // 75: yb.master.XClusterAddNamespaceToOutboundReplicationGroupRequestPB
	(*XClusterAddNamespaceToOutboundReplicationGroupResponsePB)(nil),      // 76: yb.master.XClusterAddNamespaceToOutboundReplicationGroupResponsePB
	(*XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB)(nil),  // 77: yb.master.XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB
	(*XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB)(nil), // 78: yb.master.XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB
	(*XClusterDeleteOutboundReplicationGroupRequestPB)(nil),               // 79: yb.master.XClusterDeleteOutboundReplicationGroupRequestPB
	(*XClusterDeleteOutboundReplicationGroupResponsePB)(nil),              // 80: yb.master.XClusterDeleteOutboundReplicationGroupResponsePB
	(*IsXClusterBootstrapRequiredRequestPB)(nil),                          // 81: yb.master.IsXClusterBootstrapRequiredRequestPB
	(*IsXClusterBootstrapRequiredResponsePB)(nil),                         // 82: yb.master.IsXClusterBootstrapRequiredResponsePB
	(*XClusterEnsureSequenceUpdatesAreInWalRequestPB)(nil),                // 83: yb.master.XClusterEnsureSequenceUpdatesAreInWalRequestPB
	(*XClusterEnsureSequenceUpdatesAreInWalResponsePB)(nil),               // 84: yb.master.XClusterEnsureSequenceUpdatesAreInWalResponsePB
	(*GetXClusterStreamsRequestPB)(nil),                                   // 85: yb.master.GetXClusterStreamsRequestPB
	(*GetXClusterStreamsResponsePB)(nil),                                  // 86: yb.master.GetXClusterStreamsResponsePB
	(*CreateXClusterReplicationRequestPB)(nil),                            // 87: yb.master.CreateXClusterReplicationRequestPB
	(*CreateXClusterReplicationResponsePB)(nil),                           // 88: yb.master.CreateXClusterReplicationResponsePB
	(*IsCreateXClusterReplicationDoneRequestPB)(nil),                      // 89: yb.master.IsCreateXClusterReplicationDoneRequestPB
	(*IsCreateXClusterReplicationDoneResponsePB)(nil),                     // 90: yb.master.IsCreateXClusterReplicationDoneResponsePB
	(*AddNamespaceToXClusterReplicationRequestPB)(nil),                    // 91: yb.master.AddNamespaceToXClusterReplicationRequestPB
	(*AddNamespaceToXClusterReplicationResponsePB)(nil),                   // 92: yb.master.AddNamespaceToXClusterReplicationResponsePB
	(*IsAlterXClusterReplicationDoneRequestPB)(nil),                       // 93: yb.master.IsAlterXClusterReplicationDoneRequestPB
	(*IsAlterXClusterReplicationDoneResponsePB)(nil),                      // 94: yb.master.IsAlterXClusterReplicationDoneResponsePB
	(*RepairOutboundXClusterReplicationGroupAddTableRequestPB)(nil),       // 95: yb.master.RepairOutboundXClusterReplicationGroupAddTableRequestPB
	(*RepairOutboundXClusterReplicationGroupAddTableResponsePB)(nil),      // 96: yb.master.RepairOutboundXClusterReplicationGroupAddTableResponsePB
	(*RepairOutboundXClusterReplicationGroupRemoveTableRequestPB)(nil),    // 97: yb.master.RepairOutboundXClusterReplicationGroupRemoveTableRequestPB
	(*RepairOutboundXClusterReplicationGroupRemoveTableResponsePB)(nil),   // 98: yb.master.RepairOutboundXClusterReplicationGroupRemoveTableResponsePB
	(*GetXClusterOutboundReplicationGroupsRequestPB)(nil),                 // 99: yb.master.GetXClusterOutboundReplicationGroupsRequestPB
	(*GetXClusterOutboundReplicationGroupsResponsePB)(nil),                // 100: yb.master.GetXClusterOutboundReplicationGroupsResponsePB
	(*GetXClusterOutboundReplicationGroupInfoRequestPB)(nil),              // 101: yb.master.GetXClusterOutboundReplicationGroupInfoRequestPB
	(*GetXClusterOutboundReplicationGroupInfoResponsePB)(nil),             // 102: yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB
	(*GetUniverseReplicationsRequestPB)(nil),                              // 103: yb.master.GetUniverseReplicationsRequestPB
	(*GetUniverseReplicationsResponsePB)(nil),                             // 104: yb.master.GetUniverseReplicationsResponsePB
	(*GetUniverseReplicationInfoRequestPB)(nil),                           // 105: yb.master.GetUniverseReplicationInfoRequestPB
	(*GetUniverseReplicationInfoResponsePB)(nil),                          // 106: yb.master.GetUniverseReplicationInfoResponsePB
	(*DisableDynamicTableAdditionOnCDCSDKStreamRequestPB)(nil),            // 107: yb.master.DisableDynamicTableAdditionOnCDCSDKStreamRequestPB
	(*DisableDynamicTableAdditionOnCDCSDKStreamResponsePB)(nil),           // 108: yb.master.DisableDynamicTableAdditionOnCDCSDKStreamResponsePB
	(*RemoveUserTableFromCDCSDKStreamRequestPB)(nil),                      // 109: yb.master.RemoveUserTableFromCDCSDKStreamRequestPB
	(*RemoveUserTableFromCDCSDKStreamResponsePB)(nil),                     // 110: yb.master.RemoveUserTableFromCDCSDKStreamResponsePB
	(*ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB)(nil),        // 111: yb.master.ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB
	(*ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB)(nil),       // 112: yb.master.ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB
	(*RemoveTablesFromCDCSDKStreamRequestPB)(nil),                         // 113: yb.master.RemoveTablesFromCDCSDKStreamRequestPB
	(*RemoveTablesFromCDCSDKStreamResponsePB)(nil),                        // 114: yb.master.RemoveTablesFromCDCSDKStreamResponsePB
	nil, // 115: yb.master.CDCStreamInfoPB.ReplicaIdentityMapEntry
	(*GetCDCDBStreamInfoResponsePB_TableInfo)(nil),                            // 116: yb.master.GetCDCDBStreamInfoResponsePB.TableInfo
	(*UpdateCDCStreamRequestPB_StreamUpdateInfo)(nil),                         // 117: yb.master.UpdateCDCStreamRequestPB.StreamUpdateInfo
	(*IsBootstrapRequiredResponsePB_TableResult)(nil),                         // 118: yb.master.IsBootstrapRequiredResponsePB.TableResult
	(*WaitForReplicationDrainResponsePB_UndrainedStreamInfoPB)(nil),           // 119: yb.master.WaitForReplicationDrainResponsePB.UndrainedStreamInfoPB
	(*GetXClusterSafeTimeResponsePB_NamespaceSafeTimePB)(nil),                 // 120: yb.master.GetXClusterSafeTimeResponsePB.NamespaceSafeTimePB
	(*GetXClusterStreamsRequestPB_TableInfo)(nil),                             // 121: yb.master.GetXClusterStreamsRequestPB.TableInfo
	(*GetXClusterStreamsResponsePB_TableInfo)(nil),                            // 122: yb.master.GetXClusterStreamsResponsePB.TableInfo
	(*GetXClusterOutboundReplicationGroupInfoResponsePB_NamespaceInfoPB)(nil), // 123: yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB.NamespaceInfoPB
	nil, // 124: yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB.NamespaceInfoPB.TableStreamsEntry
	(*GetUniverseReplicationInfoResponsePB_TableInfoPB)(nil),    // 125: yb.master.GetUniverseReplicationInfoResponsePB.TableInfoPB
	(*GetUniverseReplicationInfoResponsePB_DbScopedInfoPB)(nil), // 126: yb.master.GetUniverseReplicationInfoResponsePB.DbScopedInfoPB
	(common.ReplicationSlotLsnType)(0),                          // 127: yb.ReplicationSlotLsnType
	(*CDCStreamOptionsPB)(nil),                                  // 128: yb.master.CDCStreamOptionsPB
	(common.CDCSDKSnapshotOption)(0),                            // 129: yb.CDCSDKSnapshotOption
	(*ReplicationInfoPB)(nil),                                   // 130: yb.master.ReplicationInfoPB
	(*MasterErrorPB)(nil),                                       // 131: yb.master.MasterErrorPB
	(SysCDCStreamEntryPB_State)(0),                              // 132: yb.master.SysCDCStreamEntryPB.State
	(*common.CDCSDKStreamCreateOptionsPB)(nil),                  // 133: yb.CDCSDKStreamCreateOptionsPB
	(*SysCDCStreamEntryPB)(nil),                                 // 134: yb.master.SysCDCStreamEntryPB
	(common.YQLDatabase)(0),                                     // 135: yb.YQLDatabase
	(*NamespaceIdentifierPB)(nil),                               // 136: yb.master.NamespaceIdentifierPB
	(*common.HostPortPB)(nil),                                   // 137: yb.HostPortPB
	(*common.AppStatusPB)(nil),                                  // 138: yb.AppStatusPB
	(cdc.XClusterRole)(0),                                       // 139: yb.cdc.XClusterRole
	(*SysUniverseReplicationEntryPB)(nil),                       // 140: yb.master.SysUniverseReplicationEntryPB
	(SysUniverseReplicationBootstrapEntryPB_State)(0),           // 141: yb.master.SysUniverseReplicationBootstrapEntryPB.State
	(common.ReplicationErrorPb)(0),                              // 142: yb.ReplicationErrorPb
	(*tablet.ChangeMetadataRequestPB)(nil),                      // 143: yb.tablet.ChangeMetadataRequestPB
	(*cdc.SchemaVersionsPB)(nil),                                // 144: yb.cdc.SchemaVersionsPB
	(*common.SchemaPB)(nil),                                     // 145: yb.SchemaPB
	(*TableIdentifierPB)(nil),                                   // 146: yb.master.TableIdentifierPB
	(common.XClusterReplicationType)(0),                         // 147: yb.XClusterReplicationType
	(common.PgReplicaIdentity)(0),                               // 148: yb.PgReplicaIdentity
}
var file_yb_master_master_replication_proto_depIdxs = []int32{
	127, // 0: yb.master.CDCStreamInfoOptionsPB.cdcsdk_ysql_replication_slot_lsn_type:type_name -> yb.ReplicationSlotLsnType
	128, // 1: yb.master.CDCStreamInfoPB.options:type_name -> yb.master.CDCStreamOptionsPB
	129, // 2: yb.master.CDCStreamInfoPB.cdcsdk_consistent_snapshot_option:type_name -> yb.CDCSDKSnapshotOption
	115, // 3: yb.master.CDCStreamInfoPB.replica_identity_map:type_name -> yb.master.CDCStreamInfoPB.ReplicaIdentityMapEntry
	3,   // 4: yb.master.CDCStreamInfoPB.cdc_stream_info_options:type_name -> yb.master.CDCStreamInfoOptionsPB
	130, // 5: yb.master.ValidateReplicationInfoRequestPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	131, // 6: yb.master.ValidateReplicationInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	128, // 7: yb.master.CreateCDCStreamRequestPB.options:type_name -> yb.master.CDCStreamOptionsPB
	132, // 8: yb.master.CreateCDCStreamRequestPB.initial_state:type_name -> yb.master.SysCDCStreamEntryPB.State
	129, // 9: yb.master.CreateCDCStreamRequestPB.cdcsdk_consistent_snapshot_option:type_name -> yb.CDCSDKSnapshotOption
	133, // 10: yb.master.CreateCDCStreamRequestPB.cdcsdk_stream_create_options:type_name -> yb.CDCSDKStreamCreateOptionsPB
	131, // 11: yb.master.CreateCDCStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 12: yb.master.DeleteCDCStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	0,   // 13: yb.master.ListCDCStreamsRequestPB.id_type:type_name -> yb.master.IdTypePB
	131, // 14: yb.master.ListCDCStreamsResponsePB.error:type_name -> yb.master.MasterErrorPB
	4,   // 15: yb.master.ListCDCStreamsResponsePB.streams:type_name -> yb.master.CDCStreamInfoPB
	131, // 16: yb.master.IsObjectPartOfXReplResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 17: yb.master.GetCDCStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	4,   // 18: yb.master.GetCDCStreamResponsePB.stream:type_name -> yb.master.CDCStreamInfoPB
	131, // 19: yb.master.GetCDCDBStreamInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	116, // 20: yb.master.GetCDCDBStreamInfoResponsePB.table_info:type_name -> yb.master.GetCDCDBStreamInfoResponsePB.TableInfo
	116, // 21: yb.master.GetCDCDBStreamInfoResponsePB.unqualified_table_info:type_name -> yb.master.GetCDCDBStreamInfoResponsePB.TableInfo
	134, // 22: yb.master.UpdateCDCStreamRequestPB.entry:type_name -> yb.master.SysCDCStreamEntryPB
	117, // 23: yb.master.UpdateCDCStreamRequestPB.streams:type_name -> yb.master.UpdateCDCStreamRequestPB.StreamUpdateInfo
	131, // 24: yb.master.UpdateCDCStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	135, // 25: yb.master.BootstrapProducerRequestPB.db_type:type_name -> yb.YQLDatabase
	131, // 26: yb.master.BootstrapProducerResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 27: yb.master.IsBootstrapRequiredResponsePB.error:type_name -> yb.master.MasterErrorPB
	118, // 28: yb.master.IsBootstrapRequiredResponsePB.results:type_name -> yb.master.IsBootstrapRequiredResponsePB.TableResult
	136, // 29: yb.master.GetUDTypeMetadataRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	27,  // 30: yb.master.PgCompositeInfoPB.attributes:type_name -> yb.master.PgAttributePB
	131, // 31: yb.master.GetUDTypeMetadataResponsePB.error:type_name -> yb.master.MasterErrorPB
	26,  // 32: yb.master.GetUDTypeMetadataResponsePB.enums:type_name -> yb.master.PgEnumInfoPB
	28,  // 33: yb.master.GetUDTypeMetadataResponsePB.composites:type_name -> yb.master.PgCompositeInfoPB
	137, // 34: yb.master.SetupNamespaceReplicationWithBootstrapRequestPB.producer_master_addresses:type_name -> yb.HostPortPB
	136, // 35: yb.master.SetupNamespaceReplicationWithBootstrapRequestPB.producer_namespace:type_name -> yb.master.NamespaceIdentifierPB
	131, // 36: yb.master.SetupNamespaceReplicationWithBootstrapResponsePB.error:type_name -> yb.master.MasterErrorPB
	137, // 37: yb.master.SetupUniverseReplicationRequestPB.producer_master_addresses:type_name -> yb.HostPortPB
	136, // 38: yb.master.SetupUniverseReplicationRequestPB.producer_namespaces:type_name -> yb.master.NamespaceIdentifierPB
	131, // 39: yb.master.SetupUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 40: yb.master.DeleteUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	138, // 41: yb.master.DeleteUniverseReplicationResponsePB.warnings:type_name -> yb.AppStatusPB
	137, // 42: yb.master.AlterUniverseReplicationRequestPB.producer_master_addresses:type_name -> yb.HostPortPB
	136, // 43: yb.master.AlterUniverseReplicationRequestPB.producer_namespace_to_add:type_name -> yb.master.NamespaceIdentifierPB
	131, // 44: yb.master.AlterUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	139, // 45: yb.master.ChangeXClusterRoleRequestPB.role:type_name -> yb.cdc.XClusterRole
	131, // 46: yb.master.ChangeXClusterRoleResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 47: yb.master.SetUniverseReplicationEnabledResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 48: yb.master.PauseResumeXClusterProducerStreamsResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 49: yb.master.GetUniverseReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	140, // 50: yb.master.GetUniverseReplicationResponsePB.entry:type_name -> yb.master.SysUniverseReplicationEntryPB
	131, // 51: yb.master.IsSetupUniverseReplicationDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	138, // 52: yb.master.IsSetupUniverseReplicationDoneResponsePB.replication_error:type_name -> yb.AppStatusPB
	131, // 53: yb.master.IsSetupNamespaceReplicationWithBootstrapDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	141, // 54: yb.master.IsSetupNamespaceReplicationWithBootstrapDoneResponsePB.state:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.State
	138, // 55: yb.master.IsSetupNamespaceReplicationWithBootstrapDoneResponsePB.bootstrap_error:type_name -> yb.AppStatusPB
	50,  // 56: yb.master.UpdateConsumerOnProducerSplitRequestPB.producer_split_tablet_info:type_name -> yb.master.ProducerSplitTabletInfoPB
	131, // 57: yb.master.UpdateConsumerOnProducerSplitResponsePB.error:type_name -> yb.master.MasterErrorPB
	142, // 58: yb.master.ReplicationStatusErrorPB.error:type_name -> yb.ReplicationErrorPb
	54,  // 59: yb.master.ReplicationStatusPB.errors:type_name -> yb.master.ReplicationStatusErrorPB
	131, // 60: yb.master.GetReplicationStatusResponsePB.error:type_name -> yb.master.MasterErrorPB
	55,  // 61: yb.master.GetReplicationStatusResponsePB.statuses:type_name -> yb.master.ReplicationStatusPB
	131, // 62: yb.master.WaitForReplicationDrainResponsePB.error:type_name -> yb.master.MasterErrorPB
	119, // 63: yb.master.WaitForReplicationDrainResponsePB.undrained_stream_info:type_name -> yb.master.WaitForReplicationDrainResponsePB.UndrainedStreamInfoPB
	143, // 64: yb.master.UpdateConsumerOnProducerMetadataRequestPB.producer_change_metadata_request:type_name -> yb.tablet.ChangeMetadataRequestPB
	131, // 65: yb.master.UpdateConsumerOnProducerMetadataResponsePB.error:type_name -> yb.master.MasterErrorPB
	144, // 66: yb.master.UpdateConsumerOnProducerMetadataResponsePB.schema_versions:type_name -> yb.cdc.SchemaVersionsPB
	145, // 67: yb.master.InsertPackedSchemaForXClusterTargetRequestPB.packed_schema:type_name -> yb.SchemaPB
	131, // 68: yb.master.InsertPackedSchemaForXClusterTargetResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 69: yb.master.GetXClusterSafeTimeResponsePB.error:type_name -> yb.master.MasterErrorPB
	120, // 70: yb.master.GetXClusterSafeTimeResponsePB.namespace_safe_times:type_name -> yb.master.GetXClusterSafeTimeResponsePB.NamespaceSafeTimePB
	2,   // 71: yb.master.GetXClusterSafeTimeForNamespaceRequestPB.filter:type_name -> yb.master.XClusterSafeTimeFilter
	131, // 72: yb.master.GetXClusterSafeTimeForNamespaceResponsePB.error:type_name -> yb.master.MasterErrorPB
	146, // 73: yb.master.GetTableSchemaFromSysCatalogRequestPB.table:type_name -> yb.master.TableIdentifierPB
	131, // 74: yb.master.GetTableSchemaFromSysCatalogResponsePB.error:type_name -> yb.master.MasterErrorPB
	145, // 75: yb.master.GetTableSchemaFromSysCatalogResponsePB.schema:type_name -> yb.SchemaPB
	131, // 76: yb.master.XClusterReportNewAutoFlagConfigVersionResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 77: yb.master.YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 78: yb.master.XClusterCreateOutboundReplicationGroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 79: yb.master.XClusterAddNamespaceToOutboundReplicationGroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	137, // 80: yb.master.XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB.target_master_addresses:type_name -> yb.HostPortPB
	131, // 81: yb.master.XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	137, // 82: yb.master.XClusterDeleteOutboundReplicationGroupRequestPB.target_master_addresses:type_name -> yb.HostPortPB
	131, // 83: yb.master.XClusterDeleteOutboundReplicationGroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 84: yb.master.IsXClusterBootstrapRequiredResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 85: yb.master.XClusterEnsureSequenceUpdatesAreInWalResponsePB.error:type_name -> yb.master.MasterErrorPB
	121, // 86: yb.master.GetXClusterStreamsRequestPB.table_infos:type_name -> yb.master.GetXClusterStreamsRequestPB.TableInfo
	131, // 87: yb.master.GetXClusterStreamsResponsePB.error:type_name -> yb.master.MasterErrorPB
	122, // 88: yb.master.GetXClusterStreamsResponsePB.table_infos:type_name -> yb.master.GetXClusterStreamsResponsePB.TableInfo
	137, // 89: yb.master.CreateXClusterReplicationRequestPB.target_master_addresses:type_name -> yb.HostPortPB
	131, // 90: yb.master.CreateXClusterReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	137, // 91: yb.master.IsCreateXClusterReplicationDoneRequestPB.target_master_addresses:type_name -> yb.HostPortPB
	131, // 92: yb.master.IsCreateXClusterReplicationDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	138, // 93: yb.master.IsCreateXClusterReplicationDoneResponsePB.replication_error:type_name -> yb.AppStatusPB
	137, // 94: yb.master.AddNamespaceToXClusterReplicationRequestPB.target_master_addresses:type_name -> yb.HostPortPB
	131, // 95: yb.master.AddNamespaceToXClusterReplicationResponsePB.error:type_name -> yb.master.MasterErrorPB
	137, // 96: yb.master.IsAlterXClusterReplicationDoneRequestPB.target_master_addresses:type_name -> yb.HostPortPB
	131, // 97: yb.master.IsAlterXClusterReplicationDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	138, // 98: yb.master.IsAlterXClusterReplicationDoneResponsePB.replication_error:type_name -> yb.AppStatusPB
	131, // 99: yb.master.RepairOutboundXClusterReplicationGroupAddTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 100: yb.master.RepairOutboundXClusterReplicationGroupRemoveTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 101: yb.master.GetXClusterOutboundReplicationGroupsResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 102: yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	123, // 103: yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB.namespace_infos:type_name -> yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB.NamespaceInfoPB
	131, // 104: yb.master.GetUniverseReplicationsResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 105: yb.master.GetUniverseReplicationInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	147, // 106: yb.master.GetUniverseReplicationInfoResponsePB.replication_type:type_name -> yb.XClusterReplicationType
	125, // 107: yb.master.GetUniverseReplicationInfoResponsePB.table_infos:type_name -> yb.master.GetUniverseReplicationInfoResponsePB.TableInfoPB
	126, // 108: yb.master.GetUniverseReplicationInfoResponsePB.db_scoped_infos:type_name -> yb.master.GetUniverseReplicationInfoResponsePB.DbScopedInfoPB
	131, // 109: yb.master.DisableDynamicTableAdditionOnCDCSDKStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 110: yb.master.RemoveUserTableFromCDCSDKStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 111: yb.master.ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	131, // 112: yb.master.RemoveTablesFromCDCSDKStreamResponsePB.error:type_name -> yb.master.MasterErrorPB
	148, // 113: yb.master.CDCStreamInfoPB.ReplicaIdentityMapEntry.value:type_name -> yb.PgReplicaIdentity
	134, // 114: yb.master.UpdateCDCStreamRequestPB.StreamUpdateInfo.entry:type_name -> yb.master.SysCDCStreamEntryPB
	124, // 115: yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB.NamespaceInfoPB.table_streams:type_name -> yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB.NamespaceInfoPB.TableStreamsEntry
	5,   // 116: yb.master.MasterReplication.ValidateReplicationInfo:input_type -> yb.master.ValidateReplicationInfoRequestPB
	7,   // 117: yb.master.MasterReplication.CreateCDCStream:input_type -> yb.master.CreateCDCStreamRequestPB
	9,   // 118: yb.master.MasterReplication.DeleteCDCStream:input_type -> yb.master.DeleteCDCStreamRequestPB
	11,  // 119: yb.master.MasterReplication.ListCDCStreams:input_type -> yb.master.ListCDCStreamsRequestPB
	13,  // 120: yb.master.MasterReplication.IsObjectPartOfXRepl:input_type -> yb.master.IsObjectPartOfXReplRequestPB
	15,  // 121: yb.master.MasterReplication.GetCDCStream:input_type -> yb.master.GetCDCStreamRequestPB
	17,  // 122: yb.master.MasterReplication.GetCDCDBStreamInfo:input_type -> yb.master.GetCDCDBStreamInfoRequestPB
	19,  // 123: yb.master.MasterReplication.UpdateCDCStream:input_type -> yb.master.UpdateCDCStreamRequestPB
	23,  // 124: yb.master.MasterReplication.IsBootstrapRequired:input_type -> yb.master.IsBootstrapRequiredRequestPB
	25,  // 125: yb.master.MasterReplication.GetUDTypeMetadata:input_type -> yb.master.GetUDTypeMetadataRequestPB
	57,  // 126: yb.master.MasterReplication.WaitForReplicationDrain:input_type -> yb.master.WaitForReplicationDrainRequestPB
	67,  // 127: yb.master.MasterReplication.GetTableSchemaFromSysCatalog:input_type -> yb.master.GetTableSchemaFromSysCatalogRequestPB
	30,  // 128: yb.master.MasterReplication.SetupNamespaceReplicationWithBootstrap:input_type -> yb.master.SetupNamespaceReplicationWithBootstrapRequestPB
	32,  // 129: yb.master.MasterReplication.SetupUniverseReplication:input_type -> yb.master.SetupUniverseReplicationRequestPB
	34,  // 130: yb.master.MasterReplication.DeleteUniverseReplication:input_type -> yb.master.DeleteUniverseReplicationRequestPB
	36,  // 131: yb.master.MasterReplication.AlterUniverseReplication:input_type -> yb.master.AlterUniverseReplicationRequestPB
	40,  // 132: yb.master.MasterReplication.SetUniverseReplicationEnabled:input_type -> yb.master.SetUniverseReplicationEnabledRequestPB
	42,  // 133: yb.master.MasterReplication.PauseResumeXClusterProducerStreams:input_type -> yb.master.PauseResumeXClusterProducerStreamsRequestPB
	44,  // 134: yb.master.MasterReplication.GetUniverseReplication:input_type -> yb.master.GetUniverseReplicationRequestPB
	48,  // 135: yb.master.MasterReplication.IsSetupNamespaceReplicationWithBootstrapDone:input_type -> yb.master.IsSetupNamespaceReplicationWithBootstrapDoneRequestPB
	46,  // 136: yb.master.MasterReplication.IsSetupUniverseReplicationDone:input_type -> yb.master.IsSetupUniverseReplicationDoneRequestPB
	38,  // 137: yb.master.MasterReplication.ChangeXClusterRole:input_type -> yb.master.ChangeXClusterRoleRequestPB
	51,  // 138: yb.master.MasterReplication.UpdateConsumerOnProducerSplit:input_type -> yb.master.UpdateConsumerOnProducerSplitRequestPB
	59,  // 139: yb.master.MasterReplication.UpdateConsumerOnProducerMetadata:input_type -> yb.master.UpdateConsumerOnProducerMetadataRequestPB
	61,  // 140: yb.master.MasterReplication.InsertPackedSchemaForXClusterTarget:input_type -> yb.master.InsertPackedSchemaForXClusterTargetRequestPB
	103, // 141: yb.master.MasterReplication.GetUniverseReplications:input_type -> yb.master.GetUniverseReplicationsRequestPB
	105, // 142: yb.master.MasterReplication.GetUniverseReplicationInfo:input_type -> yb.master.GetUniverseReplicationInfoRequestPB
	53,  // 143: yb.master.MasterReplication.GetReplicationStatus:input_type -> yb.master.GetReplicationStatusRequestPB
	63,  // 144: yb.master.MasterReplication.GetXClusterSafeTime:input_type -> yb.master.GetXClusterSafeTimeRequestPB
	65,  // 145: yb.master.MasterReplication.GetXClusterSafeTimeForNamespace:input_type -> yb.master.GetXClusterSafeTimeForNamespaceRequestPB
	21,  // 146: yb.master.MasterReplication.BootstrapProducer:input_type -> yb.master.BootstrapProducerRequestPB
	69,  // 147: yb.master.MasterReplication.XClusterReportNewAutoFlagConfigVersion:input_type -> yb.master.XClusterReportNewAutoFlagConfigVersionRequestPB
	71,  // 148: yb.master.MasterReplication.YsqlBackfillReplicationSlotNameToCDCSDKStream:input_type -> yb.master.YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB
	73,  // 149: yb.master.MasterReplication.XClusterCreateOutboundReplicationGroup:input_type -> yb.master.XClusterCreateOutboundReplicationGroupRequestPB
	75,  // 150: yb.master.MasterReplication.XClusterAddNamespaceToOutboundReplicationGroup:input_type -> yb.master.XClusterAddNamespaceToOutboundReplicationGroupRequestPB
	77,  // 151: yb.master.MasterReplication.XClusterRemoveNamespaceFromOutboundReplicationGroup:input_type -> yb.master.XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB
	79,  // 152: yb.master.MasterReplication.XClusterDeleteOutboundReplicationGroup:input_type -> yb.master.XClusterDeleteOutboundReplicationGroupRequestPB
	81,  // 153: yb.master.MasterReplication.IsXClusterBootstrapRequired:input_type -> yb.master.IsXClusterBootstrapRequiredRequestPB
	83,  // 154: yb.master.MasterReplication.XClusterEnsureSequenceUpdatesAreInWal:input_type -> yb.master.XClusterEnsureSequenceUpdatesAreInWalRequestPB
	85,  // 155: yb.master.MasterReplication.GetXClusterStreams:input_type -> yb.master.GetXClusterStreamsRequestPB
	95,  // 156: yb.master.MasterReplication.RepairOutboundXClusterReplicationGroupAddTable:input_type -> yb.master.RepairOutboundXClusterReplicationGroupAddTableRequestPB
	97,  // 157: yb.master.MasterReplication.RepairOutboundXClusterReplicationGroupRemoveTable:input_type -> yb.master.RepairOutboundXClusterReplicationGroupRemoveTableRequestPB
	99,  // 158: yb.master.MasterReplication.GetXClusterOutboundReplicationGroups:input_type -> yb.master.GetXClusterOutboundReplicationGroupsRequestPB
	101, // 159: yb.master.MasterReplication.GetXClusterOutboundReplicationGroupInfo:input_type -> yb.master.GetXClusterOutboundReplicationGroupInfoRequestPB
	87,  // 160: yb.master.MasterReplication.CreateXClusterReplication:input_type -> yb.master.CreateXClusterReplicationRequestPB
	89,  // 161: yb.master.MasterReplication.IsCreateXClusterReplicationDone:input_type -> yb.master.IsCreateXClusterReplicationDoneRequestPB
	91,  // 162: yb.master.MasterReplication.AddNamespaceToXClusterReplication:input_type -> yb.master.AddNamespaceToXClusterReplicationRequestPB
	93,  // 163: yb.master.MasterReplication.IsAlterXClusterReplicationDone:input_type -> yb.master.IsAlterXClusterReplicationDoneRequestPB
	107, // 164: yb.master.MasterReplication.DisableDynamicTableAdditionOnCDCSDKStream:input_type -> yb.master.DisableDynamicTableAdditionOnCDCSDKStreamRequestPB
	109, // 165: yb.master.MasterReplication.RemoveUserTableFromCDCSDKStream:input_type -> yb.master.RemoveUserTableFromCDCSDKStreamRequestPB
	111, // 166: yb.master.MasterReplication.ValidateAndSyncCDCStateEntriesForCDCSDKStream:input_type -> yb.master.ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB
	113, // 167: yb.master.MasterReplication.RemoveTablesFromCDCSDKStream:input_type -> yb.master.RemoveTablesFromCDCSDKStreamRequestPB
	6,   // 168: yb.master.MasterReplication.ValidateReplicationInfo:output_type -> yb.master.ValidateReplicationInfoResponsePB
	8,   // 169: yb.master.MasterReplication.CreateCDCStream:output_type -> yb.master.CreateCDCStreamResponsePB
	10,  // 170: yb.master.MasterReplication.DeleteCDCStream:output_type -> yb.master.DeleteCDCStreamResponsePB
	12,  // 171: yb.master.MasterReplication.ListCDCStreams:output_type -> yb.master.ListCDCStreamsResponsePB
	14,  // 172: yb.master.MasterReplication.IsObjectPartOfXRepl:output_type -> yb.master.IsObjectPartOfXReplResponsePB
	16,  // 173: yb.master.MasterReplication.GetCDCStream:output_type -> yb.master.GetCDCStreamResponsePB
	18,  // 174: yb.master.MasterReplication.GetCDCDBStreamInfo:output_type -> yb.master.GetCDCDBStreamInfoResponsePB
	20,  // 175: yb.master.MasterReplication.UpdateCDCStream:output_type -> yb.master.UpdateCDCStreamResponsePB
	24,  // 176: yb.master.MasterReplication.IsBootstrapRequired:output_type -> yb.master.IsBootstrapRequiredResponsePB
	29,  // 177: yb.master.MasterReplication.GetUDTypeMetadata:output_type -> yb.master.GetUDTypeMetadataResponsePB
	58,  // 178: yb.master.MasterReplication.WaitForReplicationDrain:output_type -> yb.master.WaitForReplicationDrainResponsePB
	68,  // 179: yb.master.MasterReplication.GetTableSchemaFromSysCatalog:output_type -> yb.master.GetTableSchemaFromSysCatalogResponsePB
	31,  // 180: yb.master.MasterReplication.SetupNamespaceReplicationWithBootstrap:output_type -> yb.master.SetupNamespaceReplicationWithBootstrapResponsePB
	33,  // 181: yb.master.MasterReplication.SetupUniverseReplication:output_type -> yb.master.SetupUniverseReplicationResponsePB
	35,  // 182: yb.master.MasterReplication.DeleteUniverseReplication:output_type -> yb.master.DeleteUniverseReplicationResponsePB
	37,  // 183: yb.master.MasterReplication.AlterUniverseReplication:output_type -> yb.master.AlterUniverseReplicationResponsePB
	41,  // 184: yb.master.MasterReplication.SetUniverseReplicationEnabled:output_type -> yb.master.SetUniverseReplicationEnabledResponsePB
	43,  // 185: yb.master.MasterReplication.PauseResumeXClusterProducerStreams:output_type -> yb.master.PauseResumeXClusterProducerStreamsResponsePB
	45,  // 186: yb.master.MasterReplication.GetUniverseReplication:output_type -> yb.master.GetUniverseReplicationResponsePB
	49,  // 187: yb.master.MasterReplication.IsSetupNamespaceReplicationWithBootstrapDone:output_type -> yb.master.IsSetupNamespaceReplicationWithBootstrapDoneResponsePB
	47,  // 188: yb.master.MasterReplication.IsSetupUniverseReplicationDone:output_type -> yb.master.IsSetupUniverseReplicationDoneResponsePB
	39,  // 189: yb.master.MasterReplication.ChangeXClusterRole:output_type -> yb.master.ChangeXClusterRoleResponsePB
	52,  // 190: yb.master.MasterReplication.UpdateConsumerOnProducerSplit:output_type -> yb.master.UpdateConsumerOnProducerSplitResponsePB
	60,  // 191: yb.master.MasterReplication.UpdateConsumerOnProducerMetadata:output_type -> yb.master.UpdateConsumerOnProducerMetadataResponsePB
	62,  // 192: yb.master.MasterReplication.InsertPackedSchemaForXClusterTarget:output_type -> yb.master.InsertPackedSchemaForXClusterTargetResponsePB
	104, // 193: yb.master.MasterReplication.GetUniverseReplications:output_type -> yb.master.GetUniverseReplicationsResponsePB
	106, // 194: yb.master.MasterReplication.GetUniverseReplicationInfo:output_type -> yb.master.GetUniverseReplicationInfoResponsePB
	56,  // 195: yb.master.MasterReplication.GetReplicationStatus:output_type -> yb.master.GetReplicationStatusResponsePB
	64,  // 196: yb.master.MasterReplication.GetXClusterSafeTime:output_type -> yb.master.GetXClusterSafeTimeResponsePB
	66,  // 197: yb.master.MasterReplication.GetXClusterSafeTimeForNamespace:output_type -> yb.master.GetXClusterSafeTimeForNamespaceResponsePB
	22,  // 198: yb.master.MasterReplication.BootstrapProducer:output_type -> yb.master.BootstrapProducerResponsePB
	70,  // 199: yb.master.MasterReplication.XClusterReportNewAutoFlagConfigVersion:output_type -> yb.master.XClusterReportNewAutoFlagConfigVersionResponsePB
	72,  // 200: yb.master.MasterReplication.YsqlBackfillReplicationSlotNameToCDCSDKStream:output_type -> yb.master.YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB
	74,  // 201: yb.master.MasterReplication.XClusterCreateOutboundReplicationGroup:output_type -> yb.master.XClusterCreateOutboundReplicationGroupResponsePB
	76,  // 202: yb.master.MasterReplication.XClusterAddNamespaceToOutboundReplicationGroup:output_type -> yb.master.XClusterAddNamespaceToOutboundReplicationGroupResponsePB
	78,  // 203: yb.master.MasterReplication.XClusterRemoveNamespaceFromOutboundReplicationGroup:output_type -> yb.master.XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB
	80,  // 204: yb.master.MasterReplication.XClusterDeleteOutboundReplicationGroup:output_type -> yb.master.XClusterDeleteOutboundReplicationGroupResponsePB
	82,  // 205: yb.master.MasterReplication.IsXClusterBootstrapRequired:output_type -> yb.master.IsXClusterBootstrapRequiredResponsePB
	84,  // 206: yb.master.MasterReplication.XClusterEnsureSequenceUpdatesAreInWal:output_type -> yb.master.XClusterEnsureSequenceUpdatesAreInWalResponsePB
	86,  // 207: yb.master.MasterReplication.GetXClusterStreams:output_type -> yb.master.GetXClusterStreamsResponsePB
	96,  // 208: yb.master.MasterReplication.RepairOutboundXClusterReplicationGroupAddTable:output_type -> yb.master.RepairOutboundXClusterReplicationGroupAddTableResponsePB
	98,  // 209: yb.master.MasterReplication.RepairOutboundXClusterReplicationGroupRemoveTable:output_type -> yb.master.RepairOutboundXClusterReplicationGroupRemoveTableResponsePB
	100, // 210: yb.master.MasterReplication.GetXClusterOutboundReplicationGroups:output_type -> yb.master.GetXClusterOutboundReplicationGroupsResponsePB
	102, // 211: yb.master.MasterReplication.GetXClusterOutboundReplicationGroupInfo:output_type -> yb.master.GetXClusterOutboundReplicationGroupInfoResponsePB
	88,  // 212: yb.master.MasterReplication.CreateXClusterReplication:output_type -> yb.master.CreateXClusterReplicationResponsePB
	90,  // 213: yb.master.MasterReplication.IsCreateXClusterReplicationDone:output_type -> yb.master.IsCreateXClusterReplicationDoneResponsePB
	92,  // 214: yb.master.MasterReplication.AddNamespaceToXClusterReplication:output_type -> yb.master.AddNamespaceToXClusterReplicationResponsePB
	94,  // 215: yb.master.MasterReplication.IsAlterXClusterReplicationDone:output_type -> yb.master.IsAlterXClusterReplicationDoneResponsePB
	108, // 216: yb.master.MasterReplication.DisableDynamicTableAdditionOnCDCSDKStream:output_type -> yb.master.DisableDynamicTableAdditionOnCDCSDKStreamResponsePB
	110, // 217: yb.master.MasterReplication.RemoveUserTableFromCDCSDKStream:output_type -> yb.master.RemoveUserTableFromCDCSDKStreamResponsePB
	112, // 218: yb.master.MasterReplication.ValidateAndSyncCDCStateEntriesForCDCSDKStream:output_type -> yb.master.ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB
	114, // 219: yb.master.MasterReplication.RemoveTablesFromCDCSDKStream:output_type -> yb.master.RemoveTablesFromCDCSDKStreamResponsePB
	168, // [168:220] is the sub-list for method output_type
	116, // [116:168] is the sub-list for method input_type
	116, // [116:116] is the sub-list for extension type_name
	116, // [116:116] is the sub-list for extension extendee
	0,   // [0:116] is the sub-list for field type_name
}

func init() { file_yb_master_master_replication_proto_init() }
func file_yb_master_master_replication_proto_init() {
	if File_yb_master_master_replication_proto != nil {
		return
	}
	file_yb_master_catalog_entity_info_proto_init()
	file_yb_master_master_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_master_master_replication_proto_rawDesc), len(file_yb_master_master_replication_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   124,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_master_master_replication_proto_goTypes,
		DependencyIndexes: file_yb_master_master_replication_proto_depIdxs,
		EnumInfos:         file_yb_master_master_replication_proto_enumTypes,
		MessageInfos:      file_yb_master_master_replication_proto_msgTypes,
	}.Build()
	File_yb_master_master_replication_proto = out.File
	file_yb_master_master_replication_proto_goTypes = nil
	file_yb_master_master_replication_proto_depIdxs = nil
}
