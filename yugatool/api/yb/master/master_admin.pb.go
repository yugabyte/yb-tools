// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/master/master_admin.proto

package master

import (
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WriteSysCatalogEntryRequestPB_WriteOp int32

const (
	WriteSysCatalogEntryRequestPB_SYS_CATALOG_INSERT WriteSysCatalogEntryRequestPB_WriteOp = 1
	WriteSysCatalogEntryRequestPB_SYS_CATALOG_UPDATE WriteSysCatalogEntryRequestPB_WriteOp = 2
	WriteSysCatalogEntryRequestPB_SYS_CATALOG_DELETE WriteSysCatalogEntryRequestPB_WriteOp = 3
)

// Enum value maps for WriteSysCatalogEntryRequestPB_WriteOp.
var (
	WriteSysCatalogEntryRequestPB_WriteOp_name = map[int32]string{
		1: "SYS_CATALOG_INSERT",
		2: "SYS_CATALOG_UPDATE",
		3: "SYS_CATALOG_DELETE",
	}
	WriteSysCatalogEntryRequestPB_WriteOp_value = map[string]int32{
		"SYS_CATALOG_INSERT": 1,
		"SYS_CATALOG_UPDATE": 2,
		"SYS_CATALOG_DELETE": 3,
	}
)

func (x WriteSysCatalogEntryRequestPB_WriteOp) Enum() *WriteSysCatalogEntryRequestPB_WriteOp {
	p := new(WriteSysCatalogEntryRequestPB_WriteOp)
	*p = x
	return p
}

func (x WriteSysCatalogEntryRequestPB_WriteOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteSysCatalogEntryRequestPB_WriteOp) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_admin_proto_enumTypes[0].Descriptor()
}

func (WriteSysCatalogEntryRequestPB_WriteOp) Type() protoreflect.EnumType {
	return &file_yb_master_master_admin_proto_enumTypes[0]
}

func (x WriteSysCatalogEntryRequestPB_WriteOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WriteSysCatalogEntryRequestPB_WriteOp) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WriteSysCatalogEntryRequestPB_WriteOp(num)
	return nil
}

// Deprecated: Use WriteSysCatalogEntryRequestPB_WriteOp.Descriptor instead.
func (WriteSysCatalogEntryRequestPB_WriteOp) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{46, 0}
}

// TODO: rename to FlushOrCompact TablesRequestPB
// https://github.com/YugaByte/yugabyte-db/issues/729
type FlushTablesRequestPB struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Tables []*TableIdentifierPB   `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
	// Whether we want to compact the tablets instead of flushing them.
	IsCompaction *bool `protobuf:"varint,2,opt,name=is_compaction,json=isCompaction" json:"is_compaction,omitempty"`
	// Whether we want to include index tables in this flush. If there are index tables in the tables
	// field this field must be set to false, otherwise the request will fail.
	AddIndexes *bool `protobuf:"varint,3,opt,name=add_indexes,json=addIndexes" json:"add_indexes,omitempty"`
	// Whether the operation only applies to regular RocksDB but not intents RocksDB.
	RegularOnly   *bool `protobuf:"varint,4,opt,name=regular_only,json=regularOnly" json:"regular_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushTablesRequestPB) Reset() {
	*x = FlushTablesRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushTablesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTablesRequestPB) ProtoMessage() {}

func (x *FlushTablesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTablesRequestPB.ProtoReflect.Descriptor instead.
func (*FlushTablesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{0}
}

func (x *FlushTablesRequestPB) GetTables() []*TableIdentifierPB {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *FlushTablesRequestPB) GetIsCompaction() bool {
	if x != nil && x.IsCompaction != nil {
		return *x.IsCompaction
	}
	return false
}

func (x *FlushTablesRequestPB) GetAddIndexes() bool {
	if x != nil && x.AddIndexes != nil {
		return *x.AddIndexes
	}
	return false
}

func (x *FlushTablesRequestPB) GetRegularOnly() bool {
	if x != nil && x.RegularOnly != nil {
		return *x.RegularOnly
	}
	return false
}

type FlushTablesResponsePB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Error          *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	FlushRequestId []byte                 `protobuf:"bytes,2,opt,name=flush_request_id,json=flushRequestId" json:"flush_request_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlushTablesResponsePB) Reset() {
	*x = FlushTablesResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushTablesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTablesResponsePB) ProtoMessage() {}

func (x *FlushTablesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTablesResponsePB.ProtoReflect.Descriptor instead.
func (*FlushTablesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{1}
}

func (x *FlushTablesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FlushTablesResponsePB) GetFlushRequestId() []byte {
	if x != nil {
		return x.FlushRequestId
	}
	return nil
}

type IsFlushTablesDoneRequestPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FlushRequestId []byte                 `protobuf:"bytes,1,opt,name=flush_request_id,json=flushRequestId" json:"flush_request_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IsFlushTablesDoneRequestPB) Reset() {
	*x = IsFlushTablesDoneRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsFlushTablesDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFlushTablesDoneRequestPB) ProtoMessage() {}

func (x *IsFlushTablesDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFlushTablesDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsFlushTablesDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{2}
}

func (x *IsFlushTablesDoneRequestPB) GetFlushRequestId() []byte {
	if x != nil {
		return x.FlushRequestId
	}
	return nil
}

type IsFlushTablesDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the flush tables operation is completed, false otherwise.
	Done *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	// true if the flush tables operation is successful.
	Success       *bool `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsFlushTablesDoneResponsePB) Reset() {
	*x = IsFlushTablesDoneResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsFlushTablesDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFlushTablesDoneResponsePB) ProtoMessage() {}

func (x *IsFlushTablesDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFlushTablesDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsFlushTablesDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{3}
}

func (x *IsFlushTablesDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsFlushTablesDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsFlushTablesDoneResponsePB) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type FlushSysCatalogRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushSysCatalogRequestPB) Reset() {
	*x = FlushSysCatalogRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushSysCatalogRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSysCatalogRequestPB) ProtoMessage() {}

func (x *FlushSysCatalogRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSysCatalogRequestPB.ProtoReflect.Descriptor instead.
func (*FlushSysCatalogRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{4}
}

type FlushSysCatalogResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushSysCatalogResponsePB) Reset() {
	*x = FlushSysCatalogResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushSysCatalogResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushSysCatalogResponsePB) ProtoMessage() {}

func (x *FlushSysCatalogResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushSysCatalogResponsePB.ProtoReflect.Descriptor instead.
func (*FlushSysCatalogResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{5}
}

func (x *FlushSysCatalogResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CompactSysCatalogRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompactSysCatalogRequestPB) Reset() {
	*x = CompactSysCatalogRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompactSysCatalogRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactSysCatalogRequestPB) ProtoMessage() {}

func (x *CompactSysCatalogRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactSysCatalogRequestPB.ProtoReflect.Descriptor instead.
func (*CompactSysCatalogRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{6}
}

type CompactSysCatalogResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompactSysCatalogResponsePB) Reset() {
	*x = CompactSysCatalogResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompactSysCatalogResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactSysCatalogResponsePB) ProtoMessage() {}

func (x *CompactSysCatalogResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactSysCatalogResponsePB.ProtoReflect.Descriptor instead.
func (*CompactSysCatalogResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{7}
}

func (x *CompactSysCatalogResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetCompactionStatusRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *TableIdentifierPB     `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	ShowTablets   *bool                  `protobuf:"varint,2,opt,name=show_tablets,json=showTablets" json:"show_tablets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCompactionStatusRequestPB) Reset() {
	*x = GetCompactionStatusRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompactionStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompactionStatusRequestPB) ProtoMessage() {}

func (x *GetCompactionStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompactionStatusRequestPB.ProtoReflect.Descriptor instead.
func (*GetCompactionStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{8}
}

func (x *GetCompactionStatusRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetCompactionStatusRequestPB) GetShowTablets() bool {
	if x != nil && x.ShowTablets != nil {
		return *x.ShowTablets
	}
	return false
}

type TabletReplicaFullCompactionStatus struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TsId     []byte                 `protobuf:"bytes,1,opt,name=ts_id,json=tsId" json:"ts_id,omitempty"`
	TabletId []byte                 `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Raw representation of a HybridTime.
	LastFullCompactionTime *uint64                     `protobuf:"fixed64,3,opt,name=last_full_compaction_time,json=lastFullCompactionTime" json:"last_full_compaction_time,omitempty"`
	FullCompactionState    *tablet.FullCompactionState `protobuf:"varint,4,opt,name=full_compaction_state,json=fullCompactionState,enum=yb.tablet.FullCompactionState" json:"full_compaction_state,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TabletReplicaFullCompactionStatus) Reset() {
	*x = TabletReplicaFullCompactionStatus{}
	mi := &file_yb_master_master_admin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletReplicaFullCompactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletReplicaFullCompactionStatus) ProtoMessage() {}

func (x *TabletReplicaFullCompactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletReplicaFullCompactionStatus.ProtoReflect.Descriptor instead.
func (*TabletReplicaFullCompactionStatus) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{9}
}

func (x *TabletReplicaFullCompactionStatus) GetTsId() []byte {
	if x != nil {
		return x.TsId
	}
	return nil
}

func (x *TabletReplicaFullCompactionStatus) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletReplicaFullCompactionStatus) GetLastFullCompactionTime() uint64 {
	if x != nil && x.LastFullCompactionTime != nil {
		return *x.LastFullCompactionTime
	}
	return 0
}

func (x *TabletReplicaFullCompactionStatus) GetFullCompactionState() tablet.FullCompactionState {
	if x != nil && x.FullCompactionState != nil {
		return *x.FullCompactionState
	}
	return tablet.FullCompactionState(0)
}

type GetCompactionStatusResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Time when an admin compaction was last requested by the user.a
	// Raw representation of a HybridTime.
	LastRequestTime *uint64 `protobuf:"fixed64,2,opt,name=last_request_time,json=lastRequestTime" json:"last_request_time,omitempty"`
	// Time when the most recent full compaction was completed.
	// Raw representation of a HybridTime.
	LastFullCompactionTime *uint64 `protobuf:"fixed64,3,opt,name=last_full_compaction_time,json=lastFullCompactionTime" json:"last_full_compaction_time,omitempty"`
	// Overall full compaction state of the table.
	FullCompactionState *tablet.FullCompactionState `protobuf:"varint,4,opt,name=full_compaction_state,json=fullCompactionState,enum=yb.tablet.FullCompactionState" json:"full_compaction_state,omitempty"`
	// Full compaction statuses of all tablet replicas.
	ReplicaStatuses []*TabletReplicaFullCompactionStatus `protobuf:"bytes,5,rep,name=replica_statuses,json=replicaStatuses" json:"replica_statuses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetCompactionStatusResponsePB) Reset() {
	*x = GetCompactionStatusResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompactionStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompactionStatusResponsePB) ProtoMessage() {}

func (x *GetCompactionStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompactionStatusResponsePB.ProtoReflect.Descriptor instead.
func (*GetCompactionStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{10}
}

func (x *GetCompactionStatusResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCompactionStatusResponsePB) GetLastRequestTime() uint64 {
	if x != nil && x.LastRequestTime != nil {
		return *x.LastRequestTime
	}
	return 0
}

func (x *GetCompactionStatusResponsePB) GetLastFullCompactionTime() uint64 {
	if x != nil && x.LastFullCompactionTime != nil {
		return *x.LastFullCompactionTime
	}
	return 0
}

func (x *GetCompactionStatusResponsePB) GetFullCompactionState() tablet.FullCompactionState {
	if x != nil && x.FullCompactionState != nil {
		return *x.FullCompactionState
	}
	return tablet.FullCompactionState(0)
}

func (x *GetCompactionStatusResponsePB) GetReplicaStatuses() []*TabletReplicaFullCompactionStatus {
	if x != nil {
		return x.ReplicaStatuses
	}
	return nil
}

type IsInitDbDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsInitDbDoneRequestPB) Reset() {
	*x = IsInitDbDoneRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsInitDbDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInitDbDoneRequestPB) ProtoMessage() {}

func (x *IsInitDbDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInitDbDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsInitDbDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{11}
}

type IsInitDbDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Someone started running initdb, as indicated by the existence of template1.pg_proc.
	PgProcExists *bool `protobuf:"varint,2,opt,name=pg_proc_exists,json=pgProcExists" json:"pg_proc_exists,omitempty"`
	// This is true if the master ran initdb and it finished, successfully or not.
	Done *bool `protobuf:"varint,4,opt,name=done" json:"done,omitempty"`
	// If this is set to a non-empty string, initdb has failed.
	InitdbError   *string `protobuf:"bytes,5,opt,name=initdb_error,json=initdbError" json:"initdb_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsInitDbDoneResponsePB) Reset() {
	*x = IsInitDbDoneResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsInitDbDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsInitDbDoneResponsePB) ProtoMessage() {}

func (x *IsInitDbDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsInitDbDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsInitDbDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{12}
}

func (x *IsInitDbDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsInitDbDoneResponsePB) GetPgProcExists() bool {
	if x != nil && x.PgProcExists != nil {
		return *x.PgProcExists
	}
	return false
}

func (x *IsInitDbDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsInitDbDoneResponsePB) GetInitdbError() string {
	if x != nil && x.InitdbError != nil {
		return *x.InitdbError
	}
	return ""
}

type SplitTabletRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitTabletRequestPB) Reset() {
	*x = SplitTabletRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletRequestPB) ProtoMessage() {}

func (x *SplitTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletRequestPB.ProtoReflect.Descriptor instead.
func (*SplitTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{13}
}

func (x *SplitTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type SplitTabletResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitTabletResponsePB) Reset() {
	*x = SplitTabletResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletResponsePB) ProtoMessage() {}

func (x *SplitTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletResponsePB.ProtoReflect.Descriptor instead.
func (*SplitTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{14}
}

func (x *SplitTabletResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CreateTransactionStatusTableRequestPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TableName       *string                `protobuf:"bytes,1,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	ReplicationInfo *ReplicationInfoPB     `protobuf:"bytes,2,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateTransactionStatusTableRequestPB) Reset() {
	*x = CreateTransactionStatusTableRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionStatusTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionStatusTableRequestPB) ProtoMessage() {}

func (x *CreateTransactionStatusTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionStatusTableRequestPB.ProtoReflect.Descriptor instead.
func (*CreateTransactionStatusTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTransactionStatusTableRequestPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *CreateTransactionStatusTableRequestPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

type CreateTransactionStatusTableResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTransactionStatusTableResponsePB) Reset() {
	*x = CreateTransactionStatusTableResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransactionStatusTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionStatusTableResponsePB) ProtoMessage() {}

func (x *CreateTransactionStatusTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionStatusTableResponsePB.ProtoReflect.Descriptor instead.
func (*CreateTransactionStatusTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTransactionStatusTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AddTransactionStatusTabletRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       []byte                 `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTransactionStatusTabletRequestPB) Reset() {
	*x = AddTransactionStatusTabletRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTransactionStatusTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionStatusTabletRequestPB) ProtoMessage() {}

func (x *AddTransactionStatusTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionStatusTabletRequestPB.ProtoReflect.Descriptor instead.
func (*AddTransactionStatusTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{17}
}

func (x *AddTransactionStatusTabletRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type AddTransactionStatusTabletResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTransactionStatusTabletResponsePB) Reset() {
	*x = AddTransactionStatusTabletResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTransactionStatusTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransactionStatusTabletResponsePB) ProtoMessage() {}

func (x *AddTransactionStatusTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransactionStatusTabletResponsePB.ProtoReflect.Descriptor instead.
func (*AddTransactionStatusTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{18}
}

func (x *AddTransactionStatusTabletResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteNotServingTabletRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNotServingTabletRequestPB) Reset() {
	*x = DeleteNotServingTabletRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNotServingTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotServingTabletRequestPB) ProtoMessage() {}

func (x *DeleteNotServingTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotServingTabletRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteNotServingTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteNotServingTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type DeleteNotServingTabletResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNotServingTabletResponsePB) Reset() {
	*x = DeleteNotServingTabletResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNotServingTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotServingTabletResponsePB) ProtoMessage() {}

func (x *DeleteNotServingTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotServingTabletResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteNotServingTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteNotServingTabletResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type DisableTabletSplittingRequestPB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DisableDurationMs *uint64                `protobuf:"varint,1,opt,name=disable_duration_ms,json=disableDurationMs" json:"disable_duration_ms,omitempty"`
	FeatureName       *string                `protobuf:"bytes,2,opt,name=feature_name,json=featureName" json:"feature_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DisableTabletSplittingRequestPB) Reset() {
	*x = DisableTabletSplittingRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableTabletSplittingRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTabletSplittingRequestPB) ProtoMessage() {}

func (x *DisableTabletSplittingRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTabletSplittingRequestPB.ProtoReflect.Descriptor instead.
func (*DisableTabletSplittingRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{21}
}

func (x *DisableTabletSplittingRequestPB) GetDisableDurationMs() uint64 {
	if x != nil && x.DisableDurationMs != nil {
		return *x.DisableDurationMs
	}
	return 0
}

func (x *DisableTabletSplittingRequestPB) GetFeatureName() string {
	if x != nil && x.FeatureName != nil {
		return *x.FeatureName
	}
	return ""
}

type DisableTabletSplittingResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableTabletSplittingResponsePB) Reset() {
	*x = DisableTabletSplittingResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableTabletSplittingResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTabletSplittingResponsePB) ProtoMessage() {}

func (x *DisableTabletSplittingResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTabletSplittingResponsePB.ProtoReflect.Descriptor instead.
func (*DisableTabletSplittingResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{22}
}

func (x *DisableTabletSplittingResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsTabletSplittingCompleteRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	WaitForParentDeletion *bool                  `protobuf:"varint,1,opt,name=wait_for_parent_deletion,json=waitForParentDeletion" json:"wait_for_parent_deletion,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *IsTabletSplittingCompleteRequestPB) Reset() {
	*x = IsTabletSplittingCompleteRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTabletSplittingCompleteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTabletSplittingCompleteRequestPB) ProtoMessage() {}

func (x *IsTabletSplittingCompleteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTabletSplittingCompleteRequestPB.ProtoReflect.Descriptor instead.
func (*IsTabletSplittingCompleteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{23}
}

func (x *IsTabletSplittingCompleteRequestPB) GetWaitForParentDeletion() bool {
	if x != nil && x.WaitForParentDeletion != nil {
		return *x.WaitForParentDeletion
	}
	return false
}

type IsTabletSplittingCompleteResponsePB struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Error                     *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	IsTabletSplittingComplete *bool                  `protobuf:"varint,2,opt,name=is_tablet_splitting_complete,json=isTabletSplittingComplete" json:"is_tablet_splitting_complete,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *IsTabletSplittingCompleteResponsePB) Reset() {
	*x = IsTabletSplittingCompleteResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTabletSplittingCompleteResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTabletSplittingCompleteResponsePB) ProtoMessage() {}

func (x *IsTabletSplittingCompleteResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTabletSplittingCompleteResponsePB.ProtoReflect.Descriptor instead.
func (*IsTabletSplittingCompleteResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{24}
}

func (x *IsTabletSplittingCompleteResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsTabletSplittingCompleteResponsePB) GetIsTabletSplittingComplete() bool {
	if x != nil && x.IsTabletSplittingComplete != nil {
		return *x.IsTabletSplittingComplete
	}
	return false
}

type DdlLogRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdlLogRequestPB) Reset() {
	*x = DdlLogRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdlLogRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdlLogRequestPB) ProtoMessage() {}

func (x *DdlLogRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdlLogRequestPB.ProtoReflect.Descriptor instead.
func (*DdlLogRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{25}
}

type DdlLogResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entries       []*DdlLogEntryPB       `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdlLogResponsePB) Reset() {
	*x = DdlLogResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdlLogResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdlLogResponsePB) ProtoMessage() {}

func (x *DdlLogResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdlLogResponsePB.ProtoReflect.Descriptor instead.
func (*DdlLogResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{26}
}

func (x *DdlLogResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DdlLogResponsePB) GetEntries() []*DdlLogEntryPB {
	if x != nil {
		return x.Entries
	}
	return nil
}

type StartYsqlMajorVersionUpgradeInitdbRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartYsqlMajorVersionUpgradeInitdbRequestPB) Reset() {
	*x = StartYsqlMajorVersionUpgradeInitdbRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartYsqlMajorVersionUpgradeInitdbRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartYsqlMajorVersionUpgradeInitdbRequestPB) ProtoMessage() {}

func (x *StartYsqlMajorVersionUpgradeInitdbRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartYsqlMajorVersionUpgradeInitdbRequestPB.ProtoReflect.Descriptor instead.
func (*StartYsqlMajorVersionUpgradeInitdbRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{27}
}

type StartYsqlMajorVersionUpgradeInitdbResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartYsqlMajorVersionUpgradeInitdbResponsePB) Reset() {
	*x = StartYsqlMajorVersionUpgradeInitdbResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartYsqlMajorVersionUpgradeInitdbResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartYsqlMajorVersionUpgradeInitdbResponsePB) ProtoMessage() {}

func (x *StartYsqlMajorVersionUpgradeInitdbResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartYsqlMajorVersionUpgradeInitdbResponsePB.ProtoReflect.Descriptor instead.
func (*StartYsqlMajorVersionUpgradeInitdbResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{28}
}

func (x *StartYsqlMajorVersionUpgradeInitdbResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsYsqlMajorVersionUpgradeInitdbDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneRequestPB) Reset() {
	*x = IsYsqlMajorVersionUpgradeInitdbDoneRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsYsqlMajorVersionUpgradeInitdbDoneRequestPB) ProtoMessage() {}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsYsqlMajorVersionUpgradeInitdbDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsYsqlMajorVersionUpgradeInitdbDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{29}
}

type IsYsqlMajorVersionUpgradeInitdbDoneResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Done          *bool                  `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	InitdbError   *MasterErrorPB         `protobuf:"bytes,3,opt,name=initdb_error,json=initdbError" json:"initdb_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) Reset() {
	*x = IsYsqlMajorVersionUpgradeInitdbDoneResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) ProtoMessage() {}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsYsqlMajorVersionUpgradeInitdbDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{30}
}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *IsYsqlMajorVersionUpgradeInitdbDoneResponsePB) GetInitdbError() *MasterErrorPB {
	if x != nil {
		return x.InitdbError
	}
	return nil
}

type RollbackYsqlMajorVersionUpgradeRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackYsqlMajorVersionUpgradeRequestPB) Reset() {
	*x = RollbackYsqlMajorVersionUpgradeRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackYsqlMajorVersionUpgradeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackYsqlMajorVersionUpgradeRequestPB) ProtoMessage() {}

func (x *RollbackYsqlMajorVersionUpgradeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackYsqlMajorVersionUpgradeRequestPB.ProtoReflect.Descriptor instead.
func (*RollbackYsqlMajorVersionUpgradeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{31}
}

type RollbackYsqlMajorVersionUpgradeResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackYsqlMajorVersionUpgradeResponsePB) Reset() {
	*x = RollbackYsqlMajorVersionUpgradeResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackYsqlMajorVersionUpgradeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackYsqlMajorVersionUpgradeResponsePB) ProtoMessage() {}

func (x *RollbackYsqlMajorVersionUpgradeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackYsqlMajorVersionUpgradeResponsePB.ProtoReflect.Descriptor instead.
func (*RollbackYsqlMajorVersionUpgradeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{32}
}

func (x *RollbackYsqlMajorVersionUpgradeResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CheckIfPitrActiveRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIfPitrActiveRequestPB) Reset() {
	*x = CheckIfPitrActiveRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIfPitrActiveRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfPitrActiveRequestPB) ProtoMessage() {}

func (x *CheckIfPitrActiveRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfPitrActiveRequestPB.ProtoReflect.Descriptor instead.
func (*CheckIfPitrActiveRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{33}
}

type CheckIfPitrActiveResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	IsPitrActive  *bool                  `protobuf:"varint,2,opt,name=is_pitr_active,json=isPitrActive" json:"is_pitr_active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIfPitrActiveResponsePB) Reset() {
	*x = CheckIfPitrActiveResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIfPitrActiveResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfPitrActiveResponsePB) ProtoMessage() {}

func (x *CheckIfPitrActiveResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfPitrActiveResponsePB.ProtoReflect.Descriptor instead.
func (*CheckIfPitrActiveResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{34}
}

func (x *CheckIfPitrActiveResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CheckIfPitrActiveResponsePB) GetIsPitrActive() bool {
	if x != nil && x.IsPitrActive != nil {
		return *x.IsPitrActive
	}
	return false
}

type AccessYsqlBackendsManagerTestRegisterRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Read mode: if value is unset, this mode is used.
	// Write mode: if value is set, it will be written to the register.
	Value         *int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessYsqlBackendsManagerTestRegisterRequestPB) Reset() {
	*x = AccessYsqlBackendsManagerTestRegisterRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessYsqlBackendsManagerTestRegisterRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessYsqlBackendsManagerTestRegisterRequestPB) ProtoMessage() {}

func (x *AccessYsqlBackendsManagerTestRegisterRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessYsqlBackendsManagerTestRegisterRequestPB.ProtoReflect.Descriptor instead.
func (*AccessYsqlBackendsManagerTestRegisterRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{35}
}

func (x *AccessYsqlBackendsManagerTestRegisterRequestPB) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type AccessYsqlBackendsManagerTestRegisterResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Read mode: value is read from the register.
	// Write mode: value is read from the register before write.
	Value         *int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"` // required
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessYsqlBackendsManagerTestRegisterResponsePB) Reset() {
	*x = AccessYsqlBackendsManagerTestRegisterResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessYsqlBackendsManagerTestRegisterResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessYsqlBackendsManagerTestRegisterResponsePB) ProtoMessage() {}

func (x *AccessYsqlBackendsManagerTestRegisterResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessYsqlBackendsManagerTestRegisterResponsePB.ProtoReflect.Descriptor instead.
func (*AccessYsqlBackendsManagerTestRegisterResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{36}
}

func (x *AccessYsqlBackendsManagerTestRegisterResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AccessYsqlBackendsManagerTestRegisterResponsePB) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type WaitForYsqlBackendsCatalogVersionRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DatabaseOid           *uint32                `protobuf:"varint,1,opt,name=database_oid,json=databaseOid" json:"database_oid,omitempty"`                                   // required
	CatalogVersion        *uint64                `protobuf:"varint,2,opt,name=catalog_version,json=catalogVersion" json:"catalog_version,omitempty"`                          // required
	RequestorTsUuid       []byte                 `protobuf:"bytes,3,opt,name=requestor_ts_uuid,json=requestorTsUuid" json:"requestor_ts_uuid,omitempty"`                      // required
	RequestorPgBackendPid *int32                 `protobuf:"varint,4,opt,name=requestor_pg_backend_pid,json=requestorPgBackendPid" json:"requestor_pg_backend_pid,omitempty"` // required
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) Reset() {
	*x = WaitForYsqlBackendsCatalogVersionRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForYsqlBackendsCatalogVersionRequestPB) ProtoMessage() {}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForYsqlBackendsCatalogVersionRequestPB.ProtoReflect.Descriptor instead.
func (*WaitForYsqlBackendsCatalogVersionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{37}
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetDatabaseOid() uint32 {
	if x != nil && x.DatabaseOid != nil {
		return *x.DatabaseOid
	}
	return 0
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetCatalogVersion() uint64 {
	if x != nil && x.CatalogVersion != nil {
		return *x.CatalogVersion
	}
	return 0
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetRequestorTsUuid() []byte {
	if x != nil {
		return x.RequestorTsUuid
	}
	return nil
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetRequestorPgBackendPid() int32 {
	if x != nil && x.RequestorPgBackendPid != nil {
		return *x.RequestorPgBackendPid
	}
	return 0
}

type WaitForYsqlBackendsCatalogVersionResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Number of YSQL backends (across all tservers) that have not reached the requested catalog
	// version.  If the field is -1, the counting is in-progress.
	NumLaggingBackends *int32 `protobuf:"varint,2,opt,name=num_lagging_backends,json=numLaggingBackends,def=-1" json:"num_lagging_backends,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for WaitForYsqlBackendsCatalogVersionResponsePB fields.
const (
	Default_WaitForYsqlBackendsCatalogVersionResponsePB_NumLaggingBackends = int32(-1)
)

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) Reset() {
	*x = WaitForYsqlBackendsCatalogVersionResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForYsqlBackendsCatalogVersionResponsePB) ProtoMessage() {}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForYsqlBackendsCatalogVersionResponsePB.ProtoReflect.Descriptor instead.
func (*WaitForYsqlBackendsCatalogVersionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{38}
}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) GetNumLaggingBackends() int32 {
	if x != nil && x.NumLaggingBackends != nil {
		return *x.NumLaggingBackends
	}
	return Default_WaitForYsqlBackendsCatalogVersionResponsePB_NumLaggingBackends
}

type AreNodesSafeToTakeDownRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUIDs of the tservers being taken down.
	TserverUuids [][]byte `protobuf:"bytes,1,rep,name=tserver_uuids,json=tserverUuids" json:"tserver_uuids,omitempty"`
	// UUIDs of the masters being taken down.
	MasterUuids        [][]byte `protobuf:"bytes,2,rep,name=master_uuids,json=masterUuids" json:"master_uuids,omitempty"`
	FollowerLagBoundMs *int64   `protobuf:"varint,3,opt,name=follower_lag_bound_ms,json=followerLagBoundMs" json:"follower_lag_bound_ms,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AreNodesSafeToTakeDownRequestPB) Reset() {
	*x = AreNodesSafeToTakeDownRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreNodesSafeToTakeDownRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreNodesSafeToTakeDownRequestPB) ProtoMessage() {}

func (x *AreNodesSafeToTakeDownRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreNodesSafeToTakeDownRequestPB.ProtoReflect.Descriptor instead.
func (*AreNodesSafeToTakeDownRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{39}
}

func (x *AreNodesSafeToTakeDownRequestPB) GetTserverUuids() [][]byte {
	if x != nil {
		return x.TserverUuids
	}
	return nil
}

func (x *AreNodesSafeToTakeDownRequestPB) GetMasterUuids() [][]byte {
	if x != nil {
		return x.MasterUuids
	}
	return nil
}

func (x *AreNodesSafeToTakeDownRequestPB) GetFollowerLagBoundMs() int64 {
	if x != nil && x.FollowerLagBoundMs != nil {
		return *x.FollowerLagBoundMs
	}
	return 0
}

type AreNodesSafeToTakeDownResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AreNodesSafeToTakeDownResponsePB) Reset() {
	*x = AreNodesSafeToTakeDownResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AreNodesSafeToTakeDownResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreNodesSafeToTakeDownResponsePB) ProtoMessage() {}

func (x *AreNodesSafeToTakeDownResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreNodesSafeToTakeDownResponsePB.ProtoReflect.Descriptor instead.
func (*AreNodesSafeToTakeDownResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{40}
}

func (x *AreNodesSafeToTakeDownResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetMasterHeartbeatDelaysRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMasterHeartbeatDelaysRequestPB) Reset() {
	*x = GetMasterHeartbeatDelaysRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMasterHeartbeatDelaysRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterHeartbeatDelaysRequestPB) ProtoMessage() {}

func (x *GetMasterHeartbeatDelaysRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterHeartbeatDelaysRequestPB.ProtoReflect.Descriptor instead.
func (*GetMasterHeartbeatDelaysRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{41}
}

type GetMasterHeartbeatDelaysResponsePB struct {
	state          protoimpl.MessageState                                     `protogen:"open.v1"`
	Error          *MasterErrorPB                                             `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	HeartbeatDelay []*GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay `protobuf:"bytes,2,rep,name=heartbeat_delay,json=heartbeatDelay" json:"heartbeat_delay,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetMasterHeartbeatDelaysResponsePB) Reset() {
	*x = GetMasterHeartbeatDelaysResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMasterHeartbeatDelaysResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterHeartbeatDelaysResponsePB) ProtoMessage() {}

func (x *GetMasterHeartbeatDelaysResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterHeartbeatDelaysResponsePB.ProtoReflect.Descriptor instead.
func (*GetMasterHeartbeatDelaysResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{42}
}

func (x *GetMasterHeartbeatDelaysResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetMasterHeartbeatDelaysResponsePB) GetHeartbeatDelay() []*GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay {
	if x != nil {
		return x.HeartbeatDelay
	}
	return nil
}

type DumpSysCatalogEntriesRequestPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EntryType      *SysRowEntryType       `protobuf:"varint,1,opt,name=entry_type,json=entryType,enum=yb.master.SysRowEntryType" json:"entry_type,omitempty"`
	EntityIdFilter *string                `protobuf:"bytes,2,opt,name=entity_id_filter,json=entityIdFilter" json:"entity_id_filter,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DumpSysCatalogEntriesRequestPB) Reset() {
	*x = DumpSysCatalogEntriesRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpSysCatalogEntriesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpSysCatalogEntriesRequestPB) ProtoMessage() {}

func (x *DumpSysCatalogEntriesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpSysCatalogEntriesRequestPB.ProtoReflect.Descriptor instead.
func (*DumpSysCatalogEntriesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{43}
}

func (x *DumpSysCatalogEntriesRequestPB) GetEntryType() SysRowEntryType {
	if x != nil && x.EntryType != nil {
		return *x.EntryType
	}
	return SysRowEntryType_UNKNOWN
}

func (x *DumpSysCatalogEntriesRequestPB) GetEntityIdFilter() string {
	if x != nil && x.EntityIdFilter != nil {
		return *x.EntityIdFilter
	}
	return ""
}

type SysCatalogEntryDumpPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryType     *SysRowEntryType       `protobuf:"varint,1,opt,name=entry_type,json=entryType,enum=yb.master.SysRowEntryType" json:"entry_type,omitempty"`
	EntityId      *string                `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	PbDebugString *string                `protobuf:"bytes,3,opt,name=pb_debug_string,json=pbDebugString" json:"pb_debug_string,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysCatalogEntryDumpPB) Reset() {
	*x = SysCatalogEntryDumpPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysCatalogEntryDumpPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCatalogEntryDumpPB) ProtoMessage() {}

func (x *SysCatalogEntryDumpPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCatalogEntryDumpPB.ProtoReflect.Descriptor instead.
func (*SysCatalogEntryDumpPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{44}
}

func (x *SysCatalogEntryDumpPB) GetEntryType() SysRowEntryType {
	if x != nil && x.EntryType != nil {
		return *x.EntryType
	}
	return SysRowEntryType_UNKNOWN
}

func (x *SysCatalogEntryDumpPB) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *SysCatalogEntryDumpPB) GetPbDebugString() string {
	if x != nil && x.PbDebugString != nil {
		return *x.PbDebugString
	}
	return ""
}

type DumpSysCatalogEntriesResponsePB struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Error         *MasterErrorPB           `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entries       []*SysCatalogEntryDumpPB `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DumpSysCatalogEntriesResponsePB) Reset() {
	*x = DumpSysCatalogEntriesResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpSysCatalogEntriesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpSysCatalogEntriesResponsePB) ProtoMessage() {}

func (x *DumpSysCatalogEntriesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpSysCatalogEntriesResponsePB.ProtoReflect.Descriptor instead.
func (*DumpSysCatalogEntriesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{45}
}

func (x *DumpSysCatalogEntriesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DumpSysCatalogEntriesResponsePB) GetEntries() []*SysCatalogEntryDumpPB {
	if x != nil {
		return x.Entries
	}
	return nil
}

type WriteSysCatalogEntryRequestPB struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	EntryType     *SysRowEntryType                       `protobuf:"varint,1,opt,name=entry_type,json=entryType,enum=yb.master.SysRowEntryType" json:"entry_type,omitempty"`
	EntityId      *string                                `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	PbDebugString *string                                `protobuf:"bytes,3,opt,name=pb_debug_string,json=pbDebugString" json:"pb_debug_string,omitempty"`
	OpType        *WriteSysCatalogEntryRequestPB_WriteOp `protobuf:"varint,4,opt,name=op_type,json=opType,enum=yb.master.WriteSysCatalogEntryRequestPB_WriteOp" json:"op_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteSysCatalogEntryRequestPB) Reset() {
	*x = WriteSysCatalogEntryRequestPB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteSysCatalogEntryRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSysCatalogEntryRequestPB) ProtoMessage() {}

func (x *WriteSysCatalogEntryRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSysCatalogEntryRequestPB.ProtoReflect.Descriptor instead.
func (*WriteSysCatalogEntryRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{46}
}

func (x *WriteSysCatalogEntryRequestPB) GetEntryType() SysRowEntryType {
	if x != nil && x.EntryType != nil {
		return *x.EntryType
	}
	return SysRowEntryType_UNKNOWN
}

func (x *WriteSysCatalogEntryRequestPB) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *WriteSysCatalogEntryRequestPB) GetPbDebugString() string {
	if x != nil && x.PbDebugString != nil {
		return *x.PbDebugString
	}
	return ""
}

func (x *WriteSysCatalogEntryRequestPB) GetOpType() WriteSysCatalogEntryRequestPB_WriteOp {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return WriteSysCatalogEntryRequestPB_SYS_CATALOG_INSERT
}

type WriteSysCatalogEntryResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteSysCatalogEntryResponsePB) Reset() {
	*x = WriteSysCatalogEntryResponsePB{}
	mi := &file_yb_master_master_admin_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteSysCatalogEntryResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSysCatalogEntryResponsePB) ProtoMessage() {}

func (x *WriteSysCatalogEntryResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSysCatalogEntryResponsePB.ProtoReflect.Descriptor instead.
func (*WriteSysCatalogEntryResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{47}
}

func (x *WriteSysCatalogEntryResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MasterUuid           []byte                 `protobuf:"bytes,1,opt,name=master_uuid,json=masterUuid" json:"master_uuid,omitempty"`
	LastHeartbeatDeltaMs *int64                 `protobuf:"varint,2,opt,name=last_heartbeat_delta_ms,json=lastHeartbeatDeltaMs" json:"last_heartbeat_delta_ms,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay) Reset() {
	*x = GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay{}
	mi := &file_yb_master_master_admin_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay) ProtoMessage() {}

func (x *GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_admin_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay.ProtoReflect.Descriptor instead.
func (*GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay) Descriptor() ([]byte, []int) {
	return file_yb_master_master_admin_proto_rawDescGZIP(), []int{42, 0}
}

func (x *GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay) GetMasterUuid() []byte {
	if x != nil {
		return x.MasterUuid
	}
	return nil
}

func (x *GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay) GetLastHeartbeatDeltaMs() int64 {
	if x != nil && x.LastHeartbeatDeltaMs != nil {
		return *x.LastHeartbeatDeltaMs
	}
	return 0
}

var File_yb_master_master_admin_proto protoreflect.FileDescriptor

var file_yb_master_master_admin_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x23, 0x79, 0x62, 0x2f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb5, 0x01, 0x0a, 0x14, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x71, 0x0a, 0x15, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x49,
	0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x1b, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x1a, 0x0a, 0x18, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x4b, 0x0a, 0x19,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x4d, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x75, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0xe4, 0x01,
	0x0a, 0x21, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x13, 0x66, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x15, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x66, 0x75,
	0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x57, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x73,
	0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x64, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x14, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x15, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x25, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x26, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x3e, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x52, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x1f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x20, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5d, 0x0a,
	0x22, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96, 0x01, 0x0a,
	0x23, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x76, 0x0a, 0x10, 0x44, 0x64, 0x6c, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x2d, 0x0a, 0x2b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x5e, 0x0a, 0x2c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x64, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x2e, 0x0a, 0x2c, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x64, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0xb0, 0x01, 0x0a, 0x2d, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x64, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x28, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x59, 0x73,
	0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x5b,
	0x0a, 0x29, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x73, 0x0a, 0x1b, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70,
	0x69, 0x74, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x46,
	0x0a, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x77, 0x0a, 0x2f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xdd, 0x01, 0x0a, 0x2a, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x54, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x50, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x64, 0x22,
	0x93, 0x01, 0x0a, 0x2b, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x34, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1f, 0x41, 0x72, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x53, 0x61, 0x66, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x67, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x67, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x4d, 0x73, 0x22, 0x52, 0x0a, 0x20, 0x41, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x53, 0x61, 0x66, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0xb1, 0x02,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x6b, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x1a, 0x6e, 0x0a, 0x14, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d,
	0x73, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x53, 0x79,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x75, 0x6d,
	0x70, 0x50, 0x42, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x62, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x62, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x79, 0x73, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x42, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x1d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x62, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x62, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x51, 0x0a, 0x07, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x59, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52,
	0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c,
	0x4f, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x59, 0x53, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x22, 0x50, 0x0a, 0x1e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0x82, 0x15, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x0b, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x49, 0x73, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x23,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x25,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x53, 0x0a, 0x0c, 0x49, 0x73, 0x49, 0x6e, 0x69,
	0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0b,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x83,
	0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x7d, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x12, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x49, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x41, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x53, 0x61, 0x66, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x53, 0x61, 0x66, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x53, 0x61, 0x66, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x41, 0x0a, 0x06, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x95, 0x01, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x72, 0x74, 0x59, 0x73,
	0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x12, 0x36, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x59, 0x73, 0x71,
	0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x64, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x98, 0x01, 0x0a,
	0x23, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x64, 0x62,
	0x44, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x64, 0x62,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x38, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x8c, 0x01, 0x0a, 0x1f, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x50,
	0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x9e, 0x01, 0x0a, 0x25, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x92, 0x01, 0x0a, 0x21,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x36, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x6e, 0x0a, 0x15, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x6b, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x1a, 0x1b, 0xda,
	0xb5, 0x18, 0x17, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72,
	0x67, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
})

var (
	file_yb_master_master_admin_proto_rawDescOnce sync.Once
	file_yb_master_master_admin_proto_rawDescData []byte
)

func file_yb_master_master_admin_proto_rawDescGZIP() []byte {
	file_yb_master_master_admin_proto_rawDescOnce.Do(func() {
		file_yb_master_master_admin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_master_master_admin_proto_rawDesc), len(file_yb_master_master_admin_proto_rawDesc)))
	})
	return file_yb_master_master_admin_proto_rawDescData
}

var file_yb_master_master_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yb_master_master_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_yb_master_master_admin_proto_goTypes = []any{
	(WriteSysCatalogEntryRequestPB_WriteOp)(0),                      // 0: yb.master.WriteSysCatalogEntryRequestPB.WriteOp
	(*FlushTablesRequestPB)(nil),                                    // 1: yb.master.FlushTablesRequestPB
	(*FlushTablesResponsePB)(nil),                                   // 2: yb.master.FlushTablesResponsePB
	(*IsFlushTablesDoneRequestPB)(nil),                              // 3: yb.master.IsFlushTablesDoneRequestPB
	(*IsFlushTablesDoneResponsePB)(nil),                             // 4: yb.master.IsFlushTablesDoneResponsePB
	(*FlushSysCatalogRequestPB)(nil),                                // 5: yb.master.FlushSysCatalogRequestPB
	(*FlushSysCatalogResponsePB)(nil),                               // 6: yb.master.FlushSysCatalogResponsePB
	(*CompactSysCatalogRequestPB)(nil),                              // 7: yb.master.CompactSysCatalogRequestPB
	(*CompactSysCatalogResponsePB)(nil),                             // 8: yb.master.CompactSysCatalogResponsePB
	(*GetCompactionStatusRequestPB)(nil),                            // 9: yb.master.GetCompactionStatusRequestPB
	(*TabletReplicaFullCompactionStatus)(nil),                       // 10: yb.master.TabletReplicaFullCompactionStatus
	(*GetCompactionStatusResponsePB)(nil),                           // 11: yb.master.GetCompactionStatusResponsePB
	(*IsInitDbDoneRequestPB)(nil),                                   // 12: yb.master.IsInitDbDoneRequestPB
	(*IsInitDbDoneResponsePB)(nil),                                  // 13: yb.master.IsInitDbDoneResponsePB
	(*SplitTabletRequestPB)(nil),                                    // 14: yb.master.SplitTabletRequestPB
	(*SplitTabletResponsePB)(nil),                                   // 15: yb.master.SplitTabletResponsePB
	(*CreateTransactionStatusTableRequestPB)(nil),                   // 16: yb.master.CreateTransactionStatusTableRequestPB
	(*CreateTransactionStatusTableResponsePB)(nil),                  // 17: yb.master.CreateTransactionStatusTableResponsePB
	(*AddTransactionStatusTabletRequestPB)(nil),                     // 18: yb.master.AddTransactionStatusTabletRequestPB
	(*AddTransactionStatusTabletResponsePB)(nil),                    // 19: yb.master.AddTransactionStatusTabletResponsePB
	(*DeleteNotServingTabletRequestPB)(nil),                         // 20: yb.master.DeleteNotServingTabletRequestPB
	(*DeleteNotServingTabletResponsePB)(nil),                        // 21: yb.master.DeleteNotServingTabletResponsePB
	(*DisableTabletSplittingRequestPB)(nil),                         // 22: yb.master.DisableTabletSplittingRequestPB
	(*DisableTabletSplittingResponsePB)(nil),                        // 23: yb.master.DisableTabletSplittingResponsePB
	(*IsTabletSplittingCompleteRequestPB)(nil),                      // 24: yb.master.IsTabletSplittingCompleteRequestPB
	(*IsTabletSplittingCompleteResponsePB)(nil),                     // 25: yb.master.IsTabletSplittingCompleteResponsePB
	(*DdlLogRequestPB)(nil),                                         // 26: yb.master.DdlLogRequestPB
	(*DdlLogResponsePB)(nil),                                        // 27: yb.master.DdlLogResponsePB
	(*StartYsqlMajorVersionUpgradeInitdbRequestPB)(nil),             // 28: yb.master.StartYsqlMajorVersionUpgradeInitdbRequestPB
	(*StartYsqlMajorVersionUpgradeInitdbResponsePB)(nil),            // 29: yb.master.StartYsqlMajorVersionUpgradeInitdbResponsePB
	(*IsYsqlMajorVersionUpgradeInitdbDoneRequestPB)(nil),            // 30: yb.master.IsYsqlMajorVersionUpgradeInitdbDoneRequestPB
	(*IsYsqlMajorVersionUpgradeInitdbDoneResponsePB)(nil),           // 31: yb.master.IsYsqlMajorVersionUpgradeInitdbDoneResponsePB
	(*RollbackYsqlMajorVersionUpgradeRequestPB)(nil),                // 32: yb.master.RollbackYsqlMajorVersionUpgradeRequestPB
	(*RollbackYsqlMajorVersionUpgradeResponsePB)(nil),               // 33: yb.master.RollbackYsqlMajorVersionUpgradeResponsePB
	(*CheckIfPitrActiveRequestPB)(nil),                              // 34: yb.master.CheckIfPitrActiveRequestPB
	(*CheckIfPitrActiveResponsePB)(nil),                             // 35: yb.master.CheckIfPitrActiveResponsePB
	(*AccessYsqlBackendsManagerTestRegisterRequestPB)(nil),          // 36: yb.master.AccessYsqlBackendsManagerTestRegisterRequestPB
	(*AccessYsqlBackendsManagerTestRegisterResponsePB)(nil),         // 37: yb.master.AccessYsqlBackendsManagerTestRegisterResponsePB
	(*WaitForYsqlBackendsCatalogVersionRequestPB)(nil),              // 38: yb.master.WaitForYsqlBackendsCatalogVersionRequestPB
	(*WaitForYsqlBackendsCatalogVersionResponsePB)(nil),             // 39: yb.master.WaitForYsqlBackendsCatalogVersionResponsePB
	(*AreNodesSafeToTakeDownRequestPB)(nil),                         // 40: yb.master.AreNodesSafeToTakeDownRequestPB
	(*AreNodesSafeToTakeDownResponsePB)(nil),                        // 41: yb.master.AreNodesSafeToTakeDownResponsePB
	(*GetMasterHeartbeatDelaysRequestPB)(nil),                       // 42: yb.master.GetMasterHeartbeatDelaysRequestPB
	(*GetMasterHeartbeatDelaysResponsePB)(nil),                      // 43: yb.master.GetMasterHeartbeatDelaysResponsePB
	(*DumpSysCatalogEntriesRequestPB)(nil),                          // 44: yb.master.DumpSysCatalogEntriesRequestPB
	(*SysCatalogEntryDumpPB)(nil),                                   // 45: yb.master.SysCatalogEntryDumpPB
	(*DumpSysCatalogEntriesResponsePB)(nil),                         // 46: yb.master.DumpSysCatalogEntriesResponsePB
	(*WriteSysCatalogEntryRequestPB)(nil),                           // 47: yb.master.WriteSysCatalogEntryRequestPB
	(*WriteSysCatalogEntryResponsePB)(nil),                          // 48: yb.master.WriteSysCatalogEntryResponsePB
	(*GetMasterHeartbeatDelaysResponsePB_MasterHeartbeatDelay)(nil), // 49: yb.master.GetMasterHeartbeatDelaysResponsePB.MasterHeartbeatDelay
	(*TableIdentifierPB)(nil),                                       // 50: yb.master.TableIdentifierPB
	(*MasterErrorPB)(nil),                                           // 51: yb.master.MasterErrorPB
	(tablet.FullCompactionState)(0),                                 // 52: yb.tablet.FullCompactionState
	(*ReplicationInfoPB)(nil),                                       // 53: yb.master.ReplicationInfoPB
	(*DdlLogEntryPB)(nil),                                           // 54: yb.master.DdlLogEntryPB
	(SysRowEntryType)(0),                                            // 55: yb.master.SysRowEntryType
}
var file_yb_master_master_admin_proto_depIdxs = []int32{
	50, // 0: yb.master.FlushTablesRequestPB.tables:type_name -> yb.master.TableIdentifierPB
	51, // 1: yb.master.FlushTablesResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 2: yb.master.IsFlushTablesDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 3: yb.master.FlushSysCatalogResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 4: yb.master.CompactSysCatalogResponsePB.error:type_name -> yb.master.MasterErrorPB
	50, // 5: yb.master.GetCompactionStatusRequestPB.table:type_name -> yb.master.TableIdentifierPB
	52, // 6: yb.master.TabletReplicaFullCompactionStatus.full_compaction_state:type_name -> yb.tablet.FullCompactionState
	51, // 7: yb.master.GetCompactionStatusResponsePB.error:type_name -> yb.master.MasterErrorPB
	52, // 8: yb.master.GetCompactionStatusResponsePB.full_compaction_state:type_name -> yb.tablet.FullCompactionState
	10, // 9: yb.master.GetCompactionStatusResponsePB.replica_statuses:type_name -> yb.master.TabletReplicaFullCompactionStatus
	51, // 10: yb.master.IsInitDbDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 11: yb.master.SplitTabletResponsePB.error:type_name -> yb.master.MasterErrorPB
	53, // 12: yb.master.CreateTransactionStatusTableRequestPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	51, // 13: yb.master.CreateTransactionStatusTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 14: yb.master.AddTransactionStatusTabletResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 15: yb.master.DeleteNotServingTabletResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 16: yb.master.DisableTabletSplittingResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 17: yb.master.IsTabletSplittingCompleteResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 18: yb.master.DdlLogResponsePB.error:type_name -> yb.master.MasterErrorPB
	54, // 19: yb.master.DdlLogResponsePB.entries:type_name -> yb.master.DdlLogEntryPB
	51, // 20: yb.master.StartYsqlMajorVersionUpgradeInitdbResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 21: yb.master.IsYsqlMajorVersionUpgradeInitdbDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 22: yb.master.IsYsqlMajorVersionUpgradeInitdbDoneResponsePB.initdb_error:type_name -> yb.master.MasterErrorPB
	51, // 23: yb.master.RollbackYsqlMajorVersionUpgradeResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 24: yb.master.CheckIfPitrActiveResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 25: yb.master.AccessYsqlBackendsManagerTestRegisterResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 26: yb.master.WaitForYsqlBackendsCatalogVersionResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 27: yb.master.AreNodesSafeToTakeDownResponsePB.error:type_name -> yb.master.MasterErrorPB
	51, // 28: yb.master.GetMasterHeartbeatDelaysResponsePB.error:type_name -> yb.master.MasterErrorPB
	49, // 29: yb.master.GetMasterHeartbeatDelaysResponsePB.heartbeat_delay:type_name -> yb.master.GetMasterHeartbeatDelaysResponsePB.MasterHeartbeatDelay
	55, // 30: yb.master.DumpSysCatalogEntriesRequestPB.entry_type:type_name -> yb.master.SysRowEntryType
	55, // 31: yb.master.SysCatalogEntryDumpPB.entry_type:type_name -> yb.master.SysRowEntryType
	51, // 32: yb.master.DumpSysCatalogEntriesResponsePB.error:type_name -> yb.master.MasterErrorPB
	45, // 33: yb.master.DumpSysCatalogEntriesResponsePB.entries:type_name -> yb.master.SysCatalogEntryDumpPB
	55, // 34: yb.master.WriteSysCatalogEntryRequestPB.entry_type:type_name -> yb.master.SysRowEntryType
	0,  // 35: yb.master.WriteSysCatalogEntryRequestPB.op_type:type_name -> yb.master.WriteSysCatalogEntryRequestPB.WriteOp
	51, // 36: yb.master.WriteSysCatalogEntryResponsePB.error:type_name -> yb.master.MasterErrorPB
	1,  // 37: yb.master.MasterAdmin.FlushTables:input_type -> yb.master.FlushTablesRequestPB
	3,  // 38: yb.master.MasterAdmin.IsFlushTablesDone:input_type -> yb.master.IsFlushTablesDoneRequestPB
	5,  // 39: yb.master.MasterAdmin.FlushSysCatalog:input_type -> yb.master.FlushSysCatalogRequestPB
	7,  // 40: yb.master.MasterAdmin.CompactSysCatalog:input_type -> yb.master.CompactSysCatalogRequestPB
	9,  // 41: yb.master.MasterAdmin.GetCompactionStatus:input_type -> yb.master.GetCompactionStatusRequestPB
	12, // 42: yb.master.MasterAdmin.IsInitDbDone:input_type -> yb.master.IsInitDbDoneRequestPB
	14, // 43: yb.master.MasterAdmin.SplitTablet:input_type -> yb.master.SplitTabletRequestPB
	16, // 44: yb.master.MasterAdmin.CreateTransactionStatusTable:input_type -> yb.master.CreateTransactionStatusTableRequestPB
	18, // 45: yb.master.MasterAdmin.AddTransactionStatusTablet:input_type -> yb.master.AddTransactionStatusTabletRequestPB
	20, // 46: yb.master.MasterAdmin.DeleteNotServingTablet:input_type -> yb.master.DeleteNotServingTabletRequestPB
	22, // 47: yb.master.MasterAdmin.DisableTabletSplitting:input_type -> yb.master.DisableTabletSplittingRequestPB
	24, // 48: yb.master.MasterAdmin.IsTabletSplittingComplete:input_type -> yb.master.IsTabletSplittingCompleteRequestPB
	40, // 49: yb.master.MasterAdmin.AreNodesSafeToTakeDown:input_type -> yb.master.AreNodesSafeToTakeDownRequestPB
	42, // 50: yb.master.MasterAdmin.GetMasterHeartbeatDelays:input_type -> yb.master.GetMasterHeartbeatDelaysRequestPB
	26, // 51: yb.master.MasterAdmin.DdlLog:input_type -> yb.master.DdlLogRequestPB
	28, // 52: yb.master.MasterAdmin.StartYsqlMajorVersionUpgradeInitdb:input_type -> yb.master.StartYsqlMajorVersionUpgradeInitdbRequestPB
	30, // 53: yb.master.MasterAdmin.IsYsqlMajorVersionUpgradeInitdbDone:input_type -> yb.master.IsYsqlMajorVersionUpgradeInitdbDoneRequestPB
	32, // 54: yb.master.MasterAdmin.RollbackYsqlMajorVersionUpgrade:input_type -> yb.master.RollbackYsqlMajorVersionUpgradeRequestPB
	34, // 55: yb.master.MasterAdmin.CheckIfPitrActive:input_type -> yb.master.CheckIfPitrActiveRequestPB
	36, // 56: yb.master.MasterAdmin.AccessYsqlBackendsManagerTestRegister:input_type -> yb.master.AccessYsqlBackendsManagerTestRegisterRequestPB
	38, // 57: yb.master.MasterAdmin.WaitForYsqlBackendsCatalogVersion:input_type -> yb.master.WaitForYsqlBackendsCatalogVersionRequestPB
	44, // 58: yb.master.MasterAdmin.DumpSysCatalogEntries:input_type -> yb.master.DumpSysCatalogEntriesRequestPB
	47, // 59: yb.master.MasterAdmin.WriteSysCatalogEntry:input_type -> yb.master.WriteSysCatalogEntryRequestPB
	2,  // 60: yb.master.MasterAdmin.FlushTables:output_type -> yb.master.FlushTablesResponsePB
	4,  // 61: yb.master.MasterAdmin.IsFlushTablesDone:output_type -> yb.master.IsFlushTablesDoneResponsePB
	6,  // 62: yb.master.MasterAdmin.FlushSysCatalog:output_type -> yb.master.FlushSysCatalogResponsePB
	8,  // 63: yb.master.MasterAdmin.CompactSysCatalog:output_type -> yb.master.CompactSysCatalogResponsePB
	11, // 64: yb.master.MasterAdmin.GetCompactionStatus:output_type -> yb.master.GetCompactionStatusResponsePB
	13, // 65: yb.master.MasterAdmin.IsInitDbDone:output_type -> yb.master.IsInitDbDoneResponsePB
	15, // 66: yb.master.MasterAdmin.SplitTablet:output_type -> yb.master.SplitTabletResponsePB
	17, // 67: yb.master.MasterAdmin.CreateTransactionStatusTable:output_type -> yb.master.CreateTransactionStatusTableResponsePB
	19, // 68: yb.master.MasterAdmin.AddTransactionStatusTablet:output_type -> yb.master.AddTransactionStatusTabletResponsePB
	21, // 69: yb.master.MasterAdmin.DeleteNotServingTablet:output_type -> yb.master.DeleteNotServingTabletResponsePB
	23, // 70: yb.master.MasterAdmin.DisableTabletSplitting:output_type -> yb.master.DisableTabletSplittingResponsePB
	25, // 71: yb.master.MasterAdmin.IsTabletSplittingComplete:output_type -> yb.master.IsTabletSplittingCompleteResponsePB
	41, // 72: yb.master.MasterAdmin.AreNodesSafeToTakeDown:output_type -> yb.master.AreNodesSafeToTakeDownResponsePB
	43, // 73: yb.master.MasterAdmin.GetMasterHeartbeatDelays:output_type -> yb.master.GetMasterHeartbeatDelaysResponsePB
	27, // 74: yb.master.MasterAdmin.DdlLog:output_type -> yb.master.DdlLogResponsePB
	29, // 75: yb.master.MasterAdmin.StartYsqlMajorVersionUpgradeInitdb:output_type -> yb.master.StartYsqlMajorVersionUpgradeInitdbResponsePB
	31, // 76: yb.master.MasterAdmin.IsYsqlMajorVersionUpgradeInitdbDone:output_type -> yb.master.IsYsqlMajorVersionUpgradeInitdbDoneResponsePB
	33, // 77: yb.master.MasterAdmin.RollbackYsqlMajorVersionUpgrade:output_type -> yb.master.RollbackYsqlMajorVersionUpgradeResponsePB
	35, // 78: yb.master.MasterAdmin.CheckIfPitrActive:output_type -> yb.master.CheckIfPitrActiveResponsePB
	37, // 79: yb.master.MasterAdmin.AccessYsqlBackendsManagerTestRegister:output_type -> yb.master.AccessYsqlBackendsManagerTestRegisterResponsePB
	39, // 80: yb.master.MasterAdmin.WaitForYsqlBackendsCatalogVersion:output_type -> yb.master.WaitForYsqlBackendsCatalogVersionResponsePB
	46, // 81: yb.master.MasterAdmin.DumpSysCatalogEntries:output_type -> yb.master.DumpSysCatalogEntriesResponsePB
	48, // 82: yb.master.MasterAdmin.WriteSysCatalogEntry:output_type -> yb.master.WriteSysCatalogEntryResponsePB
	60, // [60:83] is the sub-list for method output_type
	37, // [37:60] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_yb_master_master_admin_proto_init() }
func file_yb_master_master_admin_proto_init() {
	if File_yb_master_master_admin_proto != nil {
		return
	}
	file_yb_master_catalog_entity_info_proto_init()
	file_yb_master_master_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_master_master_admin_proto_rawDesc), len(file_yb_master_master_admin_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_master_master_admin_proto_goTypes,
		DependencyIndexes: file_yb_master_master_admin_proto_depIdxs,
		EnumInfos:         file_yb_master_master_admin_proto_enumTypes,
		MessageInfos:      file_yb_master_master_admin_proto_msgTypes,
	}.Build()
	File_yb_master_master_admin_proto = out.File
	file_yb_master_master_admin_proto_goTypes = nil
	file_yb_master_master_admin_proto_depIdxs = nil
}
