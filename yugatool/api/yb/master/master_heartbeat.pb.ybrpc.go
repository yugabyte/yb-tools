// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterHeartbeat
// service: MasterHeartbeat
type MasterHeartbeat interface {
	TSHeartbeat(request *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error)
}

type MasterHeartbeatImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

// TS->Master RPCs

func (s *MasterHeartbeatImpl) TSHeartbeat(request *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterHeartbeat", "method", "TSHeartbeat", "request", request)
	response := &TSHeartbeatResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterHeartbeat", "TSHeartbeat", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterHeartbeat", "method", "TSHeartbeat", "response", response)

	return response, nil
}
