// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/master/master_ddl.proto

package master

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IndexStatusPB_BackfillStatus int32

const (
	IndexStatusPB_BACKFILL_UNKNOWN IndexStatusPB_BackfillStatus = 0 // Unspecified state.
	IndexStatusPB_BACKFILL_SUCCESS IndexStatusPB_BackfillStatus = 1 // Backfill succeeded.
)

// Enum value maps for IndexStatusPB_BackfillStatus.
var (
	IndexStatusPB_BackfillStatus_name = map[int32]string{
		0: "BACKFILL_UNKNOWN",
		1: "BACKFILL_SUCCESS",
	}
	IndexStatusPB_BackfillStatus_value = map[string]int32{
		"BACKFILL_UNKNOWN": 0,
		"BACKFILL_SUCCESS": 1,
	}
)

func (x IndexStatusPB_BackfillStatus) Enum() *IndexStatusPB_BackfillStatus {
	p := new(IndexStatusPB_BackfillStatus)
	*p = x
	return p
}

func (x IndexStatusPB_BackfillStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexStatusPB_BackfillStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_ddl_proto_enumTypes[0].Descriptor()
}

func (IndexStatusPB_BackfillStatus) Type() protoreflect.EnumType {
	return &file_yb_master_master_ddl_proto_enumTypes[0]
}

func (x IndexStatusPB_BackfillStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IndexStatusPB_BackfillStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IndexStatusPB_BackfillStatus(num)
	return nil
}

// Deprecated: Use IndexStatusPB_BackfillStatus.Descriptor instead.
func (IndexStatusPB_BackfillStatus) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{26, 0}
}

type AlterTableRequestPB_StepType int32

const (
	AlterTableRequestPB_UNKNOWN            AlterTableRequestPB_StepType = 0
	AlterTableRequestPB_ADD_COLUMN         AlterTableRequestPB_StepType = 1
	AlterTableRequestPB_DROP_COLUMN        AlterTableRequestPB_StepType = 2
	AlterTableRequestPB_RENAME_COLUMN      AlterTableRequestPB_StepType = 3
	AlterTableRequestPB_SET_COLUMN_PG_TYPE AlterTableRequestPB_StepType = 5
	// TODO(KUDU-861): this will subsume RENAME_COLUMN, but not yet implemented
	// on the master side.
	AlterTableRequestPB_ALTER_COLUMN AlterTableRequestPB_StepType = 4
)

// Enum value maps for AlterTableRequestPB_StepType.
var (
	AlterTableRequestPB_StepType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ADD_COLUMN",
		2: "DROP_COLUMN",
		3: "RENAME_COLUMN",
		5: "SET_COLUMN_PG_TYPE",
		4: "ALTER_COLUMN",
	}
	AlterTableRequestPB_StepType_value = map[string]int32{
		"UNKNOWN":            0,
		"ADD_COLUMN":         1,
		"DROP_COLUMN":        2,
		"RENAME_COLUMN":      3,
		"SET_COLUMN_PG_TYPE": 5,
		"ALTER_COLUMN":       4,
	}
)

func (x AlterTableRequestPB_StepType) Enum() *AlterTableRequestPB_StepType {
	p := new(AlterTableRequestPB_StepType)
	*p = x
	return p
}

func (x AlterTableRequestPB_StepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlterTableRequestPB_StepType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_ddl_proto_enumTypes[1].Descriptor()
}

func (AlterTableRequestPB_StepType) Type() protoreflect.EnumType {
	return &file_yb_master_master_ddl_proto_enumTypes[1]
}

func (x AlterTableRequestPB_StepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AlterTableRequestPB_StepType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AlterTableRequestPB_StepType(num)
	return nil
}

// Deprecated: Use AlterTableRequestPB_StepType.Descriptor instead.
func (AlterTableRequestPB_StepType) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{32, 0}
}

type TablegroupIdentifierPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tablegroup ID to fetch info.
	Id []byte `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The tablegroup name to fetch info.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The namespace that the tablegroup is in
	NamespaceId   []byte `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TablegroupIdentifierPB) Reset() {
	*x = TablegroupIdentifierPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TablegroupIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablegroupIdentifierPB) ProtoMessage() {}

func (x *TablegroupIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablegroupIdentifierPB.ProtoReflect.Descriptor instead.
func (*TablegroupIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{0}
}

func (x *TablegroupIdentifierPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TablegroupIdentifierPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TablegroupIdentifierPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type UDTypeIdentifierPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The table ID to fetch info.
	TypeId []byte `protobuf:"bytes,1,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	// The table name to fetch info.
	TypeName *string `protobuf:"bytes,2,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	// The table namespace (if empty - using default namespace).
	Namespace     *NamespaceIdentifierPB `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UDTypeIdentifierPB) Reset() {
	*x = UDTypeIdentifierPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UDTypeIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTypeIdentifierPB) ProtoMessage() {}

func (x *UDTypeIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTypeIdentifierPB.ProtoReflect.Descriptor instead.
func (*UDTypeIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{1}
}

func (x *UDTypeIdentifierPB) GetTypeId() []byte {
	if x != nil {
		return x.TypeId
	}
	return nil
}

func (x *UDTypeIdentifierPB) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *UDTypeIdentifierPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type UDTypeInfoPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FieldNames    []string               `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	FieldTypes    []*common.QLTypePB     `protobuf:"bytes,4,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
	Namespace     *NamespaceIdentifierPB `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UDTypeInfoPB) Reset() {
	*x = UDTypeInfoPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UDTypeInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDTypeInfoPB) ProtoMessage() {}

func (x *UDTypeInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDTypeInfoPB.ProtoReflect.Descriptor instead.
func (*UDTypeInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{2}
}

func (x *UDTypeInfoPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UDTypeInfoPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UDTypeInfoPB) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *UDTypeInfoPB) GetFieldTypes() []*common.QLTypePB {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

func (x *UDTypeInfoPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

// Create table request (including index table)
type CreateTableRequestPB struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Name   *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Schema *common.SchemaPB       `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	// Specifies number of tablets to create. If it's not set here
	// 'SchemaPB::TablePropertiesPB::num_tablets' from 'schema' field will be used.
	NumTablets      *int32                    `protobuf:"varint,3,opt,name=num_tablets,json=numTablets" json:"num_tablets,omitempty"`
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,5,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	ReplicationInfo *ReplicationInfoPB        `protobuf:"bytes,6,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	TableType       *common.TableType         `protobuf:"varint,7,opt,name=table_type,json=tableType,enum=yb.TableType,def=2" json:"table_type,omitempty"`
	Namespace       *NamespaceIdentifierPB    `protobuf:"bytes,8,opt,name=namespace" json:"namespace,omitempty"`
	// For index table.
	IndexInfo         *common.IndexInfoPB `protobuf:"bytes,16,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	IndexedTableId    []byte              `protobuf:"bytes,9,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`                  // Indexed table id of this index.
	IsLocalIndex      *bool               `protobuf:"varint,10,opt,name=is_local_index,json=isLocalIndex,def=0" json:"is_local_index,omitempty"`                // Is a local index?
	IsUniqueIndex     *bool               `protobuf:"varint,11,opt,name=is_unique_index,json=isUniqueIndex,def=0" json:"is_unique_index,omitempty"`             // Is a unique index?
	SkipIndexBackfill *bool               `protobuf:"varint,18,opt,name=skip_index_backfill,json=skipIndexBackfill,def=0" json:"skip_index_backfill,omitempty"` // Skip online schema migration for
	// index?
	IsBackfillDeferred *bool `protobuf:"varint,23,opt,name=is_backfill_deferred,json=isBackfillDeferred,def=0" json:"is_backfill_deferred,omitempty"` // Defer backfill for batching later?
	// For RBAC.
	CreatorRoleName *string `protobuf:"bytes,12,opt,name=creator_role_name,json=creatorRoleName" json:"creator_role_name,omitempty"`
	// For Postgres:
	TableId          []byte `protobuf:"bytes,13,opt,name=table_id,json=tableId" json:"table_id,omitempty"`                                       // id to assign to this table.
	IsPgCatalogTable *bool  `protobuf:"varint,14,opt,name=is_pg_catalog_table,json=isPgCatalogTable,def=0" json:"is_pg_catalog_table,omitempty"` // Is this a sys catalog table?
	IsPgSharedTable  *bool  `protobuf:"varint,15,opt,name=is_pg_shared_table,json=isPgSharedTable,def=0" json:"is_pg_shared_table,omitempty"`    // Is this a shared table?
	// Is this a colocated table? This field is only applicable for a colocated database.
	IsColocatedViaDatabase *bool `protobuf:"varint,17,opt,name=is_colocated_via_database,json=isColocatedViaDatabase,def=1" json:"is_colocated_via_database,omitempty"`
	// This is only applicable for tablegroups. Eventually colocated will be deprecated.
	TablegroupId []byte `protobuf:"bytes,19,opt,name=tablegroup_id,json=tablegroupId" json:"tablegroup_id,omitempty"`
	// Colocation ID to distinguish a table within a colocation group.
	// Auto-generated by catalog manager if not specified.
	// Only makes sense for colocated tables.
	ColocationId *uint32 `protobuf:"varint,25,opt,name=colocation_id,json=colocationId" json:"colocation_id,omitempty"`
	// For YSQL tables, transaction used by this DDL. If aborted, table will be removed.
	Transaction *common.TransactionMetadataPB `protobuf:"bytes,20,opt,name=transaction" json:"transaction,omitempty"`
	// For YSQL tables, this denotes the tablespace that this table is associated with.
	TablespaceId []byte `protobuf:"bytes,21,opt,name=tablespace_id,json=tablespaceId" json:"tablespace_id,omitempty"`
	// This field should be used to create or restore table with a fixed set of partitions.
	Partitions []*common.PartitionPB `protobuf:"bytes,22,rep,name=partitions" json:"partitions,omitempty"`
	IsMatview  *bool                 `protobuf:"varint,26,opt,name=is_matview,json=isMatview" json:"is_matview,omitempty"`
	// In case the table was rewritten, explicitly store the TableId containing the PG table OID
	// (as the table's TableId no longer matches).
	PgTableId                []byte                       `protobuf:"bytes,24,opt,name=pg_table_id,json=pgTableId" json:"pg_table_id,omitempty"`
	HostedStatefulServices   []common.StatefulServiceKind `protobuf:"varint,27,rep,name=hosted_stateful_services,json=hostedStatefulServices,enum=yb.StatefulServiceKind" json:"hosted_stateful_services,omitempty"`
	YsqlYbDdlRollbackEnabled *bool                        `protobuf:"varint,28,opt,name=ysql_yb_ddl_rollback_enabled,json=ysqlYbDdlRollbackEnabled,def=0" json:"ysql_yb_ddl_rollback_enabled,omitempty"`
	// Used during table rewrite - the TableId of the old DocDB table that is being rewritten.
	OldRewriteTableId []byte `protobuf:"bytes,29,opt,name=old_rewrite_table_id,json=oldRewriteTableId" json:"old_rewrite_table_id,omitempty"`
	IsClone           *bool  `protobuf:"varint,30,opt,name=is_clone,json=isClone" json:"is_clone,omitempty"`
	// Set to true when the table is being re-written as part of a TRUNCATE operation.
	IsTruncate       *bool                        `protobuf:"varint,31,opt,name=is_truncate,json=isTruncate" json:"is_truncate,omitempty"`
	VectorIdxOptions *common.PgVectorIdxOptionsPB `protobuf:"bytes,32,opt,name=vector_idx_options,json=vectorIdxOptions" json:"vector_idx_options,omitempty"`
	// Set by DDL Replication to link the table to the original table in the source cluster.
	XclusterSourceTableId []byte `protobuf:"bytes,33,opt,name=xcluster_source_table_id,json=xclusterSourceTableId" json:"xcluster_source_table_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CreateTableRequestPB fields.
const (
	Default_CreateTableRequestPB_TableType                = common.TableType(2) // common.TableType_DEFAULT_TABLE_TYPE
	Default_CreateTableRequestPB_IsLocalIndex             = bool(false)
	Default_CreateTableRequestPB_IsUniqueIndex            = bool(false)
	Default_CreateTableRequestPB_SkipIndexBackfill        = bool(false)
	Default_CreateTableRequestPB_IsBackfillDeferred       = bool(false)
	Default_CreateTableRequestPB_IsPgCatalogTable         = bool(false)
	Default_CreateTableRequestPB_IsPgSharedTable          = bool(false)
	Default_CreateTableRequestPB_IsColocatedViaDatabase   = bool(true)
	Default_CreateTableRequestPB_YsqlYbDdlRollbackEnabled = bool(false)
)

func (x *CreateTableRequestPB) Reset() {
	*x = CreateTableRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequestPB) ProtoMessage() {}

func (x *CreateTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequestPB.ProtoReflect.Descriptor instead.
func (*CreateTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTableRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateTableRequestPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateTableRequestPB) GetNumTablets() int32 {
	if x != nil && x.NumTablets != nil {
		return *x.NumTablets
	}
	return 0
}

func (x *CreateTableRequestPB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *CreateTableRequestPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *CreateTableRequestPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return Default_CreateTableRequestPB_TableType
}

func (x *CreateTableRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *CreateTableRequestPB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *CreateTableRequestPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

func (x *CreateTableRequestPB) GetIsLocalIndex() bool {
	if x != nil && x.IsLocalIndex != nil {
		return *x.IsLocalIndex
	}
	return Default_CreateTableRequestPB_IsLocalIndex
}

func (x *CreateTableRequestPB) GetIsUniqueIndex() bool {
	if x != nil && x.IsUniqueIndex != nil {
		return *x.IsUniqueIndex
	}
	return Default_CreateTableRequestPB_IsUniqueIndex
}

func (x *CreateTableRequestPB) GetSkipIndexBackfill() bool {
	if x != nil && x.SkipIndexBackfill != nil {
		return *x.SkipIndexBackfill
	}
	return Default_CreateTableRequestPB_SkipIndexBackfill
}

func (x *CreateTableRequestPB) GetIsBackfillDeferred() bool {
	if x != nil && x.IsBackfillDeferred != nil {
		return *x.IsBackfillDeferred
	}
	return Default_CreateTableRequestPB_IsBackfillDeferred
}

func (x *CreateTableRequestPB) GetCreatorRoleName() string {
	if x != nil && x.CreatorRoleName != nil {
		return *x.CreatorRoleName
	}
	return ""
}

func (x *CreateTableRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CreateTableRequestPB) GetIsPgCatalogTable() bool {
	if x != nil && x.IsPgCatalogTable != nil {
		return *x.IsPgCatalogTable
	}
	return Default_CreateTableRequestPB_IsPgCatalogTable
}

func (x *CreateTableRequestPB) GetIsPgSharedTable() bool {
	if x != nil && x.IsPgSharedTable != nil {
		return *x.IsPgSharedTable
	}
	return Default_CreateTableRequestPB_IsPgSharedTable
}

func (x *CreateTableRequestPB) GetIsColocatedViaDatabase() bool {
	if x != nil && x.IsColocatedViaDatabase != nil {
		return *x.IsColocatedViaDatabase
	}
	return Default_CreateTableRequestPB_IsColocatedViaDatabase
}

func (x *CreateTableRequestPB) GetTablegroupId() []byte {
	if x != nil {
		return x.TablegroupId
	}
	return nil
}

func (x *CreateTableRequestPB) GetColocationId() uint32 {
	if x != nil && x.ColocationId != nil {
		return *x.ColocationId
	}
	return 0
}

func (x *CreateTableRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *CreateTableRequestPB) GetTablespaceId() []byte {
	if x != nil {
		return x.TablespaceId
	}
	return nil
}

func (x *CreateTableRequestPB) GetPartitions() []*common.PartitionPB {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *CreateTableRequestPB) GetIsMatview() bool {
	if x != nil && x.IsMatview != nil {
		return *x.IsMatview
	}
	return false
}

func (x *CreateTableRequestPB) GetPgTableId() []byte {
	if x != nil {
		return x.PgTableId
	}
	return nil
}

func (x *CreateTableRequestPB) GetHostedStatefulServices() []common.StatefulServiceKind {
	if x != nil {
		return x.HostedStatefulServices
	}
	return nil
}

func (x *CreateTableRequestPB) GetYsqlYbDdlRollbackEnabled() bool {
	if x != nil && x.YsqlYbDdlRollbackEnabled != nil {
		return *x.YsqlYbDdlRollbackEnabled
	}
	return Default_CreateTableRequestPB_YsqlYbDdlRollbackEnabled
}

func (x *CreateTableRequestPB) GetOldRewriteTableId() []byte {
	if x != nil {
		return x.OldRewriteTableId
	}
	return nil
}

func (x *CreateTableRequestPB) GetIsClone() bool {
	if x != nil && x.IsClone != nil {
		return *x.IsClone
	}
	return false
}

func (x *CreateTableRequestPB) GetIsTruncate() bool {
	if x != nil && x.IsTruncate != nil {
		return *x.IsTruncate
	}
	return false
}

func (x *CreateTableRequestPB) GetVectorIdxOptions() *common.PgVectorIdxOptionsPB {
	if x != nil {
		return x.VectorIdxOptions
	}
	return nil
}

func (x *CreateTableRequestPB) GetXclusterSourceTableId() []byte {
	if x != nil {
		return x.XclusterSourceTableId
	}
	return nil
}

type CreateTableResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TableId       []byte         `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTableResponsePB) Reset() {
	*x = CreateTableResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponsePB) ProtoMessage() {}

func (x *CreateTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponsePB.ProtoReflect.Descriptor instead.
func (*CreateTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateTableResponsePB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type IsCreateTableDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *TableIdentifierPB     `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCreateTableDoneRequestPB) Reset() {
	*x = IsCreateTableDoneRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCreateTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateTableDoneRequestPB) ProtoMessage() {}

func (x *IsCreateTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsCreateTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{5}
}

func (x *IsCreateTableDoneRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

type IsCreateTableDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the create operation is completed, false otherwise
	Done          *bool `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCreateTableDoneResponsePB) Reset() {
	*x = IsCreateTableDoneResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCreateTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateTableDoneResponsePB) ProtoMessage() {}

func (x *IsCreateTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsCreateTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{6}
}

func (x *IsCreateTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsCreateTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type ListTablesRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When used, only returns tables that satisfy a substring match on name_filter.
	NameFilter *string `protobuf:"bytes,1,opt,name=name_filter,json=nameFilter" json:"name_filter,omitempty"`
	// Can be used to list tables for this one particular namespace.
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// Exclude system tables.
	ExcludeSystemTables *bool `protobuf:"varint,3,opt,name=exclude_system_tables,json=excludeSystemTables,def=0" json:"exclude_system_tables,omitempty"`
	// Can be used to filter tables based on RelationType
	RelationTypeFilter []RelationType `protobuf:"varint,4,rep,name=relation_type_filter,json=relationTypeFilter,enum=yb.master.RelationType" json:"relation_type_filter,omitempty"`
	IncludeNotRunning  *bool          `protobuf:"varint,5,opt,name=include_not_running,json=includeNotRunning" json:"include_not_running,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for ListTablesRequestPB fields.
const (
	Default_ListTablesRequestPB_ExcludeSystemTables = bool(false)
)

func (x *ListTablesRequestPB) Reset() {
	*x = ListTablesRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequestPB) ProtoMessage() {}

func (x *ListTablesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequestPB.ProtoReflect.Descriptor instead.
func (*ListTablesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{7}
}

func (x *ListTablesRequestPB) GetNameFilter() string {
	if x != nil && x.NameFilter != nil {
		return *x.NameFilter
	}
	return ""
}

func (x *ListTablesRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ListTablesRequestPB) GetExcludeSystemTables() bool {
	if x != nil && x.ExcludeSystemTables != nil {
		return *x.ExcludeSystemTables
	}
	return Default_ListTablesRequestPB_ExcludeSystemTables
}

func (x *ListTablesRequestPB) GetRelationTypeFilter() []RelationType {
	if x != nil {
		return x.RelationTypeFilter
	}
	return nil
}

func (x *ListTablesRequestPB) GetIncludeNotRunning() bool {
	if x != nil && x.IncludeNotRunning != nil {
		return *x.IncludeNotRunning
	}
	return false
}

type ListTablesResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB                    `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Tables        []*ListTablesResponsePB_TableInfo `protobuf:"bytes,2,rep,name=tables" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesResponsePB) Reset() {
	*x = ListTablesResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponsePB) ProtoMessage() {}

func (x *ListTablesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponsePB.ProtoReflect.Descriptor instead.
func (*ListTablesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{8}
}

func (x *ListTablesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTablesResponsePB) GetTables() []*ListTablesResponsePB_TableInfo {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetTableSchemaRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *TableIdentifierPB     `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	IncludeHidden *bool                  `protobuf:"varint,2,opt,name=include_hidden,json=includeHidden" json:"include_hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableSchemaRequestPB) Reset() {
	*x = GetTableSchemaRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableSchemaRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableSchemaRequestPB) ProtoMessage() {}

func (x *GetTableSchemaRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableSchemaRequestPB.ProtoReflect.Descriptor instead.
func (*GetTableSchemaRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{9}
}

func (x *GetTableSchemaRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *GetTableSchemaRequestPB) GetIncludeHidden() bool {
	if x != nil && x.IncludeHidden != nil {
		return *x.IncludeHidden
	}
	return false
}

type GetTableSchemaResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// This is the schema that every TS should be able to understand
	// if your alter is keeping the schema compatible.
	// In case of an alter table in progress, this is the previous schema;
	// otherwise it is the latest schema.
	Schema *common.SchemaPB `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	// Table schema version
	Version *uint32 `protobuf:"varint,9,opt,name=version" json:"version,omitempty"`
	// The table's partition schema.
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,5,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	ReplicationInfo *ReplicationInfoPB        `protobuf:"bytes,3,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	// True if the create operation is completed, false otherwise.
	CreateTableDone *bool `protobuf:"varint,6,opt,name=create_table_done,json=createTableDone" json:"create_table_done,omitempty"`
	// The table type.
	TableType *common.TableType `protobuf:"varint,7,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	// Table identifier
	Identifier *TableIdentifierPB `protobuf:"bytes,8,opt,name=identifier" json:"identifier,omitempty"`
	// Secondary indexes of the table.
	Indexes []*common.IndexInfoPB `protobuf:"bytes,10,rep,name=indexes" json:"indexes,omitempty"`
	// For index table: [to be deprecated and replaced by "index_info"]
	OBSOLETEIndexedTableId []byte `protobuf:"bytes,11,opt,name=OBSOLETE_indexed_table_id,json=OBSOLETEIndexedTableId" json:"OBSOLETE_indexed_table_id,omitempty"` // Indexed table id of this index.
	// For index table: information about this index.
	IndexInfo *common.IndexInfoPB `protobuf:"bytes,12,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// True if table is colocated (including tablegroups, excluding YSQL system tables).
	Colocated                       *bool                        `protobuf:"varint,13,opt,name=colocated" json:"colocated,omitempty"`
	TablegroupId                    []byte                       `protobuf:"bytes,16,opt,name=tablegroup_id,json=tablegroupId" json:"tablegroup_id,omitempty"`
	IsCompatibleWithPreviousVersion *bool                        `protobuf:"varint,14,opt,name=is_compatible_with_previous_version,json=isCompatibleWithPreviousVersion,def=0" json:"is_compatible_with_previous_version,omitempty"`
	WalRetentionSecs                *uint32                      `protobuf:"varint,15,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	YsqlDdlTxnVerifierState         []*YsqlDdlTxnVerifierStatePB `protobuf:"bytes,17,rep,name=ysql_ddl_txn_verifier_state,json=ysqlDdlTxnVerifierState" json:"ysql_ddl_txn_verifier_state,omitempty"`
	// If the table is rewritten, this field explicitly stores the PG table id.
	PgTableId []byte `protobuf:"bytes,18,opt,name=pg_table_id,json=pgTableId" json:"pg_table_id,omitempty"`
	// Added on Oct 2024 (v2025.1). This will not be set on versions before this
	// change, and there is no direct AutoFlag protecting this, so use with
	// caution.
	IsBackfilling *bool `protobuf:"varint,19,opt,name=is_backfilling,json=isBackfilling" json:"is_backfilling,omitempty"` // [default = false]
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GetTableSchemaResponsePB fields.
const (
	Default_GetTableSchemaResponsePB_IsCompatibleWithPreviousVersion = bool(false)
)

func (x *GetTableSchemaResponsePB) Reset() {
	*x = GetTableSchemaResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableSchemaResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableSchemaResponsePB) ProtoMessage() {}

func (x *GetTableSchemaResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableSchemaResponsePB.ProtoReflect.Descriptor instead.
func (*GetTableSchemaResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{10}
}

func (x *GetTableSchemaResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *GetTableSchemaResponsePB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetCreateTableDone() bool {
	if x != nil && x.CreateTableDone != nil {
		return *x.CreateTableDone
	}
	return false
}

func (x *GetTableSchemaResponsePB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType(2)
}

func (x *GetTableSchemaResponsePB) GetIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetOBSOLETEIndexedTableId() []byte {
	if x != nil {
		return x.OBSOLETEIndexedTableId
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return false
}

func (x *GetTableSchemaResponsePB) GetTablegroupId() []byte {
	if x != nil {
		return x.TablegroupId
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetIsCompatibleWithPreviousVersion() bool {
	if x != nil && x.IsCompatibleWithPreviousVersion != nil {
		return *x.IsCompatibleWithPreviousVersion
	}
	return Default_GetTableSchemaResponsePB_IsCompatibleWithPreviousVersion
}

func (x *GetTableSchemaResponsePB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *GetTableSchemaResponsePB) GetYsqlDdlTxnVerifierState() []*YsqlDdlTxnVerifierStatePB {
	if x != nil {
		return x.YsqlDdlTxnVerifierState
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetPgTableId() []byte {
	if x != nil {
		return x.PgTableId
	}
	return nil
}

func (x *GetTableSchemaResponsePB) GetIsBackfilling() bool {
	if x != nil && x.IsBackfilling != nil {
		return *x.IsBackfilling
	}
	return false
}

type GetTablegroupSchemaRequestPB struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Tablegroup    *TablegroupIdentifierPB `protobuf:"bytes,1,req,name=tablegroup" json:"tablegroup,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTablegroupSchemaRequestPB) Reset() {
	*x = GetTablegroupSchemaRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablegroupSchemaRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablegroupSchemaRequestPB) ProtoMessage() {}

func (x *GetTablegroupSchemaRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablegroupSchemaRequestPB.ProtoReflect.Descriptor instead.
func (*GetTablegroupSchemaRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{11}
}

func (x *GetTablegroupSchemaRequestPB) GetTablegroup() *TablegroupIdentifierPB {
	if x != nil {
		return x.Tablegroup
	}
	return nil
}

type GetTablegroupSchemaResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// List of all tables in this tablegroup.
	GetTableSchemaResponsePbs []*GetTableSchemaResponsePB `protobuf:"bytes,2,rep,name=get_table_schema_response_pbs,json=getTableSchemaResponsePbs" json:"get_table_schema_response_pbs,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetTablegroupSchemaResponsePB) Reset() {
	*x = GetTablegroupSchemaResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTablegroupSchemaResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTablegroupSchemaResponsePB) ProtoMessage() {}

func (x *GetTablegroupSchemaResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTablegroupSchemaResponsePB.ProtoReflect.Descriptor instead.
func (*GetTablegroupSchemaResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{12}
}

func (x *GetTablegroupSchemaResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTablegroupSchemaResponsePB) GetGetTableSchemaResponsePbs() []*GetTableSchemaResponsePB {
	if x != nil {
		return x.GetTableSchemaResponsePbs
	}
	return nil
}

type GetColocatedTabletSchemaRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ParentColocatedTable *TableIdentifierPB     `protobuf:"bytes,1,req,name=parent_colocated_table,json=parentColocatedTable" json:"parent_colocated_table,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetColocatedTabletSchemaRequestPB) Reset() {
	*x = GetColocatedTabletSchemaRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetColocatedTabletSchemaRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColocatedTabletSchemaRequestPB) ProtoMessage() {}

func (x *GetColocatedTabletSchemaRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColocatedTabletSchemaRequestPB.ProtoReflect.Descriptor instead.
func (*GetColocatedTabletSchemaRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{13}
}

func (x *GetColocatedTabletSchemaRequestPB) GetParentColocatedTable() *TableIdentifierPB {
	if x != nil {
		return x.ParentColocatedTable
	}
	return nil
}

type GetColocatedTabletSchemaResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// List of all colocated user tables in this colocated database.
	GetTableSchemaResponsePbs []*GetTableSchemaResponsePB `protobuf:"bytes,2,rep,name=get_table_schema_response_pbs,json=getTableSchemaResponsePbs" json:"get_table_schema_response_pbs,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetColocatedTabletSchemaResponsePB) Reset() {
	*x = GetColocatedTabletSchemaResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetColocatedTabletSchemaResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColocatedTabletSchemaResponsePB) ProtoMessage() {}

func (x *GetColocatedTabletSchemaResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColocatedTabletSchemaResponsePB.ProtoReflect.Descriptor instead.
func (*GetColocatedTabletSchemaResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{14}
}

func (x *GetColocatedTabletSchemaResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetColocatedTabletSchemaResponsePB) GetGetTableSchemaResponsePbs() []*GetTableSchemaResponsePB {
	if x != nil {
		return x.GetTableSchemaResponsePbs
	}
	return nil
}

type TruncateTableRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableIds      [][]byte               `protobuf:"bytes,1,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TruncateTableRequestPB) Reset() {
	*x = TruncateTableRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruncateTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateTableRequestPB) ProtoMessage() {}

func (x *TruncateTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateTableRequestPB.ProtoReflect.Descriptor instead.
func (*TruncateTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{15}
}

func (x *TruncateTableRequestPB) GetTableIds() [][]byte {
	if x != nil {
		return x.TableIds
	}
	return nil
}

type TruncateTableResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TruncateTableResponsePB) Reset() {
	*x = TruncateTableResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruncateTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateTableResponsePB) ProtoMessage() {}

func (x *TruncateTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateTableResponsePB.ProtoReflect.Descriptor instead.
func (*TruncateTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{16}
}

func (x *TruncateTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsTruncateTableDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       []byte                 `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsTruncateTableDoneRequestPB) Reset() {
	*x = IsTruncateTableDoneRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTruncateTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTruncateTableDoneRequestPB) ProtoMessage() {}

func (x *IsTruncateTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTruncateTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsTruncateTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{17}
}

func (x *IsTruncateTableDoneRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type IsTruncateTableDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the truncate operation is completed, false otherwise
	Done          *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsTruncateTableDoneResponsePB) Reset() {
	*x = IsTruncateTableDoneResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTruncateTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTruncateTableDoneResponsePB) ProtoMessage() {}

func (x *IsTruncateTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTruncateTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsTruncateTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{18}
}

func (x *IsTruncateTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsTruncateTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type BackfillIndexRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The index to backfill. Used for YSQL
	IndexIdentifier *TableIdentifierPB `protobuf:"bytes,1,opt,name=index_identifier,json=indexIdentifier" json:"index_identifier,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BackfillIndexRequestPB) Reset() {
	*x = BackfillIndexRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackfillIndexRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexRequestPB) ProtoMessage() {}

func (x *BackfillIndexRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexRequestPB.ProtoReflect.Descriptor instead.
func (*BackfillIndexRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{19}
}

func (x *BackfillIndexRequestPB) GetIndexIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.IndexIdentifier
	}
	return nil
}

type BackfillIndexResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// The indexed table to backfill.
	TableIdentifier *TableIdentifierPB `protobuf:"bytes,2,opt,name=table_identifier,json=tableIdentifier" json:"table_identifier,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BackfillIndexResponsePB) Reset() {
	*x = BackfillIndexResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackfillIndexResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexResponsePB) ProtoMessage() {}

func (x *BackfillIndexResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexResponsePB.ProtoReflect.Descriptor instead.
func (*BackfillIndexResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{20}
}

func (x *BackfillIndexResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetTableIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

type LaunchBackfillIndexForTableRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The indexed table identifier. Used for YCQL tables from yb-admin.
	TableIdentifier *TableIdentifierPB `protobuf:"bytes,1,opt,name=table_identifier,json=tableIdentifier" json:"table_identifier,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LaunchBackfillIndexForTableRequestPB) Reset() {
	*x = LaunchBackfillIndexForTableRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchBackfillIndexForTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchBackfillIndexForTableRequestPB) ProtoMessage() {}

func (x *LaunchBackfillIndexForTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchBackfillIndexForTableRequestPB.ProtoReflect.Descriptor instead.
func (*LaunchBackfillIndexForTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{21}
}

func (x *LaunchBackfillIndexForTableRequestPB) GetTableIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

type LaunchBackfillIndexForTableResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LaunchBackfillIndexForTableResponsePB) Reset() {
	*x = LaunchBackfillIndexForTableResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchBackfillIndexForTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchBackfillIndexForTableResponsePB) ProtoMessage() {}

func (x *LaunchBackfillIndexForTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchBackfillIndexForTableResponsePB.ProtoReflect.Descriptor instead.
func (*LaunchBackfillIndexForTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{22}
}

func (x *LaunchBackfillIndexForTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetBackfillJobsRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The indexed table identifier. Used for YCQL tables from yb-admin.
	TableIdentifier *TableIdentifierPB `protobuf:"bytes,1,opt,name=table_identifier,json=tableIdentifier" json:"table_identifier,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetBackfillJobsRequestPB) Reset() {
	*x = GetBackfillJobsRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackfillJobsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackfillJobsRequestPB) ProtoMessage() {}

func (x *GetBackfillJobsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackfillJobsRequestPB.ProtoReflect.Descriptor instead.
func (*GetBackfillJobsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{23}
}

func (x *GetBackfillJobsRequestPB) GetTableIdentifier() *TableIdentifierPB {
	if x != nil {
		return x.TableIdentifier
	}
	return nil
}

type GetBackfillJobsResponsePB struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	BackfillJobs []*BackfillJobPB       `protobuf:"bytes,1,rep,name=backfill_jobs,json=backfillJobs" json:"backfill_jobs,omitempty"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBackfillJobsResponsePB) Reset() {
	*x = GetBackfillJobsResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackfillJobsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackfillJobsResponsePB) ProtoMessage() {}

func (x *GetBackfillJobsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackfillJobsResponsePB.ProtoReflect.Descriptor instead.
func (*GetBackfillJobsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{24}
}

func (x *GetBackfillJobsResponsePB) GetBackfillJobs() []*BackfillJobPB {
	if x != nil {
		return x.BackfillJobs
	}
	return nil
}

func (x *GetBackfillJobsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetBackfillStatusRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of index tables whose backfill status should be returned. Either table_id or
	// a pair of table_name and namespace should be specified to identify a table.
	IndexTables   []*TableIdentifierPB `protobuf:"bytes,1,rep,name=index_tables,json=indexTables" json:"index_tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBackfillStatusRequestPB) Reset() {
	*x = GetBackfillStatusRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackfillStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackfillStatusRequestPB) ProtoMessage() {}

func (x *GetBackfillStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackfillStatusRequestPB.ProtoReflect.Descriptor instead.
func (*GetBackfillStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{25}
}

func (x *GetBackfillStatusRequestPB) GetIndexTables() []*TableIdentifierPB {
	if x != nil {
		return x.IndexTables
	}
	return nil
}

type IndexStatusPB struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	IndexTable *TableIdentifierPB     `protobuf:"bytes,1,opt,name=index_table,json=indexTable" json:"index_table,omitempty"`
	// Contains an error if it's not possible to get backfill_status and index permissions.
	Error *common.AppStatusPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// Backfill status for the specified index table on base of index permissions. Value absence means
	// either error field is specified, or backfill_status is not present in BackfillStatus enum.
	BackfillStatus *IndexStatusPB_BackfillStatus `protobuf:"varint,3,opt,name=backfill_status,json=backfillStatus,enum=yb.master.IndexStatusPB_BackfillStatus" json:"backfill_status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IndexStatusPB) Reset() {
	*x = IndexStatusPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexStatusPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStatusPB) ProtoMessage() {}

func (x *IndexStatusPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStatusPB.ProtoReflect.Descriptor instead.
func (*IndexStatusPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{26}
}

func (x *IndexStatusPB) GetIndexTable() *TableIdentifierPB {
	if x != nil {
		return x.IndexTable
	}
	return nil
}

func (x *IndexStatusPB) GetError() *common.AppStatusPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IndexStatusPB) GetBackfillStatus() IndexStatusPB_BackfillStatus {
	if x != nil && x.BackfillStatus != nil {
		return *x.BackfillStatus
	}
	return IndexStatusPB_BACKFILL_UNKNOWN
}

type GetBackfillStatusResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	IndexStatus   []*IndexStatusPB       `protobuf:"bytes,2,rep,name=index_status,json=indexStatus" json:"index_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBackfillStatusResponsePB) Reset() {
	*x = GetBackfillStatusResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackfillStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackfillStatusResponsePB) ProtoMessage() {}

func (x *GetBackfillStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackfillStatusResponsePB.ProtoReflect.Descriptor instead.
func (*GetBackfillStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{27}
}

func (x *GetBackfillStatusResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetBackfillStatusResponsePB) GetIndexStatus() []*IndexStatusPB {
	if x != nil {
		return x.IndexStatus
	}
	return nil
}

// Delete table request (including index table).
type DeleteTableRequestPB struct {
	state                    protoimpl.MessageState        `protogen:"open.v1"`
	Table                    *TableIdentifierPB            `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	IsIndexTable             *bool                         `protobuf:"varint,2,opt,name=is_index_table,json=isIndexTable,def=0" json:"is_index_table,omitempty"`
	Transaction              *common.TransactionMetadataPB `protobuf:"bytes,3,opt,name=transaction" json:"transaction,omitempty"`
	YsqlYbDdlRollbackEnabled *bool                         `protobuf:"varint,4,opt,name=ysql_yb_ddl_rollback_enabled,json=ysqlYbDdlRollbackEnabled,def=0" json:"ysql_yb_ddl_rollback_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for DeleteTableRequestPB fields.
const (
	Default_DeleteTableRequestPB_IsIndexTable             = bool(false)
	Default_DeleteTableRequestPB_YsqlYbDdlRollbackEnabled = bool(false)
)

func (x *DeleteTableRequestPB) Reset() {
	*x = DeleteTableRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequestPB) ProtoMessage() {}

func (x *DeleteTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteTableRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *DeleteTableRequestPB) GetIsIndexTable() bool {
	if x != nil && x.IsIndexTable != nil {
		return *x.IsIndexTable
	}
	return Default_DeleteTableRequestPB_IsIndexTable
}

func (x *DeleteTableRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *DeleteTableRequestPB) GetYsqlYbDdlRollbackEnabled() bool {
	if x != nil && x.YsqlYbDdlRollbackEnabled != nil {
		return *x.YsqlYbDdlRollbackEnabled
	}
	return Default_DeleteTableRequestPB_YsqlYbDdlRollbackEnabled
}

type DeleteTableResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// table_id for the requested table.
	TableId []byte `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Deleted table ids. Includes the requested table, and also
	// any index tables that it may have.
	DeletedTableIds [][]byte `protobuf:"bytes,4,rep,name=deleted_table_ids,json=deletedTableIds" json:"deleted_table_ids,omitempty"`
	// For index table, the indexed table of this index.
	IndexedTable  *TableIdentifierPB `protobuf:"bytes,3,opt,name=indexed_table,json=indexedTable" json:"indexed_table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTableResponsePB) Reset() {
	*x = DeleteTableResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableResponsePB) ProtoMessage() {}

func (x *DeleteTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteTableResponsePB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *DeleteTableResponsePB) GetDeletedTableIds() [][]byte {
	if x != nil {
		return x.DeletedTableIds
	}
	return nil
}

func (x *DeleteTableResponsePB) GetIndexedTable() *TableIdentifierPB {
	if x != nil {
		return x.IndexedTable
	}
	return nil
}

type IsDeleteTableDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       []byte                 `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsDeleteTableDoneRequestPB) Reset() {
	*x = IsDeleteTableDoneRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsDeleteTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteTableDoneRequestPB) ProtoMessage() {}

func (x *IsDeleteTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsDeleteTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{30}
}

func (x *IsDeleteTableDoneRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

type IsDeleteTableDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the delete operation is completed, false otherwise
	Done          *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsDeleteTableDoneResponsePB) Reset() {
	*x = IsDeleteTableDoneResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsDeleteTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteTableDoneResponsePB) ProtoMessage() {}

func (x *IsDeleteTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsDeleteTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{31}
}

func (x *IsDeleteTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsDeleteTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type AlterTableRequestPB struct {
	state            protoimpl.MessageState      `protogen:"open.v1"`
	Table            *TableIdentifierPB          `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	AlterSchemaSteps []*AlterTableRequestPB_Step `protobuf:"bytes,2,rep,name=alter_schema_steps,json=alterSchemaSteps" json:"alter_schema_steps,omitempty"`
	NewTableName     *string                     `protobuf:"bytes,3,opt,name=new_table_name,json=newTableName" json:"new_table_name,omitempty"`
	NewNamespace     *NamespaceIdentifierPB      `protobuf:"bytes,4,opt,name=new_namespace,json=newNamespace" json:"new_namespace,omitempty"`
	AlterProperties  *common.TablePropertiesPB   `protobuf:"bytes,5,opt,name=alter_properties,json=alterProperties" json:"alter_properties,omitempty"`
	WalRetentionSecs *uint32                     `protobuf:"varint,6,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	// If set to true, SendAlterTableRequest will be sent even if no changes are specified in this
	// request.
	// This is useful to trigger index permissions update.
	ForceSendAlterRequest *bool `protobuf:"varint,7,opt,name=force_send_alter_request,json=forceSendAlterRequest,def=0" json:"force_send_alter_request,omitempty"`
	// Replication information for this table.
	ReplicationInfo *ReplicationInfoPB `protobuf:"bytes,8,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	// This is the transaction performing the Alter operation. This is used by TServers to abort
	// any ongoing DML on the table other than this transaction.
	Transaction *common.TransactionMetadataPB `protobuf:"bytes,9,opt,name=transaction" json:"transaction,omitempty"`
	// If set, updates the pgschema_name in SchemaPB.
	PgschemaName *string `protobuf:"bytes,10,opt,name=pgschema_name,json=pgschemaName" json:"pgschema_name,omitempty"`
	// Used for YSQL to notify DocDB of DDL changes that affect only PG metadata
	IncrementSchemaVersion *bool `protobuf:"varint,11,opt,name=increment_schema_version,json=incrementSchemaVersion,def=0" json:"increment_schema_version,omitempty"`
	// If set, YB-Master will poll the status of 'transaction' and rollback the Alter if failed.
	YsqlYbDdlRollbackEnabled *bool `protobuf:"varint,12,opt,name=ysql_yb_ddl_rollback_enabled,json=ysqlYbDdlRollbackEnabled,def=0" json:"ysql_yb_ddl_rollback_enabled,omitempty"`
	// For CDCSDK Stream creation with consistent snapshot
	CdcSdkStreamId             []byte `protobuf:"bytes,13,opt,name=cdc_sdk_stream_id,json=cdcSdkStreamId" json:"cdc_sdk_stream_id,omitempty"`
	CdcSdkRequireHistoryCutoff *bool  `protobuf:"varint,14,opt,name=cdc_sdk_require_history_cutoff,json=cdcSdkRequireHistoryCutoff" json:"cdc_sdk_require_history_cutoff,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for AlterTableRequestPB fields.
const (
	Default_AlterTableRequestPB_ForceSendAlterRequest    = bool(false)
	Default_AlterTableRequestPB_IncrementSchemaVersion   = bool(false)
	Default_AlterTableRequestPB_YsqlYbDdlRollbackEnabled = bool(false)
)

func (x *AlterTableRequestPB) Reset() {
	*x = AlterTableRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB) ProtoMessage() {}

func (x *AlterTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{32}
}

func (x *AlterTableRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *AlterTableRequestPB) GetAlterSchemaSteps() []*AlterTableRequestPB_Step {
	if x != nil {
		return x.AlterSchemaSteps
	}
	return nil
}

func (x *AlterTableRequestPB) GetNewTableName() string {
	if x != nil && x.NewTableName != nil {
		return *x.NewTableName
	}
	return ""
}

func (x *AlterTableRequestPB) GetNewNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.NewNamespace
	}
	return nil
}

func (x *AlterTableRequestPB) GetAlterProperties() *common.TablePropertiesPB {
	if x != nil {
		return x.AlterProperties
	}
	return nil
}

func (x *AlterTableRequestPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *AlterTableRequestPB) GetForceSendAlterRequest() bool {
	if x != nil && x.ForceSendAlterRequest != nil {
		return *x.ForceSendAlterRequest
	}
	return Default_AlterTableRequestPB_ForceSendAlterRequest
}

func (x *AlterTableRequestPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *AlterTableRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *AlterTableRequestPB) GetPgschemaName() string {
	if x != nil && x.PgschemaName != nil {
		return *x.PgschemaName
	}
	return ""
}

func (x *AlterTableRequestPB) GetIncrementSchemaVersion() bool {
	if x != nil && x.IncrementSchemaVersion != nil {
		return *x.IncrementSchemaVersion
	}
	return Default_AlterTableRequestPB_IncrementSchemaVersion
}

func (x *AlterTableRequestPB) GetYsqlYbDdlRollbackEnabled() bool {
	if x != nil && x.YsqlYbDdlRollbackEnabled != nil {
		return *x.YsqlYbDdlRollbackEnabled
	}
	return Default_AlterTableRequestPB_YsqlYbDdlRollbackEnabled
}

func (x *AlterTableRequestPB) GetCdcSdkStreamId() []byte {
	if x != nil {
		return x.CdcSdkStreamId
	}
	return nil
}

func (x *AlterTableRequestPB) GetCdcSdkRequireHistoryCutoff() bool {
	if x != nil && x.CdcSdkRequireHistoryCutoff != nil {
		return *x.CdcSdkRequireHistoryCutoff
	}
	return false
}

type AlterTableResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	SchemaVersion *uint32        `protobuf:"varint,2,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterTableResponsePB) Reset() {
	*x = AlterTableResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableResponsePB) ProtoMessage() {}

func (x *AlterTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableResponsePB.ProtoReflect.Descriptor instead.
func (*AlterTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{33}
}

func (x *AlterTableResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AlterTableResponsePB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

type IsAlterTableDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Table         *TableIdentifierPB     `protobuf:"bytes,1,req,name=table" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAlterTableDoneRequestPB) Reset() {
	*x = IsAlterTableDoneRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAlterTableDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAlterTableDoneRequestPB) ProtoMessage() {}

func (x *IsAlterTableDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAlterTableDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsAlterTableDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{34}
}

func (x *IsAlterTableDoneRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

type IsAlterTableDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// this is the current schema, or the 'new' schema version if an alter is in progress
	SchemaVersion *uint32 `protobuf:"varint,2,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	// true if the alter operation is completed, false otherwise
	Done          *bool `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsAlterTableDoneResponsePB) Reset() {
	*x = IsAlterTableDoneResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsAlterTableDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsAlterTableDoneResponsePB) ProtoMessage() {}

func (x *IsAlterTableDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsAlterTableDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsAlterTableDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{35}
}

func (x *IsAlterTableDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsAlterTableDoneResponsePB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *IsAlterTableDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type GetTableDiskSizeRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GetTableDiskSizePB used for YSQL \d+ command
	Table         *TableIdentifierPB `protobuf:"bytes,1,opt,name=table" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableDiskSizeRequestPB) Reset() {
	*x = GetTableDiskSizeRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableDiskSizeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableDiskSizeRequestPB) ProtoMessage() {}

func (x *GetTableDiskSizeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableDiskSizeRequestPB.ProtoReflect.Descriptor instead.
func (*GetTableDiskSizeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{36}
}

func (x *GetTableDiskSizeRequestPB) GetTable() *TableIdentifierPB {
	if x != nil {
		return x.Table
	}
	return nil
}

type GetTableDiskSizeResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Size is 0 for colocated tables
	Size              *int64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	NumMissingTablets *int32 `protobuf:"varint,3,opt,name=num_missing_tablets,json=numMissingTablets" json:"num_missing_tablets,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetTableDiskSizeResponsePB) Reset() {
	*x = GetTableDiskSizeResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableDiskSizeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableDiskSizeResponsePB) ProtoMessage() {}

func (x *GetTableDiskSizeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableDiskSizeResponsePB.ProtoReflect.Descriptor instead.
func (*GetTableDiskSizeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{37}
}

func (x *GetTableDiskSizeResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTableDiskSizeResponsePB) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *GetTableDiskSizeResponsePB) GetNumMissingTablets() int32 {
	if x != nil && x.NumMissingTablets != nil {
		return *x.NumMissingTablets
	}
	return 0
}

// ============================================================================
//
//	Namespace  (default namespace = ANY placement)
//
// ============================================================================
// Database type is added to metadata entries such that PGSQL clients cannot delete or connect to
// CQL database_type and vice versa.
type CreateNamespaceRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Database type.
	DatabaseType *common.YQLDatabase `protobuf:"varint,2,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
	// For RBAC.
	CreatorRoleName *string `protobuf:"bytes,3,opt,name=creator_role_name,json=creatorRoleName" json:"creator_role_name,omitempty"`
	// For Postgres:
	NamespaceId       []byte  `protobuf:"bytes,4,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`                     // id to assign to this namespace.
	SourceNamespaceId []byte  `protobuf:"bytes,5,opt,name=source_namespace_id,json=sourceNamespaceId" json:"source_namespace_id,omitempty"` // namespace id of the source database to copy from.
	NextPgOid         *uint32 `protobuf:"varint,6,opt,name=next_pg_oid,json=nextPgOid" json:"next_pg_oid,omitempty"`                        // Next oid to assign. Ignored when source_namespace_id is given
	// and the next_pg_oid from source namespace will be used.
	// DDL Dependent upon Transaction success (abort removes). Used by YSQL.
	Transaction *common.TransactionMetadataPB `protobuf:"bytes,8,opt,name=transaction" json:"transaction,omitempty"`
	// True if the namespace is colocated.
	Colocated     *bool `protobuf:"varint,7,opt,name=colocated,def=0" json:"colocated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CreateNamespaceRequestPB fields.
const (
	Default_CreateNamespaceRequestPB_DatabaseType = common.YQLDatabase(2) // common.YQLDatabase_YQL_DATABASE_CQL
	Default_CreateNamespaceRequestPB_Colocated    = bool(false)
)

func (x *CreateNamespaceRequestPB) Reset() {
	*x = CreateNamespaceRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNamespaceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRequestPB) ProtoMessage() {}

func (x *CreateNamespaceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRequestPB.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{38}
}

func (x *CreateNamespaceRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateNamespaceRequestPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_CreateNamespaceRequestPB_DatabaseType
}

func (x *CreateNamespaceRequestPB) GetCreatorRoleName() string {
	if x != nil && x.CreatorRoleName != nil {
		return *x.CreatorRoleName
	}
	return ""
}

func (x *CreateNamespaceRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CreateNamespaceRequestPB) GetSourceNamespaceId() []byte {
	if x != nil {
		return x.SourceNamespaceId
	}
	return nil
}

func (x *CreateNamespaceRequestPB) GetNextPgOid() uint32 {
	if x != nil && x.NextPgOid != nil {
		return *x.NextPgOid
	}
	return 0
}

func (x *CreateNamespaceRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *CreateNamespaceRequestPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_CreateNamespaceRequestPB_Colocated
}

type CreateNamespaceResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Id            []byte         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNamespaceResponsePB) Reset() {
	*x = CreateNamespaceResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNamespaceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceResponsePB) ProtoMessage() {}

func (x *CreateNamespaceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceResponsePB.ProtoReflect.Descriptor instead.
func (*CreateNamespaceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{39}
}

func (x *CreateNamespaceResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateNamespaceResponsePB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type IsCreateNamespaceDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCreateNamespaceDoneRequestPB) Reset() {
	*x = IsCreateNamespaceDoneRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCreateNamespaceDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateNamespaceDoneRequestPB) ProtoMessage() {}

func (x *IsCreateNamespaceDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateNamespaceDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsCreateNamespaceDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{40}
}

func (x *IsCreateNamespaceDoneRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type IsCreateNamespaceDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the create operation is completed, false otherwise
	Done          *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsCreateNamespaceDoneResponsePB) Reset() {
	*x = IsCreateNamespaceDoneResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsCreateNamespaceDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCreateNamespaceDoneResponsePB) ProtoMessage() {}

func (x *IsCreateNamespaceDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCreateNamespaceDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsCreateNamespaceDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{41}
}

func (x *IsCreateNamespaceDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsCreateNamespaceDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

// Database type is added to metadata entries such that PGSQL clients cannot delete or connect to
// CQL database_type and vice versa.
type DeleteNamespaceRequestPB struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// Database type.
	DatabaseType  *common.YQLDatabase `protobuf:"varint,2,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for DeleteNamespaceRequestPB fields.
const (
	Default_DeleteNamespaceRequestPB_DatabaseType = common.YQLDatabase(2) // common.YQLDatabase_YQL_DATABASE_CQL
)

func (x *DeleteNamespaceRequestPB) Reset() {
	*x = DeleteNamespaceRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNamespaceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRequestPB) ProtoMessage() {}

func (x *DeleteNamespaceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteNamespaceRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *DeleteNamespaceRequestPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_DeleteNamespaceRequestPB_DatabaseType
}

type DeleteNamespaceResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNamespaceResponsePB) Reset() {
	*x = DeleteNamespaceResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNamespaceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceResponsePB) ProtoMessage() {}

func (x *DeleteNamespaceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteNamespaceResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsDeleteNamespaceDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsDeleteNamespaceDoneRequestPB) Reset() {
	*x = IsDeleteNamespaceDoneRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsDeleteNamespaceDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteNamespaceDoneRequestPB) ProtoMessage() {}

func (x *IsDeleteNamespaceDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteNamespaceDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsDeleteNamespaceDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{44}
}

func (x *IsDeleteNamespaceDoneRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type IsDeleteNamespaceDoneResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// true if the delete operation completed, false otherwise
	Done          *bool `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsDeleteNamespaceDoneResponsePB) Reset() {
	*x = IsDeleteNamespaceDoneResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsDeleteNamespaceDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeleteNamespaceDoneResponsePB) ProtoMessage() {}

func (x *IsDeleteNamespaceDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeleteNamespaceDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsDeleteNamespaceDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{45}
}

func (x *IsDeleteNamespaceDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsDeleteNamespaceDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type AlterNamespaceRequestPB struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// New name for the namespace in the alter operation.
	NewName       *string `protobuf:"bytes,2,opt,name=new_name,json=newName" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterNamespaceRequestPB) Reset() {
	*x = AlterNamespaceRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterNamespaceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNamespaceRequestPB) ProtoMessage() {}

func (x *AlterNamespaceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNamespaceRequestPB.ProtoReflect.Descriptor instead.
func (*AlterNamespaceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{46}
}

func (x *AlterNamespaceRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *AlterNamespaceRequestPB) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

type AlterNamespaceResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterNamespaceResponsePB) Reset() {
	*x = AlterNamespaceResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterNamespaceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterNamespaceResponsePB) ProtoMessage() {}

func (x *AlterNamespaceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterNamespaceResponsePB.ProtoReflect.Descriptor instead.
func (*AlterNamespaceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{47}
}

func (x *AlterNamespaceResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListNamespacesRequestPB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DatabaseType      *common.YQLDatabase    `protobuf:"varint,1,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
	IncludeNonrunning *bool                  `protobuf:"varint,2,opt,name=include_nonrunning,json=includeNonrunning" json:"include_nonrunning,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ListNamespacesRequestPB fields.
const (
	Default_ListNamespacesRequestPB_DatabaseType = common.YQLDatabase(2) // common.YQLDatabase_YQL_DATABASE_CQL
)

func (x *ListNamespacesRequestPB) Reset() {
	*x = ListNamespacesRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespacesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesRequestPB) ProtoMessage() {}

func (x *ListNamespacesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesRequestPB.ProtoReflect.Descriptor instead.
func (*ListNamespacesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{48}
}

func (x *ListNamespacesRequestPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_ListNamespacesRequestPB_DatabaseType
}

func (x *ListNamespacesRequestPB) GetIncludeNonrunning() bool {
	if x != nil && x.IncludeNonrunning != nil {
		return *x.IncludeNonrunning
	}
	return false
}

type ListNamespacesResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error      *MasterErrorPB           `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Namespaces []*NamespaceIdentifierPB `protobuf:"bytes,2,rep,name=namespaces" json:"namespaces,omitempty"`
	States     []int32                  `protobuf:"varint,3,rep,name=states" json:"states,omitempty"`
	// We use int32 because the repeated bool type is bugged.
	// See https://github.com/yugabyte/yugabyte-db/issues/15868
	Colocated     []int32 `protobuf:"varint,4,rep,name=colocated" json:"colocated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespacesResponsePB) Reset() {
	*x = ListNamespacesResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespacesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesResponsePB) ProtoMessage() {}

func (x *ListNamespacesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesResponsePB.ProtoReflect.Descriptor instead.
func (*ListNamespacesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{49}
}

func (x *ListNamespacesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListNamespacesResponsePB) GetNamespaces() []*NamespaceIdentifierPB {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *ListNamespacesResponsePB) GetStates() []int32 {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *ListNamespacesResponsePB) GetColocated() []int32 {
	if x != nil {
		return x.Colocated
	}
	return nil
}

type GetNamespaceInfoRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNamespaceInfoRequestPB) Reset() {
	*x = GetNamespaceInfoRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNamespaceInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceInfoRequestPB) ProtoMessage() {}

func (x *GetNamespaceInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetNamespaceInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{50}
}

func (x *GetNamespaceInfoRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type GetNamespaceInfoResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error     *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Colocated *bool                  `protobuf:"varint,3,opt,name=colocated" json:"colocated,omitempty"`
	// This denotes if a colocated database is a legacy colocated database.
	LegacyColocatedDatabase *bool `protobuf:"varint,4,opt,name=legacy_colocated_database,json=legacyColocatedDatabase" json:"legacy_colocated_database,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetNamespaceInfoResponsePB) Reset() {
	*x = GetNamespaceInfoResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNamespaceInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespaceInfoResponsePB) ProtoMessage() {}

func (x *GetNamespaceInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespaceInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetNamespaceInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{51}
}

func (x *GetNamespaceInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetNamespaceInfoResponsePB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *GetNamespaceInfoResponsePB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return false
}

func (x *GetNamespaceInfoResponsePB) GetLegacyColocatedDatabase() bool {
	if x != nil && x.LegacyColocatedDatabase != nil {
		return *x.LegacyColocatedDatabase
	}
	return false
}

type CreateTablegroupRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	NamespaceId   []byte                 `protobuf:"bytes,2,req,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	NamespaceName *string                `protobuf:"bytes,3,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	// These two fields ensure that YB-Master will poll the status of 'transaction' and delete the
	// tablegroup if aborted.
	Transaction              *common.TransactionMetadataPB `protobuf:"bytes,5,opt,name=transaction" json:"transaction,omitempty"`
	YsqlYbDdlRollbackEnabled *bool                         `protobuf:"varint,6,opt,name=ysql_yb_ddl_rollback_enabled,json=ysqlYbDdlRollbackEnabled,def=0" json:"ysql_yb_ddl_rollback_enabled,omitempty"`
	// This denotes the tablespace that this tablegroup is associated with.
	TablespaceId  []byte `protobuf:"bytes,4,opt,name=tablespace_id,json=tablespaceId" json:"tablespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CreateTablegroupRequestPB fields.
const (
	Default_CreateTablegroupRequestPB_YsqlYbDdlRollbackEnabled = bool(false)
)

func (x *CreateTablegroupRequestPB) Reset() {
	*x = CreateTablegroupRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTablegroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTablegroupRequestPB) ProtoMessage() {}

func (x *CreateTablegroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTablegroupRequestPB.ProtoReflect.Descriptor instead.
func (*CreateTablegroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{52}
}

func (x *CreateTablegroupRequestPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CreateTablegroupRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CreateTablegroupRequestPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *CreateTablegroupRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *CreateTablegroupRequestPB) GetYsqlYbDdlRollbackEnabled() bool {
	if x != nil && x.YsqlYbDdlRollbackEnabled != nil {
		return *x.YsqlYbDdlRollbackEnabled
	}
	return Default_CreateTablegroupRequestPB_YsqlYbDdlRollbackEnabled
}

func (x *CreateTablegroupRequestPB) GetTablespaceId() []byte {
	if x != nil {
		return x.TablespaceId
	}
	return nil
}

type CreateTablegroupResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error           *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ParentTableId   []byte         `protobuf:"bytes,2,opt,name=parent_table_id,json=parentTableId" json:"parent_table_id,omitempty"`
	ParentTableName []byte         `protobuf:"bytes,3,opt,name=parent_table_name,json=parentTableName" json:"parent_table_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateTablegroupResponsePB) Reset() {
	*x = CreateTablegroupResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTablegroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTablegroupResponsePB) ProtoMessage() {}

func (x *CreateTablegroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTablegroupResponsePB.ProtoReflect.Descriptor instead.
func (*CreateTablegroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{53}
}

func (x *CreateTablegroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateTablegroupResponsePB) GetParentTableId() []byte {
	if x != nil {
		return x.ParentTableId
	}
	return nil
}

func (x *CreateTablegroupResponsePB) GetParentTableName() []byte {
	if x != nil {
		return x.ParentTableName
	}
	return nil
}

type DeleteTablegroupRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    []byte                 `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// These two fields ensure that YB-Master will first mark the tablegroup for deletion, poll the
	// status of 'transaction' and rollback the marker if failed. Otherwise deletion of the tablegroup
	// will be initiated upon receipt of this request.
	Transaction              *common.TransactionMetadataPB `protobuf:"bytes,3,opt,name=transaction" json:"transaction,omitempty"`
	YsqlYbDdlRollbackEnabled *bool                         `protobuf:"varint,4,opt,name=ysql_yb_ddl_rollback_enabled,json=ysqlYbDdlRollbackEnabled,def=0" json:"ysql_yb_ddl_rollback_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for DeleteTablegroupRequestPB fields.
const (
	Default_DeleteTablegroupRequestPB_YsqlYbDdlRollbackEnabled = bool(false)
)

func (x *DeleteTablegroupRequestPB) Reset() {
	*x = DeleteTablegroupRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTablegroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTablegroupRequestPB) ProtoMessage() {}

func (x *DeleteTablegroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTablegroupRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteTablegroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteTablegroupRequestPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeleteTablegroupRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *DeleteTablegroupRequestPB) GetYsqlYbDdlRollbackEnabled() bool {
	if x != nil && x.YsqlYbDdlRollbackEnabled != nil {
		return *x.YsqlYbDdlRollbackEnabled
	}
	return Default_DeleteTablegroupRequestPB_YsqlYbDdlRollbackEnabled
}

type DeleteTablegroupResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ParentTableId []byte         `protobuf:"bytes,2,opt,name=parent_table_id,json=parentTableId" json:"parent_table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTablegroupResponsePB) Reset() {
	*x = DeleteTablegroupResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTablegroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTablegroupResponsePB) ProtoMessage() {}

func (x *DeleteTablegroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTablegroupResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteTablegroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteTablegroupResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteTablegroupResponsePB) GetParentTableId() []byte {
	if x != nil {
		return x.ParentTableId
	}
	return nil
}

type ListTablegroupsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   []byte                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablegroupsRequestPB) Reset() {
	*x = ListTablegroupsRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablegroupsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablegroupsRequestPB) ProtoMessage() {}

func (x *ListTablegroupsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablegroupsRequestPB.ProtoReflect.Descriptor instead.
func (*ListTablegroupsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{56}
}

func (x *ListTablegroupsRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

type ListTablegroupsResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB            `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Tablegroups   []*TablegroupIdentifierPB `protobuf:"bytes,2,rep,name=tablegroups" json:"tablegroups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablegroupsResponsePB) Reset() {
	*x = ListTablegroupsResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablegroupsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablegroupsResponsePB) ProtoMessage() {}

func (x *ListTablegroupsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablegroupsResponsePB.ProtoReflect.Descriptor instead.
func (*ListTablegroupsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{57}
}

func (x *ListTablegroupsResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTablegroupsResponsePB) GetTablegroups() []*TablegroupIdentifierPB {
	if x != nil {
		return x.Tablegroups
	}
	return nil
}

type CreateUDTypeRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FieldNames    []string               `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	FieldTypes    []*common.QLTypePB     `protobuf:"bytes,4,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUDTypeRequestPB) Reset() {
	*x = CreateUDTypeRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUDTypeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUDTypeRequestPB) ProtoMessage() {}

func (x *CreateUDTypeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUDTypeRequestPB.ProtoReflect.Descriptor instead.
func (*CreateUDTypeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{58}
}

func (x *CreateUDTypeRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *CreateUDTypeRequestPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateUDTypeRequestPB) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *CreateUDTypeRequestPB) GetFieldTypes() []*common.QLTypePB {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

type CreateUDTypeResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Id            []byte         `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUDTypeResponsePB) Reset() {
	*x = CreateUDTypeResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUDTypeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUDTypeResponsePB) ProtoMessage() {}

func (x *CreateUDTypeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUDTypeResponsePB.ProtoReflect.Descriptor instead.
func (*CreateUDTypeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{59}
}

func (x *CreateUDTypeResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateUDTypeResponsePB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type DeleteUDTypeRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *UDTypeIdentifierPB    `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUDTypeRequestPB) Reset() {
	*x = DeleteUDTypeRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUDTypeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUDTypeRequestPB) ProtoMessage() {}

func (x *DeleteUDTypeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUDTypeRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteUDTypeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteUDTypeRequestPB) GetType() *UDTypeIdentifierPB {
	if x != nil {
		return x.Type
	}
	return nil
}

type DeleteUDTypeResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUDTypeResponsePB) Reset() {
	*x = DeleteUDTypeResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUDTypeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUDTypeResponsePB) ProtoMessage() {}

func (x *DeleteUDTypeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUDTypeResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteUDTypeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{61}
}

func (x *DeleteUDTypeResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListUDTypesRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     *NamespaceIdentifierPB `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUDTypesRequestPB) Reset() {
	*x = ListUDTypesRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUDTypesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUDTypesRequestPB) ProtoMessage() {}

func (x *ListUDTypesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUDTypesRequestPB.ProtoReflect.Descriptor instead.
func (*ListUDTypesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{62}
}

func (x *ListUDTypesRequestPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type ListUDTypesResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Udtypes       []*UDTypeInfoPB `protobuf:"bytes,2,rep,name=udtypes" json:"udtypes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUDTypesResponsePB) Reset() {
	*x = ListUDTypesResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUDTypesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUDTypesResponsePB) ProtoMessage() {}

func (x *ListUDTypesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUDTypesResponsePB.ProtoReflect.Descriptor instead.
func (*ListUDTypesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{63}
}

func (x *ListUDTypesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListUDTypesResponsePB) GetUdtypes() []*UDTypeInfoPB {
	if x != nil {
		return x.Udtypes
	}
	return nil
}

type GetUDTypeInfoRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *UDTypeIdentifierPB    `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUDTypeInfoRequestPB) Reset() {
	*x = GetUDTypeInfoRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUDTypeInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUDTypeInfoRequestPB) ProtoMessage() {}

func (x *GetUDTypeInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUDTypeInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetUDTypeInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{64}
}

func (x *GetUDTypeInfoRequestPB) GetType() *UDTypeIdentifierPB {
	if x != nil {
		return x.Type
	}
	return nil
}

type GetUDTypeInfoResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error, if an error occurred with this request.
	Error         *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Udtype        *UDTypeInfoPB  `protobuf:"bytes,2,opt,name=udtype" json:"udtype,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUDTypeInfoResponsePB) Reset() {
	*x = GetUDTypeInfoResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUDTypeInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUDTypeInfoResponsePB) ProtoMessage() {}

func (x *GetUDTypeInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUDTypeInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetUDTypeInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{65}
}

func (x *GetUDTypeInfoResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUDTypeInfoResponsePB) GetUdtype() *UDTypeInfoPB {
	if x != nil {
		return x.Udtype
	}
	return nil
}

type ReportYsqlDdlTxnStatusRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transaction whose status is being reported.
	TransactionId []byte `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	// Whether the above transaction is committed or aborted.
	IsCommitted   *bool `protobuf:"varint,2,opt,name=is_committed,json=isCommitted" json:"is_committed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportYsqlDdlTxnStatusRequestPB) Reset() {
	*x = ReportYsqlDdlTxnStatusRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportYsqlDdlTxnStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportYsqlDdlTxnStatusRequestPB) ProtoMessage() {}

func (x *ReportYsqlDdlTxnStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportYsqlDdlTxnStatusRequestPB.ProtoReflect.Descriptor instead.
func (*ReportYsqlDdlTxnStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{66}
}

func (x *ReportYsqlDdlTxnStatusRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *ReportYsqlDdlTxnStatusRequestPB) GetIsCommitted() bool {
	if x != nil && x.IsCommitted != nil {
		return *x.IsCommitted
	}
	return false
}

type ReportYsqlDdlTxnStatusResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportYsqlDdlTxnStatusResponsePB) Reset() {
	*x = ReportYsqlDdlTxnStatusResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportYsqlDdlTxnStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportYsqlDdlTxnStatusResponsePB) ProtoMessage() {}

func (x *ReportYsqlDdlTxnStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportYsqlDdlTxnStatusResponsePB.ProtoReflect.Descriptor instead.
func (*ReportYsqlDdlTxnStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{67}
}

func (x *ReportYsqlDdlTxnStatusResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type IsYsqlDdlVerificationDoneRequestPB struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Transaction   *common.TransactionMetadataPB `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsYsqlDdlVerificationDoneRequestPB) Reset() {
	*x = IsYsqlDdlVerificationDoneRequestPB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsYsqlDdlVerificationDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsYsqlDdlVerificationDoneRequestPB) ProtoMessage() {}

func (x *IsYsqlDdlVerificationDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsYsqlDdlVerificationDoneRequestPB.ProtoReflect.Descriptor instead.
func (*IsYsqlDdlVerificationDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{68}
}

func (x *IsYsqlDdlVerificationDoneRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type IsYsqlDdlVerificationDoneResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *MasterErrorPB         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Done          *bool                  `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsYsqlDdlVerificationDoneResponsePB) Reset() {
	*x = IsYsqlDdlVerificationDoneResponsePB{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsYsqlDdlVerificationDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsYsqlDdlVerificationDoneResponsePB) ProtoMessage() {}

func (x *IsYsqlDdlVerificationDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsYsqlDdlVerificationDoneResponsePB.ProtoReflect.Descriptor instead.
func (*IsYsqlDdlVerificationDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{69}
}

func (x *IsYsqlDdlVerificationDoneResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsYsqlDdlVerificationDoneResponsePB) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

type ListTablesResponsePB_ColocatedInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Colocated     *bool                  `protobuf:"varint,1,opt,name=colocated" json:"colocated,omitempty"`
	ParentTableId []byte                 `protobuf:"bytes,2,opt,name=parent_table_id,json=parentTableId" json:"parent_table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesResponsePB_ColocatedInfo) Reset() {
	*x = ListTablesResponsePB_ColocatedInfo{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesResponsePB_ColocatedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponsePB_ColocatedInfo) ProtoMessage() {}

func (x *ListTablesResponsePB_ColocatedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponsePB_ColocatedInfo.ProtoReflect.Descriptor instead.
func (*ListTablesResponsePB_ColocatedInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListTablesResponsePB_ColocatedInfo) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return false
}

func (x *ListTablesResponsePB_ColocatedInfo) GetParentTableId() []byte {
	if x != nil {
		return x.ParentTableId
	}
	return nil
}

type ListTablesResponsePB_TableInfo struct {
	state          protoimpl.MessageState              `protogen:"open.v1"`
	Id             []byte                              `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Name           *string                             `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	TableType      *common.TableType                   `protobuf:"varint,3,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	Namespace      *NamespaceIdentifierPB              `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	RelationType   *RelationType                       `protobuf:"varint,5,opt,name=relation_type,json=relationType,enum=yb.master.RelationType,def=2" json:"relation_type,omitempty"`
	State          *SysTablesEntryPB_State             `protobuf:"varint,6,opt,name=state,enum=yb.master.SysTablesEntryPB_State" json:"state,omitempty"`
	PgschemaName   *string                             `protobuf:"bytes,7,opt,name=pgschema_name,json=pgschemaName" json:"pgschema_name,omitempty"`
	ColocatedInfo  *ListTablesResponsePB_ColocatedInfo `protobuf:"bytes,8,opt,name=colocated_info,json=colocatedInfo" json:"colocated_info,omitempty"`
	Hidden         *bool                               `protobuf:"varint,9,opt,name=hidden" json:"hidden,omitempty"`
	IndexedTableId *string                             `protobuf:"bytes,10,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ListTablesResponsePB_TableInfo fields.
const (
	Default_ListTablesResponsePB_TableInfo_RelationType = RelationType_USER_TABLE_RELATION
)

func (x *ListTablesResponsePB_TableInfo) Reset() {
	*x = ListTablesResponsePB_TableInfo{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesResponsePB_TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponsePB_TableInfo) ProtoMessage() {}

func (x *ListTablesResponsePB_TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponsePB_TableInfo.ProtoReflect.Descriptor instead.
func (*ListTablesResponsePB_TableInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ListTablesResponsePB_TableInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListTablesResponsePB_TableInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListTablesResponsePB_TableInfo) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType(2)
}

func (x *ListTablesResponsePB_TableInfo) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ListTablesResponsePB_TableInfo) GetRelationType() RelationType {
	if x != nil && x.RelationType != nil {
		return *x.RelationType
	}
	return Default_ListTablesResponsePB_TableInfo_RelationType
}

func (x *ListTablesResponsePB_TableInfo) GetState() SysTablesEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SysTablesEntryPB_UNKNOWN
}

func (x *ListTablesResponsePB_TableInfo) GetPgschemaName() string {
	if x != nil && x.PgschemaName != nil {
		return *x.PgschemaName
	}
	return ""
}

func (x *ListTablesResponsePB_TableInfo) GetColocatedInfo() *ListTablesResponsePB_ColocatedInfo {
	if x != nil {
		return x.ColocatedInfo
	}
	return nil
}

func (x *ListTablesResponsePB_TableInfo) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *ListTablesResponsePB_TableInfo) GetIndexedTableId() string {
	if x != nil && x.IndexedTableId != nil {
		return *x.IndexedTableId
	}
	return ""
}

type AlterTableRequestPB_AddColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The schema to add.
	// NOTE: the 'id' field of the schema should not be provided here --
	// the server will assign an ID.
	Schema        *common.ColumnSchemaPB `protobuf:"bytes,1,req,name=schema" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterTableRequestPB_AddColumn) Reset() {
	*x = AlterTableRequestPB_AddColumn{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterTableRequestPB_AddColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_AddColumn) ProtoMessage() {}

func (x *AlterTableRequestPB_AddColumn) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_AddColumn.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_AddColumn) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{32, 0}
}

func (x *AlterTableRequestPB_AddColumn) GetSchema() *common.ColumnSchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

type AlterTableRequestPB_DropColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the column to drop.
	Name          *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterTableRequestPB_DropColumn) Reset() {
	*x = AlterTableRequestPB_DropColumn{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterTableRequestPB_DropColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_DropColumn) ProtoMessage() {}

func (x *AlterTableRequestPB_DropColumn) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_DropColumn.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_DropColumn) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{32, 1}
}

func (x *AlterTableRequestPB_DropColumn) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type AlterTableRequestPB_RenameColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the column to rename;
	OldName       *string `protobuf:"bytes,1,req,name=old_name,json=oldName" json:"old_name,omitempty"`
	NewName       *string `protobuf:"bytes,2,req,name=new_name,json=newName" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterTableRequestPB_RenameColumn) Reset() {
	*x = AlterTableRequestPB_RenameColumn{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterTableRequestPB_RenameColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_RenameColumn) ProtoMessage() {}

func (x *AlterTableRequestPB_RenameColumn) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_RenameColumn.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_RenameColumn) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{32, 2}
}

func (x *AlterTableRequestPB_RenameColumn) GetOldName() string {
	if x != nil && x.OldName != nil {
		return *x.OldName
	}
	return ""
}

func (x *AlterTableRequestPB_RenameColumn) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

type AlterTableRequestPB_SetColumnPgType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the column for which to update the pg_type_oid.
	Name          *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	PgTypeOid     *uint32 `protobuf:"varint,2,req,name=pg_type_oid,json=pgTypeOid" json:"pg_type_oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlterTableRequestPB_SetColumnPgType) Reset() {
	*x = AlterTableRequestPB_SetColumnPgType{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterTableRequestPB_SetColumnPgType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_SetColumnPgType) ProtoMessage() {}

func (x *AlterTableRequestPB_SetColumnPgType) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_SetColumnPgType.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_SetColumnPgType) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{32, 3}
}

func (x *AlterTableRequestPB_SetColumnPgType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AlterTableRequestPB_SetColumnPgType) GetPgTypeOid() uint32 {
	if x != nil && x.PgTypeOid != nil {
		return *x.PgTypeOid
	}
	return 0
}

type AlterTableRequestPB_Step struct {
	state protoimpl.MessageState        `protogen:"open.v1"`
	Type  *AlterTableRequestPB_StepType `protobuf:"varint,1,opt,name=type,enum=yb.master.AlterTableRequestPB_StepType,def=0" json:"type,omitempty"`
	// Exactly one of the following must be set, based on 'type'
	AddColumn       *AlterTableRequestPB_AddColumn       `protobuf:"bytes,2,opt,name=add_column,json=addColumn" json:"add_column,omitempty"`
	DropColumn      *AlterTableRequestPB_DropColumn      `protobuf:"bytes,3,opt,name=drop_column,json=dropColumn" json:"drop_column,omitempty"`
	RenameColumn    *AlterTableRequestPB_RenameColumn    `protobuf:"bytes,4,opt,name=rename_column,json=renameColumn" json:"rename_column,omitempty"`
	SetColumnPgType *AlterTableRequestPB_SetColumnPgType `protobuf:"bytes,5,opt,name=set_column_pg_type,json=setColumnPgType" json:"set_column_pg_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for AlterTableRequestPB_Step fields.
const (
	Default_AlterTableRequestPB_Step_Type = AlterTableRequestPB_UNKNOWN
)

func (x *AlterTableRequestPB_Step) Reset() {
	*x = AlterTableRequestPB_Step{}
	mi := &file_yb_master_master_ddl_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlterTableRequestPB_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequestPB_Step) ProtoMessage() {}

func (x *AlterTableRequestPB_Step) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_ddl_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequestPB_Step.ProtoReflect.Descriptor instead.
func (*AlterTableRequestPB_Step) Descriptor() ([]byte, []int) {
	return file_yb_master_master_ddl_proto_rawDescGZIP(), []int{32, 4}
}

func (x *AlterTableRequestPB_Step) GetType() AlterTableRequestPB_StepType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_AlterTableRequestPB_Step_Type
}

func (x *AlterTableRequestPB_Step) GetAddColumn() *AlterTableRequestPB_AddColumn {
	if x != nil {
		return x.AddColumn
	}
	return nil
}

func (x *AlterTableRequestPB_Step) GetDropColumn() *AlterTableRequestPB_DropColumn {
	if x != nil {
		return x.DropColumn
	}
	return nil
}

func (x *AlterTableRequestPB_Step) GetRenameColumn() *AlterTableRequestPB_RenameColumn {
	if x != nil {
		return x.RenameColumn
	}
	return nil
}

func (x *AlterTableRequestPB_Step) GetSetColumnPgType() *AlterTableRequestPB_SetColumnPgType {
	if x != nil {
		return x.SetColumnPgType
	}
	return nil
}

var File_yb_master_master_ddl_proto protoreflect.FileDescriptor

var file_yb_master_master_ddl_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x64, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79,
	0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x79, 0x62,
	0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x55, 0x44, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xba, 0x0c, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x47,
	0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0d, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x35, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x69, 0x73, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x70, 0x67, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x69, 0x73, 0x50, 0x67,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x70, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0f, 0x69, 0x73, 0x50, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3f, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x76, 0x69, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x16, 0x69, 0x73, 0x43, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x42, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x76, 0x69, 0x65, 0x77, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x18, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x1c, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x79, 0x62, 0x5f, 0x64, 0x64, 0x6c, 0x5f,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x79,
	0x73, 0x71, 0x6c, 0x59, 0x62, 0x44, 0x64, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x78, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x10, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1a, 0x49, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x49,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0xac,
	0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xc9, 0x05,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0d, 0x43, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x1a, 0xe6, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x67, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x67, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22,
	0xb4, 0x07, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x47,
	0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x4f,
	0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x23, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1f, 0x69, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x62, 0x0a, 0x1b, 0x79,
	0x73, 0x71, 0x6c, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x59, 0x73, 0x71,
	0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54,
	0x78, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x70, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb6, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x1d, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x19, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x62, 0x73, 0x22, 0x77, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x65, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x19,
	0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x62, 0x73, 0x22, 0x35, 0x0a, 0x16, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x49, 0x0a, 0x17, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x1c, 0x49,
	0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x49, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x92,
	0x01, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x24, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x47, 0x0a, 0x10, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x25, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x63, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x62,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50,
	0x42, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x5d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3f, 0x0a,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x85,
	0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42,
	0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0c, 0x69, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1c, 0x79, 0x73,
	0x71, 0x6c, 0x5f, 0x79, 0x62, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x79, 0x73, 0x71, 0x6c, 0x59, 0x62, 0x44,
	0x64, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x1a, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x1b, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x22, 0xcd, 0x0c, 0x0a, 0x13, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a,
	0x12, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x10,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52,
	0x0c, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x50, 0x42, 0x52, 0x0f,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x3e, 0x0a,
	0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x67, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x67, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1c, 0x79, 0x73, 0x71,
	0x6c, 0x5f, 0x79, 0x62, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x79, 0x73, 0x71, 0x6c, 0x59, 0x62, 0x44, 0x64,
	0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x11, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x64, 0x63,
	0x53, 0x64, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x63,
	0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x1a,
	0x37, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x20, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x44, 0x0a, 0x0c, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x45, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x69, 0x64, 0x1a, 0x90, 0x03, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x09, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x4a, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x0a, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x50, 0x0a, 0x0d, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x5b, 0x0a,
	0x12, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x50, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x08, 0x53, 0x74,
	0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x50, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10,
	0x04, 0x22, 0x6d, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4f, 0x0a, 0x19, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22,
	0xf7, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x67, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x67, 0x4f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79,
	0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x1e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x1f, 0x49, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x60, 0x0a, 0x1e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x1f, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x22, 0x74, 0x0a, 0x17, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4a, 0x0a, 0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x90, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43,
	0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22,
	0xc2, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x42, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x1c, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x79, 0x62, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x79, 0x73,
	0x71, 0x6c, 0x59, 0x62, 0x44, 0x64, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1c, 0x79, 0x73, 0x71,
	0x6c, 0x5f, 0x79, 0x62, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x79, 0x73, 0x71, 0x6c, 0x59, 0x62, 0x44, 0x64,
	0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x74, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x42, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xbb,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x7a, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a,
	0x07, 0x75, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x44, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x75, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x52, 0x06, 0x75, 0x64, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x1f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x22, 0x49, 0x73,
	0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a,
	0x23, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x32, 0xa7, 0x19, 0x0a, 0x09, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x64, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x49, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4d, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2c, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x0d, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x68, 0x0a, 0x13, 0x49, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x0d, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4d,
	0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a,
	0x10, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15,
	0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x5f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x53, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x53, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x44, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x59,
	0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x49, 0x73, 0x59,
	0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x73, 0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x1a, 0x1b, 0xda, 0xb5, 0x18, 0x17, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72,
})

var (
	file_yb_master_master_ddl_proto_rawDescOnce sync.Once
	file_yb_master_master_ddl_proto_rawDescData []byte
)

func file_yb_master_master_ddl_proto_rawDescGZIP() []byte {
	file_yb_master_master_ddl_proto_rawDescOnce.Do(func() {
		file_yb_master_master_ddl_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_master_master_ddl_proto_rawDesc), len(file_yb_master_master_ddl_proto_rawDesc)))
	})
	return file_yb_master_master_ddl_proto_rawDescData
}

var file_yb_master_master_ddl_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yb_master_master_ddl_proto_msgTypes = make([]protoimpl.MessageInfo, 77)
var file_yb_master_master_ddl_proto_goTypes = []any{
	(IndexStatusPB_BackfillStatus)(0),             // 0: yb.master.IndexStatusPB.BackfillStatus
	(AlterTableRequestPB_StepType)(0),             // 1: yb.master.AlterTableRequestPB.StepType
	(*TablegroupIdentifierPB)(nil),                // 2: yb.master.TablegroupIdentifierPB
	(*UDTypeIdentifierPB)(nil),                    // 3: yb.master.UDTypeIdentifierPB
	(*UDTypeInfoPB)(nil),                          // 4: yb.master.UDTypeInfoPB
	(*CreateTableRequestPB)(nil),                  // 5: yb.master.CreateTableRequestPB
	(*CreateTableResponsePB)(nil),                 // 6: yb.master.CreateTableResponsePB
	(*IsCreateTableDoneRequestPB)(nil),            // 7: yb.master.IsCreateTableDoneRequestPB
	(*IsCreateTableDoneResponsePB)(nil),           // 8: yb.master.IsCreateTableDoneResponsePB
	(*ListTablesRequestPB)(nil),                   // 9: yb.master.ListTablesRequestPB
	(*ListTablesResponsePB)(nil),                  // 10: yb.master.ListTablesResponsePB
	(*GetTableSchemaRequestPB)(nil),               // 11: yb.master.GetTableSchemaRequestPB
	(*GetTableSchemaResponsePB)(nil),              // 12: yb.master.GetTableSchemaResponsePB
	(*GetTablegroupSchemaRequestPB)(nil),          // 13: yb.master.GetTablegroupSchemaRequestPB
	(*GetTablegroupSchemaResponsePB)(nil),         // 14: yb.master.GetTablegroupSchemaResponsePB
	(*GetColocatedTabletSchemaRequestPB)(nil),     // 15: yb.master.GetColocatedTabletSchemaRequestPB
	(*GetColocatedTabletSchemaResponsePB)(nil),    // 16: yb.master.GetColocatedTabletSchemaResponsePB
	(*TruncateTableRequestPB)(nil),                // 17: yb.master.TruncateTableRequestPB
	(*TruncateTableResponsePB)(nil),               // 18: yb.master.TruncateTableResponsePB
	(*IsTruncateTableDoneRequestPB)(nil),          // 19: yb.master.IsTruncateTableDoneRequestPB
	(*IsTruncateTableDoneResponsePB)(nil),         // 20: yb.master.IsTruncateTableDoneResponsePB
	(*BackfillIndexRequestPB)(nil),                // 21: yb.master.BackfillIndexRequestPB
	(*BackfillIndexResponsePB)(nil),               // 22: yb.master.BackfillIndexResponsePB
	(*LaunchBackfillIndexForTableRequestPB)(nil),  // 23: yb.master.LaunchBackfillIndexForTableRequestPB
	(*LaunchBackfillIndexForTableResponsePB)(nil), // 24: yb.master.LaunchBackfillIndexForTableResponsePB
	(*GetBackfillJobsRequestPB)(nil),              // 25: yb.master.GetBackfillJobsRequestPB
	(*GetBackfillJobsResponsePB)(nil),             // 26: yb.master.GetBackfillJobsResponsePB
	(*GetBackfillStatusRequestPB)(nil),            // 27: yb.master.GetBackfillStatusRequestPB
	(*IndexStatusPB)(nil),                         // 28: yb.master.IndexStatusPB
	(*GetBackfillStatusResponsePB)(nil),           // 29: yb.master.GetBackfillStatusResponsePB
	(*DeleteTableRequestPB)(nil),                  // 30: yb.master.DeleteTableRequestPB
	(*DeleteTableResponsePB)(nil),                 // 31: yb.master.DeleteTableResponsePB
	(*IsDeleteTableDoneRequestPB)(nil),            // 32: yb.master.IsDeleteTableDoneRequestPB
	(*IsDeleteTableDoneResponsePB)(nil),           // 33: yb.master.IsDeleteTableDoneResponsePB
	(*AlterTableRequestPB)(nil),                   // 34: yb.master.AlterTableRequestPB
	(*AlterTableResponsePB)(nil),                  // 35: yb.master.AlterTableResponsePB
	(*IsAlterTableDoneRequestPB)(nil),             // 36: yb.master.IsAlterTableDoneRequestPB
	(*IsAlterTableDoneResponsePB)(nil),            // 37: yb.master.IsAlterTableDoneResponsePB
	(*GetTableDiskSizeRequestPB)(nil),             // 38: yb.master.GetTableDiskSizeRequestPB
	(*GetTableDiskSizeResponsePB)(nil),            // 39: yb.master.GetTableDiskSizeResponsePB
	(*CreateNamespaceRequestPB)(nil),              // 40: yb.master.CreateNamespaceRequestPB
	(*CreateNamespaceResponsePB)(nil),             // 41: yb.master.CreateNamespaceResponsePB
	(*IsCreateNamespaceDoneRequestPB)(nil),        // 42: yb.master.IsCreateNamespaceDoneRequestPB
	(*IsCreateNamespaceDoneResponsePB)(nil),       // 43: yb.master.IsCreateNamespaceDoneResponsePB
	(*DeleteNamespaceRequestPB)(nil),              // 44: yb.master.DeleteNamespaceRequestPB
	(*DeleteNamespaceResponsePB)(nil),             // 45: yb.master.DeleteNamespaceResponsePB
	(*IsDeleteNamespaceDoneRequestPB)(nil),        // 46: yb.master.IsDeleteNamespaceDoneRequestPB
	(*IsDeleteNamespaceDoneResponsePB)(nil),       // 47: yb.master.IsDeleteNamespaceDoneResponsePB
	(*AlterNamespaceRequestPB)(nil),               // 48: yb.master.AlterNamespaceRequestPB
	(*AlterNamespaceResponsePB)(nil),              // 49: yb.master.AlterNamespaceResponsePB
	(*ListNamespacesRequestPB)(nil),               // 50: yb.master.ListNamespacesRequestPB
	(*ListNamespacesResponsePB)(nil),              // 51: yb.master.ListNamespacesResponsePB
	(*GetNamespaceInfoRequestPB)(nil),             // 52: yb.master.GetNamespaceInfoRequestPB
	(*GetNamespaceInfoResponsePB)(nil),            // 53: yb.master.GetNamespaceInfoResponsePB
	(*CreateTablegroupRequestPB)(nil),             // 54: yb.master.CreateTablegroupRequestPB
	(*CreateTablegroupResponsePB)(nil),            // 55: yb.master.CreateTablegroupResponsePB
	(*DeleteTablegroupRequestPB)(nil),             // 56: yb.master.DeleteTablegroupRequestPB
	(*DeleteTablegroupResponsePB)(nil),            // 57: yb.master.DeleteTablegroupResponsePB
	(*ListTablegroupsRequestPB)(nil),              // 58: yb.master.ListTablegroupsRequestPB
	(*ListTablegroupsResponsePB)(nil),             // 59: yb.master.ListTablegroupsResponsePB
	(*CreateUDTypeRequestPB)(nil),                 // 60: yb.master.CreateUDTypeRequestPB
	(*CreateUDTypeResponsePB)(nil),                // 61: yb.master.CreateUDTypeResponsePB
	(*DeleteUDTypeRequestPB)(nil),                 // 62: yb.master.DeleteUDTypeRequestPB
	(*DeleteUDTypeResponsePB)(nil),                // 63: yb.master.DeleteUDTypeResponsePB
	(*ListUDTypesRequestPB)(nil),                  // 64: yb.master.ListUDTypesRequestPB
	(*ListUDTypesResponsePB)(nil),                 // 65: yb.master.ListUDTypesResponsePB
	(*GetUDTypeInfoRequestPB)(nil),                // 66: yb.master.GetUDTypeInfoRequestPB
	(*GetUDTypeInfoResponsePB)(nil),               // 67: yb.master.GetUDTypeInfoResponsePB
	(*ReportYsqlDdlTxnStatusRequestPB)(nil),       // 68: yb.master.ReportYsqlDdlTxnStatusRequestPB
	(*ReportYsqlDdlTxnStatusResponsePB)(nil),      // 69: yb.master.ReportYsqlDdlTxnStatusResponsePB
	(*IsYsqlDdlVerificationDoneRequestPB)(nil),    // 70: yb.master.IsYsqlDdlVerificationDoneRequestPB
	(*IsYsqlDdlVerificationDoneResponsePB)(nil),   // 71: yb.master.IsYsqlDdlVerificationDoneResponsePB
	(*ListTablesResponsePB_ColocatedInfo)(nil),    // 72: yb.master.ListTablesResponsePB.ColocatedInfo
	(*ListTablesResponsePB_TableInfo)(nil),        // 73: yb.master.ListTablesResponsePB.TableInfo
	(*AlterTableRequestPB_AddColumn)(nil),         // 74: yb.master.AlterTableRequestPB.AddColumn
	(*AlterTableRequestPB_DropColumn)(nil),        // 75: yb.master.AlterTableRequestPB.DropColumn
	(*AlterTableRequestPB_RenameColumn)(nil),      // 76: yb.master.AlterTableRequestPB.RenameColumn
	(*AlterTableRequestPB_SetColumnPgType)(nil),   // 77: yb.master.AlterTableRequestPB.SetColumnPgType
	(*AlterTableRequestPB_Step)(nil),              // 78: yb.master.AlterTableRequestPB.Step
	(*NamespaceIdentifierPB)(nil),                 // 79: yb.master.NamespaceIdentifierPB
	(*common.QLTypePB)(nil),                       // 80: yb.QLTypePB
	(*common.SchemaPB)(nil),                       // 81: yb.SchemaPB
	(*common.PartitionSchemaPB)(nil),              // 82: yb.PartitionSchemaPB
	(*ReplicationInfoPB)(nil),                     // 83: yb.master.ReplicationInfoPB
	(common.TableType)(0),                         // 84: yb.TableType
	(*common.IndexInfoPB)(nil),                    // 85: yb.IndexInfoPB
	(*common.TransactionMetadataPB)(nil),          // 86: yb.TransactionMetadataPB
	(*common.PartitionPB)(nil),                    // 87: yb.PartitionPB
	(common.StatefulServiceKind)(0),               // 88: yb.StatefulServiceKind
	(*common.PgVectorIdxOptionsPB)(nil),           // 89: yb.PgVectorIdxOptionsPB
	(*MasterErrorPB)(nil),                         // 90: yb.master.MasterErrorPB
	(*TableIdentifierPB)(nil),                     // 91: yb.master.TableIdentifierPB
	(RelationType)(0),                             // 92: yb.master.RelationType
	(*YsqlDdlTxnVerifierStatePB)(nil),             // 93: yb.master.YsqlDdlTxnVerifierStatePB
	(*BackfillJobPB)(nil),                         // 94: yb.master.BackfillJobPB
	(*common.AppStatusPB)(nil),                    // 95: yb.AppStatusPB
	(*common.TablePropertiesPB)(nil),              // 96: yb.TablePropertiesPB
	(common.YQLDatabase)(0),                       // 97: yb.YQLDatabase
	(SysTablesEntryPB_State)(0),                   // 98: yb.master.SysTablesEntryPB.State
	(*common.ColumnSchemaPB)(nil),                 // 99: yb.ColumnSchemaPB
}
var file_yb_master_master_ddl_proto_depIdxs = []int32{
	79,  // 0: yb.master.UDTypeIdentifierPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	80,  // 1: yb.master.UDTypeInfoPB.field_types:type_name -> yb.QLTypePB
	79,  // 2: yb.master.UDTypeInfoPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	81,  // 3: yb.master.CreateTableRequestPB.schema:type_name -> yb.SchemaPB
	82,  // 4: yb.master.CreateTableRequestPB.partition_schema:type_name -> yb.PartitionSchemaPB
	83,  // 5: yb.master.CreateTableRequestPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	84,  // 6: yb.master.CreateTableRequestPB.table_type:type_name -> yb.TableType
	79,  // 7: yb.master.CreateTableRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	85,  // 8: yb.master.CreateTableRequestPB.index_info:type_name -> yb.IndexInfoPB
	86,  // 9: yb.master.CreateTableRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	87,  // 10: yb.master.CreateTableRequestPB.partitions:type_name -> yb.PartitionPB
	88,  // 11: yb.master.CreateTableRequestPB.hosted_stateful_services:type_name -> yb.StatefulServiceKind
	89,  // 12: yb.master.CreateTableRequestPB.vector_idx_options:type_name -> yb.PgVectorIdxOptionsPB
	90,  // 13: yb.master.CreateTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 14: yb.master.IsCreateTableDoneRequestPB.table:type_name -> yb.master.TableIdentifierPB
	90,  // 15: yb.master.IsCreateTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 16: yb.master.ListTablesRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	92,  // 17: yb.master.ListTablesRequestPB.relation_type_filter:type_name -> yb.master.RelationType
	90,  // 18: yb.master.ListTablesResponsePB.error:type_name -> yb.master.MasterErrorPB
	73,  // 19: yb.master.ListTablesResponsePB.tables:type_name -> yb.master.ListTablesResponsePB.TableInfo
	91,  // 20: yb.master.GetTableSchemaRequestPB.table:type_name -> yb.master.TableIdentifierPB
	90,  // 21: yb.master.GetTableSchemaResponsePB.error:type_name -> yb.master.MasterErrorPB
	81,  // 22: yb.master.GetTableSchemaResponsePB.schema:type_name -> yb.SchemaPB
	82,  // 23: yb.master.GetTableSchemaResponsePB.partition_schema:type_name -> yb.PartitionSchemaPB
	83,  // 24: yb.master.GetTableSchemaResponsePB.replication_info:type_name -> yb.master.ReplicationInfoPB
	84,  // 25: yb.master.GetTableSchemaResponsePB.table_type:type_name -> yb.TableType
	91,  // 26: yb.master.GetTableSchemaResponsePB.identifier:type_name -> yb.master.TableIdentifierPB
	85,  // 27: yb.master.GetTableSchemaResponsePB.indexes:type_name -> yb.IndexInfoPB
	85,  // 28: yb.master.GetTableSchemaResponsePB.index_info:type_name -> yb.IndexInfoPB
	93,  // 29: yb.master.GetTableSchemaResponsePB.ysql_ddl_txn_verifier_state:type_name -> yb.master.YsqlDdlTxnVerifierStatePB
	2,   // 30: yb.master.GetTablegroupSchemaRequestPB.tablegroup:type_name -> yb.master.TablegroupIdentifierPB
	90,  // 31: yb.master.GetTablegroupSchemaResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 32: yb.master.GetTablegroupSchemaResponsePB.get_table_schema_response_pbs:type_name -> yb.master.GetTableSchemaResponsePB
	91,  // 33: yb.master.GetColocatedTabletSchemaRequestPB.parent_colocated_table:type_name -> yb.master.TableIdentifierPB
	90,  // 34: yb.master.GetColocatedTabletSchemaResponsePB.error:type_name -> yb.master.MasterErrorPB
	12,  // 35: yb.master.GetColocatedTabletSchemaResponsePB.get_table_schema_response_pbs:type_name -> yb.master.GetTableSchemaResponsePB
	90,  // 36: yb.master.TruncateTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	90,  // 37: yb.master.IsTruncateTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 38: yb.master.BackfillIndexRequestPB.index_identifier:type_name -> yb.master.TableIdentifierPB
	90,  // 39: yb.master.BackfillIndexResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 40: yb.master.BackfillIndexResponsePB.table_identifier:type_name -> yb.master.TableIdentifierPB
	91,  // 41: yb.master.LaunchBackfillIndexForTableRequestPB.table_identifier:type_name -> yb.master.TableIdentifierPB
	90,  // 42: yb.master.LaunchBackfillIndexForTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 43: yb.master.GetBackfillJobsRequestPB.table_identifier:type_name -> yb.master.TableIdentifierPB
	94,  // 44: yb.master.GetBackfillJobsResponsePB.backfill_jobs:type_name -> yb.master.BackfillJobPB
	90,  // 45: yb.master.GetBackfillJobsResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 46: yb.master.GetBackfillStatusRequestPB.index_tables:type_name -> yb.master.TableIdentifierPB
	91,  // 47: yb.master.IndexStatusPB.index_table:type_name -> yb.master.TableIdentifierPB
	95,  // 48: yb.master.IndexStatusPB.error:type_name -> yb.AppStatusPB
	0,   // 49: yb.master.IndexStatusPB.backfill_status:type_name -> yb.master.IndexStatusPB.BackfillStatus
	90,  // 50: yb.master.GetBackfillStatusResponsePB.error:type_name -> yb.master.MasterErrorPB
	28,  // 51: yb.master.GetBackfillStatusResponsePB.index_status:type_name -> yb.master.IndexStatusPB
	91,  // 52: yb.master.DeleteTableRequestPB.table:type_name -> yb.master.TableIdentifierPB
	86,  // 53: yb.master.DeleteTableRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	90,  // 54: yb.master.DeleteTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 55: yb.master.DeleteTableResponsePB.indexed_table:type_name -> yb.master.TableIdentifierPB
	90,  // 56: yb.master.IsDeleteTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 57: yb.master.AlterTableRequestPB.table:type_name -> yb.master.TableIdentifierPB
	78,  // 58: yb.master.AlterTableRequestPB.alter_schema_steps:type_name -> yb.master.AlterTableRequestPB.Step
	79,  // 59: yb.master.AlterTableRequestPB.new_namespace:type_name -> yb.master.NamespaceIdentifierPB
	96,  // 60: yb.master.AlterTableRequestPB.alter_properties:type_name -> yb.TablePropertiesPB
	83,  // 61: yb.master.AlterTableRequestPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	86,  // 62: yb.master.AlterTableRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	90,  // 63: yb.master.AlterTableResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 64: yb.master.IsAlterTableDoneRequestPB.table:type_name -> yb.master.TableIdentifierPB
	90,  // 65: yb.master.IsAlterTableDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	91,  // 66: yb.master.GetTableDiskSizeRequestPB.table:type_name -> yb.master.TableIdentifierPB
	90,  // 67: yb.master.GetTableDiskSizeResponsePB.error:type_name -> yb.master.MasterErrorPB
	97,  // 68: yb.master.CreateNamespaceRequestPB.database_type:type_name -> yb.YQLDatabase
	86,  // 69: yb.master.CreateNamespaceRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	90,  // 70: yb.master.CreateNamespaceResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 71: yb.master.IsCreateNamespaceDoneRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	90,  // 72: yb.master.IsCreateNamespaceDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 73: yb.master.DeleteNamespaceRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	97,  // 74: yb.master.DeleteNamespaceRequestPB.database_type:type_name -> yb.YQLDatabase
	90,  // 75: yb.master.DeleteNamespaceResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 76: yb.master.IsDeleteNamespaceDoneRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	90,  // 77: yb.master.IsDeleteNamespaceDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 78: yb.master.AlterNamespaceRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	90,  // 79: yb.master.AlterNamespaceResponsePB.error:type_name -> yb.master.MasterErrorPB
	97,  // 80: yb.master.ListNamespacesRequestPB.database_type:type_name -> yb.YQLDatabase
	90,  // 81: yb.master.ListNamespacesResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 82: yb.master.ListNamespacesResponsePB.namespaces:type_name -> yb.master.NamespaceIdentifierPB
	79,  // 83: yb.master.GetNamespaceInfoRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	90,  // 84: yb.master.GetNamespaceInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 85: yb.master.GetNamespaceInfoResponsePB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	86,  // 86: yb.master.CreateTablegroupRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	90,  // 87: yb.master.CreateTablegroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	86,  // 88: yb.master.DeleteTablegroupRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	90,  // 89: yb.master.DeleteTablegroupResponsePB.error:type_name -> yb.master.MasterErrorPB
	90,  // 90: yb.master.ListTablegroupsResponsePB.error:type_name -> yb.master.MasterErrorPB
	2,   // 91: yb.master.ListTablegroupsResponsePB.tablegroups:type_name -> yb.master.TablegroupIdentifierPB
	79,  // 92: yb.master.CreateUDTypeRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	80,  // 93: yb.master.CreateUDTypeRequestPB.field_types:type_name -> yb.QLTypePB
	90,  // 94: yb.master.CreateUDTypeResponsePB.error:type_name -> yb.master.MasterErrorPB
	3,   // 95: yb.master.DeleteUDTypeRequestPB.type:type_name -> yb.master.UDTypeIdentifierPB
	90,  // 96: yb.master.DeleteUDTypeResponsePB.error:type_name -> yb.master.MasterErrorPB
	79,  // 97: yb.master.ListUDTypesRequestPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	90,  // 98: yb.master.ListUDTypesResponsePB.error:type_name -> yb.master.MasterErrorPB
	4,   // 99: yb.master.ListUDTypesResponsePB.udtypes:type_name -> yb.master.UDTypeInfoPB
	3,   // 100: yb.master.GetUDTypeInfoRequestPB.type:type_name -> yb.master.UDTypeIdentifierPB
	90,  // 101: yb.master.GetUDTypeInfoResponsePB.error:type_name -> yb.master.MasterErrorPB
	4,   // 102: yb.master.GetUDTypeInfoResponsePB.udtype:type_name -> yb.master.UDTypeInfoPB
	90,  // 103: yb.master.ReportYsqlDdlTxnStatusResponsePB.error:type_name -> yb.master.MasterErrorPB
	86,  // 104: yb.master.IsYsqlDdlVerificationDoneRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	90,  // 105: yb.master.IsYsqlDdlVerificationDoneResponsePB.error:type_name -> yb.master.MasterErrorPB
	84,  // 106: yb.master.ListTablesResponsePB.TableInfo.table_type:type_name -> yb.TableType
	79,  // 107: yb.master.ListTablesResponsePB.TableInfo.namespace:type_name -> yb.master.NamespaceIdentifierPB
	92,  // 108: yb.master.ListTablesResponsePB.TableInfo.relation_type:type_name -> yb.master.RelationType
	98,  // 109: yb.master.ListTablesResponsePB.TableInfo.state:type_name -> yb.master.SysTablesEntryPB.State
	72,  // 110: yb.master.ListTablesResponsePB.TableInfo.colocated_info:type_name -> yb.master.ListTablesResponsePB.ColocatedInfo
	99,  // 111: yb.master.AlterTableRequestPB.AddColumn.schema:type_name -> yb.ColumnSchemaPB
	1,   // 112: yb.master.AlterTableRequestPB.Step.type:type_name -> yb.master.AlterTableRequestPB.StepType
	74,  // 113: yb.master.AlterTableRequestPB.Step.add_column:type_name -> yb.master.AlterTableRequestPB.AddColumn
	75,  // 114: yb.master.AlterTableRequestPB.Step.drop_column:type_name -> yb.master.AlterTableRequestPB.DropColumn
	76,  // 115: yb.master.AlterTableRequestPB.Step.rename_column:type_name -> yb.master.AlterTableRequestPB.RenameColumn
	77,  // 116: yb.master.AlterTableRequestPB.Step.set_column_pg_type:type_name -> yb.master.AlterTableRequestPB.SetColumnPgType
	5,   // 117: yb.master.MasterDdl.CreateTable:input_type -> yb.master.CreateTableRequestPB
	7,   // 118: yb.master.MasterDdl.IsCreateTableDone:input_type -> yb.master.IsCreateTableDoneRequestPB
	9,   // 119: yb.master.MasterDdl.ListTables:input_type -> yb.master.ListTablesRequestPB
	11,  // 120: yb.master.MasterDdl.GetTableSchema:input_type -> yb.master.GetTableSchemaRequestPB
	13,  // 121: yb.master.MasterDdl.GetTablegroupSchema:input_type -> yb.master.GetTablegroupSchemaRequestPB
	15,  // 122: yb.master.MasterDdl.GetColocatedTabletSchema:input_type -> yb.master.GetColocatedTabletSchemaRequestPB
	17,  // 123: yb.master.MasterDdl.TruncateTable:input_type -> yb.master.TruncateTableRequestPB
	19,  // 124: yb.master.MasterDdl.IsTruncateTableDone:input_type -> yb.master.IsTruncateTableDoneRequestPB
	21,  // 125: yb.master.MasterDdl.BackfillIndex:input_type -> yb.master.BackfillIndexRequestPB
	23,  // 126: yb.master.MasterDdl.LaunchBackfillIndexForTable:input_type -> yb.master.LaunchBackfillIndexForTableRequestPB
	25,  // 127: yb.master.MasterDdl.GetBackfillJobs:input_type -> yb.master.GetBackfillJobsRequestPB
	27,  // 128: yb.master.MasterDdl.GetBackfillStatus:input_type -> yb.master.GetBackfillStatusRequestPB
	30,  // 129: yb.master.MasterDdl.DeleteTable:input_type -> yb.master.DeleteTableRequestPB
	32,  // 130: yb.master.MasterDdl.IsDeleteTableDone:input_type -> yb.master.IsDeleteTableDoneRequestPB
	34,  // 131: yb.master.MasterDdl.AlterTable:input_type -> yb.master.AlterTableRequestPB
	36,  // 132: yb.master.MasterDdl.IsAlterTableDone:input_type -> yb.master.IsAlterTableDoneRequestPB
	40,  // 133: yb.master.MasterDdl.CreateNamespace:input_type -> yb.master.CreateNamespaceRequestPB
	42,  // 134: yb.master.MasterDdl.IsCreateNamespaceDone:input_type -> yb.master.IsCreateNamespaceDoneRequestPB
	44,  // 135: yb.master.MasterDdl.DeleteNamespace:input_type -> yb.master.DeleteNamespaceRequestPB
	46,  // 136: yb.master.MasterDdl.IsDeleteNamespaceDone:input_type -> yb.master.IsDeleteNamespaceDoneRequestPB
	48,  // 137: yb.master.MasterDdl.AlterNamespace:input_type -> yb.master.AlterNamespaceRequestPB
	50,  // 138: yb.master.MasterDdl.ListNamespaces:input_type -> yb.master.ListNamespacesRequestPB
	52,  // 139: yb.master.MasterDdl.GetNamespaceInfo:input_type -> yb.master.GetNamespaceInfoRequestPB
	38,  // 140: yb.master.MasterDdl.GetTableDiskSize:input_type -> yb.master.GetTableDiskSizeRequestPB
	54,  // 141: yb.master.MasterDdl.CreateTablegroup:input_type -> yb.master.CreateTablegroupRequestPB
	56,  // 142: yb.master.MasterDdl.DeleteTablegroup:input_type -> yb.master.DeleteTablegroupRequestPB
	58,  // 143: yb.master.MasterDdl.ListTablegroups:input_type -> yb.master.ListTablegroupsRequestPB
	60,  // 144: yb.master.MasterDdl.CreateUDType:input_type -> yb.master.CreateUDTypeRequestPB
	62,  // 145: yb.master.MasterDdl.DeleteUDType:input_type -> yb.master.DeleteUDTypeRequestPB
	64,  // 146: yb.master.MasterDdl.ListUDTypes:input_type -> yb.master.ListUDTypesRequestPB
	66,  // 147: yb.master.MasterDdl.GetUDTypeInfo:input_type -> yb.master.GetUDTypeInfoRequestPB
	68,  // 148: yb.master.MasterDdl.ReportYsqlDdlTxnStatus:input_type -> yb.master.ReportYsqlDdlTxnStatusRequestPB
	70,  // 149: yb.master.MasterDdl.IsYsqlDdlVerificationDone:input_type -> yb.master.IsYsqlDdlVerificationDoneRequestPB
	6,   // 150: yb.master.MasterDdl.CreateTable:output_type -> yb.master.CreateTableResponsePB
	8,   // 151: yb.master.MasterDdl.IsCreateTableDone:output_type -> yb.master.IsCreateTableDoneResponsePB
	10,  // 152: yb.master.MasterDdl.ListTables:output_type -> yb.master.ListTablesResponsePB
	12,  // 153: yb.master.MasterDdl.GetTableSchema:output_type -> yb.master.GetTableSchemaResponsePB
	14,  // 154: yb.master.MasterDdl.GetTablegroupSchema:output_type -> yb.master.GetTablegroupSchemaResponsePB
	16,  // 155: yb.master.MasterDdl.GetColocatedTabletSchema:output_type -> yb.master.GetColocatedTabletSchemaResponsePB
	18,  // 156: yb.master.MasterDdl.TruncateTable:output_type -> yb.master.TruncateTableResponsePB
	20,  // 157: yb.master.MasterDdl.IsTruncateTableDone:output_type -> yb.master.IsTruncateTableDoneResponsePB
	22,  // 158: yb.master.MasterDdl.BackfillIndex:output_type -> yb.master.BackfillIndexResponsePB
	24,  // 159: yb.master.MasterDdl.LaunchBackfillIndexForTable:output_type -> yb.master.LaunchBackfillIndexForTableResponsePB
	26,  // 160: yb.master.MasterDdl.GetBackfillJobs:output_type -> yb.master.GetBackfillJobsResponsePB
	29,  // 161: yb.master.MasterDdl.GetBackfillStatus:output_type -> yb.master.GetBackfillStatusResponsePB
	31,  // 162: yb.master.MasterDdl.DeleteTable:output_type -> yb.master.DeleteTableResponsePB
	33,  // 163: yb.master.MasterDdl.IsDeleteTableDone:output_type -> yb.master.IsDeleteTableDoneResponsePB
	35,  // 164: yb.master.MasterDdl.AlterTable:output_type -> yb.master.AlterTableResponsePB
	37,  // 165: yb.master.MasterDdl.IsAlterTableDone:output_type -> yb.master.IsAlterTableDoneResponsePB
	41,  // 166: yb.master.MasterDdl.CreateNamespace:output_type -> yb.master.CreateNamespaceResponsePB
	43,  // 167: yb.master.MasterDdl.IsCreateNamespaceDone:output_type -> yb.master.IsCreateNamespaceDoneResponsePB
	45,  // 168: yb.master.MasterDdl.DeleteNamespace:output_type -> yb.master.DeleteNamespaceResponsePB
	47,  // 169: yb.master.MasterDdl.IsDeleteNamespaceDone:output_type -> yb.master.IsDeleteNamespaceDoneResponsePB
	49,  // 170: yb.master.MasterDdl.AlterNamespace:output_type -> yb.master.AlterNamespaceResponsePB
	51,  // 171: yb.master.MasterDdl.ListNamespaces:output_type -> yb.master.ListNamespacesResponsePB
	53,  // 172: yb.master.MasterDdl.GetNamespaceInfo:output_type -> yb.master.GetNamespaceInfoResponsePB
	39,  // 173: yb.master.MasterDdl.GetTableDiskSize:output_type -> yb.master.GetTableDiskSizeResponsePB
	55,  // 174: yb.master.MasterDdl.CreateTablegroup:output_type -> yb.master.CreateTablegroupResponsePB
	57,  // 175: yb.master.MasterDdl.DeleteTablegroup:output_type -> yb.master.DeleteTablegroupResponsePB
	59,  // 176: yb.master.MasterDdl.ListTablegroups:output_type -> yb.master.ListTablegroupsResponsePB
	61,  // 177: yb.master.MasterDdl.CreateUDType:output_type -> yb.master.CreateUDTypeResponsePB
	63,  // 178: yb.master.MasterDdl.DeleteUDType:output_type -> yb.master.DeleteUDTypeResponsePB
	65,  // 179: yb.master.MasterDdl.ListUDTypes:output_type -> yb.master.ListUDTypesResponsePB
	67,  // 180: yb.master.MasterDdl.GetUDTypeInfo:output_type -> yb.master.GetUDTypeInfoResponsePB
	69,  // 181: yb.master.MasterDdl.ReportYsqlDdlTxnStatus:output_type -> yb.master.ReportYsqlDdlTxnStatusResponsePB
	71,  // 182: yb.master.MasterDdl.IsYsqlDdlVerificationDone:output_type -> yb.master.IsYsqlDdlVerificationDoneResponsePB
	150, // [150:183] is the sub-list for method output_type
	117, // [117:150] is the sub-list for method input_type
	117, // [117:117] is the sub-list for extension type_name
	117, // [117:117] is the sub-list for extension extendee
	0,   // [0:117] is the sub-list for field type_name
}

func init() { file_yb_master_master_ddl_proto_init() }
func file_yb_master_master_ddl_proto_init() {
	if File_yb_master_master_ddl_proto != nil {
		return
	}
	file_yb_master_catalog_entity_info_proto_init()
	file_yb_master_master_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_master_master_ddl_proto_rawDesc), len(file_yb_master_master_ddl_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   77,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_master_master_ddl_proto_goTypes,
		DependencyIndexes: file_yb_master_master_ddl_proto_depIdxs,
		EnumInfos:         file_yb_master_master_ddl_proto_enumTypes,
		MessageInfos:      file_yb_master_master_ddl_proto_msgTypes,
	}.Build()
	File_yb_master_master_ddl_proto = out.File
	file_yb_master_master_ddl_proto_goTypes = nil
	file_yb_master_master_ddl_proto_depIdxs = nil
}
