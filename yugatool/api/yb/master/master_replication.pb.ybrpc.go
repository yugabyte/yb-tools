// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterReplication
// service: MasterReplication
type MasterReplication interface {
	ValidateReplicationInfo(request *ValidateReplicationInfoRequestPB) (*ValidateReplicationInfoResponsePB, error)
	CreateCDCStream(request *CreateCDCStreamRequestPB) (*CreateCDCStreamResponsePB, error)
	DeleteCDCStream(request *DeleteCDCStreamRequestPB) (*DeleteCDCStreamResponsePB, error)
	ListCDCStreams(request *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error)
	IsObjectPartOfXRepl(request *IsObjectPartOfXReplRequestPB) (*IsObjectPartOfXReplResponsePB, error)
	GetCDCStream(request *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error)
	GetCDCDBStreamInfo(request *GetCDCDBStreamInfoRequestPB) (*GetCDCDBStreamInfoResponsePB, error)
	UpdateCDCStream(request *UpdateCDCStreamRequestPB) (*UpdateCDCStreamResponsePB, error)
	IsBootstrapRequired(request *IsBootstrapRequiredRequestPB) (*IsBootstrapRequiredResponsePB, error)
	GetUDTypeMetadata(request *GetUDTypeMetadataRequestPB) (*GetUDTypeMetadataResponsePB, error)
	WaitForReplicationDrain(request *WaitForReplicationDrainRequestPB) (*WaitForReplicationDrainResponsePB, error)
	GetTableSchemaFromSysCatalog(request *GetTableSchemaFromSysCatalogRequestPB) (*GetTableSchemaFromSysCatalogResponsePB, error)
	SetupNamespaceReplicationWithBootstrap(request *SetupNamespaceReplicationWithBootstrapRequestPB) (*SetupNamespaceReplicationWithBootstrapResponsePB, error)
	SetupUniverseReplication(request *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error)
	DeleteUniverseReplication(request *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error)
	AlterUniverseReplication(request *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error)
	SetUniverseReplicationEnabled(request *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error)
	PauseResumeXClusterProducerStreams(request *PauseResumeXClusterProducerStreamsRequestPB) (*PauseResumeXClusterProducerStreamsResponsePB, error)
	GetUniverseReplication(request *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error)
	IsSetupNamespaceReplicationWithBootstrapDone(request *IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) (*IsSetupNamespaceReplicationWithBootstrapDoneResponsePB, error)
	IsSetupUniverseReplicationDone(request *IsSetupUniverseReplicationDoneRequestPB) (*IsSetupUniverseReplicationDoneResponsePB, error)
	ChangeXClusterRole(request *ChangeXClusterRoleRequestPB) (*ChangeXClusterRoleResponsePB, error)
	UpdateConsumerOnProducerSplit(request *UpdateConsumerOnProducerSplitRequestPB) (*UpdateConsumerOnProducerSplitResponsePB, error)
	UpdateConsumerOnProducerMetadata(request *UpdateConsumerOnProducerMetadataRequestPB) (*UpdateConsumerOnProducerMetadataResponsePB, error)
	InsertPackedSchemaForXClusterTarget(request *InsertPackedSchemaForXClusterTargetRequestPB) (*InsertPackedSchemaForXClusterTargetResponsePB, error)
	GetUniverseReplications(request *GetUniverseReplicationsRequestPB) (*GetUniverseReplicationsResponsePB, error)
	GetUniverseReplicationInfo(request *GetUniverseReplicationInfoRequestPB) (*GetUniverseReplicationInfoResponsePB, error)
	GetReplicationStatus(request *GetReplicationStatusRequestPB) (*GetReplicationStatusResponsePB, error)
	GetXClusterSafeTime(request *GetXClusterSafeTimeRequestPB) (*GetXClusterSafeTimeResponsePB, error)
	GetXClusterSafeTimeForNamespace(request *GetXClusterSafeTimeForNamespaceRequestPB) (*GetXClusterSafeTimeForNamespaceResponsePB, error)
	BootstrapProducer(request *BootstrapProducerRequestPB) (*BootstrapProducerResponsePB, error)
	XClusterReportNewAutoFlagConfigVersion(request *XClusterReportNewAutoFlagConfigVersionRequestPB) (*XClusterReportNewAutoFlagConfigVersionResponsePB, error)
	YsqlBackfillReplicationSlotNameToCDCSDKStream(request *YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) (*YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB, error)
	XClusterCreateOutboundReplicationGroup(request *XClusterCreateOutboundReplicationGroupRequestPB) (*XClusterCreateOutboundReplicationGroupResponsePB, error)
	XClusterAddNamespaceToOutboundReplicationGroup(request *XClusterAddNamespaceToOutboundReplicationGroupRequestPB) (*XClusterAddNamespaceToOutboundReplicationGroupResponsePB, error)
	XClusterRemoveNamespaceFromOutboundReplicationGroup(request *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) (*XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB, error)
	XClusterDeleteOutboundReplicationGroup(request *XClusterDeleteOutboundReplicationGroupRequestPB) (*XClusterDeleteOutboundReplicationGroupResponsePB, error)
	IsXClusterBootstrapRequired(request *IsXClusterBootstrapRequiredRequestPB) (*IsXClusterBootstrapRequiredResponsePB, error)
	XClusterEnsureSequenceUpdatesAreInWal(request *XClusterEnsureSequenceUpdatesAreInWalRequestPB) (*XClusterEnsureSequenceUpdatesAreInWalResponsePB, error)
	GetXClusterStreams(request *GetXClusterStreamsRequestPB) (*GetXClusterStreamsResponsePB, error)
	RepairOutboundXClusterReplicationGroupAddTable(request *RepairOutboundXClusterReplicationGroupAddTableRequestPB) (*RepairOutboundXClusterReplicationGroupAddTableResponsePB, error)
	RepairOutboundXClusterReplicationGroupRemoveTable(request *RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) (*RepairOutboundXClusterReplicationGroupRemoveTableResponsePB, error)
	GetXClusterOutboundReplicationGroups(request *GetXClusterOutboundReplicationGroupsRequestPB) (*GetXClusterOutboundReplicationGroupsResponsePB, error)
	GetXClusterOutboundReplicationGroupInfo(request *GetXClusterOutboundReplicationGroupInfoRequestPB) (*GetXClusterOutboundReplicationGroupInfoResponsePB, error)
	CreateXClusterReplication(request *CreateXClusterReplicationRequestPB) (*CreateXClusterReplicationResponsePB, error)
	IsCreateXClusterReplicationDone(request *IsCreateXClusterReplicationDoneRequestPB) (*IsCreateXClusterReplicationDoneResponsePB, error)
	AddNamespaceToXClusterReplication(request *AddNamespaceToXClusterReplicationRequestPB) (*AddNamespaceToXClusterReplicationResponsePB, error)
	IsAlterXClusterReplicationDone(request *IsAlterXClusterReplicationDoneRequestPB) (*IsAlterXClusterReplicationDoneResponsePB, error)
	DisableDynamicTableAdditionOnCDCSDKStream(request *DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) (*DisableDynamicTableAdditionOnCDCSDKStreamResponsePB, error)
	RemoveUserTableFromCDCSDKStream(request *RemoveUserTableFromCDCSDKStreamRequestPB) (*RemoveUserTableFromCDCSDKStreamResponsePB, error)
	ValidateAndSyncCDCStateEntriesForCDCSDKStream(request *ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) (*ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB, error)
	RemoveTablesFromCDCSDKStream(request *RemoveTablesFromCDCSDKStreamRequestPB) (*RemoveTablesFromCDCSDKStreamResponsePB, error)
}

type MasterReplicationImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

// Tablet-level Replication.

func (s *MasterReplicationImpl) ValidateReplicationInfo(request *ValidateReplicationInfoRequestPB) (*ValidateReplicationInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "ValidateReplicationInfo", "request", request)
	response := &ValidateReplicationInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "ValidateReplicationInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "ValidateReplicationInfo", "response", response)

	return response, nil
}

// CDC stream RPCs.

func (s *MasterReplicationImpl) CreateCDCStream(request *CreateCDCStreamRequestPB) (*CreateCDCStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "CreateCDCStream", "request", request)
	response := &CreateCDCStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "CreateCDCStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "CreateCDCStream", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) DeleteCDCStream(request *DeleteCDCStreamRequestPB) (*DeleteCDCStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "DeleteCDCStream", "request", request)
	response := &DeleteCDCStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "DeleteCDCStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "DeleteCDCStream", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) ListCDCStreams(request *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "ListCDCStreams", "request", request)
	response := &ListCDCStreamsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "ListCDCStreams", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "ListCDCStreams", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) IsObjectPartOfXRepl(request *IsObjectPartOfXReplRequestPB) (*IsObjectPartOfXReplResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "IsObjectPartOfXRepl", "request", request)
	response := &IsObjectPartOfXReplResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "IsObjectPartOfXRepl", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "IsObjectPartOfXRepl", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetCDCStream(request *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetCDCStream", "request", request)
	response := &GetCDCStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetCDCStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetCDCStream", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetCDCDBStreamInfo(request *GetCDCDBStreamInfoRequestPB) (*GetCDCDBStreamInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetCDCDBStreamInfo", "request", request)
	response := &GetCDCDBStreamInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetCDCDBStreamInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetCDCDBStreamInfo", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) UpdateCDCStream(request *UpdateCDCStreamRequestPB) (*UpdateCDCStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "UpdateCDCStream", "request", request)
	response := &UpdateCDCStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "UpdateCDCStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "UpdateCDCStream", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) IsBootstrapRequired(request *IsBootstrapRequiredRequestPB) (*IsBootstrapRequiredResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "IsBootstrapRequired", "request", request)
	response := &IsBootstrapRequiredResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "IsBootstrapRequired", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "IsBootstrapRequired", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetUDTypeMetadata(request *GetUDTypeMetadataRequestPB) (*GetUDTypeMetadataResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetUDTypeMetadata", "request", request)
	response := &GetUDTypeMetadataResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetUDTypeMetadata", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetUDTypeMetadata", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) WaitForReplicationDrain(request *WaitForReplicationDrainRequestPB) (*WaitForReplicationDrainResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "WaitForReplicationDrain", "request", request)
	response := &WaitForReplicationDrainResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "WaitForReplicationDrain", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "WaitForReplicationDrain", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetTableSchemaFromSysCatalog(request *GetTableSchemaFromSysCatalogRequestPB) (*GetTableSchemaFromSysCatalogResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetTableSchemaFromSysCatalog", "request", request)
	response := &GetTableSchemaFromSysCatalogResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetTableSchemaFromSysCatalog", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetTableSchemaFromSysCatalog", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) SetupNamespaceReplicationWithBootstrap(request *SetupNamespaceReplicationWithBootstrapRequestPB) (*SetupNamespaceReplicationWithBootstrapResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "SetupNamespaceReplicationWithBootstrap", "request", request)
	response := &SetupNamespaceReplicationWithBootstrapResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "SetupNamespaceReplicationWithBootstrap", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "SetupNamespaceReplicationWithBootstrap", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) SetupUniverseReplication(request *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "SetupUniverseReplication", "request", request)
	response := &SetupUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "SetupUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "SetupUniverseReplication", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) DeleteUniverseReplication(request *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "DeleteUniverseReplication", "request", request)
	response := &DeleteUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "DeleteUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "DeleteUniverseReplication", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) AlterUniverseReplication(request *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "AlterUniverseReplication", "request", request)
	response := &AlterUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "AlterUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "AlterUniverseReplication", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) SetUniverseReplicationEnabled(request *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "SetUniverseReplicationEnabled", "request", request)
	response := &SetUniverseReplicationEnabledResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "SetUniverseReplicationEnabled", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "SetUniverseReplicationEnabled", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) PauseResumeXClusterProducerStreams(request *PauseResumeXClusterProducerStreamsRequestPB) (*PauseResumeXClusterProducerStreamsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "PauseResumeXClusterProducerStreams", "request", request)
	response := &PauseResumeXClusterProducerStreamsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "PauseResumeXClusterProducerStreams", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "PauseResumeXClusterProducerStreams", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetUniverseReplication(request *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetUniverseReplication", "request", request)
	response := &GetUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetUniverseReplication", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) IsSetupNamespaceReplicationWithBootstrapDone(request *IsSetupNamespaceReplicationWithBootstrapDoneRequestPB) (*IsSetupNamespaceReplicationWithBootstrapDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "IsSetupNamespaceReplicationWithBootstrapDone", "request", request)
	response := &IsSetupNamespaceReplicationWithBootstrapDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "IsSetupNamespaceReplicationWithBootstrapDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "IsSetupNamespaceReplicationWithBootstrapDone", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) IsSetupUniverseReplicationDone(request *IsSetupUniverseReplicationDoneRequestPB) (*IsSetupUniverseReplicationDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "IsSetupUniverseReplicationDone", "request", request)
	response := &IsSetupUniverseReplicationDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "IsSetupUniverseReplicationDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "IsSetupUniverseReplicationDone", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) ChangeXClusterRole(request *ChangeXClusterRoleRequestPB) (*ChangeXClusterRoleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "ChangeXClusterRole", "request", request)
	response := &ChangeXClusterRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "ChangeXClusterRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "ChangeXClusterRole", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) UpdateConsumerOnProducerSplit(request *UpdateConsumerOnProducerSplitRequestPB) (*UpdateConsumerOnProducerSplitResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "UpdateConsumerOnProducerSplit", "request", request)
	response := &UpdateConsumerOnProducerSplitResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "UpdateConsumerOnProducerSplit", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "UpdateConsumerOnProducerSplit", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) UpdateConsumerOnProducerMetadata(request *UpdateConsumerOnProducerMetadataRequestPB) (*UpdateConsumerOnProducerMetadataResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "UpdateConsumerOnProducerMetadata", "request", request)
	response := &UpdateConsumerOnProducerMetadataResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "UpdateConsumerOnProducerMetadata", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "UpdateConsumerOnProducerMetadata", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) InsertPackedSchemaForXClusterTarget(request *InsertPackedSchemaForXClusterTargetRequestPB) (*InsertPackedSchemaForXClusterTargetResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "InsertPackedSchemaForXClusterTarget", "request", request)
	response := &InsertPackedSchemaForXClusterTargetResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "InsertPackedSchemaForXClusterTarget", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "InsertPackedSchemaForXClusterTarget", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetUniverseReplications(request *GetUniverseReplicationsRequestPB) (*GetUniverseReplicationsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetUniverseReplications", "request", request)
	response := &GetUniverseReplicationsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetUniverseReplications", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetUniverseReplications", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetUniverseReplicationInfo(request *GetUniverseReplicationInfoRequestPB) (*GetUniverseReplicationInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetUniverseReplicationInfo", "request", request)
	response := &GetUniverseReplicationInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetUniverseReplicationInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetUniverseReplicationInfo", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetReplicationStatus(request *GetReplicationStatusRequestPB) (*GetReplicationStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetReplicationStatus", "request", request)
	response := &GetReplicationStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetReplicationStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetReplicationStatus", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetXClusterSafeTime(request *GetXClusterSafeTimeRequestPB) (*GetXClusterSafeTimeResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetXClusterSafeTime", "request", request)
	response := &GetXClusterSafeTimeResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetXClusterSafeTime", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetXClusterSafeTime", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetXClusterSafeTimeForNamespace(request *GetXClusterSafeTimeForNamespaceRequestPB) (*GetXClusterSafeTimeForNamespaceResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetXClusterSafeTimeForNamespace", "request", request)
	response := &GetXClusterSafeTimeForNamespaceResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetXClusterSafeTimeForNamespace", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetXClusterSafeTimeForNamespace", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) BootstrapProducer(request *BootstrapProducerRequestPB) (*BootstrapProducerResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "BootstrapProducer", "request", request)
	response := &BootstrapProducerResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "BootstrapProducer", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "BootstrapProducer", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) XClusterReportNewAutoFlagConfigVersion(request *XClusterReportNewAutoFlagConfigVersionRequestPB) (*XClusterReportNewAutoFlagConfigVersionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "XClusterReportNewAutoFlagConfigVersion", "request", request)
	response := &XClusterReportNewAutoFlagConfigVersionResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "XClusterReportNewAutoFlagConfigVersion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "XClusterReportNewAutoFlagConfigVersion", "response", response)

	return response, nil
}

// Backfill a replication slot name to an existing CDCSDK stream.

func (s *MasterReplicationImpl) YsqlBackfillReplicationSlotNameToCDCSDKStream(request *YsqlBackfillReplicationSlotNameToCDCSDKStreamRequestPB) (*YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "YsqlBackfillReplicationSlotNameToCDCSDKStream", "request", request)
	response := &YsqlBackfillReplicationSlotNameToCDCSDKStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "YsqlBackfillReplicationSlotNameToCDCSDKStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "YsqlBackfillReplicationSlotNameToCDCSDKStream", "response", response)

	return response, nil
}

// xClusterOutboundReplicationGroup RPCs.

func (s *MasterReplicationImpl) XClusterCreateOutboundReplicationGroup(request *XClusterCreateOutboundReplicationGroupRequestPB) (*XClusterCreateOutboundReplicationGroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "XClusterCreateOutboundReplicationGroup", "request", request)
	response := &XClusterCreateOutboundReplicationGroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "XClusterCreateOutboundReplicationGroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "XClusterCreateOutboundReplicationGroup", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) XClusterAddNamespaceToOutboundReplicationGroup(request *XClusterAddNamespaceToOutboundReplicationGroupRequestPB) (*XClusterAddNamespaceToOutboundReplicationGroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "XClusterAddNamespaceToOutboundReplicationGroup", "request", request)
	response := &XClusterAddNamespaceToOutboundReplicationGroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "XClusterAddNamespaceToOutboundReplicationGroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "XClusterAddNamespaceToOutboundReplicationGroup", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) XClusterRemoveNamespaceFromOutboundReplicationGroup(request *XClusterRemoveNamespaceFromOutboundReplicationGroupRequestPB) (*XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "XClusterRemoveNamespaceFromOutboundReplicationGroup", "request", request)
	response := &XClusterRemoveNamespaceFromOutboundReplicationGroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "XClusterRemoveNamespaceFromOutboundReplicationGroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "XClusterRemoveNamespaceFromOutboundReplicationGroup", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) XClusterDeleteOutboundReplicationGroup(request *XClusterDeleteOutboundReplicationGroupRequestPB) (*XClusterDeleteOutboundReplicationGroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "XClusterDeleteOutboundReplicationGroup", "request", request)
	response := &XClusterDeleteOutboundReplicationGroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "XClusterDeleteOutboundReplicationGroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "XClusterDeleteOutboundReplicationGroup", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) IsXClusterBootstrapRequired(request *IsXClusterBootstrapRequiredRequestPB) (*IsXClusterBootstrapRequiredResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "IsXClusterBootstrapRequired", "request", request)
	response := &IsXClusterBootstrapRequiredResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "IsXClusterBootstrapRequired", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "IsXClusterBootstrapRequired", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) XClusterEnsureSequenceUpdatesAreInWal(request *XClusterEnsureSequenceUpdatesAreInWalRequestPB) (*XClusterEnsureSequenceUpdatesAreInWalResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "XClusterEnsureSequenceUpdatesAreInWal", "request", request)
	response := &XClusterEnsureSequenceUpdatesAreInWalResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "XClusterEnsureSequenceUpdatesAreInWal", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "XClusterEnsureSequenceUpdatesAreInWal", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetXClusterStreams(request *GetXClusterStreamsRequestPB) (*GetXClusterStreamsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetXClusterStreams", "request", request)
	response := &GetXClusterStreamsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetXClusterStreams", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetXClusterStreams", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) RepairOutboundXClusterReplicationGroupAddTable(request *RepairOutboundXClusterReplicationGroupAddTableRequestPB) (*RepairOutboundXClusterReplicationGroupAddTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "RepairOutboundXClusterReplicationGroupAddTable", "request", request)
	response := &RepairOutboundXClusterReplicationGroupAddTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "RepairOutboundXClusterReplicationGroupAddTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "RepairOutboundXClusterReplicationGroupAddTable", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) RepairOutboundXClusterReplicationGroupRemoveTable(request *RepairOutboundXClusterReplicationGroupRemoveTableRequestPB) (*RepairOutboundXClusterReplicationGroupRemoveTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "RepairOutboundXClusterReplicationGroupRemoveTable", "request", request)
	response := &RepairOutboundXClusterReplicationGroupRemoveTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "RepairOutboundXClusterReplicationGroupRemoveTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "RepairOutboundXClusterReplicationGroupRemoveTable", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetXClusterOutboundReplicationGroups(request *GetXClusterOutboundReplicationGroupsRequestPB) (*GetXClusterOutboundReplicationGroupsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetXClusterOutboundReplicationGroups", "request", request)
	response := &GetXClusterOutboundReplicationGroupsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetXClusterOutboundReplicationGroups", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetXClusterOutboundReplicationGroups", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) GetXClusterOutboundReplicationGroupInfo(request *GetXClusterOutboundReplicationGroupInfoRequestPB) (*GetXClusterOutboundReplicationGroupInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "GetXClusterOutboundReplicationGroupInfo", "request", request)
	response := &GetXClusterOutboundReplicationGroupInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "GetXClusterOutboundReplicationGroupInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "GetXClusterOutboundReplicationGroupInfo", "response", response)

	return response, nil
}

// xCluster APIsV2

func (s *MasterReplicationImpl) CreateXClusterReplication(request *CreateXClusterReplicationRequestPB) (*CreateXClusterReplicationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "CreateXClusterReplication", "request", request)
	response := &CreateXClusterReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "CreateXClusterReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "CreateXClusterReplication", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) IsCreateXClusterReplicationDone(request *IsCreateXClusterReplicationDoneRequestPB) (*IsCreateXClusterReplicationDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "IsCreateXClusterReplicationDone", "request", request)
	response := &IsCreateXClusterReplicationDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "IsCreateXClusterReplicationDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "IsCreateXClusterReplicationDone", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) AddNamespaceToXClusterReplication(request *AddNamespaceToXClusterReplicationRequestPB) (*AddNamespaceToXClusterReplicationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "AddNamespaceToXClusterReplication", "request", request)
	response := &AddNamespaceToXClusterReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "AddNamespaceToXClusterReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "AddNamespaceToXClusterReplication", "response", response)

	return response, nil
}

func (s *MasterReplicationImpl) IsAlterXClusterReplicationDone(request *IsAlterXClusterReplicationDoneRequestPB) (*IsAlterXClusterReplicationDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "IsAlterXClusterReplicationDone", "request", request)
	response := &IsAlterXClusterReplicationDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "IsAlterXClusterReplicationDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "IsAlterXClusterReplicationDone", "response", response)

	return response, nil
}

// Introduced for bug (#22876, #22773)

func (s *MasterReplicationImpl) DisableDynamicTableAdditionOnCDCSDKStream(request *DisableDynamicTableAdditionOnCDCSDKStreamRequestPB) (*DisableDynamicTableAdditionOnCDCSDKStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "DisableDynamicTableAdditionOnCDCSDKStream", "request", request)
	response := &DisableDynamicTableAdditionOnCDCSDKStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "DisableDynamicTableAdditionOnCDCSDKStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "DisableDynamicTableAdditionOnCDCSDKStream", "response", response)

	return response, nil
}

// Introduced for bug (#22876, #22773)

func (s *MasterReplicationImpl) RemoveUserTableFromCDCSDKStream(request *RemoveUserTableFromCDCSDKStreamRequestPB) (*RemoveUserTableFromCDCSDKStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "RemoveUserTableFromCDCSDKStream", "request", request)
	response := &RemoveUserTableFromCDCSDKStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "RemoveUserTableFromCDCSDKStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "RemoveUserTableFromCDCSDKStream", "response", response)

	return response, nil
}

// Introduced for bug (#22876, #22773)

func (s *MasterReplicationImpl) ValidateAndSyncCDCStateEntriesForCDCSDKStream(request *ValidateAndSyncCDCStateEntriesForCDCSDKStreamRequestPB) (*ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "ValidateAndSyncCDCStateEntriesForCDCSDKStream", "request", request)
	response := &ValidateAndSyncCDCStateEntriesForCDCSDKStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "ValidateAndSyncCDCStateEntriesForCDCSDKStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "ValidateAndSyncCDCStateEntriesForCDCSDKStream", "response", response)

	return response, nil
}

// Introduced for bug (#22876, #22773)

func (s *MasterReplicationImpl) RemoveTablesFromCDCSDKStream(request *RemoveTablesFromCDCSDKStreamRequestPB) (*RemoveTablesFromCDCSDKStreamResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterReplication", "method", "RemoveTablesFromCDCSDKStream", "request", request)
	response := &RemoveTablesFromCDCSDKStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterReplication", "RemoveTablesFromCDCSDKStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterReplication", "method", "RemoveTablesFromCDCSDKStream", "response", response)

	return response, nil
}
