// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterDcl
// service: MasterDcl
type MasterDcl interface {
	CreateRole(request *CreateRoleRequestPB) (*CreateRoleResponsePB, error)
	AlterRole(request *AlterRoleRequestPB) (*AlterRoleResponsePB, error)
	DeleteRole(request *DeleteRoleRequestPB) (*DeleteRoleResponsePB, error)
	GrantRevokeRole(request *GrantRevokeRoleRequestPB) (*GrantRevokeRoleResponsePB, error)
	GrantRevokePermission(request *GrantRevokePermissionRequestPB) (*GrantRevokePermissionResponsePB, error)
	GetPermissions(request *GetPermissionsRequestPB) (*GetPermissionsResponsePB, error)
}

type MasterDclImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

//  Authentication and Authorization.

func (s *MasterDclImpl) CreateRole(request *CreateRoleRequestPB) (*CreateRoleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDcl", "method", "CreateRole", "request", request)
	response := &CreateRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDcl", "CreateRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDcl", "method", "CreateRole", "response", response)

	return response, nil
}

func (s *MasterDclImpl) AlterRole(request *AlterRoleRequestPB) (*AlterRoleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDcl", "method", "AlterRole", "request", request)
	response := &AlterRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDcl", "AlterRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDcl", "method", "AlterRole", "response", response)

	return response, nil
}

func (s *MasterDclImpl) DeleteRole(request *DeleteRoleRequestPB) (*DeleteRoleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDcl", "method", "DeleteRole", "request", request)
	response := &DeleteRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDcl", "DeleteRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDcl", "method", "DeleteRole", "response", response)

	return response, nil
}

func (s *MasterDclImpl) GrantRevokeRole(request *GrantRevokeRoleRequestPB) (*GrantRevokeRoleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDcl", "method", "GrantRevokeRole", "request", request)
	response := &GrantRevokeRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDcl", "GrantRevokeRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDcl", "method", "GrantRevokeRole", "response", response)

	return response, nil
}

func (s *MasterDclImpl) GrantRevokePermission(request *GrantRevokePermissionRequestPB) (*GrantRevokePermissionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDcl", "method", "GrantRevokePermission", "request", request)
	response := &GrantRevokePermissionResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDcl", "GrantRevokePermission", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDcl", "method", "GrantRevokePermission", "response", response)

	return response, nil
}

func (s *MasterDclImpl) GetPermissions(request *GetPermissionsRequestPB) (*GetPermissionsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDcl", "method", "GetPermissions", "request", request)
	response := &GetPermissionsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDcl", "GetPermissions", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDcl", "method", "GetPermissions", "response", response)

	return response, nil
}
