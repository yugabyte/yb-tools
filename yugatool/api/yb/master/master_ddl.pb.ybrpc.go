// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterDdl
// service: MasterDdl
type MasterDdl interface {
	CreateTable(request *CreateTableRequestPB) (*CreateTableResponsePB, error)
	IsCreateTableDone(request *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error)
	ListTables(request *ListTablesRequestPB) (*ListTablesResponsePB, error)
	GetTableSchema(request *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error)
	GetTablegroupSchema(request *GetTablegroupSchemaRequestPB) (*GetTablegroupSchemaResponsePB, error)
	GetColocatedTabletSchema(request *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error)
	TruncateTable(request *TruncateTableRequestPB) (*TruncateTableResponsePB, error)
	IsTruncateTableDone(request *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error)
	BackfillIndex(request *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error)
	LaunchBackfillIndexForTable(request *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error)
	GetBackfillJobs(request *GetBackfillJobsRequestPB) (*GetBackfillJobsResponsePB, error)
	GetBackfillStatus(request *GetBackfillStatusRequestPB) (*GetBackfillStatusResponsePB, error)
	DeleteTable(request *DeleteTableRequestPB) (*DeleteTableResponsePB, error)
	IsDeleteTableDone(request *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error)
	AlterTable(request *AlterTableRequestPB) (*AlterTableResponsePB, error)
	IsAlterTableDone(request *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error)
	CreateNamespace(request *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error)
	IsCreateNamespaceDone(request *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error)
	DeleteNamespace(request *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error)
	IsDeleteNamespaceDone(request *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error)
	AlterNamespace(request *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error)
	ListNamespaces(request *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error)
	GetNamespaceInfo(request *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error)
	GetTableDiskSize(request *GetTableDiskSizeRequestPB) (*GetTableDiskSizeResponsePB, error)
	CreateTablegroup(request *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error)
	DeleteTablegroup(request *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error)
	ListTablegroups(request *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error)
	CreateUDType(request *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error)
	DeleteUDType(request *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error)
	ListUDTypes(request *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error)
	GetUDTypeInfo(request *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error)
	ReportYsqlDdlTxnStatus(request *ReportYsqlDdlTxnStatusRequestPB) (*ReportYsqlDdlTxnStatusResponsePB, error)
	IsYsqlDdlVerificationDone(request *IsYsqlDdlVerificationDoneRequestPB) (*IsYsqlDdlVerificationDoneResponsePB, error)
}

type MasterDdlImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

func (s *MasterDdlImpl) CreateTable(request *CreateTableRequestPB) (*CreateTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "CreateTable", "request", request)
	response := &CreateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "CreateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "CreateTable", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) IsCreateTableDone(request *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "IsCreateTableDone", "request", request)
	response := &IsCreateTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "IsCreateTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "IsCreateTableDone", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) ListTables(request *ListTablesRequestPB) (*ListTablesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "ListTables", "request", request)
	response := &ListTablesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "ListTables", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "ListTables", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetTableSchema(request *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetTableSchema", "request", request)
	response := &GetTableSchemaResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetTableSchema", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetTableSchema", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetTablegroupSchema(request *GetTablegroupSchemaRequestPB) (*GetTablegroupSchemaResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetTablegroupSchema", "request", request)
	response := &GetTablegroupSchemaResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetTablegroupSchema", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetTablegroupSchema", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetColocatedTabletSchema(request *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetColocatedTabletSchema", "request", request)
	response := &GetColocatedTabletSchemaResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetColocatedTabletSchema", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetColocatedTabletSchema", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) TruncateTable(request *TruncateTableRequestPB) (*TruncateTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "TruncateTable", "request", request)
	response := &TruncateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "TruncateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "TruncateTable", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) IsTruncateTableDone(request *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "IsTruncateTableDone", "request", request)
	response := &IsTruncateTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "IsTruncateTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "IsTruncateTableDone", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) BackfillIndex(request *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "BackfillIndex", "request", request)
	response := &BackfillIndexResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "BackfillIndex", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "BackfillIndex", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) LaunchBackfillIndexForTable(request *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "LaunchBackfillIndexForTable", "request", request)
	response := &LaunchBackfillIndexForTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "LaunchBackfillIndexForTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "LaunchBackfillIndexForTable", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetBackfillJobs(request *GetBackfillJobsRequestPB) (*GetBackfillJobsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetBackfillJobs", "request", request)
	response := &GetBackfillJobsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetBackfillJobs", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetBackfillJobs", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetBackfillStatus(request *GetBackfillStatusRequestPB) (*GetBackfillStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetBackfillStatus", "request", request)
	response := &GetBackfillStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetBackfillStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetBackfillStatus", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) DeleteTable(request *DeleteTableRequestPB) (*DeleteTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "DeleteTable", "request", request)
	response := &DeleteTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "DeleteTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "DeleteTable", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) IsDeleteTableDone(request *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "IsDeleteTableDone", "request", request)
	response := &IsDeleteTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "IsDeleteTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "IsDeleteTableDone", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) AlterTable(request *AlterTableRequestPB) (*AlterTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "AlterTable", "request", request)
	response := &AlterTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "AlterTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "AlterTable", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) IsAlterTableDone(request *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "IsAlterTableDone", "request", request)
	response := &IsAlterTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "IsAlterTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "IsAlterTableDone", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) CreateNamespace(request *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "CreateNamespace", "request", request)
	response := &CreateNamespaceResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "CreateNamespace", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "CreateNamespace", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) IsCreateNamespaceDone(request *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "IsCreateNamespaceDone", "request", request)
	response := &IsCreateNamespaceDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "IsCreateNamespaceDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "IsCreateNamespaceDone", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) DeleteNamespace(request *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "DeleteNamespace", "request", request)
	response := &DeleteNamespaceResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "DeleteNamespace", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "DeleteNamespace", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) IsDeleteNamespaceDone(request *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "IsDeleteNamespaceDone", "request", request)
	response := &IsDeleteNamespaceDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "IsDeleteNamespaceDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "IsDeleteNamespaceDone", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) AlterNamespace(request *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "AlterNamespace", "request", request)
	response := &AlterNamespaceResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "AlterNamespace", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "AlterNamespace", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) ListNamespaces(request *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "ListNamespaces", "request", request)
	response := &ListNamespacesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "ListNamespaces", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "ListNamespaces", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetNamespaceInfo(request *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetNamespaceInfo", "request", request)
	response := &GetNamespaceInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetNamespaceInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetNamespaceInfo", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetTableDiskSize(request *GetTableDiskSizeRequestPB) (*GetTableDiskSizeResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetTableDiskSize", "request", request)
	response := &GetTableDiskSizeResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetTableDiskSize", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetTableDiskSize", "response", response)

	return response, nil
}

// For Tablegroup:

func (s *MasterDdlImpl) CreateTablegroup(request *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "CreateTablegroup", "request", request)
	response := &CreateTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "CreateTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "CreateTablegroup", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) DeleteTablegroup(request *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "DeleteTablegroup", "request", request)
	response := &DeleteTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "DeleteTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "DeleteTablegroup", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) ListTablegroups(request *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "ListTablegroups", "request", request)
	response := &ListTablegroupsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "ListTablegroups", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "ListTablegroups", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) CreateUDType(request *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "CreateUDType", "request", request)
	response := &CreateUDTypeResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "CreateUDType", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "CreateUDType", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) DeleteUDType(request *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "DeleteUDType", "request", request)
	response := &DeleteUDTypeResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "DeleteUDType", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "DeleteUDType", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) ListUDTypes(request *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "ListUDTypes", "request", request)
	response := &ListUDTypesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "ListUDTypes", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "ListUDTypes", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) GetUDTypeInfo(request *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "GetUDTypeInfo", "request", request)
	response := &GetUDTypeInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "GetUDTypeInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "GetUDTypeInfo", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) ReportYsqlDdlTxnStatus(request *ReportYsqlDdlTxnStatusRequestPB) (*ReportYsqlDdlTxnStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "ReportYsqlDdlTxnStatus", "request", request)
	response := &ReportYsqlDdlTxnStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "ReportYsqlDdlTxnStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "ReportYsqlDdlTxnStatus", "response", response)

	return response, nil
}

func (s *MasterDdlImpl) IsYsqlDdlVerificationDone(request *IsYsqlDdlVerificationDoneRequestPB) (*IsYsqlDdlVerificationDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterDdl", "method", "IsYsqlDdlVerificationDone", "request", request)
	response := &IsYsqlDdlVerificationDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterDdl", "IsYsqlDdlVerificationDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterDdl", "method", "IsYsqlDdlVerificationDone", "response", response)

	return response, nil
}
