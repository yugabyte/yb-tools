// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterClient
// service: MasterClient
type MasterClient interface {
	GetTabletLocations(request *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error)
	GetTableLocations(request *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error)
	GetTransactionStatusTablets(request *GetTransactionStatusTabletsRequestPB) (*GetTransactionStatusTabletsResponsePB, error)
	ReservePgsqlOids(request *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error)
	GetYsqlCatalogConfig(request *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error)
	GetIndexBackfillProgress(request *GetIndexBackfillProgressRequestPB) (*GetIndexBackfillProgressResponsePB, error)
	RedisConfigSet(request *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error)
	RedisConfigGet(request *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error)
	GetStatefulServiceLocation(request *GetStatefulServiceLocationRequestPB) (*GetStatefulServiceLocationResponsePB, error)
}

type MasterClientImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

// Client->Master RPCs

func (s *MasterClientImpl) GetTabletLocations(request *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "GetTabletLocations", "request", request)
	response := &GetTabletLocationsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "GetTabletLocations", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "GetTabletLocations", "response", response)

	return response, nil
}

func (s *MasterClientImpl) GetTableLocations(request *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "GetTableLocations", "request", request)
	response := &GetTableLocationsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "GetTableLocations", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "GetTableLocations", "response", response)

	return response, nil
}

func (s *MasterClientImpl) GetTransactionStatusTablets(request *GetTransactionStatusTabletsRequestPB) (*GetTransactionStatusTabletsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "GetTransactionStatusTablets", "request", request)
	response := &GetTransactionStatusTabletsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "GetTransactionStatusTablets", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "GetTransactionStatusTablets", "response", response)

	return response, nil
}

// For Postgres:

func (s *MasterClientImpl) ReservePgsqlOids(request *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "ReservePgsqlOids", "request", request)
	response := &ReservePgsqlOidsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "ReservePgsqlOids", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "ReservePgsqlOids", "response", response)

	return response, nil
}

func (s *MasterClientImpl) GetYsqlCatalogConfig(request *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "GetYsqlCatalogConfig", "request", request)
	response := &GetYsqlCatalogConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "GetYsqlCatalogConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "GetYsqlCatalogConfig", "response", response)

	return response, nil
}

func (s *MasterClientImpl) GetIndexBackfillProgress(request *GetIndexBackfillProgressRequestPB) (*GetIndexBackfillProgressResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "GetIndexBackfillProgress", "request", request)
	response := &GetIndexBackfillProgressResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "GetIndexBackfillProgress", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "GetIndexBackfillProgress", "response", response)

	return response, nil
}

// Redis Config

func (s *MasterClientImpl) RedisConfigSet(request *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "RedisConfigSet", "request", request)
	response := &RedisConfigSetResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "RedisConfigSet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "RedisConfigSet", "response", response)

	return response, nil
}

func (s *MasterClientImpl) RedisConfigGet(request *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "RedisConfigGet", "request", request)
	response := &RedisConfigGetResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "RedisConfigGet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "RedisConfigGet", "response", response)

	return response, nil
}

func (s *MasterClientImpl) GetStatefulServiceLocation(request *GetStatefulServiceLocationRequestPB) (*GetStatefulServiceLocationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterClient", "method", "GetStatefulServiceLocation", "request", request)
	response := &GetStatefulServiceLocationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterClient", "GetStatefulServiceLocation", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterClient", "method", "GetStatefulServiceLocation", "response", response)

	return response, nil
}
