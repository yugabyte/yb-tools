// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.master.MasterEncryption
// service: MasterEncryption
type MasterEncryption interface {
	ChangeEncryptionInfo(request *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error)
	IsEncryptionEnabled(request *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error)
	AddUniverseKeys(request *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error)
	GetUniverseKeyRegistry(request *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error)
	GetFullUniverseKeyRegistry(request *GetFullUniverseKeyRegistryRequestPB) (*GetFullUniverseKeyRegistryResponsePB, error)
	HasUniverseKeyInMemory(request *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error)
}

type MasterEncryptionImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

func (s *MasterEncryptionImpl) ChangeEncryptionInfo(request *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterEncryption", "method", "ChangeEncryptionInfo", "request", request)
	response := &ChangeEncryptionInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterEncryption", "ChangeEncryptionInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterEncryption", "method", "ChangeEncryptionInfo", "response", response)

	return response, nil
}

func (s *MasterEncryptionImpl) IsEncryptionEnabled(request *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterEncryption", "method", "IsEncryptionEnabled", "request", request)
	response := &IsEncryptionEnabledResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterEncryption", "IsEncryptionEnabled", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterEncryption", "method", "IsEncryptionEnabled", "response", response)

	return response, nil
}

func (s *MasterEncryptionImpl) AddUniverseKeys(request *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterEncryption", "method", "AddUniverseKeys", "request", request)
	response := &AddUniverseKeysResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterEncryption", "AddUniverseKeys", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterEncryption", "method", "AddUniverseKeys", "response", response)

	return response, nil
}

func (s *MasterEncryptionImpl) GetUniverseKeyRegistry(request *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterEncryption", "method", "GetUniverseKeyRegistry", "request", request)
	response := &GetUniverseKeyRegistryResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterEncryption", "GetUniverseKeyRegistry", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterEncryption", "method", "GetUniverseKeyRegistry", "response", response)

	return response, nil
}

func (s *MasterEncryptionImpl) GetFullUniverseKeyRegistry(request *GetFullUniverseKeyRegistryRequestPB) (*GetFullUniverseKeyRegistryResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterEncryption", "method", "GetFullUniverseKeyRegistry", "request", request)
	response := &GetFullUniverseKeyRegistryResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterEncryption", "GetFullUniverseKeyRegistry", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterEncryption", "method", "GetFullUniverseKeyRegistry", "response", response)

	return response, nil
}

func (s *MasterEncryptionImpl) HasUniverseKeyInMemory(request *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.master.MasterEncryption", "method", "HasUniverseKeyInMemory", "request", request)
	response := &HasUniverseKeyInMemoryResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterEncryption", "HasUniverseKeyInMemory", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.master.MasterEncryption", "method", "HasUniverseKeyInMemory", "response", response)

	return response, nil
}
