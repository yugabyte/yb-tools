// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/master/catalog_entity_info.proto

package master

import (
	cdc "github.com/yugabyte/yb-tools/yugatool/api/yb/cdc"
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	consensus "github.com/yugabyte/yb-tools/yugatool/api/yb/consensus"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BackfillJobPB_State int32

const (
	BackfillJobPB_IN_PROGRESS BackfillJobPB_State = 0
	BackfillJobPB_FAILED      BackfillJobPB_State = 1
	BackfillJobPB_SUCCESS     BackfillJobPB_State = 2
)

// Enum value maps for BackfillJobPB_State.
var (
	BackfillJobPB_State_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "FAILED",
		2: "SUCCESS",
	}
	BackfillJobPB_State_value = map[string]int32{
		"IN_PROGRESS": 0,
		"FAILED":      1,
		"SUCCESS":     2,
	}
)

func (x BackfillJobPB_State) Enum() *BackfillJobPB_State {
	p := new(BackfillJobPB_State)
	*p = x
	return p
}

func (x BackfillJobPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackfillJobPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[0].Descriptor()
}

func (BackfillJobPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[0]
}

func (x BackfillJobPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackfillJobPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackfillJobPB_State(num)
	return nil
}

// Deprecated: Use BackfillJobPB_State.Descriptor instead.
func (BackfillJobPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{3, 0}
}

type SysTablesEntryPB_State int32

const (
	SysTablesEntryPB_UNKNOWN   SysTablesEntryPB_State = 0
	SysTablesEntryPB_PREPARING SysTablesEntryPB_State = 1
	SysTablesEntryPB_RUNNING   SysTablesEntryPB_State = 2
	SysTablesEntryPB_ALTERING  SysTablesEntryPB_State = 3
	SysTablesEntryPB_DELETING  SysTablesEntryPB_State = 4
	SysTablesEntryPB_DELETED   SysTablesEntryPB_State = 5
)

// Enum value maps for SysTablesEntryPB_State.
var (
	SysTablesEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARING",
		2: "RUNNING",
		3: "ALTERING",
		4: "DELETING",
		5: "DELETED",
	}
	SysTablesEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"PREPARING": 1,
		"RUNNING":   2,
		"ALTERING":  3,
		"DELETING":  4,
		"DELETED":   5,
	}
)

func (x SysTablesEntryPB_State) Enum() *SysTablesEntryPB_State {
	p := new(SysTablesEntryPB_State)
	*p = x
	return p
}

func (x SysTablesEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTablesEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[1].Descriptor()
}

func (SysTablesEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[1]
}

func (x SysTablesEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTablesEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTablesEntryPB_State(num)
	return nil
}

// Deprecated: Use SysTablesEntryPB_State.Descriptor instead.
func (SysTablesEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{5, 0}
}

type SysTablesEntryPB_HideState int32

const (
	SysTablesEntryPB_VISIBLE SysTablesEntryPB_HideState = 0
	SysTablesEntryPB_HIDING  SysTablesEntryPB_HideState = 1
	SysTablesEntryPB_HIDDEN  SysTablesEntryPB_HideState = 2
)

// Enum value maps for SysTablesEntryPB_HideState.
var (
	SysTablesEntryPB_HideState_name = map[int32]string{
		0: "VISIBLE",
		1: "HIDING",
		2: "HIDDEN",
	}
	SysTablesEntryPB_HideState_value = map[string]int32{
		"VISIBLE": 0,
		"HIDING":  1,
		"HIDDEN":  2,
	}
)

func (x SysTablesEntryPB_HideState) Enum() *SysTablesEntryPB_HideState {
	p := new(SysTablesEntryPB_HideState)
	*p = x
	return p
}

func (x SysTablesEntryPB_HideState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTablesEntryPB_HideState) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[2].Descriptor()
}

func (SysTablesEntryPB_HideState) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[2]
}

func (x SysTablesEntryPB_HideState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTablesEntryPB_HideState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTablesEntryPB_HideState(num)
	return nil
}

// Deprecated: Use SysTablesEntryPB_HideState.Descriptor instead.
func (SysTablesEntryPB_HideState) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{5, 1}
}

type SysTabletsEntryPB_State int32

const (
	SysTabletsEntryPB_UNKNOWN   SysTabletsEntryPB_State = 999
	SysTabletsEntryPB_PREPARING SysTabletsEntryPB_State = 0
	SysTabletsEntryPB_CREATING  SysTabletsEntryPB_State = 1
	SysTabletsEntryPB_RUNNING   SysTabletsEntryPB_State = 2
	SysTabletsEntryPB_REPLACED  SysTabletsEntryPB_State = 3
	SysTabletsEntryPB_DELETED   SysTabletsEntryPB_State = 4
)

// Enum value maps for SysTabletsEntryPB_State.
var (
	SysTabletsEntryPB_State_name = map[int32]string{
		999: "UNKNOWN",
		0:   "PREPARING",
		1:   "CREATING",
		2:   "RUNNING",
		3:   "REPLACED",
		4:   "DELETED",
	}
	SysTabletsEntryPB_State_value = map[string]int32{
		"UNKNOWN":   999,
		"PREPARING": 0,
		"CREATING":  1,
		"RUNNING":   2,
		"REPLACED":  3,
		"DELETED":   4,
	}
)

func (x SysTabletsEntryPB_State) Enum() *SysTabletsEntryPB_State {
	p := new(SysTabletsEntryPB_State)
	*p = x
	return p
}

func (x SysTabletsEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTabletsEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[3].Descriptor()
}

func (SysTabletsEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[3]
}

func (x SysTabletsEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTabletsEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTabletsEntryPB_State(num)
	return nil
}

// Deprecated: Use SysTabletsEntryPB_State.Descriptor instead.
func (SysTabletsEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{6, 0}
}

// During the deletion flow a non-YSQL namespace is removed from the maps and sys catalog table
// directly instead of transitioning to any deletion states.
type SysNamespaceEntryPB_State int32

const (
	SysNamespaceEntryPB_UNKNOWN   SysNamespaceEntryPB_State = 0
	SysNamespaceEntryPB_PREPARING SysNamespaceEntryPB_State = 1
	SysNamespaceEntryPB_FAILED    SysNamespaceEntryPB_State = 2
	SysNamespaceEntryPB_RUNNING   SysNamespaceEntryPB_State = 3
	SysNamespaceEntryPB_DELETING  SysNamespaceEntryPB_State = 4
	SysNamespaceEntryPB_DELETED   SysNamespaceEntryPB_State = 5
)

// Enum value maps for SysNamespaceEntryPB_State.
var (
	SysNamespaceEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARING",
		2: "FAILED",
		3: "RUNNING",
		4: "DELETING",
		5: "DELETED",
	}
	SysNamespaceEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"PREPARING": 1,
		"FAILED":    2,
		"RUNNING":   3,
		"DELETING":  4,
		"DELETED":   5,
	}
)

func (x SysNamespaceEntryPB_State) Enum() *SysNamespaceEntryPB_State {
	p := new(SysNamespaceEntryPB_State)
	*p = x
	return p
}

func (x SysNamespaceEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysNamespaceEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[4].Descriptor()
}

func (SysNamespaceEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[4]
}

func (x SysNamespaceEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysNamespaceEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysNamespaceEntryPB_State(num)
	return nil
}

// Deprecated: Use SysNamespaceEntryPB_State.Descriptor instead.
func (SysNamespaceEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{7, 0}
}

type SysCDCStreamEntryPB_State int32

const (
	// Used to mark a stream that has been bootstrapped, but hasn't started streaming yet.
	SysCDCStreamEntryPB_INITIATED SysCDCStreamEntryPB_State = 3
	SysCDCStreamEntryPB_ACTIVE    SysCDCStreamEntryPB_State = 0
	SysCDCStreamEntryPB_DELETING  SysCDCStreamEntryPB_State = 1
	// Currently DELETED is not being used because we delete streams entries from sys catalog.
	SysCDCStreamEntryPB_DELETED SysCDCStreamEntryPB_State = 2
	// Used to handle the stream metadata cleanup as part of drop table.
	SysCDCStreamEntryPB_DELETING_METADATA SysCDCStreamEntryPB_State = 4
)

// Enum value maps for SysCDCStreamEntryPB_State.
var (
	SysCDCStreamEntryPB_State_name = map[int32]string{
		3: "INITIATED",
		0: "ACTIVE",
		1: "DELETING",
		2: "DELETED",
		4: "DELETING_METADATA",
	}
	SysCDCStreamEntryPB_State_value = map[string]int32{
		"INITIATED":         3,
		"ACTIVE":            0,
		"DELETING":          1,
		"DELETED":           2,
		"DELETING_METADATA": 4,
	}
)

func (x SysCDCStreamEntryPB_State) Enum() *SysCDCStreamEntryPB_State {
	p := new(SysCDCStreamEntryPB_State)
	*p = x
	return p
}

func (x SysCDCStreamEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysCDCStreamEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[5].Descriptor()
}

func (SysCDCStreamEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[5]
}

func (x SysCDCStreamEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysCDCStreamEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysCDCStreamEntryPB_State(num)
	return nil
}

// Deprecated: Use SysCDCStreamEntryPB_State.Descriptor instead.
func (SysCDCStreamEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{26, 0}
}

type SysSnapshotEntryPB_State int32

const (
	SysSnapshotEntryPB_UNKNOWN   SysSnapshotEntryPB_State = 0
	SysSnapshotEntryPB_CREATING  SysSnapshotEntryPB_State = 1
	SysSnapshotEntryPB_COMPLETE  SysSnapshotEntryPB_State = 2
	SysSnapshotEntryPB_DELETING  SysSnapshotEntryPB_State = 3
	SysSnapshotEntryPB_DELETED   SysSnapshotEntryPB_State = 4
	SysSnapshotEntryPB_FAILED    SysSnapshotEntryPB_State = 5
	SysSnapshotEntryPB_CANCELLED SysSnapshotEntryPB_State = 6
	SysSnapshotEntryPB_RESTORING SysSnapshotEntryPB_State = 7
	SysSnapshotEntryPB_RESTORED  SysSnapshotEntryPB_State = 8
)

// Enum value maps for SysSnapshotEntryPB_State.
var (
	SysSnapshotEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATING",
		2: "COMPLETE",
		3: "DELETING",
		4: "DELETED",
		5: "FAILED",
		6: "CANCELLED",
		7: "RESTORING",
		8: "RESTORED",
	}
	SysSnapshotEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"CREATING":  1,
		"COMPLETE":  2,
		"DELETING":  3,
		"DELETED":   4,
		"FAILED":    5,
		"CANCELLED": 6,
		"RESTORING": 7,
		"RESTORED":  8,
	}
)

func (x SysSnapshotEntryPB_State) Enum() *SysSnapshotEntryPB_State {
	p := new(SysSnapshotEntryPB_State)
	*p = x
	return p
}

func (x SysSnapshotEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysSnapshotEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[6].Descriptor()
}

func (SysSnapshotEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[6]
}

func (x SysSnapshotEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysSnapshotEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysSnapshotEntryPB_State(num)
	return nil
}

// Deprecated: Use SysSnapshotEntryPB_State.Descriptor instead.
func (SysSnapshotEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{27, 0}
}

// State for clone operation.
// CLONE_SCHEMA_STARTED: Initial state.
// CLONE_SCHEMA_STARTED --> CREATING: Once DB objects have been created by ysql_dump (YSQL) or
//
//	ImportSnapshot (YCQL). Clone tablet RPCs are scheduled for all tablets.
//
// CREATING --> RESTORING: All tablets in clone namespace are created and in a running
// state. Restore snapshot is issued.
// RESTORING --> COMPLETE (YCQL): Restore snapshot completed and DB is ready to be accessed.
// RESTORING --> RESTORED (YSQL): Restore snapshot completed.
// RESTORED --> COMPLETE (YSQL): DB is ready to be accessed.
type SysCloneStatePB_State int32

const (
	SysCloneStatePB_CLONE_SCHEMA_STARTED SysCloneStatePB_State = 1
	SysCloneStatePB_CREATING             SysCloneStatePB_State = 2
	SysCloneStatePB_RESTORING            SysCloneStatePB_State = 3
	SysCloneStatePB_RESTORED             SysCloneStatePB_State = 4
	SysCloneStatePB_ABORTED              SysCloneStatePB_State = 5
	SysCloneStatePB_COMPLETE             SysCloneStatePB_State = 6
)

// Enum value maps for SysCloneStatePB_State.
var (
	SysCloneStatePB_State_name = map[int32]string{
		1: "CLONE_SCHEMA_STARTED",
		2: "CREATING",
		3: "RESTORING",
		4: "RESTORED",
		5: "ABORTED",
		6: "COMPLETE",
	}
	SysCloneStatePB_State_value = map[string]int32{
		"CLONE_SCHEMA_STARTED": 1,
		"CREATING":             2,
		"RESTORING":            3,
		"RESTORED":             4,
		"ABORTED":              5,
		"COMPLETE":             6,
	}
)

func (x SysCloneStatePB_State) Enum() *SysCloneStatePB_State {
	p := new(SysCloneStatePB_State)
	*p = x
	return p
}

func (x SysCloneStatePB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysCloneStatePB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[7].Descriptor()
}

func (SysCloneStatePB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[7]
}

func (x SysCloneStatePB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysCloneStatePB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysCloneStatePB_State(num)
	return nil
}

// Deprecated: Use SysCloneStatePB_State.Descriptor instead.
func (SysCloneStatePB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{28, 0}
}

type SysUniverseReplicationEntryPB_State int32

const (
	// Setting up replication.
	SysUniverseReplicationEntryPB_INITIALIZING SysUniverseReplicationEntryPB_State = 0
	// Validated table schemas.
	SysUniverseReplicationEntryPB_VALIDATED SysUniverseReplicationEntryPB_State = 1
	// Active.
	SysUniverseReplicationEntryPB_ACTIVE SysUniverseReplicationEntryPB_State = 2
	// Failed.
	// Setting up universe replication consists of a sequence of steps like validating schemas,
	// creating CDC streams, starting subscribers. If any of these fail, we set the universe
	// replication state to FAILED.
	SysUniverseReplicationEntryPB_FAILED SysUniverseReplicationEntryPB_State = 3
	// Disabled.
	SysUniverseReplicationEntryPB_DISABLED SysUniverseReplicationEntryPB_State = 6
	// Deleted.
	SysUniverseReplicationEntryPB_DELETED SysUniverseReplicationEntryPB_State = 4
	// Error while cleaning up state of deleted entry. This indicates that universe replication has
	// been deleted but there is still some uncleaned up state - for example, there may be left over
	// CDC streams.
	SysUniverseReplicationEntryPB_DELETED_ERROR SysUniverseReplicationEntryPB_State = 5
	// Unfinished Delete
	SysUniverseReplicationEntryPB_DELETING SysUniverseReplicationEntryPB_State = 7
)

// Enum value maps for SysUniverseReplicationEntryPB_State.
var (
	SysUniverseReplicationEntryPB_State_name = map[int32]string{
		0: "INITIALIZING",
		1: "VALIDATED",
		2: "ACTIVE",
		3: "FAILED",
		6: "DISABLED",
		4: "DELETED",
		5: "DELETED_ERROR",
		7: "DELETING",
	}
	SysUniverseReplicationEntryPB_State_value = map[string]int32{
		"INITIALIZING":  0,
		"VALIDATED":     1,
		"ACTIVE":        2,
		"FAILED":        3,
		"DISABLED":      6,
		"DELETED":       4,
		"DELETED_ERROR": 5,
		"DELETING":      7,
	}
)

func (x SysUniverseReplicationEntryPB_State) Enum() *SysUniverseReplicationEntryPB_State {
	p := new(SysUniverseReplicationEntryPB_State)
	*p = x
	return p
}

func (x SysUniverseReplicationEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysUniverseReplicationEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[8].Descriptor()
}

func (SysUniverseReplicationEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[8]
}

func (x SysUniverseReplicationEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysUniverseReplicationEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysUniverseReplicationEntryPB_State(num)
	return nil
}

// Deprecated: Use SysUniverseReplicationEntryPB_State.Descriptor instead.
func (SysUniverseReplicationEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{32, 0}
}

type SysUniverseReplicationBootstrapEntryPB_State int32

const (
	// Setting up replication.
	SysUniverseReplicationBootstrapEntryPB_INITIALIZING SysUniverseReplicationBootstrapEntryPB_State = 0
	// Bootstrapping CDC streams on producer universe.
	SysUniverseReplicationBootstrapEntryPB_BOOTSTRAP_PRODUCER SysUniverseReplicationBootstrapEntryPB_State = 1
	// Creating snapshot on producer universe.
	SysUniverseReplicationBootstrapEntryPB_CREATE_PRODUCER_SNAPSHOT SysUniverseReplicationBootstrapEntryPB_State = 2
	// ImportSnapshotMeta on consumer universe.
	SysUniverseReplicationBootstrapEntryPB_IMPORT_SNAPSHOT SysUniverseReplicationBootstrapEntryPB_State = 3
	// CreateSnapshot on consumer universe, marking it as imported. This is the
	// same logic that occurs in the yb-admin import_snapshot command.
	SysUniverseReplicationBootstrapEntryPB_CREATE_CONSUMER_SNAPSHOT SysUniverseReplicationBootstrapEntryPB_State = 4
	// Downloading snapshot files from producer to consumer.
	SysUniverseReplicationBootstrapEntryPB_TRANSFER_SNAPSHOT SysUniverseReplicationBootstrapEntryPB_State = 5
	// Restore snapshot on consumer universe.
	SysUniverseReplicationBootstrapEntryPB_RESTORE_SNAPSHOT SysUniverseReplicationBootstrapEntryPB_State = 6
	// Call SetupUniverseReplication on consumer universe.
	SysUniverseReplicationBootstrapEntryPB_SETUP_REPLICATION SysUniverseReplicationBootstrapEntryPB_State = 7
	// Bootstrap is complete.
	SysUniverseReplicationBootstrapEntryPB_DONE SysUniverseReplicationBootstrapEntryPB_State = 8
	// Bootstrap failed on some task.
	SysUniverseReplicationBootstrapEntryPB_FAILED SysUniverseReplicationBootstrapEntryPB_State = 9
	// Deleted.
	SysUniverseReplicationBootstrapEntryPB_DELETED SysUniverseReplicationBootstrapEntryPB_State = 10
	// Error while cleaning up state of deleted entry. This indicates that universe replication has
	// been deleted but there is still some uncleaned up state - for example, there may be left over
	// CDC streams.
	SysUniverseReplicationBootstrapEntryPB_DELETED_ERROR SysUniverseReplicationBootstrapEntryPB_State = 11
	// Unfinished Delete
	SysUniverseReplicationBootstrapEntryPB_DELETING SysUniverseReplicationBootstrapEntryPB_State = 12
)

// Enum value maps for SysUniverseReplicationBootstrapEntryPB_State.
var (
	SysUniverseReplicationBootstrapEntryPB_State_name = map[int32]string{
		0:  "INITIALIZING",
		1:  "BOOTSTRAP_PRODUCER",
		2:  "CREATE_PRODUCER_SNAPSHOT",
		3:  "IMPORT_SNAPSHOT",
		4:  "CREATE_CONSUMER_SNAPSHOT",
		5:  "TRANSFER_SNAPSHOT",
		6:  "RESTORE_SNAPSHOT",
		7:  "SETUP_REPLICATION",
		8:  "DONE",
		9:  "FAILED",
		10: "DELETED",
		11: "DELETED_ERROR",
		12: "DELETING",
	}
	SysUniverseReplicationBootstrapEntryPB_State_value = map[string]int32{
		"INITIALIZING":             0,
		"BOOTSTRAP_PRODUCER":       1,
		"CREATE_PRODUCER_SNAPSHOT": 2,
		"IMPORT_SNAPSHOT":          3,
		"CREATE_CONSUMER_SNAPSHOT": 4,
		"TRANSFER_SNAPSHOT":        5,
		"RESTORE_SNAPSHOT":         6,
		"SETUP_REPLICATION":        7,
		"DONE":                     8,
		"FAILED":                   9,
		"DELETED":                  10,
		"DELETED_ERROR":            11,
		"DELETING":                 12,
	}
)

func (x SysUniverseReplicationBootstrapEntryPB_State) Enum() *SysUniverseReplicationBootstrapEntryPB_State {
	p := new(SysUniverseReplicationBootstrapEntryPB_State)
	*p = x
	return p
}

func (x SysUniverseReplicationBootstrapEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysUniverseReplicationBootstrapEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[9].Descriptor()
}

func (SysUniverseReplicationBootstrapEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[9]
}

func (x SysUniverseReplicationBootstrapEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysUniverseReplicationBootstrapEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysUniverseReplicationBootstrapEntryPB_State(num)
	return nil
}

// Deprecated: Use SysUniverseReplicationBootstrapEntryPB_State.Descriptor instead.
func (SysUniverseReplicationBootstrapEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{34, 0}
}

type SysXClusterOutboundReplicationGroupEntryPB_State int32

const (
	SysXClusterOutboundReplicationGroupEntryPB_READY   SysXClusterOutboundReplicationGroupEntryPB_State = 0
	SysXClusterOutboundReplicationGroupEntryPB_DELETED SysXClusterOutboundReplicationGroupEntryPB_State = 1
)

// Enum value maps for SysXClusterOutboundReplicationGroupEntryPB_State.
var (
	SysXClusterOutboundReplicationGroupEntryPB_State_name = map[int32]string{
		0: "READY",
		1: "DELETED",
	}
	SysXClusterOutboundReplicationGroupEntryPB_State_value = map[string]int32{
		"READY":   0,
		"DELETED": 1,
	}
)

func (x SysXClusterOutboundReplicationGroupEntryPB_State) Enum() *SysXClusterOutboundReplicationGroupEntryPB_State {
	p := new(SysXClusterOutboundReplicationGroupEntryPB_State)
	*p = x
	return p
}

func (x SysXClusterOutboundReplicationGroupEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysXClusterOutboundReplicationGroupEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[10].Descriptor()
}

func (SysXClusterOutboundReplicationGroupEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[10]
}

func (x SysXClusterOutboundReplicationGroupEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysXClusterOutboundReplicationGroupEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysXClusterOutboundReplicationGroupEntryPB_State(num)
	return nil
}

// Deprecated: Use SysXClusterOutboundReplicationGroupEntryPB_State.Descriptor instead.
func (SysXClusterOutboundReplicationGroupEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{35, 0}
}

type SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State int32

const (
	SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_CHECKPOINTING SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State = 0
	SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_READY         SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State = 1
	SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_FAILED        SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State = 2
)

// Enum value maps for SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State.
var (
	SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State_name = map[int32]string{
		0: "CHECKPOINTING",
		1: "READY",
		2: "FAILED",
	}
	SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State_value = map[string]int32{
		"CHECKPOINTING": 0,
		"READY":         1,
		"FAILED":        2,
	}
)

func (x SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State) Enum() *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State {
	p := new(SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State)
	*p = x
	return p
}

func (x SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[11].Descriptor()
}

func (SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[11]
}

func (x SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State(num)
	return nil
}

// Deprecated: Use SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State.Descriptor instead.
func (SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{35, 0, 0}
}

type SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State int32

const (
	SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_CREATING_REPLICATION_GROUP SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State = 0
	SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_FAILED                     SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State = 1
	SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_REPLICATING                SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State = 2
)

// Enum value maps for SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State.
var (
	SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State_name = map[int32]string{
		0: "CREATING_REPLICATION_GROUP",
		1: "FAILED",
		2: "REPLICATING",
	}
	SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State_value = map[string]int32{
		"CREATING_REPLICATION_GROUP": 0,
		"FAILED":                     1,
		"REPLICATING":                2,
	}
)

func (x SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State) Enum() *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State {
	p := new(SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State)
	*p = x
	return p
}

func (x SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[12].Descriptor()
}

func (SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[12]
}

func (x SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State(num)
	return nil
}

// Deprecated: Use SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State.Descriptor instead.
func (SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{35, 2, 0}
}

type SysTServerEntryPB_State int32

const (
	// Proto best practices are to include a sentinel as the first enum value.
	// See https://protobuf.dev/programming-guides/dos-donts/#unspecified-enum
	SysTServerEntryPB_UNSPECIFIED SysTServerEntryPB_State = 0
	// TServer may be live. Clients need to check the in-memory last heartbeat time to be sure the
	// TServer has heartbeated recently.
	SysTServerEntryPB_MAYBE_LIVE SysTServerEntryPB_State = 1
	// TServer has not heartbeated recently.
	SysTServerEntryPB_UNRESPONSIVE SysTServerEntryPB_State = 2
	// Another tserver which started more recently has registered with a conflicting
	// address. Heartbeats from this TServer will be ignored until it restarts with a greater
	// instance_seqno.
	//
	// This is currently used to deal with TServers rebooted after a disk wipe. In this case the new
	// TServer process generates a new UUID and is recognized as a new TServer by the master
	// leader. The old TServer is put into this state immediately and heartbeats from it are
	// ignored.
	SysTServerEntryPB_REPLACED SysTServerEntryPB_State = 3
)

// Enum value maps for SysTServerEntryPB_State.
var (
	SysTServerEntryPB_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MAYBE_LIVE",
		2: "UNRESPONSIVE",
		3: "REPLACED",
	}
	SysTServerEntryPB_State_value = map[string]int32{
		"UNSPECIFIED":  0,
		"MAYBE_LIVE":   1,
		"UNRESPONSIVE": 2,
		"REPLACED":     3,
	}
)

func (x SysTServerEntryPB_State) Enum() *SysTServerEntryPB_State {
	p := new(SysTServerEntryPB_State)
	*p = x
	return p
}

func (x SysTServerEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTServerEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[13].Descriptor()
}

func (SysTServerEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[13]
}

func (x SysTServerEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTServerEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTServerEntryPB_State(num)
	return nil
}

// Deprecated: Use SysTServerEntryPB_State.Descriptor instead.
func (SysTServerEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{36, 0}
}

// This represents one instance of a placement constraint for a table. It is
// used to dictate what is the minimum number of expected replicas in a certain
// cloud/region/zone combo.
type PlacementBlockPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The cloud, region and zone information for this placement block.
	CloudInfo *common.CloudInfoPB `protobuf:"bytes,1,opt,name=cloud_info,json=cloudInfo" json:"cloud_info,omitempty"`
	// The minimum number of replicas that should always be up in this placement.
	MinNumReplicas *int32 `protobuf:"varint,2,opt,name=min_num_replicas,json=minNumReplicas" json:"min_num_replicas,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlacementBlockPB) Reset() {
	*x = PlacementBlockPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacementBlockPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementBlockPB) ProtoMessage() {}

func (x *PlacementBlockPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementBlockPB.ProtoReflect.Descriptor instead.
func (*PlacementBlockPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{0}
}

func (x *PlacementBlockPB) GetCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

func (x *PlacementBlockPB) GetMinNumReplicas() int32 {
	if x != nil && x.MinNumReplicas != nil {
		return *x.MinNumReplicas
	}
	return 0
}

// This keeps track of the set of PlacementBlockPBs defining the placement
// requirements for a certain table. This is used both in the on-disk storage
// in SysCatalog, as well as in the actual table creation calls and in the
// schema returned to client queries.
//
// This is tightly coupled with the overall num_replicas for a certain table,
// as we want to both be able to specify requirements, per placement block, but
// also for the overall RF factor of the table.
type PlacementInfoPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NumReplicas     *int32                 `protobuf:"varint,1,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty"`
	PlacementBlocks []*PlacementBlockPB    `protobuf:"bytes,2,rep,name=placement_blocks,json=placementBlocks" json:"placement_blocks,omitempty"`
	PlacementUuid   []byte                 `protobuf:"bytes,3,opt,name=placement_uuid,json=placementUuid" json:"placement_uuid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlacementInfoPB) Reset() {
	*x = PlacementInfoPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacementInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementInfoPB) ProtoMessage() {}

func (x *PlacementInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementInfoPB.ProtoReflect.Descriptor instead.
func (*PlacementInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{1}
}

func (x *PlacementInfoPB) GetNumReplicas() int32 {
	if x != nil && x.NumReplicas != nil {
		return *x.NumReplicas
	}
	return 0
}

func (x *PlacementInfoPB) GetPlacementBlocks() []*PlacementBlockPB {
	if x != nil {
		return x.PlacementBlocks
	}
	return nil
}

func (x *PlacementInfoPB) GetPlacementUuid() []byte {
	if x != nil {
		return x.PlacementUuid
	}
	return nil
}

// Higher level structure to keep track of all types of replicas configured. This will have, at a
// minimum, the information about the replicas that are supposed to be active members of the raft
// configs, but can also include extra information, such as read only replicas.
type ReplicationInfoPB struct {
	state                   protoimpl.MessageState    `protogen:"open.v1"`
	LiveReplicas            *PlacementInfoPB          `protobuf:"bytes,1,opt,name=live_replicas,json=liveReplicas" json:"live_replicas,omitempty"`
	ReadReplicas            []*PlacementInfoPB        `protobuf:"bytes,2,rep,name=read_replicas,json=readReplicas" json:"read_replicas,omitempty"`
	AffinitizedLeaders      []*common.CloudInfoPB     `protobuf:"bytes,3,rep,name=affinitized_leaders,json=affinitizedLeaders" json:"affinitized_leaders,omitempty"`
	MultiAffinitizedLeaders []*common.CloudInfoListPB `protobuf:"bytes,4,rep,name=multi_affinitized_leaders,json=multiAffinitizedLeaders" json:"multi_affinitized_leaders,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ReplicationInfoPB) Reset() {
	*x = ReplicationInfoPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationInfoPB) ProtoMessage() {}

func (x *ReplicationInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationInfoPB.ProtoReflect.Descriptor instead.
func (*ReplicationInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{2}
}

func (x *ReplicationInfoPB) GetLiveReplicas() *PlacementInfoPB {
	if x != nil {
		return x.LiveReplicas
	}
	return nil
}

func (x *ReplicationInfoPB) GetReadReplicas() []*PlacementInfoPB {
	if x != nil {
		return x.ReadReplicas
	}
	return nil
}

func (x *ReplicationInfoPB) GetAffinitizedLeaders() []*common.CloudInfoPB {
	if x != nil {
		return x.AffinitizedLeaders
	}
	return nil
}

func (x *ReplicationInfoPB) GetMultiAffinitizedLeaders() []*common.CloudInfoListPB {
	if x != nil {
		return x.MultiAffinitizedLeaders
	}
	return nil
}

type BackfillJobPB struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Indexes []*common.IndexInfoPB  `protobuf:"bytes,1,rep,name=indexes" json:"indexes,omitempty"`
	// Index's TableId -> State for each index.
	BackfillState map[string]BackfillJobPB_State `protobuf:"bytes,2,rep,name=backfill_state,json=backfillState" json:"backfill_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=yb.master.BackfillJobPB_State"`
	// Number of rows processed for this backfill task (the same for all indexes)
	NumRowsProcessed     *uint64 `protobuf:"varint,4,opt,name=num_rows_processed,json=numRowsProcessed,def=0" json:"num_rows_processed,omitempty"`
	BackfillingTimestamp *uint64 `protobuf:"varint,3,opt,name=backfilling_timestamp,json=backfillingTimestamp" json:"backfilling_timestamp,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for BackfillJobPB fields.
const (
	Default_BackfillJobPB_NumRowsProcessed = uint64(0)
)

func (x *BackfillJobPB) Reset() {
	*x = BackfillJobPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackfillJobPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillJobPB) ProtoMessage() {}

func (x *BackfillJobPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillJobPB.ProtoReflect.Descriptor instead.
func (*BackfillJobPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{3}
}

func (x *BackfillJobPB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *BackfillJobPB) GetBackfillState() map[string]BackfillJobPB_State {
	if x != nil {
		return x.BackfillState
	}
	return nil
}

func (x *BackfillJobPB) GetNumRowsProcessed() uint64 {
	if x != nil && x.NumRowsProcessed != nil {
		return *x.NumRowsProcessed
	}
	return Default_BackfillJobPB_NumRowsProcessed
}

func (x *BackfillJobPB) GetBackfillingTimestamp() uint64 {
	if x != nil && x.BackfillingTimestamp != nil {
		return *x.BackfillingTimestamp
	}
	return 0
}

type YsqlDdlTxnVerifierStatePB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ContainsCreateTableOp *bool                  `protobuf:"varint,1,opt,name=contains_create_table_op,json=containsCreateTableOp" json:"contains_create_table_op,omitempty"`
	ContainsAlterTableOp  *bool                  `protobuf:"varint,2,opt,name=contains_alter_table_op,json=containsAlterTableOp" json:"contains_alter_table_op,omitempty"`
	ContainsDropTableOp   *bool                  `protobuf:"varint,3,opt,name=contains_drop_table_op,json=containsDropTableOp" json:"contains_drop_table_op,omitempty"`
	PreviousSchema        *common.SchemaPB       `protobuf:"bytes,4,opt,name=previous_schema,json=previousSchema" json:"previous_schema,omitempty"`
	PreviousTableName     *string                `protobuf:"bytes,5,opt,name=previous_table_name,json=previousTableName" json:"previous_table_name,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *YsqlDdlTxnVerifierStatePB) Reset() {
	*x = YsqlDdlTxnVerifierStatePB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YsqlDdlTxnVerifierStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YsqlDdlTxnVerifierStatePB) ProtoMessage() {}

func (x *YsqlDdlTxnVerifierStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YsqlDdlTxnVerifierStatePB.ProtoReflect.Descriptor instead.
func (*YsqlDdlTxnVerifierStatePB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{4}
}

func (x *YsqlDdlTxnVerifierStatePB) GetContainsCreateTableOp() bool {
	if x != nil && x.ContainsCreateTableOp != nil {
		return *x.ContainsCreateTableOp
	}
	return false
}

func (x *YsqlDdlTxnVerifierStatePB) GetContainsAlterTableOp() bool {
	if x != nil && x.ContainsAlterTableOp != nil {
		return *x.ContainsAlterTableOp
	}
	return false
}

func (x *YsqlDdlTxnVerifierStatePB) GetContainsDropTableOp() bool {
	if x != nil && x.ContainsDropTableOp != nil {
		return *x.ContainsDropTableOp
	}
	return false
}

func (x *YsqlDdlTxnVerifierStatePB) GetPreviousSchema() *common.SchemaPB {
	if x != nil {
		return x.PreviousSchema
	}
	return nil
}

func (x *YsqlDdlTxnVerifierStatePB) GetPreviousTableName() string {
	if x != nil && x.PreviousTableName != nil {
		return *x.PreviousTableName
	}
	return ""
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tables entries.
type SysTablesEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table name
	Name []byte `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Table type
	TableType *common.TableType `protobuf:"varint,10,opt,name=table_type,json=tableType,enum=yb.TableType,def=2" json:"table_type,omitempty"`
	// The table namespace ID.
	NamespaceId []byte `protobuf:"bytes,11,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	// The table namespace name.
	NamespaceName []byte `protobuf:"bytes,30,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	// sequence-id for the table metadata.
	// Used on tablet-report to avoid sending "alter-table" notifications.
	Version *uint32 `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	// Newest table schema (every TS will eventually have it).
	Schema *common.SchemaPB `protobuf:"bytes,3,req,name=schema" json:"schema,omitempty"`
	// Last table schema that is guaranteed to have reached every TS, though
	// not necessarily the newest schema.
	//
	// This is the schema provided to the user on client->GetSchema(tableName).
	FullyAppliedSchema *common.SchemaPB `protobuf:"bytes,4,opt,name=fully_applied_schema,json=fullyAppliedSchema" json:"fully_applied_schema,omitempty"`
	// The table's partitioning schema.
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,9,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	// The table's partitions version. Incremented each time partitions change.
	PartitionListVersion *uint32 `protobuf:"varint,28,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	// The next column ID to assign to newly added columns in this table.
	// This prevents column ID reuse.
	NextColumnId *int32 `protobuf:"varint,8,opt,name=next_column_id,json=nextColumnId" json:"next_column_id,omitempty"`
	// Replication information for this table.
	ReplicationInfo *ReplicationInfoPB `protobuf:"bytes,5,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	// Debug state for the table.
	State    *SysTablesEntryPB_State `protobuf:"varint,6,opt,name=state,enum=yb.master.SysTablesEntryPB_State,def=0" json:"state,omitempty"`
	StateMsg []byte                  `protobuf:"bytes,7,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
	// TODO(neil) OLDER INDEXes will always have the deprecated fields. To remove the old format, we
	// first need to come up with a way to convert existing catalog content to new format.
	// Secondary indexes of the table.
	Indexes []*common.IndexInfoPB `protobuf:"bytes,12,rep,name=indexes" json:"indexes,omitempty"`
	// For index table: [to be deprecated and replaced by "index_info"]
	IndexedTableId []byte `protobuf:"bytes,13,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`     // Indexed table id of this index.
	IsLocalIndex   *bool  `protobuf:"varint,14,opt,name=is_local_index,json=isLocalIndex,def=0" json:"is_local_index,omitempty"`    // Whether this is a local index.
	IsUniqueIndex  *bool  `protobuf:"varint,15,opt,name=is_unique_index,json=isUniqueIndex,def=0" json:"is_unique_index,omitempty"` // Whether this is a unique index.
	// For index table: information about this index.
	IndexInfo *common.IndexInfoPB `protobuf:"bytes,22,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// For Postgres:
	IsPgSharedTable  *bool   `protobuf:"varint,16,opt,name=is_pg_shared_table,json=isPgSharedTable,def=0" json:"is_pg_shared_table,omitempty"` // Is this a shared table?
	WalRetentionSecs *uint32 `protobuf:"varint,24,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	// True if the table is colocated (including tablegroups, excluding YSQL system tables).
	Colocated *bool `protobuf:"varint,25,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// If the table is colocated and is not the parent table of the colocated tablet,
	// contains the table id of the parent table.
	ParentTableId []byte `protobuf:"bytes,40,opt,name=parent_table_id,json=parentTableId" json:"parent_table_id,omitempty"`
	// For materialized views:
	IsMatview *bool `protobuf:"varint,37,opt,name=is_matview,json=isMatview,def=0" json:"is_matview,omitempty"` // True if the table is a materialized view.
	// In case the table was rewritten, explicitly store the TableId containing the PG table OID
	// (as the table's TableId no longer matches).
	PgTableId                 []byte                `protobuf:"bytes,36,opt,name=pg_table_id,json=pgTableId" json:"pg_table_id,omitempty"`
	FullyAppliedSchemaVersion *uint32               `protobuf:"varint,23,opt,name=fully_applied_schema_version,json=fullyAppliedSchemaVersion" json:"fully_applied_schema_version,omitempty"`
	FullyAppliedIndexes       []*common.IndexInfoPB `protobuf:"bytes,26,rep,name=fully_applied_indexes,json=fullyAppliedIndexes" json:"fully_applied_indexes,omitempty"`
	FullyAppliedIndexInfo     *common.IndexInfoPB   `protobuf:"bytes,27,opt,name=fully_applied_index_info,json=fullyAppliedIndexInfo" json:"fully_applied_index_info,omitempty"`
	// During an alter table, which involves no schema change but only updating
	// a permission, is it sometimes acceptable for a client's request (which is
	// prepared with the current schema) to be accepted by a tserver which is
	// still running the previous version.
	// This is typically set during alters that are caused due to index
	// permissions being changed, when the table is backfilled.
	UpdatesOnlyIndexPermissions *bool `protobuf:"varint,31,opt,name=updates_only_index_permissions,json=updatesOnlyIndexPermissions,def=0" json:"updates_only_index_permissions,omitempty"`
	// Keeps track of in-progress backfill jobs.
	// As of Apr 2021, we only have at most one outstanding backfill job, but
	// this restriction may be removed later on. Hence repeated.
	BackfillJobs []*BackfillJobPB            `protobuf:"bytes,32,rep,name=backfill_jobs,json=backfillJobs" json:"backfill_jobs,omitempty"`
	HideState    *SysTablesEntryPB_HideState `protobuf:"varint,33,opt,name=hide_state,json=hideState,enum=yb.master.SysTablesEntryPB_HideState" json:"hide_state,omitempty"`
	// Tablespace ID for use with transaction tables only. Normal YSQL tables do not set this field,
	// and tablespace information for such tables are instead fetched by scanning the pg catalog.
	TransactionTableTablespaceId []byte `protobuf:"bytes,34,opt,name=transaction_table_tablespace_id,json=transactionTableTablespaceId" json:"transaction_table_tablespace_id,omitempty"`
	// Time when the table was hidden.
	HideHybridTime *uint64 `protobuf:"fixed64,35,opt,name=hide_hybrid_time,json=hideHybridTime" json:"hide_hybrid_time,omitempty"`
	// State that indicates that this table is being changed by a YSQL transaction.
	// This repeated field contains only a single element as of now. When we support DDL + Savepoints,
	// we will have one element for every savepoint modifying this table in this field.
	YsqlDdlTxnVerifierState []*YsqlDdlTxnVerifierStatePB `protobuf:"bytes,38,rep,name=ysql_ddl_txn_verifier_state,json=ysqlDdlTxnVerifierState" json:"ysql_ddl_txn_verifier_state,omitempty"`
	// YSQL transaction that is currently modifying this table state. The changes being performed by
	// it are detailed in 'ysql_ddl_txn_state' above.
	Transaction            *common.TransactionMetadataPB `protobuf:"bytes,29,opt,name=transaction" json:"transaction,omitempty"`
	HostedStatefulServices []common.StatefulServiceKind  `protobuf:"varint,39,rep,name=hosted_stateful_services,json=hostedStatefulServices,enum=yb.StatefulServiceKind" json:"hosted_stateful_services,omitempty"`
	// Time when an admin compaction was last requested. Raw representation of a HybridTime.
	LastFullCompactionRequestTime *uint64 `protobuf:"fixed64,41,opt,name=last_full_compaction_request_time,json=lastFullCompactionRequestTime" json:"last_full_compaction_request_time,omitempty"`
	// Set by DDL Replication to link the table to the original table in the source cluster.
	// Cleared after table creation completes.
	XclusterSourceTableId []byte `protobuf:"bytes,42,opt,name=xcluster_source_table_id,json=xclusterSourceTableId" json:"xcluster_source_table_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for SysTablesEntryPB fields.
const (
	Default_SysTablesEntryPB_TableType                   = common.TableType(2) // common.TableType_DEFAULT_TABLE_TYPE
	Default_SysTablesEntryPB_State                       = SysTablesEntryPB_UNKNOWN
	Default_SysTablesEntryPB_IsLocalIndex                = bool(false)
	Default_SysTablesEntryPB_IsUniqueIndex               = bool(false)
	Default_SysTablesEntryPB_IsPgSharedTable             = bool(false)
	Default_SysTablesEntryPB_Colocated                   = bool(false)
	Default_SysTablesEntryPB_IsMatview                   = bool(false)
	Default_SysTablesEntryPB_UpdatesOnlyIndexPermissions = bool(false)
)

func (x *SysTablesEntryPB) Reset() {
	*x = SysTablesEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysTablesEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesEntryPB) ProtoMessage() {}

func (x *SysTablesEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesEntryPB.ProtoReflect.Descriptor instead.
func (*SysTablesEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{5}
}

func (x *SysTablesEntryPB) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SysTablesEntryPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return Default_SysTablesEntryPB_TableType
}

func (x *SysTablesEntryPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *SysTablesEntryPB) GetNamespaceName() []byte {
	if x != nil {
		return x.NamespaceName
	}
	return nil
}

func (x *SysTablesEntryPB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysTablesEntryPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SysTablesEntryPB) GetFullyAppliedSchema() *common.SchemaPB {
	if x != nil {
		return x.FullyAppliedSchema
	}
	return nil
}

func (x *SysTablesEntryPB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *SysTablesEntryPB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *SysTablesEntryPB) GetNextColumnId() int32 {
	if x != nil && x.NextColumnId != nil {
		return *x.NextColumnId
	}
	return 0
}

func (x *SysTablesEntryPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetState() SysTablesEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysTablesEntryPB_State
}

func (x *SysTablesEntryPB) GetStateMsg() []byte {
	if x != nil {
		return x.StateMsg
	}
	return nil
}

func (x *SysTablesEntryPB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *SysTablesEntryPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

func (x *SysTablesEntryPB) GetIsLocalIndex() bool {
	if x != nil && x.IsLocalIndex != nil {
		return *x.IsLocalIndex
	}
	return Default_SysTablesEntryPB_IsLocalIndex
}

func (x *SysTablesEntryPB) GetIsUniqueIndex() bool {
	if x != nil && x.IsUniqueIndex != nil {
		return *x.IsUniqueIndex
	}
	return Default_SysTablesEntryPB_IsUniqueIndex
}

func (x *SysTablesEntryPB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetIsPgSharedTable() bool {
	if x != nil && x.IsPgSharedTable != nil {
		return *x.IsPgSharedTable
	}
	return Default_SysTablesEntryPB_IsPgSharedTable
}

func (x *SysTablesEntryPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *SysTablesEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysTablesEntryPB_Colocated
}

func (x *SysTablesEntryPB) GetParentTableId() []byte {
	if x != nil {
		return x.ParentTableId
	}
	return nil
}

func (x *SysTablesEntryPB) GetIsMatview() bool {
	if x != nil && x.IsMatview != nil {
		return *x.IsMatview
	}
	return Default_SysTablesEntryPB_IsMatview
}

func (x *SysTablesEntryPB) GetPgTableId() []byte {
	if x != nil {
		return x.PgTableId
	}
	return nil
}

func (x *SysTablesEntryPB) GetFullyAppliedSchemaVersion() uint32 {
	if x != nil && x.FullyAppliedSchemaVersion != nil {
		return *x.FullyAppliedSchemaVersion
	}
	return 0
}

func (x *SysTablesEntryPB) GetFullyAppliedIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.FullyAppliedIndexes
	}
	return nil
}

func (x *SysTablesEntryPB) GetFullyAppliedIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.FullyAppliedIndexInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetUpdatesOnlyIndexPermissions() bool {
	if x != nil && x.UpdatesOnlyIndexPermissions != nil {
		return *x.UpdatesOnlyIndexPermissions
	}
	return Default_SysTablesEntryPB_UpdatesOnlyIndexPermissions
}

func (x *SysTablesEntryPB) GetBackfillJobs() []*BackfillJobPB {
	if x != nil {
		return x.BackfillJobs
	}
	return nil
}

func (x *SysTablesEntryPB) GetHideState() SysTablesEntryPB_HideState {
	if x != nil && x.HideState != nil {
		return *x.HideState
	}
	return SysTablesEntryPB_VISIBLE
}

func (x *SysTablesEntryPB) GetTransactionTableTablespaceId() []byte {
	if x != nil {
		return x.TransactionTableTablespaceId
	}
	return nil
}

func (x *SysTablesEntryPB) GetHideHybridTime() uint64 {
	if x != nil && x.HideHybridTime != nil {
		return *x.HideHybridTime
	}
	return 0
}

func (x *SysTablesEntryPB) GetYsqlDdlTxnVerifierState() []*YsqlDdlTxnVerifierStatePB {
	if x != nil {
		return x.YsqlDdlTxnVerifierState
	}
	return nil
}

func (x *SysTablesEntryPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SysTablesEntryPB) GetHostedStatefulServices() []common.StatefulServiceKind {
	if x != nil {
		return x.HostedStatefulServices
	}
	return nil
}

func (x *SysTablesEntryPB) GetLastFullCompactionRequestTime() uint64 {
	if x != nil && x.LastFullCompactionRequestTime != nil {
		return *x.LastFullCompactionRequestTime
	}
	return 0
}

func (x *SysTablesEntryPB) GetXclusterSourceTableId() []byte {
	if x != nil {
		return x.XclusterSourceTableId
	}
	return nil
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tablets entries.
type SysTabletsEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DEPRECATED. Replaced by 'partition'.
	OBSOLETEStartKey []byte `protobuf:"bytes,1,opt,name=OBSOLETE_start_key,json=OBSOLETEStartKey" json:"OBSOLETE_start_key,omitempty"`
	OBSOLETEEndKey   []byte `protobuf:"bytes,2,opt,name=OBSOLETE_end_key,json=OBSOLETEEndKey" json:"OBSOLETE_end_key,omitempty"`
	// Tablet partition.
	Partition *common.PartitionPB `protobuf:"bytes,7,opt,name=partition" json:"partition,omitempty"`
	// The latest committed consensus configuration reported to the Master.
	CommittedConsensusState *consensus.ConsensusStatePB `protobuf:"bytes,3,opt,name=committed_consensus_state,json=committedConsensusState" json:"committed_consensus_state,omitempty"`
	// Debug state for the tablet.
	State    *SysTabletsEntryPB_State `protobuf:"varint,4,opt,name=state,enum=yb.master.SysTabletsEntryPB_State,def=999" json:"state,omitempty"`
	StateMsg []byte                   `protobuf:"bytes,5,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
	// The table id for the tablet.
	TableId []byte `protobuf:"bytes,6,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Table ids for all the tables on this tablet.
	TableIds [][]byte `protobuf:"bytes,8,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	// True if the tablet is colocated.
	Colocated *bool `protobuf:"varint,9,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// Replaced by the map below.
	DEPRECATEDBackfilledUntil []byte `protobuf:"bytes,10,opt,name=DEPRECATED_backfilled_until,json=DEPRECATEDBackfilledUntil" json:"DEPRECATED_backfilled_until,omitempty"`
	// For tablets that are results of splitting we set this to split parent split_depth + 1.
	SplitDepth          *uint64 `protobuf:"varint,11,opt,name=split_depth,json=splitDepth" json:"split_depth,omitempty"`
	SplitParentTabletId []byte  `protobuf:"bytes,13,opt,name=split_parent_tablet_id,json=splitParentTabletId" json:"split_parent_tablet_id,omitempty"`
	// If the tablet is in the backfilling state, this is used to keep track
	// of how far along backfill has completed.
	// Key corresponds to the table_id for the index table. Value is encoded as
	// the DocKey for the next row to be backfilled.
	BackfilledUntil map[string][]byte `protobuf:"bytes,12,rep,name=backfilled_until,json=backfilledUntil" json:"backfilled_until,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tablet IDs for the children of this tablet after splitting. It is possible for a tablet to
	// temporarily exist in this field but not be registered as part of the table or the catalog
	// manager's tablet map.
	SplitTabletIds [][]byte `protobuf:"bytes,14,rep,name=split_tablet_ids,json=splitTabletIds" json:"split_tablet_ids,omitempty"`
	// Time when tablet was hidden.
	HideHybridTime *uint64 `protobuf:"fixed64,16,opt,name=hide_hybrid_time,json=hideHybridTime" json:"hide_hybrid_time,omitempty"`
	// If tablet was hidden instead of deleting, here we keep list of schedule ids that prevented
	// actual deletion.
	RetainedBySnapshotSchedules [][]byte `protobuf:"bytes,17,rep,name=retained_by_snapshot_schedules,json=retainedBySnapshotSchedules" json:"retained_by_snapshot_schedules,omitempty"`
	// Describes the persisted mapping scheme for colocated tablets. If set, the table_ids field of
	// this tablet is empty and child tables on this tablet have their parent_table_id field
	// filled. The table_id field of all tablets is filled with the parent table id. So the list of
	// tables hosted on this tablet is computed at load time by finding all child tables of the
	// parent table of this tablet.
	HostedTablesMappedByParentId *bool `protobuf:"varint,18,opt,name=hosted_tables_mapped_by_parent_id,json=hostedTablesMappedByParentId" json:"hosted_tables_mapped_by_parent_id,omitempty"`
	// Whether this tablet was created by DB cloning. If true, we should not try to send
	// CreateTablet requests for this tablet (it should be created by tservers applying the clone op).
	CreatedByClone *bool `protobuf:"varint,19,opt,name=created_by_clone,json=createdByClone,def=0" json:"created_by_clone,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for SysTabletsEntryPB fields.
const (
	Default_SysTabletsEntryPB_State          = SysTabletsEntryPB_UNKNOWN
	Default_SysTabletsEntryPB_Colocated      = bool(false)
	Default_SysTabletsEntryPB_CreatedByClone = bool(false)
)

func (x *SysTabletsEntryPB) Reset() {
	*x = SysTabletsEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysTabletsEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTabletsEntryPB) ProtoMessage() {}

func (x *SysTabletsEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTabletsEntryPB.ProtoReflect.Descriptor instead.
func (*SysTabletsEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{6}
}

func (x *SysTabletsEntryPB) GetOBSOLETEStartKey() []byte {
	if x != nil {
		return x.OBSOLETEStartKey
	}
	return nil
}

func (x *SysTabletsEntryPB) GetOBSOLETEEndKey() []byte {
	if x != nil {
		return x.OBSOLETEEndKey
	}
	return nil
}

func (x *SysTabletsEntryPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *SysTabletsEntryPB) GetCommittedConsensusState() *consensus.ConsensusStatePB {
	if x != nil {
		return x.CommittedConsensusState
	}
	return nil
}

func (x *SysTabletsEntryPB) GetState() SysTabletsEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysTabletsEntryPB_State
}

func (x *SysTabletsEntryPB) GetStateMsg() []byte {
	if x != nil {
		return x.StateMsg
	}
	return nil
}

func (x *SysTabletsEntryPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *SysTabletsEntryPB) GetTableIds() [][]byte {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *SysTabletsEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysTabletsEntryPB_Colocated
}

func (x *SysTabletsEntryPB) GetDEPRECATEDBackfilledUntil() []byte {
	if x != nil {
		return x.DEPRECATEDBackfilledUntil
	}
	return nil
}

func (x *SysTabletsEntryPB) GetSplitDepth() uint64 {
	if x != nil && x.SplitDepth != nil {
		return *x.SplitDepth
	}
	return 0
}

func (x *SysTabletsEntryPB) GetSplitParentTabletId() []byte {
	if x != nil {
		return x.SplitParentTabletId
	}
	return nil
}

func (x *SysTabletsEntryPB) GetBackfilledUntil() map[string][]byte {
	if x != nil {
		return x.BackfilledUntil
	}
	return nil
}

func (x *SysTabletsEntryPB) GetSplitTabletIds() [][]byte {
	if x != nil {
		return x.SplitTabletIds
	}
	return nil
}

func (x *SysTabletsEntryPB) GetHideHybridTime() uint64 {
	if x != nil && x.HideHybridTime != nil {
		return *x.HideHybridTime
	}
	return 0
}

func (x *SysTabletsEntryPB) GetRetainedBySnapshotSchedules() [][]byte {
	if x != nil {
		return x.RetainedBySnapshotSchedules
	}
	return nil
}

func (x *SysTabletsEntryPB) GetHostedTablesMappedByParentId() bool {
	if x != nil && x.HostedTablesMappedByParentId != nil {
		return *x.HostedTablesMappedByParentId
	}
	return false
}

func (x *SysTabletsEntryPB) GetCreatedByClone() bool {
	if x != nil && x.CreatedByClone != nil {
		return *x.CreatedByClone
	}
	return Default_SysTabletsEntryPB_CreatedByClone
}

// The data part of a SysRowEntry in the sys.catalog table for a namespace.
type SysNamespaceEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace name.
	Name []byte `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Namespace/Database type.
	DatabaseType *common.YQLDatabase `protobuf:"varint,2,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
	// For Postgres:
	NextPgOid *uint32 `protobuf:"varint,3,opt,name=next_pg_oid,json=nextPgOid" json:"next_pg_oid,omitempty"` // Next oid to assign.
	// True if the namespace is colocated.
	Colocated *bool `protobuf:"varint,4,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// Optional: Namespace dependent upon transaction success (abort removes NS). Used by YSQL.
	Transaction       *common.TransactionMetadataPB `protobuf:"bytes,6,opt,name=transaction" json:"transaction,omitempty"`
	State             *SysNamespaceEntryPB_State    `protobuf:"varint,5,opt,name=state,enum=yb.master.SysNamespaceEntryPB_State,def=0" json:"state,omitempty"`
	CloneRequestSeqNo *uint32                       `protobuf:"varint,7,opt,name=clone_request_seq_no,json=cloneRequestSeqNo" json:"clone_request_seq_no,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for SysNamespaceEntryPB fields.
const (
	Default_SysNamespaceEntryPB_DatabaseType = common.YQLDatabase(2) // common.YQLDatabase_YQL_DATABASE_CQL
	Default_SysNamespaceEntryPB_Colocated    = bool(false)
	Default_SysNamespaceEntryPB_State        = SysNamespaceEntryPB_UNKNOWN
)

func (x *SysNamespaceEntryPB) Reset() {
	*x = SysNamespaceEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysNamespaceEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysNamespaceEntryPB) ProtoMessage() {}

func (x *SysNamespaceEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysNamespaceEntryPB.ProtoReflect.Descriptor instead.
func (*SysNamespaceEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{7}
}

func (x *SysNamespaceEntryPB) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SysNamespaceEntryPB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_SysNamespaceEntryPB_DatabaseType
}

func (x *SysNamespaceEntryPB) GetNextPgOid() uint32 {
	if x != nil && x.NextPgOid != nil {
		return *x.NextPgOid
	}
	return 0
}

func (x *SysNamespaceEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysNamespaceEntryPB_Colocated
}

func (x *SysNamespaceEntryPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SysNamespaceEntryPB) GetState() SysNamespaceEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysNamespaceEntryPB_State
}

func (x *SysNamespaceEntryPB) GetCloneRequestSeqNo() uint32 {
	if x != nil && x.CloneRequestSeqNo != nil {
		return *x.CloneRequestSeqNo
	}
	return 0
}

// The data part of a SysRowEntry in the sys.catalog table for a User Defined Type.
type SysUDTypeEntryPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NamespaceId   *string                `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FieldNames    []string               `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	FieldTypes    []*common.QLTypePB     `protobuf:"bytes,4,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysUDTypeEntryPB) Reset() {
	*x = SysUDTypeEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUDTypeEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUDTypeEntryPB) ProtoMessage() {}

func (x *SysUDTypeEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUDTypeEntryPB.ProtoReflect.Descriptor instead.
func (*SysUDTypeEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{8}
}

func (x *SysUDTypeEntryPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *SysUDTypeEntryPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SysUDTypeEntryPB) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *SysUDTypeEntryPB) GetFieldTypes() []*common.QLTypePB {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

// This is used to mark servers in the load balancer that should be considered
// for immediate removal of load and also prevented from being assigned any
// new load.
type BlacklistPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Hosts []*common.HostPortPB   `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// Fields to track the number of replicas/leaders in current set of tablets which have a
	// blacklist server/leader. Client should not set this. Set by server side when persisting
	// the blacklist load.
	InitialReplicaLoad *int32 `protobuf:"varint,2,opt,name=initial_replica_load,json=initialReplicaLoad" json:"initial_replica_load,omitempty"`
	InitialLeaderLoad  *int32 `protobuf:"varint,3,opt,name=initial_leader_load,json=initialLeaderLoad" json:"initial_leader_load,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BlacklistPB) Reset() {
	*x = BlacklistPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlacklistPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistPB) ProtoMessage() {}

func (x *BlacklistPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistPB.ProtoReflect.Descriptor instead.
func (*BlacklistPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{9}
}

func (x *BlacklistPB) GetHosts() []*common.HostPortPB {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *BlacklistPB) GetInitialReplicaLoad() int32 {
	if x != nil && x.InitialReplicaLoad != nil {
		return *x.InitialReplicaLoad
	}
	return 0
}

func (x *BlacklistPB) GetInitialLeaderLoad() int32 {
	if x != nil && x.InitialLeaderLoad != nil {
		return *x.InitialLeaderLoad
	}
	return 0
}

type EncryptionInfoPB struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	EncryptionEnabled          *bool                  `protobuf:"varint,1,opt,name=encryption_enabled,json=encryptionEnabled" json:"encryption_enabled,omitempty"`
	UniverseKeyRegistryEncoded []byte                 `protobuf:"bytes,2,opt,name=universe_key_registry_encoded,json=universeKeyRegistryEncoded" json:"universe_key_registry_encoded,omitempty"`
	KeyPath                    *string                `protobuf:"bytes,3,opt,name=key_path,json=keyPath" json:"key_path,omitempty"`
	LatestVersionId            *string                `protobuf:"bytes,4,opt,name=latest_version_id,json=latestVersionId" json:"latest_version_id,omitempty"`
	KeyInMemory                *bool                  `protobuf:"varint,5,opt,name=key_in_memory,json=keyInMemory" json:"key_in_memory,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *EncryptionInfoPB) Reset() {
	*x = EncryptionInfoPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionInfoPB) ProtoMessage() {}

func (x *EncryptionInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionInfoPB.ProtoReflect.Descriptor instead.
func (*EncryptionInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{10}
}

func (x *EncryptionInfoPB) GetEncryptionEnabled() bool {
	if x != nil && x.EncryptionEnabled != nil {
		return *x.EncryptionEnabled
	}
	return false
}

func (x *EncryptionInfoPB) GetUniverseKeyRegistryEncoded() []byte {
	if x != nil {
		return x.UniverseKeyRegistryEncoded
	}
	return nil
}

func (x *EncryptionInfoPB) GetKeyPath() string {
	if x != nil && x.KeyPath != nil {
		return *x.KeyPath
	}
	return ""
}

func (x *EncryptionInfoPB) GetLatestVersionId() string {
	if x != nil && x.LatestVersionId != nil {
		return *x.LatestVersionId
	}
	return ""
}

func (x *EncryptionInfoPB) GetKeyInMemory() bool {
	if x != nil && x.KeyInMemory != nil {
		return *x.KeyInMemory
	}
	return false
}

// The on-disk entry in the sys.catalog table for configuration information
// that are relevant to the entire cluster. This has a version entry that is
// used for ensuring that client read-modify-writes are valid.
type SysClusterConfigEntryPB struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Version          *int32                  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ClusterUuid      *string                 `protobuf:"bytes,4,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	ReplicationInfo  *ReplicationInfoPB      `protobuf:"bytes,2,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	ServerBlacklist  *BlacklistPB            `protobuf:"bytes,3,opt,name=server_blacklist,json=serverBlacklist" json:"server_blacklist,omitempty"`
	LeaderBlacklist  *BlacklistPB            `protobuf:"bytes,7,opt,name=leader_blacklist,json=leaderBlacklist" json:"leader_blacklist,omitempty"`
	EncryptionInfo   *EncryptionInfoPB       `protobuf:"bytes,5,opt,name=encryption_info,json=encryptionInfo" json:"encryption_info,omitempty"`
	ConsumerRegistry *cdc.ConsumerRegistryPB `protobuf:"bytes,6,opt,name=consumer_registry,json=consumerRegistry" json:"consumer_registry,omitempty"`
	// This field is only generated internally by the master leader in PrepareDefaultClusterConfig (as
	// opposed to cluster_uuid which can be passed in as a flag). If not already set, it is set on
	// the VisitSysCatalog path.
	UniverseUuid  *string `protobuf:"bytes,8,opt,name=universe_uuid,json=universeUuid" json:"universe_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysClusterConfigEntryPB) Reset() {
	*x = SysClusterConfigEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysClusterConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysClusterConfigEntryPB) ProtoMessage() {}

func (x *SysClusterConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysClusterConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysClusterConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{11}
}

func (x *SysClusterConfigEntryPB) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysClusterConfigEntryPB) GetClusterUuid() string {
	if x != nil && x.ClusterUuid != nil {
		return *x.ClusterUuid
	}
	return ""
}

func (x *SysClusterConfigEntryPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetServerBlacklist() *BlacklistPB {
	if x != nil {
		return x.ServerBlacklist
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetLeaderBlacklist() *BlacklistPB {
	if x != nil {
		return x.LeaderBlacklist
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetEncryptionInfo() *EncryptionInfoPB {
	if x != nil {
		return x.EncryptionInfo
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetConsumerRegistry() *cdc.ConsumerRegistryPB {
	if x != nil {
		return x.ConsumerRegistry
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetUniverseUuid() string {
	if x != nil && x.UniverseUuid != nil {
		return *x.UniverseUuid
	}
	return ""
}

type SysObjectLockEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// incarnation id -> Session ...
	Incarnations  map[uint64]*SysObjectLockEntryPB_SessionDBMapPB `protobuf:"bytes,1,rep,name=incarnations" json:"incarnations,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysObjectLockEntryPB) Reset() {
	*x = SysObjectLockEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysObjectLockEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysObjectLockEntryPB) ProtoMessage() {}

func (x *SysObjectLockEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysObjectLockEntryPB.ProtoReflect.Descriptor instead.
func (*SysObjectLockEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{12}
}

func (x *SysObjectLockEntryPB) GetIncarnations() map[uint64]*SysObjectLockEntryPB_SessionDBMapPB {
	if x != nil {
		return x.Incarnations
	}
	return nil
}

type SysXClusterConfigEntryPB struct {
	state                    protoimpl.MessageState  `protogen:"open.v1"`
	Version                  *uint32                 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	XclusterProducerRegistry *cdc.ProducerRegistryPB `protobuf:"bytes,2,opt,name=xcluster_producer_registry,json=xclusterProducerRegistry" json:"xcluster_producer_registry,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SysXClusterConfigEntryPB) Reset() {
	*x = SysXClusterConfigEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysXClusterConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysXClusterConfigEntryPB) ProtoMessage() {}

func (x *SysXClusterConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysXClusterConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysXClusterConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{13}
}

func (x *SysXClusterConfigEntryPB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysXClusterConfigEntryPB) GetXclusterProducerRegistry() *cdc.ProducerRegistryPB {
	if x != nil {
		return x.XclusterProducerRegistry
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for Redis Config.
type SysRedisConfigEntryPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Args          [][]byte               `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysRedisConfigEntryPB) Reset() {
	*x = SysRedisConfigEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysRedisConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRedisConfigEntryPB) ProtoMessage() {}

func (x *SysRedisConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRedisConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysRedisConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{14}
}

func (x *SysRedisConfigEntryPB) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SysRedisConfigEntryPB) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type ResourcePermissionsPB struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	ResourceName      *string                 `protobuf:"bytes,1,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	CanonicalResource *string                 `protobuf:"bytes,11,opt,name=canonical_resource,json=canonicalResource" json:"canonical_resource,omitempty"`
	NamespaceName     *string                 `protobuf:"bytes,12,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	ResourceType      *common.ResourceType    `protobuf:"varint,2,opt,name=resource_type,json=resourceType,enum=yb.ResourceType" json:"resource_type,omitempty"`
	Permissions       []common.PermissionType `protobuf:"varint,13,rep,name=permissions,enum=yb.PermissionType" json:"permissions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ResourcePermissionsPB) Reset() {
	*x = ResourcePermissionsPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcePermissionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePermissionsPB) ProtoMessage() {}

func (x *ResourcePermissionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePermissionsPB.ProtoReflect.Descriptor instead.
func (*ResourcePermissionsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{15}
}

func (x *ResourcePermissionsPB) GetResourceName() string {
	if x != nil && x.ResourceName != nil {
		return *x.ResourceName
	}
	return ""
}

func (x *ResourcePermissionsPB) GetCanonicalResource() string {
	if x != nil && x.CanonicalResource != nil {
		return *x.CanonicalResource
	}
	return ""
}

func (x *ResourcePermissionsPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *ResourcePermissionsPB) GetResourceType() common.ResourceType {
	if x != nil && x.ResourceType != nil {
		return *x.ResourceType
	}
	return common.ResourceType(1)
}

func (x *ResourcePermissionsPB) GetPermissions() []common.PermissionType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SysRoleEntryPB struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Role          []byte                   `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	CanLogin      *bool                    `protobuf:"varint,2,opt,name=can_login,json=canLogin" json:"can_login,omitempty"`
	IsSuperuser   *bool                    `protobuf:"varint,3,opt,name=is_superuser,json=isSuperuser" json:"is_superuser,omitempty"`
	MemberOf      [][]byte                 `protobuf:"bytes,4,rep,name=member_of,json=memberOf" json:"member_of,omitempty"`
	SaltedHash    []byte                   `protobuf:"bytes,5,opt,name=salted_hash,json=saltedHash" json:"salted_hash,omitempty"`
	Resources     []*ResourcePermissionsPB `protobuf:"bytes,7,rep,name=resources" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysRoleEntryPB) Reset() {
	*x = SysRoleEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysRoleEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRoleEntryPB) ProtoMessage() {}

func (x *SysRoleEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRoleEntryPB.ProtoReflect.Descriptor instead.
func (*SysRoleEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{16}
}

func (x *SysRoleEntryPB) GetRole() []byte {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *SysRoleEntryPB) GetCanLogin() bool {
	if x != nil && x.CanLogin != nil {
		return *x.CanLogin
	}
	return false
}

func (x *SysRoleEntryPB) GetIsSuperuser() bool {
	if x != nil && x.IsSuperuser != nil {
		return *x.IsSuperuser
	}
	return false
}

func (x *SysRoleEntryPB) GetMemberOf() [][]byte {
	if x != nil {
		return x.MemberOf
	}
	return nil
}

func (x *SysRoleEntryPB) GetSaltedHash() []byte {
	if x != nil {
		return x.SaltedHash
	}
	return nil
}

func (x *SysRoleEntryPB) GetResources() []*ResourcePermissionsPB {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Cluster security configuration.
type SysSecurityConfigEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Roles configuration version. Every time a role gets created/deleted, or a permission gets
	// added/removed, we increase the version.
	RolesVersion         *uint64 `protobuf:"varint,1,opt,name=roles_version,json=rolesVersion" json:"roles_version,omitempty"`
	CassandraUserCreated *bool   `protobuf:"varint,2,opt,name=cassandra_user_created,json=cassandraUserCreated,def=0" json:"cassandra_user_created,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for SysSecurityConfigEntryPB fields.
const (
	Default_SysSecurityConfigEntryPB_CassandraUserCreated = bool(false)
)

func (x *SysSecurityConfigEntryPB) Reset() {
	*x = SysSecurityConfigEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysSecurityConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysSecurityConfigEntryPB) ProtoMessage() {}

func (x *SysSecurityConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysSecurityConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysSecurityConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{17}
}

func (x *SysSecurityConfigEntryPB) GetRolesVersion() uint64 {
	if x != nil && x.RolesVersion != nil {
		return *x.RolesVersion
	}
	return 0
}

func (x *SysSecurityConfigEntryPB) GetCassandraUserCreated() bool {
	if x != nil && x.CassandraUserCreated != nil {
		return *x.CassandraUserCreated
	}
	return Default_SysSecurityConfigEntryPB_CassandraUserCreated
}

// Metadata about the YSQL catalog (current only version).
type SysYSQLCatalogConfigEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// YSQL catalog version. Every time the catalog tables are changed (i.e. by DDL statements)
	// this version gets incremented.
	Version *uint64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// This is true if the master ran initdb and it finished, succesfully or not.
	InitdbDone *bool `protobuf:"varint,2,opt,name=initdb_done,json=initdbDone" json:"initdb_done,omitempty"`
	// If this is set, initdb has failed.
	InitdbError *string `protobuf:"bytes,5,opt,name=initdb_error,json=initdbError" json:"initdb_error,omitempty"`
	// true if transactional system catalogs have been enabled on this cluster. This means all
	// YSQL system catalog tables have been made transactional, both in their schema and in the tablet
	// metadata.
	TransactionalSysCatalogEnabled *bool `protobuf:"varint,6,opt,name=transactional_sys_catalog_enabled,json=transactionalSysCatalogEnabled" json:"transactional_sys_catalog_enabled,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *SysYSQLCatalogConfigEntryPB) Reset() {
	*x = SysYSQLCatalogConfigEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysYSQLCatalogConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysYSQLCatalogConfigEntryPB) ProtoMessage() {}

func (x *SysYSQLCatalogConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysYSQLCatalogConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysYSQLCatalogConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{18}
}

func (x *SysYSQLCatalogConfigEntryPB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysYSQLCatalogConfigEntryPB) GetInitdbDone() bool {
	if x != nil && x.InitdbDone != nil {
		return *x.InitdbDone
	}
	return false
}

func (x *SysYSQLCatalogConfigEntryPB) GetInitdbError() string {
	if x != nil && x.InitdbError != nil {
		return *x.InitdbError
	}
	return ""
}

func (x *SysYSQLCatalogConfigEntryPB) GetTransactionalSysCatalogEnabled() bool {
	if x != nil && x.TransactionalSysCatalogEnabled != nil {
		return *x.TransactionalSysCatalogEnabled
	}
	return false
}

// Metadata about the current state of transaction tables.
type SysTransactionTablesConfigEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction status tables version. Every time a transaction table is added or has its placement
	// changed, this version gets incremented.
	Version       *uint64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysTransactionTablesConfigEntryPB) Reset() {
	*x = SysTransactionTablesConfigEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysTransactionTablesConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTransactionTablesConfigEntryPB) ProtoMessage() {}

func (x *SysTransactionTablesConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTransactionTablesConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysTransactionTablesConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{19}
}

func (x *SysTransactionTablesConfigEntryPB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

// Various cluster configuration.
type SysConfigEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Config:
	//
	//	*SysConfigEntryPB_SecurityConfig
	//	*SysConfigEntryPB_YsqlCatalogConfig
	//	*SysConfigEntryPB_TransactionTablesConfig
	Config        isSysConfigEntryPB_Config `protobuf_oneof:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysConfigEntryPB) Reset() {
	*x = SysConfigEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysConfigEntryPB) ProtoMessage() {}

func (x *SysConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{20}
}

func (x *SysConfigEntryPB) GetConfig() isSysConfigEntryPB_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SysConfigEntryPB) GetSecurityConfig() *SysSecurityConfigEntryPB {
	if x != nil {
		if x, ok := x.Config.(*SysConfigEntryPB_SecurityConfig); ok {
			return x.SecurityConfig
		}
	}
	return nil
}

func (x *SysConfigEntryPB) GetYsqlCatalogConfig() *SysYSQLCatalogConfigEntryPB {
	if x != nil {
		if x, ok := x.Config.(*SysConfigEntryPB_YsqlCatalogConfig); ok {
			return x.YsqlCatalogConfig
		}
	}
	return nil
}

func (x *SysConfigEntryPB) GetTransactionTablesConfig() *SysTransactionTablesConfigEntryPB {
	if x != nil {
		if x, ok := x.Config.(*SysConfigEntryPB_TransactionTablesConfig); ok {
			return x.TransactionTablesConfig
		}
	}
	return nil
}

type isSysConfigEntryPB_Config interface {
	isSysConfigEntryPB_Config()
}

type SysConfigEntryPB_SecurityConfig struct {
	SecurityConfig *SysSecurityConfigEntryPB `protobuf:"bytes,1,opt,name=security_config,json=securityConfig,oneof"`
}

type SysConfigEntryPB_YsqlCatalogConfig struct {
	YsqlCatalogConfig *SysYSQLCatalogConfigEntryPB `protobuf:"bytes,2,opt,name=ysql_catalog_config,json=ysqlCatalogConfig,oneof"`
}

type SysConfigEntryPB_TransactionTablesConfig struct {
	TransactionTablesConfig *SysTransactionTablesConfigEntryPB `protobuf:"bytes,3,opt,name=transaction_tables_config,json=transactionTablesConfig,oneof"`
}

func (*SysConfigEntryPB_SecurityConfig) isSysConfigEntryPB_Config() {}

func (*SysConfigEntryPB_YsqlCatalogConfig) isSysConfigEntryPB_Config() {}

func (*SysConfigEntryPB_TransactionTablesConfig) isSysConfigEntryPB_Config() {}

// The actual on disk abstract representation of a row in the sys catalog.
// This has to respect the fixed schema of the catalog. In case of changes to
// the schema, this proto must reflect them.
type SysRowEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of entry we are storing. Since the data is serialized, we cannot
	// just store it with
	// the data, as we are not able to read into the appropriate type.
	Type *SysRowEntryType `protobuf:"varint,1,opt,name=type,enum=yb.master.SysRowEntryType" json:"type,omitempty"`
	// The optional ID of the data that we are storing. This can be useful to only
	// read information
	// related to a single item, in the case of tables or tablets, for example.
	// This is optional.
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// This is the serialized format of the proto we store. This used to be of the "string" type, but
	// was giving warnings due to non-UTF8 data. This is safe, because "bytes" and "string" are
	// encoded the same way in Protobuf.
	// https://groups.google.com/forum/#!msg/protobuf/au6eQBkRT5s/Bhpctql7Q5sJ
	Data          []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysRowEntry) Reset() {
	*x = SysRowEntry{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysRowEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRowEntry) ProtoMessage() {}

func (x *SysRowEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRowEntry.ProtoReflect.Descriptor instead.
func (*SysRowEntry) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{21}
}

func (x *SysRowEntry) GetType() SysRowEntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SysRowEntryType_UNKNOWN
}

func (x *SysRowEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SysRowEntry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SysRowEntries struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*SysRowEntry         `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysRowEntries) Reset() {
	*x = SysRowEntries{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysRowEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRowEntries) ProtoMessage() {}

func (x *SysRowEntries) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRowEntries.ProtoReflect.Descriptor instead.
func (*SysRowEntries) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{22}
}

func (x *SysRowEntries) GetEntries() []*SysRowEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type DdlLogEntryPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableType     *common.TableType      `protobuf:"varint,1,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	NamespaceName *string                `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	NamespaceId   *string                `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	TableName     *string                `protobuf:"bytes,4,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId       *string                `protobuf:"bytes,5,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Action        *string                `protobuf:"bytes,6,opt,name=action" json:"action,omitempty"`
	Time          *uint64                `protobuf:"fixed64,7,opt,name=time" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdlLogEntryPB) Reset() {
	*x = DdlLogEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdlLogEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdlLogEntryPB) ProtoMessage() {}

func (x *DdlLogEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdlLogEntryPB.ProtoReflect.Descriptor instead.
func (*DdlLogEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{23}
}

func (x *DdlLogEntryPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType(2)
}

func (x *DdlLogEntryPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *DdlLogEntryPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *DdlLogEntryPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *DdlLogEntryPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *DdlLogEntryPB) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *DdlLogEntryPB) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

// Options for CDC stream. This will include details such as:
// Stream sink: YB Universe / Kafka / Elastic Search.
// Log retention time: Amount of time to retain logs for CDC.
// Sink details: For example, Kafka cluster IP, port.
type CDCStreamOptionsPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDCStreamOptionsPB) Reset() {
	*x = CDCStreamOptionsPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCStreamOptionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCStreamOptionsPB) ProtoMessage() {}

func (x *CDCStreamOptionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCStreamOptionsPB.ProtoReflect.Descriptor instead.
func (*CDCStreamOptionsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{24}
}

func (x *CDCStreamOptionsPB) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CDCStreamOptionsPB) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The on-disk entry specific to CDCSDK streams
type CDCSDKStreamEntryPB struct {
	state                    protoimpl.MessageState       `protogen:"open.v1"`
	SnapshotTime             *uint64                      `protobuf:"varint,1,opt,name=snapshot_time,json=snapshotTime" json:"snapshot_time,omitempty"`
	ConsistentSnapshotOption *common.CDCSDKSnapshotOption `protobuf:"varint,2,opt,name=consistent_snapshot_option,json=consistentSnapshotOption,enum=yb.CDCSDKSnapshotOption" json:"consistent_snapshot_option,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CDCSDKStreamEntryPB) Reset() {
	*x = CDCSDKStreamEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDCSDKStreamEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCSDKStreamEntryPB) ProtoMessage() {}

func (x *CDCSDKStreamEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCSDKStreamEntryPB.ProtoReflect.Descriptor instead.
func (*CDCSDKStreamEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{25}
}

func (x *CDCSDKStreamEntryPB) GetSnapshotTime() uint64 {
	if x != nil && x.SnapshotTime != nil {
		return *x.SnapshotTime
	}
	return 0
}

func (x *CDCSDKStreamEntryPB) GetConsistentSnapshotOption() common.CDCSDKSnapshotOption {
	if x != nil && x.ConsistentSnapshotOption != nil {
		return *x.ConsistentSnapshotOption
	}
	return common.CDCSDKSnapshotOption(1)
}

// The data part of a SysRowEntry in the sys.catalog table for a CDC stream.
type SysCDCStreamEntryPB struct {
	state                         protoimpl.MessageState     `protogen:"open.v1"`
	TableId                       []string                   `protobuf:"bytes,1,rep,name=table_id,json=tableId" json:"table_id,omitempty"`
	Options                       []*CDCStreamOptionsPB      `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
	State                         *SysCDCStreamEntryPB_State `protobuf:"varint,3,opt,name=state,enum=yb.master.SysCDCStreamEntryPB_State,def=0" json:"state,omitempty"`
	NamespaceId                   *string                    `protobuf:"bytes,4,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	Transactional                 *bool                      `protobuf:"varint,5,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	CdcsdkYsqlReplicationSlotName *string                    `protobuf:"bytes,6,opt,name=cdcsdk_ysql_replication_slot_name,json=cdcsdkYsqlReplicationSlotName" json:"cdcsdk_ysql_replication_slot_name,omitempty"`
	CdcsdkStreamMetadata          *CDCSDKStreamEntryPB       `protobuf:"bytes,7,opt,name=cdcsdk_stream_metadata,json=cdcsdkStreamMetadata" json:"cdcsdk_stream_metadata,omitempty"`
	StreamCreationTime            *uint64                    `protobuf:"varint,8,opt,name=stream_creation_time,json=streamCreationTime" json:"stream_creation_time,omitempty"`
	// This map stores the replica identity for each table in the stream at the time of stream
	// creation. The key for this map is table_id and the value is replica identity for that table.
	ReplicaIdentityMap                  map[string]common.PgReplicaIdentity `protobuf:"bytes,9,rep,name=replica_identity_map,json=replicaIdentityMap" json:"replica_identity_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=yb.PgReplicaIdentity"`
	CdcsdkYsqlReplicationSlotPluginName *string                             `protobuf:"bytes,10,opt,name=cdcsdk_ysql_replication_slot_plugin_name,json=cdcsdkYsqlReplicationSlotPluginName" json:"cdcsdk_ysql_replication_slot_plugin_name,omitempty"`
	// Dynamic tables are the tables which are created after the creation of the stream.
	// This field controls if dynamic tables should automatically be added to the CDC stream or not.
	// If set to true, dynamic table wont get added to the CDC stream.
	CdcsdkDisableDynamicTableAddition *bool `protobuf:"varint,11,opt,name=cdcsdk_disable_dynamic_table_addition,json=cdcsdkDisableDynamicTableAddition" json:"cdcsdk_disable_dynamic_table_addition,omitempty"`
	// This field stores the list of user created tables that have been removed from CDCSDK
	// stream.
	UnqualifiedTableId               [][]byte                       `protobuf:"bytes,12,rep,name=unqualified_table_id,json=unqualifiedTableId" json:"unqualified_table_id,omitempty"`
	CdcsdkYsqlReplicationSlotLsnType *common.ReplicationSlotLsnType `protobuf:"varint,13,opt,name=cdcsdk_ysql_replication_slot_lsn_type,json=cdcsdkYsqlReplicationSlotLsnType,enum=yb.ReplicationSlotLsnType,def=0" json:"cdcsdk_ysql_replication_slot_lsn_type,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

// Default values for SysCDCStreamEntryPB fields.
const (
	Default_SysCDCStreamEntryPB_State                            = SysCDCStreamEntryPB_ACTIVE
	Default_SysCDCStreamEntryPB_CdcsdkYsqlReplicationSlotLsnType = common.ReplicationSlotLsnType(0) // common.ReplicationSlotLsnType_ReplicationSlotLsnType_UNSPECIFIED
)

func (x *SysCDCStreamEntryPB) Reset() {
	*x = SysCDCStreamEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysCDCStreamEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCDCStreamEntryPB) ProtoMessage() {}

func (x *SysCDCStreamEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCDCStreamEntryPB.ProtoReflect.Descriptor instead.
func (*SysCDCStreamEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{26}
}

func (x *SysCDCStreamEntryPB) GetTableId() []string {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetOptions() []*CDCStreamOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetState() SysCDCStreamEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysCDCStreamEntryPB_State
}

func (x *SysCDCStreamEntryPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *SysCDCStreamEntryPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *SysCDCStreamEntryPB) GetCdcsdkYsqlReplicationSlotName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotName != nil {
		return *x.CdcsdkYsqlReplicationSlotName
	}
	return ""
}

func (x *SysCDCStreamEntryPB) GetCdcsdkStreamMetadata() *CDCSDKStreamEntryPB {
	if x != nil {
		return x.CdcsdkStreamMetadata
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetStreamCreationTime() uint64 {
	if x != nil && x.StreamCreationTime != nil {
		return *x.StreamCreationTime
	}
	return 0
}

func (x *SysCDCStreamEntryPB) GetReplicaIdentityMap() map[string]common.PgReplicaIdentity {
	if x != nil {
		return x.ReplicaIdentityMap
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetCdcsdkYsqlReplicationSlotPluginName() string {
	if x != nil && x.CdcsdkYsqlReplicationSlotPluginName != nil {
		return *x.CdcsdkYsqlReplicationSlotPluginName
	}
	return ""
}

func (x *SysCDCStreamEntryPB) GetCdcsdkDisableDynamicTableAddition() bool {
	if x != nil && x.CdcsdkDisableDynamicTableAddition != nil {
		return *x.CdcsdkDisableDynamicTableAddition
	}
	return false
}

func (x *SysCDCStreamEntryPB) GetUnqualifiedTableId() [][]byte {
	if x != nil {
		return x.UnqualifiedTableId
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetCdcsdkYsqlReplicationSlotLsnType() common.ReplicationSlotLsnType {
	if x != nil && x.CdcsdkYsqlReplicationSlotLsnType != nil {
		return *x.CdcsdkYsqlReplicationSlotLsnType
	}
	return Default_SysCDCStreamEntryPB_CdcsdkYsqlReplicationSlotLsnType
}

// The on-disk entry in the sys.catalog table ("metadata" column) for snapshots entries.
type SysSnapshotEntryPB struct {
	state           protoimpl.MessageState                 `protogen:"open.v1"`
	State           *SysSnapshotEntryPB_State              `protobuf:"varint,1,opt,name=state,enum=yb.master.SysSnapshotEntryPB_State,def=0" json:"state,omitempty"`
	TabletSnapshots []*SysSnapshotEntryPB_TabletSnapshotPB `protobuf:"bytes,2,rep,name=tablet_snapshots,json=tabletSnapshots" json:"tablet_snapshots,omitempty"`
	// Stored info about snapshot (1) namespaces (2) tables (3) tablets.
	Entries                    []*SysRowEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	SnapshotHybridTime         *uint64        `protobuf:"fixed64,4,opt,name=snapshot_hybrid_time,json=snapshotHybridTime" json:"snapshot_hybrid_time,omitempty"`
	Version                    *int64         `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	ScheduleId                 []byte         `protobuf:"bytes,6,opt,name=schedule_id,json=scheduleId" json:"schedule_id,omitempty"`
	PreviousSnapshotHybridTime *uint64        `protobuf:"fixed64,7,opt,name=previous_snapshot_hybrid_time,json=previousSnapshotHybridTime" json:"previous_snapshot_hybrid_time,omitempty"`
	// This field specifies the TTL of this snapshot.
	//  1. Not set: the snapshot has no explicit TTL, will be retained until a DeleteSnapshot, and
	//     does not block object cleanup. This is used to handle a few special cases:
	//     a. Snapshots which are part of a snapshot schedule do not have this field set. This is
	//     because their TTL is controlled by the snapshot schedule's retention.
	//     b. Snapshots created before D28005 (when this field was introduced).
	//  2. < 0: the snapshot will not be automatically cleaned up until a `DeleteSnapshot`, and might
	//     block object cleanup until then.
	//  3. > 0: the snapshot will automatically be cleaned up when
	//     now() > snapshot_hybrid_time + retention_duration_hours.
	//  4. 0: explicitly forbidden.
	RetentionDurationHours *int32 `protobuf:"varint,8,opt,name=retention_duration_hours,json=retentionDurationHours" json:"retention_duration_hours,omitempty"`
	// Whether this is an imported snapshot (part of a restore). Default is false to maintain
	// historical behavior when deciding whether to block object cleanup.
	Imported      *bool `protobuf:"varint,9,opt,name=imported,def=0" json:"imported,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for SysSnapshotEntryPB fields.
const (
	Default_SysSnapshotEntryPB_State    = SysSnapshotEntryPB_UNKNOWN
	Default_SysSnapshotEntryPB_Imported = bool(false)
)

func (x *SysSnapshotEntryPB) Reset() {
	*x = SysSnapshotEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysSnapshotEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysSnapshotEntryPB) ProtoMessage() {}

func (x *SysSnapshotEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysSnapshotEntryPB.ProtoReflect.Descriptor instead.
func (*SysSnapshotEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{27}
}

func (x *SysSnapshotEntryPB) GetState() SysSnapshotEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysSnapshotEntryPB_State
}

func (x *SysSnapshotEntryPB) GetTabletSnapshots() []*SysSnapshotEntryPB_TabletSnapshotPB {
	if x != nil {
		return x.TabletSnapshots
	}
	return nil
}

func (x *SysSnapshotEntryPB) GetEntries() []*SysRowEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *SysSnapshotEntryPB) GetSnapshotHybridTime() uint64 {
	if x != nil && x.SnapshotHybridTime != nil {
		return *x.SnapshotHybridTime
	}
	return 0
}

func (x *SysSnapshotEntryPB) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysSnapshotEntryPB) GetScheduleId() []byte {
	if x != nil {
		return x.ScheduleId
	}
	return nil
}

func (x *SysSnapshotEntryPB) GetPreviousSnapshotHybridTime() uint64 {
	if x != nil && x.PreviousSnapshotHybridTime != nil {
		return *x.PreviousSnapshotHybridTime
	}
	return 0
}

func (x *SysSnapshotEntryPB) GetRetentionDurationHours() int32 {
	if x != nil && x.RetentionDurationHours != nil {
		return *x.RetentionDurationHours
	}
	return 0
}

func (x *SysSnapshotEntryPB) GetImported() bool {
	if x != nil && x.Imported != nil {
		return *x.Imported
	}
	return Default_SysSnapshotEntryPB_Imported
}

type SysCloneStatePB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AggregateState *SysCloneStatePB_State `protobuf:"varint,1,opt,name=aggregate_state,json=aggregateState,enum=yb.master.SysCloneStatePB_State" json:"aggregate_state,omitempty"`
	// Needed to load the clone state into the CloneStateManager's map.
	SourceNamespaceId *string `protobuf:"bytes,2,opt,name=source_namespace_id,json=sourceNamespaceId" json:"source_namespace_id,omitempty"`
	CloneRequestSeqNo *uint32 `protobuf:"varint,3,opt,name=clone_request_seq_no,json=cloneRequestSeqNo" json:"clone_request_seq_no,omitempty"`
	// Used for debugging.
	DatabaseType        *common.YQLDatabase `protobuf:"varint,8,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase" json:"database_type,omitempty"`
	TargetNamespaceName *string             `protobuf:"bytes,4,opt,name=target_namespace_name,json=targetNamespaceName" json:"target_namespace_name,omitempty"`
	TargetNamespaceId   *string             `protobuf:"bytes,7,opt,name=target_namespace_id,json=targetNamespaceId" json:"target_namespace_id,omitempty"`
	SourceNamespaceName *string             `protobuf:"bytes,9,opt,name=source_namespace_name,json=sourceNamespaceName" json:"source_namespace_name,omitempty"`
	RestoreTime         *uint64             `protobuf:"fixed64,5,opt,name=restore_time,json=restoreTime" json:"restore_time,omitempty"`
	// A reason for why the clone was aborted.
	AbortMessage  *string `protobuf:"bytes,6,opt,name=abort_message,json=abortMessage" json:"abort_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysCloneStatePB) Reset() {
	*x = SysCloneStatePB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysCloneStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCloneStatePB) ProtoMessage() {}

func (x *SysCloneStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCloneStatePB.ProtoReflect.Descriptor instead.
func (*SysCloneStatePB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{28}
}

func (x *SysCloneStatePB) GetAggregateState() SysCloneStatePB_State {
	if x != nil && x.AggregateState != nil {
		return *x.AggregateState
	}
	return SysCloneStatePB_CLONE_SCHEMA_STARTED
}

func (x *SysCloneStatePB) GetSourceNamespaceId() string {
	if x != nil && x.SourceNamespaceId != nil {
		return *x.SourceNamespaceId
	}
	return ""
}

func (x *SysCloneStatePB) GetCloneRequestSeqNo() uint32 {
	if x != nil && x.CloneRequestSeqNo != nil {
		return *x.CloneRequestSeqNo
	}
	return 0
}

func (x *SysCloneStatePB) GetDatabaseType() common.YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return common.YQLDatabase(1)
}

func (x *SysCloneStatePB) GetTargetNamespaceName() string {
	if x != nil && x.TargetNamespaceName != nil {
		return *x.TargetNamespaceName
	}
	return ""
}

func (x *SysCloneStatePB) GetTargetNamespaceId() string {
	if x != nil && x.TargetNamespaceId != nil {
		return *x.TargetNamespaceId
	}
	return ""
}

func (x *SysCloneStatePB) GetSourceNamespaceName() string {
	if x != nil && x.SourceNamespaceName != nil {
		return *x.SourceNamespaceName
	}
	return ""
}

func (x *SysCloneStatePB) GetRestoreTime() uint64 {
	if x != nil && x.RestoreTime != nil {
		return *x.RestoreTime
	}
	return 0
}

func (x *SysCloneStatePB) GetAbortMessage() string {
	if x != nil && x.AbortMessage != nil {
		return *x.AbortMessage
	}
	return ""
}

type SchemaVersionMappingPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ProducerSchemaVersion *uint32                `protobuf:"varint,1,req,name=producer_schema_version,json=producerSchemaVersion" json:"producer_schema_version,omitempty"`
	ConsumerSchemaVersion *uint32                `protobuf:"varint,2,req,name=consumer_schema_version,json=consumerSchemaVersion" json:"consumer_schema_version,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SchemaVersionMappingPB) Reset() {
	*x = SchemaVersionMappingPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaVersionMappingPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaVersionMappingPB) ProtoMessage() {}

func (x *SchemaVersionMappingPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaVersionMappingPB.ProtoReflect.Descriptor instead.
func (*SchemaVersionMappingPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{29}
}

func (x *SchemaVersionMappingPB) GetProducerSchemaVersion() uint32 {
	if x != nil && x.ProducerSchemaVersion != nil {
		return *x.ProducerSchemaVersion
	}
	return 0
}

func (x *SchemaVersionMappingPB) GetConsumerSchemaVersion() uint32 {
	if x != nil && x.ConsumerSchemaVersion != nil {
		return *x.ConsumerSchemaVersion
	}
	return 0
}

type ColocatedSchemaVersionMappingPB struct {
	state                protoimpl.MessageState  `protogen:"open.v1"`
	ColocationId         *uint32                 `protobuf:"varint,1,req,name=colocation_id,json=colocationId" json:"colocation_id,omitempty"`
	SchemaVersionMapping *SchemaVersionMappingPB `protobuf:"bytes,2,req,name=schema_version_mapping,json=schemaVersionMapping" json:"schema_version_mapping,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ColocatedSchemaVersionMappingPB) Reset() {
	*x = ColocatedSchemaVersionMappingPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColocatedSchemaVersionMappingPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColocatedSchemaVersionMappingPB) ProtoMessage() {}

func (x *ColocatedSchemaVersionMappingPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColocatedSchemaVersionMappingPB.ProtoReflect.Descriptor instead.
func (*ColocatedSchemaVersionMappingPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{30}
}

func (x *ColocatedSchemaVersionMappingPB) GetColocationId() uint32 {
	if x != nil && x.ColocationId != nil {
		return *x.ColocationId
	}
	return 0
}

func (x *ColocatedSchemaVersionMappingPB) GetSchemaVersionMapping() *SchemaVersionMappingPB {
	if x != nil {
		return x.SchemaVersionMapping
	}
	return nil
}

type SchemaVersionMappingEntryPB struct {
	state                   protoimpl.MessageState             `protogen:"open.v1"`
	SchemaVersionMapping    *SchemaVersionMappingPB            `protobuf:"bytes,1,opt,name=schema_version_mapping,json=schemaVersionMapping" json:"schema_version_mapping,omitempty"`
	ColocatedSchemaVersions []*ColocatedSchemaVersionMappingPB `protobuf:"bytes,2,rep,name=colocated_schema_versions,json=colocatedSchemaVersions" json:"colocated_schema_versions,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SchemaVersionMappingEntryPB) Reset() {
	*x = SchemaVersionMappingEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaVersionMappingEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaVersionMappingEntryPB) ProtoMessage() {}

func (x *SchemaVersionMappingEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaVersionMappingEntryPB.ProtoReflect.Descriptor instead.
func (*SchemaVersionMappingEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{31}
}

func (x *SchemaVersionMappingEntryPB) GetSchemaVersionMapping() *SchemaVersionMappingPB {
	if x != nil {
		return x.SchemaVersionMapping
	}
	return nil
}

func (x *SchemaVersionMappingEntryPB) GetColocatedSchemaVersions() []*ColocatedSchemaVersionMappingPB {
	if x != nil {
		return x.ColocatedSchemaVersions
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for a universe replication record.
type SysUniverseReplicationEntryPB struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ReplicationGroupId      *string                `protobuf:"bytes,1,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	ProducerMasterAddresses []*common.HostPortPB   `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	// producer table IDs.
	Tables []string                             `protobuf:"bytes,3,rep,name=tables" json:"tables,omitempty"`
	State  *SysUniverseReplicationEntryPB_State `protobuf:"varint,4,opt,name=state,enum=yb.master.SysUniverseReplicationEntryPB_State,def=0" json:"state,omitempty"`
	// producer table ID -> consumer table ID map.
	ValidatedTables map[string]string `protobuf:"bytes,5,rep,name=validated_tables,json=validatedTables" json:"validated_tables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// producer table ID -> producer CDC stream ID map.
	TableStreams map[string]string `protobuf:"bytes,6,rep,name=table_streams,json=tableStreams" json:"table_streams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Set when consistent transactions are enabled for a replication group.
	Transactional                        *bool                                      `protobuf:"varint,11,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	ValidatedLocalAutoFlagsConfigVersion *uint32                                    `protobuf:"varint,12,opt,name=validated_local_auto_flags_config_version,json=validatedLocalAutoFlagsConfigVersion" json:"validated_local_auto_flags_config_version,omitempty"`
	DbScopedInfo                         *SysUniverseReplicationEntryPB_DBScopeInfo `protobuf:"bytes,13,opt,name=db_scoped_info,json=dbScopedInfo" json:"db_scoped_info,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

// Default values for SysUniverseReplicationEntryPB fields.
const (
	Default_SysUniverseReplicationEntryPB_State = SysUniverseReplicationEntryPB_INITIALIZING
)

func (x *SysUniverseReplicationEntryPB) Reset() {
	*x = SysUniverseReplicationEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationEntryPB) ProtoMessage() {}

func (x *SysUniverseReplicationEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationEntryPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{32}
}

func (x *SysUniverseReplicationEntryPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *SysUniverseReplicationEntryPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetState() SysUniverseReplicationEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysUniverseReplicationEntryPB_State
}

func (x *SysUniverseReplicationEntryPB) GetValidatedTables() map[string]string {
	if x != nil {
		return x.ValidatedTables
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetTableStreams() map[string]string {
	if x != nil {
		return x.TableStreams
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *SysUniverseReplicationEntryPB) GetValidatedLocalAutoFlagsConfigVersion() uint32 {
	if x != nil && x.ValidatedLocalAutoFlagsConfigVersion != nil {
		return *x.ValidatedLocalAutoFlagsConfigVersion
	}
	return 0
}

func (x *SysUniverseReplicationEntryPB) GetDbScopedInfo() *SysUniverseReplicationEntryPB_DBScopeInfo {
	if x != nil {
		return x.DbScopedInfo
	}
	return nil
}

type XClusterSafeTimePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map[Local NamespaceId]: xCluster safe read HybridTime
	SafeTimeMap   map[string]uint64 `protobuf:"bytes,1,rep,name=safe_time_map,json=safeTimeMap" json:"safe_time_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XClusterSafeTimePB) Reset() {
	*x = XClusterSafeTimePB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XClusterSafeTimePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XClusterSafeTimePB) ProtoMessage() {}

func (x *XClusterSafeTimePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XClusterSafeTimePB.ProtoReflect.Descriptor instead.
func (*XClusterSafeTimePB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{33}
}

func (x *XClusterSafeTimePB) GetSafeTimeMap() map[string]uint64 {
	if x != nil {
		return x.SafeTimeMap
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for a universe
// replication record.
type SysUniverseReplicationBootstrapEntryPB struct {
	state protoimpl.MessageState                        `protogen:"open.v1"`
	State *SysUniverseReplicationBootstrapEntryPB_State `protobuf:"varint,1,opt,name=state,enum=yb.master.SysUniverseReplicationBootstrapEntryPB_State,def=0" json:"state,omitempty"`
	// There's different cleanup tasks depending on which state the flow failed
	// on, and so we store this on failure so that we can cleanup properly.
	FailedOn                *SysUniverseReplicationBootstrapEntryPB_State `protobuf:"varint,2,opt,name=failed_on,json=failedOn,enum=yb.master.SysUniverseReplicationBootstrapEntryPB_State,def=0" json:"failed_on,omitempty"`
	ReplicationGroupId      *string                                       `protobuf:"bytes,3,opt,name=replication_group_id,json=replicationGroupId" json:"replication_group_id,omitempty"`
	ProducerMasterAddresses []*common.HostPortPB                          `protobuf:"bytes,4,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	// producer table ID -> producer CDC stream ID map.
	TableBootstrapIds map[string]string `protobuf:"bytes,5,rep,name=table_bootstrap_ids,json=tableBootstrapIds" json:"table_bootstrap_ids,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// In the xCluster native bootstrap flow, during the ImportSnapshot step the
	// consumer universe actually creates its own snapshot with a unique ID. In
	// this case, old_snapshot_id is the producer snapshot ID and new_snapshot_id
	// is the consumer snapshot ID.
	OldSnapshotId []byte `protobuf:"bytes,6,opt,name=old_snapshot_id,json=oldSnapshotId" json:"old_snapshot_id,omitempty"`
	NewSnapshotId []byte `protobuf:"bytes,7,opt,name=new_snapshot_id,json=newSnapshotId" json:"new_snapshot_id,omitempty"`
	RestorationId []byte `protobuf:"bytes,8,opt,name=restoration_id,json=restorationId" json:"restoration_id,omitempty"`
	// Keeps track of newly created objects in case we need to cleanup on failure.
	NewSnapshotObjects *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB `protobuf:"bytes,9,opt,name=new_snapshot_objects,json=newSnapshotObjects" json:"new_snapshot_objects,omitempty"`
	// Set when consistent transactions are enabled for a replication group.
	Transactional *bool `protobuf:"varint,10,opt,name=transactional" json:"transactional,omitempty"` // [default = false]
	// According to https://phorge.dev.yugabyte.com/D24796, async tasks that
	// require epoch should retrieve it from the context that initiated the work.
	// These values store the epoch values passed from the initial RPC call to
	// SetupNamespaceReplicationWithBootstrap.
	LeaderTerm    *int64 `protobuf:"varint,11,opt,name=leader_term,json=leaderTerm" json:"leader_term,omitempty"`
	PitrCount     *int32 `protobuf:"varint,12,opt,name=pitr_count,json=pitrCount" json:"pitr_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for SysUniverseReplicationBootstrapEntryPB fields.
const (
	Default_SysUniverseReplicationBootstrapEntryPB_State    = SysUniverseReplicationBootstrapEntryPB_INITIALIZING
	Default_SysUniverseReplicationBootstrapEntryPB_FailedOn = SysUniverseReplicationBootstrapEntryPB_INITIALIZING
)

func (x *SysUniverseReplicationBootstrapEntryPB) Reset() {
	*x = SysUniverseReplicationBootstrapEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationBootstrapEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationBootstrapEntryPB) ProtoMessage() {}

func (x *SysUniverseReplicationBootstrapEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationBootstrapEntryPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationBootstrapEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{34}
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetState() SysUniverseReplicationBootstrapEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysUniverseReplicationBootstrapEntryPB_State
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetFailedOn() SysUniverseReplicationBootstrapEntryPB_State {
	if x != nil && x.FailedOn != nil {
		return *x.FailedOn
	}
	return Default_SysUniverseReplicationBootstrapEntryPB_FailedOn
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetReplicationGroupId() string {
	if x != nil && x.ReplicationGroupId != nil {
		return *x.ReplicationGroupId
	}
	return ""
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetProducerMasterAddresses() []*common.HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetTableBootstrapIds() map[string]string {
	if x != nil {
		return x.TableBootstrapIds
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetOldSnapshotId() []byte {
	if x != nil {
		return x.OldSnapshotId
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetNewSnapshotId() []byte {
	if x != nil {
		return x.NewSnapshotId
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetRestorationId() []byte {
	if x != nil {
		return x.RestorationId
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetNewSnapshotObjects() *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB {
	if x != nil {
		return x.NewSnapshotObjects
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetLeaderTerm() int64 {
	if x != nil && x.LeaderTerm != nil {
		return *x.LeaderTerm
	}
	return 0
}

func (x *SysUniverseReplicationBootstrapEntryPB) GetPitrCount() int32 {
	if x != nil && x.PitrCount != nil {
		return *x.PitrCount
	}
	return 0
}

type SysXClusterOutboundReplicationGroupEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace Id -> NamespaceInfoPB
	NamespaceInfos     map[string]*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB `protobuf:"bytes,1,rep,name=namespace_infos,json=namespaceInfos" json:"namespace_infos,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TargetUniverseInfo *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB       `protobuf:"bytes,2,opt,name=target_universe_info,json=targetUniverseInfo" json:"target_universe_info,omitempty"`
	State              *SysXClusterOutboundReplicationGroupEntryPB_State                      `protobuf:"varint,3,opt,name=state,enum=yb.master.SysXClusterOutboundReplicationGroupEntryPB_State,def=0" json:"state,omitempty"`
	AutomaticDdlMode   *bool                                                                  `protobuf:"varint,4,opt,name=automatic_ddl_mode,json=automaticDdlMode" json:"automatic_ddl_mode,omitempty"` // [default = false]
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for SysXClusterOutboundReplicationGroupEntryPB fields.
const (
	Default_SysXClusterOutboundReplicationGroupEntryPB_State = SysXClusterOutboundReplicationGroupEntryPB_READY
)

func (x *SysXClusterOutboundReplicationGroupEntryPB) Reset() {
	*x = SysXClusterOutboundReplicationGroupEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysXClusterOutboundReplicationGroupEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysXClusterOutboundReplicationGroupEntryPB) ProtoMessage() {}

func (x *SysXClusterOutboundReplicationGroupEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysXClusterOutboundReplicationGroupEntryPB.ProtoReflect.Descriptor instead.
func (*SysXClusterOutboundReplicationGroupEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{35}
}

func (x *SysXClusterOutboundReplicationGroupEntryPB) GetNamespaceInfos() map[string]*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB {
	if x != nil {
		return x.NamespaceInfos
	}
	return nil
}

func (x *SysXClusterOutboundReplicationGroupEntryPB) GetTargetUniverseInfo() *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB {
	if x != nil {
		return x.TargetUniverseInfo
	}
	return nil
}

func (x *SysXClusterOutboundReplicationGroupEntryPB) GetState() SysXClusterOutboundReplicationGroupEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysXClusterOutboundReplicationGroupEntryPB_State
}

func (x *SysXClusterOutboundReplicationGroupEntryPB) GetAutomaticDdlMode() bool {
	if x != nil && x.AutomaticDdlMode != nil {
		return *x.AutomaticDdlMode
	}
	return false
}

type SysTServerEntryPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The instance_seqno of a tserver is chosen at process start and is constant throughout the
	// process lifetime. It must be monotonically increased across process restarts for a given UUID.
	InstanceSeqno *int64                   `protobuf:"varint,1,opt,name=instance_seqno,json=instanceSeqno" json:"instance_seqno,omitempty"`
	State         *SysTServerEntryPB_State `protobuf:"varint,2,opt,name=state,enum=yb.master.SysTServerEntryPB_State" json:"state,omitempty"`
	// If the TServer is in the UNRESPONSIVE state, this is the last time it heartbeated.
	UnresponsiveLastHeartbeatHt *uint64 `protobuf:"fixed64,3,opt,name=unresponsive_last_heartbeat_ht,json=unresponsiveLastHeartbeatHt" json:"unresponsive_last_heartbeat_ht,omitempty"`
	// Contains ip addresses, ports, cloud info, and placement_uuid.
	Registration *common.ServerRegistrationPB `protobuf:"bytes,4,opt,name=registration" json:"registration,omitempty"`
	// The resources (cpu & memory) available at the tserver. Used by the tablet limits machinery.
	Resources     *ResourcesPB `protobuf:"bytes,5,opt,name=resources" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysTServerEntryPB) Reset() {
	*x = SysTServerEntryPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysTServerEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTServerEntryPB) ProtoMessage() {}

func (x *SysTServerEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTServerEntryPB.ProtoReflect.Descriptor instead.
func (*SysTServerEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{36}
}

func (x *SysTServerEntryPB) GetInstanceSeqno() int64 {
	if x != nil && x.InstanceSeqno != nil {
		return *x.InstanceSeqno
	}
	return 0
}

func (x *SysTServerEntryPB) GetState() SysTServerEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SysTServerEntryPB_UNSPECIFIED
}

func (x *SysTServerEntryPB) GetUnresponsiveLastHeartbeatHt() uint64 {
	if x != nil && x.UnresponsiveLastHeartbeatHt != nil {
		return *x.UnresponsiveLastHeartbeatHt
	}
	return 0
}

func (x *SysTServerEntryPB) GetRegistration() *common.ServerRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *SysTServerEntryPB) GetResources() *ResourcesPB {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SysObjectLockEntryPB_LockTypesPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LockType      []common.TableLockType `protobuf:"varint,1,rep,name=lock_type,json=lockType,enum=yb.TableLockType" json:"lock_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysObjectLockEntryPB_LockTypesPB) Reset() {
	*x = SysObjectLockEntryPB_LockTypesPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysObjectLockEntryPB_LockTypesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysObjectLockEntryPB_LockTypesPB) ProtoMessage() {}

func (x *SysObjectLockEntryPB_LockTypesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysObjectLockEntryPB_LockTypesPB.ProtoReflect.Descriptor instead.
func (*SysObjectLockEntryPB_LockTypesPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{12, 0}
}

func (x *SysObjectLockEntryPB_LockTypesPB) GetLockType() []common.TableLockType {
	if x != nil {
		return x.LockType
	}
	return nil
}

type SysObjectLockEntryPB_ObjectLocksMapPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// object_id -> Locks taken
	Objects       map[uint64]*SysObjectLockEntryPB_LockTypesPB `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysObjectLockEntryPB_ObjectLocksMapPB) Reset() {
	*x = SysObjectLockEntryPB_ObjectLocksMapPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysObjectLockEntryPB_ObjectLocksMapPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysObjectLockEntryPB_ObjectLocksMapPB) ProtoMessage() {}

func (x *SysObjectLockEntryPB_ObjectLocksMapPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysObjectLockEntryPB_ObjectLocksMapPB.ProtoReflect.Descriptor instead.
func (*SysObjectLockEntryPB_ObjectLocksMapPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{12, 1}
}

func (x *SysObjectLockEntryPB_ObjectLocksMapPB) GetObjects() map[uint64]*SysObjectLockEntryPB_LockTypesPB {
	if x != nil {
		return x.Objects
	}
	return nil
}

type SysObjectLockEntryPB_DBObjectsMapPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// db_id -> map of objects/locks-taken
	Dbs           map[uint64]*SysObjectLockEntryPB_ObjectLocksMapPB `protobuf:"bytes,1,rep,name=dbs" json:"dbs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysObjectLockEntryPB_DBObjectsMapPB) Reset() {
	*x = SysObjectLockEntryPB_DBObjectsMapPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysObjectLockEntryPB_DBObjectsMapPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysObjectLockEntryPB_DBObjectsMapPB) ProtoMessage() {}

func (x *SysObjectLockEntryPB_DBObjectsMapPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysObjectLockEntryPB_DBObjectsMapPB.ProtoReflect.Descriptor instead.
func (*SysObjectLockEntryPB_DBObjectsMapPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{12, 2}
}

func (x *SysObjectLockEntryPB_DBObjectsMapPB) GetDbs() map[uint64]*SysObjectLockEntryPB_ObjectLocksMapPB {
	if x != nil {
		return x.Dbs
	}
	return nil
}

type SysObjectLockEntryPB_SessionDBMapPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// session_id -> DB ...
	Sessions      map[uint64]*SysObjectLockEntryPB_DBObjectsMapPB `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysObjectLockEntryPB_SessionDBMapPB) Reset() {
	*x = SysObjectLockEntryPB_SessionDBMapPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysObjectLockEntryPB_SessionDBMapPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysObjectLockEntryPB_SessionDBMapPB) ProtoMessage() {}

func (x *SysObjectLockEntryPB_SessionDBMapPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysObjectLockEntryPB_SessionDBMapPB.ProtoReflect.Descriptor instead.
func (*SysObjectLockEntryPB_SessionDBMapPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{12, 3}
}

func (x *SysObjectLockEntryPB_SessionDBMapPB) GetSessions() map[uint64]*SysObjectLockEntryPB_DBObjectsMapPB {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type SysSnapshotEntryPB_TabletSnapshotPB struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            []byte                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State         *SysSnapshotEntryPB_State `protobuf:"varint,2,opt,name=state,enum=yb.master.SysSnapshotEntryPB_State" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) Reset() {
	*x = SysSnapshotEntryPB_TabletSnapshotPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysSnapshotEntryPB_TabletSnapshotPB) ProtoMessage() {}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysSnapshotEntryPB_TabletSnapshotPB.ProtoReflect.Descriptor instead.
func (*SysSnapshotEntryPB_TabletSnapshotPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{27, 0}
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) GetState() SysSnapshotEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SysSnapshotEntryPB_UNKNOWN
}

// DB Scoped repication.
type SysUniverseReplicationEntryPB_DBScopeInfo struct {
	state            protoimpl.MessageState                                     `protogen:"open.v1"`
	AutomaticDdlMode *bool                                                      `protobuf:"varint,1,opt,name=automatic_ddl_mode,json=automaticDdlMode" json:"automatic_ddl_mode,omitempty"` // [default = false]
	NamespaceInfos   []*SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo `protobuf:"bytes,13,rep,name=namespace_infos,json=namespaceInfos" json:"namespace_infos,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo) Reset() {
	*x = SysUniverseReplicationEntryPB_DBScopeInfo{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationEntryPB_DBScopeInfo) ProtoMessage() {}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationEntryPB_DBScopeInfo.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationEntryPB_DBScopeInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{32, 2}
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo) GetAutomaticDdlMode() bool {
	if x != nil && x.AutomaticDdlMode != nil {
		return *x.AutomaticDdlMode
	}
	return false
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo) GetNamespaceInfos() []*SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo {
	if x != nil {
		return x.NamespaceInfos
	}
	return nil
}

type SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ConsumerNamespaceId *string                `protobuf:"bytes,1,req,name=consumer_namespace_id,json=consumerNamespaceId" json:"consumer_namespace_id,omitempty"`
	ProducerNamespaceId *string                `protobuf:"bytes,2,req,name=producer_namespace_id,json=producerNamespaceId" json:"producer_namespace_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo) Reset() {
	*x = SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo) ProtoMessage() {}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{32, 2, 0}
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo) GetConsumerNamespaceId() string {
	if x != nil && x.ConsumerNamespaceId != nil {
		return *x.ConsumerNamespaceId
	}
	return ""
}

func (x *SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo) GetProducerNamespaceId() string {
	if x != nil && x.ProducerNamespaceId != nil {
		return *x.ProducerNamespaceId
	}
	return ""
}

// The following PBs are used to represent the newly created objects during
// CatalogManager::ImportSnapshotMeta. Specifically, these are all the
// required fields used in CatalogManager::DeleteNewSnapshotObjects. We store
// these PBs in case we need to cleanup on failure.
type SysUniverseReplicationBootstrapEntryPB_IdPairPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldId         *string                `protobuf:"bytes,1,opt,name=old_id,json=oldId" json:"old_id,omitempty"`
	NewId         *string                `protobuf:"bytes,2,opt,name=new_id,json=newId" json:"new_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysUniverseReplicationBootstrapEntryPB_IdPairPB) Reset() {
	*x = SysUniverseReplicationBootstrapEntryPB_IdPairPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationBootstrapEntryPB_IdPairPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationBootstrapEntryPB_IdPairPB) ProtoMessage() {}

func (x *SysUniverseReplicationBootstrapEntryPB_IdPairPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationBootstrapEntryPB_IdPairPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationBootstrapEntryPB_IdPairPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{34, 0}
}

func (x *SysUniverseReplicationBootstrapEntryPB_IdPairPB) GetOldId() string {
	if x != nil && x.OldId != nil {
		return *x.OldId
	}
	return ""
}

func (x *SysUniverseReplicationBootstrapEntryPB_IdPairPB) GetNewId() string {
	if x != nil && x.NewId != nil {
		return *x.NewId
	}
	return ""
}

type SysUniverseReplicationBootstrapEntryPB_TableDataPB struct {
	state          protoimpl.MessageState                           `protogen:"open.v1"`
	Ids            *SysUniverseReplicationBootstrapEntryPB_IdPairPB `protobuf:"bytes,1,opt,name=ids" json:"ids,omitempty"`
	TableType      *common.TableType                                `protobuf:"varint,2,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	IndexedTableId []byte                                           `protobuf:"bytes,3,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"` // Indexed table id of this index.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SysUniverseReplicationBootstrapEntryPB_TableDataPB) Reset() {
	*x = SysUniverseReplicationBootstrapEntryPB_TableDataPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationBootstrapEntryPB_TableDataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationBootstrapEntryPB_TableDataPB) ProtoMessage() {}

func (x *SysUniverseReplicationBootstrapEntryPB_TableDataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationBootstrapEntryPB_TableDataPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationBootstrapEntryPB_TableDataPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{34, 1}
}

func (x *SysUniverseReplicationBootstrapEntryPB_TableDataPB) GetIds() *SysUniverseReplicationBootstrapEntryPB_IdPairPB {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB_TableDataPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType(2)
}

func (x *SysUniverseReplicationBootstrapEntryPB_TableDataPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

type SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Ids           *SysUniverseReplicationBootstrapEntryPB_IdPairPB `protobuf:"bytes,1,opt,name=ids" json:"ids,omitempty"`
	Existing      *bool                                            `protobuf:"varint,2,opt,name=existing" json:"existing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB) Reset() {
	*x = SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB) ProtoMessage() {}

func (x *SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{34, 2}
}

func (x *SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB) GetIds() *SysUniverseReplicationBootstrapEntryPB_IdPairPB {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB) GetExisting() bool {
	if x != nil && x.Existing != nil {
		return *x.Existing
	}
	return false
}

type SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Ids           *SysUniverseReplicationBootstrapEntryPB_IdPairPB `protobuf:"bytes,1,opt,name=ids" json:"ids,omitempty"`
	DbType        *common.YQLDatabase                              `protobuf:"varint,2,opt,name=db_type,json=dbType,enum=yb.YQLDatabase" json:"db_type,omitempty"`
	Existing      *bool                                            `protobuf:"varint,3,opt,name=existing" json:"existing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) Reset() {
	*x = SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) ProtoMessage() {}

func (x *SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{34, 3}
}

func (x *SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) GetIds() *SysUniverseReplicationBootstrapEntryPB_IdPairPB {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) GetDbType() common.YQLDatabase {
	if x != nil && x.DbType != nil {
		return *x.DbType
	}
	return common.YQLDatabase(1)
}

func (x *SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB) GetExisting() bool {
	if x != nil && x.Existing != nil {
		return *x.Existing
	}
	return false
}

type SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	Tables        []*SysUniverseReplicationBootstrapEntryPB_TableDataPB     `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
	UdTypes       []*SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB    `protobuf:"bytes,2,rep,name=ud_types,json=udTypes" json:"ud_types,omitempty"`
	Namespaces    []*SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB `protobuf:"bytes,3,rep,name=namespaces" json:"namespaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) Reset() {
	*x = SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) ProtoMessage() {}

func (x *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{34, 4}
}

func (x *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) GetTables() []*SysUniverseReplicationBootstrapEntryPB_TableDataPB {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) GetUdTypes() []*SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB {
	if x != nil {
		return x.UdTypes
	}
	return nil
}

func (x *SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB) GetNamespaces() []*SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB struct {
	state protoimpl.MessageState                                            `protogen:"open.v1"`
	State *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State `protobuf:"varint,1,req,name=state,enum=yb.master.SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State" json:"state,omitempty"`
	// Table id -> TableInfoPB
	TableInfos               map[string]*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB `protobuf:"bytes,2,rep,name=table_infos,json=tableInfos" json:"table_infos,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InitialBootstrapRequired *bool                                                                              `protobuf:"varint,3,opt,name=initial_bootstrap_required,json=initialBootstrapRequired" json:"initial_bootstrap_required,omitempty"` // [default = false]
	ErrorStatus              *common.AppStatusPB                                                                `protobuf:"bytes,4,opt,name=error_status,json=errorStatus" json:"error_status,omitempty"`                                           // Set when state is FAILED
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) Reset() {
	*x = SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) ProtoMessage() {}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB.ProtoReflect.Descriptor instead.
func (*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{35, 0}
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) GetState() SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_CHECKPOINTING
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) GetTableInfos() map[string]*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB {
	if x != nil {
		return x.TableInfos
	}
	return nil
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) GetInitialBootstrapRequired() bool {
	if x != nil && x.InitialBootstrapRequired != nil {
		return *x.InitialBootstrapRequired
	}
	return false
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB) GetErrorStatus() *common.AppStatusPB {
	if x != nil {
		return x.ErrorStatus
	}
	return nil
}

type SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB struct {
	state         protoimpl.MessageState                                                 `protogen:"open.v1"`
	UniverseUuid  []byte                                                                 `protobuf:"bytes,1,req,name=universe_uuid,json=universeUuid" json:"universe_uuid,omitempty"`
	State         *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State `protobuf:"varint,2,req,name=state,enum=yb.master.SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State,def=0" json:"state,omitempty"`
	ErrorStatus   *common.AppStatusPB                                                    `protobuf:"bytes,3,opt,name=error_status,json=errorStatus" json:"error_status,omitempty"` // Set when status is FAILED
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB fields.
const (
	Default_SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State = SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_CREATING_REPLICATION_GROUP
)

func (x *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) Reset() {
	*x = SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) ProtoMessage() {}

func (x *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB.ProtoReflect.Descriptor instead.
func (*SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{35, 2}
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) GetUniverseUuid() []byte {
	if x != nil {
		return x.UniverseUuid
	}
	return nil
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) GetState() SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB) GetErrorStatus() *common.AppStatusPB {
	if x != nil {
		return x.ErrorStatus
	}
	return nil
}

type SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StreamId        []byte                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	IsCheckpointing *bool                  `protobuf:"varint,2,opt,name=is_checkpointing,json=isCheckpointing" json:"is_checkpointing,omitempty"` // [default = false]
	// Was this stream checkpointed as part of the initial bootstrap, or was
	// it added later by a newly created table?
	IsPartOfInitialBootstrap *bool `protobuf:"varint,3,opt,name=is_part_of_initial_bootstrap,json=isPartOfInitialBootstrap" json:"is_part_of_initial_bootstrap,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) Reset() {
	*x = SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB{}
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) ProtoMessage() {}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB.ProtoReflect.Descriptor instead.
func (*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{35, 0, 0}
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) GetIsCheckpointing() bool {
	if x != nil && x.IsCheckpointing != nil {
		return *x.IsCheckpointing
	}
	return false
}

func (x *SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB) GetIsPartOfInitialBootstrap() bool {
	if x != nil && x.IsPartOfInitialBootstrap != nil {
		return *x.IsPartOfInitialBootstrap
	}
	return false
}

var File_yb_master_catalog_entity_info_proto protoreflect.FileDescriptor

var file_yb_master_catalog_entity_info_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x1a, 0x19, 0x79, 0x62, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62, 0x2f,
	0x63, 0x64, 0x63, 0x2f, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79,
	0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x3f,
	0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x40, 0x0a, 0x13, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x12,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4f, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x4a, 0x6f, 0x62, 0x50, 0x42, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62,
	0x50, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x3a, 0x01, 0x30, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x60, 0x0a, 0x12, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22,
	0xa7, 0x02, 0x0a, 0x19, 0x59, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x37, 0x0a,
	0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x12, 0x35, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x10, 0x0a, 0x10, 0x53, 0x79,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3e,
	0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x40,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x67, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x67, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x09, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x67,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x15, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x13, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x48, 0x0a, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x1e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50, 0x42, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x68, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x68, 0x69,
	0x64, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x1b,
	0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x59, 0x73,
	0x71, 0x6c, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c,
	0x54, 0x78, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x18, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x48, 0x0a, 0x21, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x06, 0x52, 0x1d, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22, 0x30,
	0x0a, 0x09, 0x48, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x49, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02,
	0x22, 0xe0, 0x08, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x2c, 0x0a, 0x12, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x45, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a,
	0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42,
	0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x68, 0x69, 0x64, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43,
	0x0a, 0x1e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x1b, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x1a, 0x42, 0x0a,
	0x14, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x50,
	0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x4a, 0x04, 0x08,
	0x0f, 0x10, 0x10, 0x22, 0xc2, 0x03, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x67, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x67, 0x4f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x22,
	0x57, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x73,
	0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e,
	0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x50, 0x42, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0xef, 0x01, 0x0a,
	0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x1d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xd9,
	0x03, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x42, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x96, 0x07, 0x0a, 0x14, 0x53,
	0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x12, 0x55, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x49, 0x6e, 0x63, 0x61, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x6e,
	0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0b, 0x4c, 0x6f,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x79,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xd4, 0x01, 0x0a, 0x10, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x50, 0x42, 0x12, 0x57,
	0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x50,
	0x42, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x67, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x50, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xc5, 0x01, 0x0a, 0x0e, 0x44, 0x42, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x61,
	0x70, 0x50, 0x42, 0x12, 0x49, 0x0a, 0x03, 0x64, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x2e, 0x44, 0x42, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x50, 0x42,
	0x2e, 0x44, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x64, 0x62, 0x73, 0x1a, 0x68,
	0x0a, 0x08, 0x44, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x61, 0x70, 0x50, 0x42, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd7, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x4d, 0x61, 0x70, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x08, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x42, 0x4d, 0x61, 0x70, 0x50, 0x42, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6b, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x44, 0x42, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x4d, 0x61, 0x70, 0x50, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x42, 0x4d, 0x61, 0x70, 0x50, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1a, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52,
	0x18, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x22, 0x3d, 0x0a, 0x15, 0x53, 0x79, 0x73,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x53,
	0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x3e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0x7c, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x16, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x72, 0x61, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x63, 0x61, 0x73, 0x73, 0x61, 0x6e, 0x64,
	0x72, 0x61, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc6, 0x01,
	0x0a, 0x1b, 0x53, 0x79, 0x73, 0x59, 0x53, 0x51, 0x4c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x64,
	0x62, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e,
	0x69, 0x74, 0x64, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x64, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x73,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x21, 0x53, 0x79, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x13, 0x79, 0x73,
	0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x59, 0x53, 0x51, 0x4c, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x48,
	0x00, 0x52, 0x11, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x48, 0x00, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x61, 0x0a, 0x0b, 0x53, 0x79,
	0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a,
	0x0d, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52,
	0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0xed, 0x01, 0x0a, 0x0d, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x3c, 0x0a, 0x12, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x13, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x1a, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x08, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x21,
	0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59,
	0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x44, 0x4b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x14, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68,
	0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x28, 0x63, 0x64, 0x63, 0x73,
	0x64, 0x6b, 0x5f, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x63, 0x64, 0x63, 0x73,
	0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x50, 0x0a, 0x25, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21,
	0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x12, 0x75, 0x6e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x25, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x5f, 0x79,
	0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x73, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x22, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x52, 0x20, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x59, 0x73, 0x71, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x5c, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x22, 0xd7, 0x05, 0x0a, 0x12, 0x53, 0x79,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x42, 0x52, 0x0f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x5d,
	0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x08, 0x22, 0xbc, 0x04, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x71, 0x4e, 0x6f, 0x12, 0x34, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x67, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x53, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x06, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01,
	0x0a, 0x1f, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x42, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22,
	0xde, 0x01, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12,
	0x57, 0x0a, 0x16, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x50, 0x42, 0x52, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xdc, 0x09, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x57, 0x0a,
	0x29, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x44, 0x42, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x62, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x42, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa1, 0x02, 0x0a, 0x0b, 0x44, 0x42, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x64,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x44, 0x42, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x1a, 0x77, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22,
	0xa8, 0x01, 0x0a, 0x12, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x61, 0x66, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x2e, 0x53, 0x61, 0x66,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x61,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x0f, 0x0a, 0x26, 0x53,
	0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x5b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0c, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x62, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0c,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x52, 0x08, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6e, 0x65, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x42, 0x52, 0x12, 0x6e, 0x65, 0x77,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x74, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x69, 0x74, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x08, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x50,
	0x42, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x49, 0x64, 0x1a,
	0xb3, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12,
	0x4c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e,
	0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x78, 0x0a, 0x0c, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x4c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a,
	0xa5, 0x01, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x42, 0x12, 0x4c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x2e, 0x49, 0x64, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x06, 0x64, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0xab, 0x02, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x42,
	0x12, 0x55, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x08, 0x75, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x55, 0x44, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x07, 0x75, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x02, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4f, 0x4f, 0x54, 0x53,
	0x54, 0x52, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x45, 0x54, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x22, 0xce, 0x0c, 0x0a, 0x2a, 0x53, 0x79, 0x73,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x72, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x7c, 0x0a, 0x14, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x1a, 0xbc, 0x05, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x61, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x79, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x58, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x1a, 0x90, 0x01, 0x0a, 0x0f, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x67, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x58,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x1a, 0x88, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xba, 0x02, 0x0a, 0x14,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x58, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1a, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x44, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x1f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0xf7, 0x02, 0x0a, 0x11, 0x53, 0x79,
	0x73, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x1e, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x48, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x42, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x59, 0x42, 0x45, 0x5f, 0x4c, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x44, 0x10, 0x03, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72,
})

var (
	file_yb_master_catalog_entity_info_proto_rawDescOnce sync.Once
	file_yb_master_catalog_entity_info_proto_rawDescData []byte
)

func file_yb_master_catalog_entity_info_proto_rawDescGZIP() []byte {
	file_yb_master_catalog_entity_info_proto_rawDescOnce.Do(func() {
		file_yb_master_catalog_entity_info_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_master_catalog_entity_info_proto_rawDesc), len(file_yb_master_catalog_entity_info_proto_rawDesc)))
	})
	return file_yb_master_catalog_entity_info_proto_rawDescData
}

var file_yb_master_catalog_entity_info_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_yb_master_catalog_entity_info_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_yb_master_catalog_entity_info_proto_goTypes = []any{
	(BackfillJobPB_State)(0),                                                   // 0: yb.master.BackfillJobPB.State
	(SysTablesEntryPB_State)(0),                                                // 1: yb.master.SysTablesEntryPB.State
	(SysTablesEntryPB_HideState)(0),                                            // 2: yb.master.SysTablesEntryPB.HideState
	(SysTabletsEntryPB_State)(0),                                               // 3: yb.master.SysTabletsEntryPB.State
	(SysNamespaceEntryPB_State)(0),                                             // 4: yb.master.SysNamespaceEntryPB.State
	(SysCDCStreamEntryPB_State)(0),                                             // 5: yb.master.SysCDCStreamEntryPB.State
	(SysSnapshotEntryPB_State)(0),                                              // 6: yb.master.SysSnapshotEntryPB.State
	(SysCloneStatePB_State)(0),                                                 // 7: yb.master.SysCloneStatePB.State
	(SysUniverseReplicationEntryPB_State)(0),                                   // 8: yb.master.SysUniverseReplicationEntryPB.State
	(SysUniverseReplicationBootstrapEntryPB_State)(0),                          // 9: yb.master.SysUniverseReplicationBootstrapEntryPB.State
	(SysXClusterOutboundReplicationGroupEntryPB_State)(0),                      // 10: yb.master.SysXClusterOutboundReplicationGroupEntryPB.State
	(SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_State)(0),      // 11: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.State
	(SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB_State)(0), // 12: yb.master.SysXClusterOutboundReplicationGroupEntryPB.TargetUniverseInfoPB.State
	(SysTServerEntryPB_State)(0),                                               // 13: yb.master.SysTServerEntryPB.State
	(*PlacementBlockPB)(nil),                                                   // 14: yb.master.PlacementBlockPB
	(*PlacementInfoPB)(nil),                                                    // 15: yb.master.PlacementInfoPB
	(*ReplicationInfoPB)(nil),                                                  // 16: yb.master.ReplicationInfoPB
	(*BackfillJobPB)(nil),                                                      // 17: yb.master.BackfillJobPB
	(*YsqlDdlTxnVerifierStatePB)(nil),                                          // 18: yb.master.YsqlDdlTxnVerifierStatePB
	(*SysTablesEntryPB)(nil),                                                   // 19: yb.master.SysTablesEntryPB
	(*SysTabletsEntryPB)(nil),                                                  // 20: yb.master.SysTabletsEntryPB
	(*SysNamespaceEntryPB)(nil),                                                // 21: yb.master.SysNamespaceEntryPB
	(*SysUDTypeEntryPB)(nil),                                                   // 22: yb.master.SysUDTypeEntryPB
	(*BlacklistPB)(nil),                                                        // 23: yb.master.BlacklistPB
	(*EncryptionInfoPB)(nil),                                                   // 24: yb.master.EncryptionInfoPB
	(*SysClusterConfigEntryPB)(nil),                                            // 25: yb.master.SysClusterConfigEntryPB
	(*SysObjectLockEntryPB)(nil),                                               // 26: yb.master.SysObjectLockEntryPB
	(*SysXClusterConfigEntryPB)(nil),                                           // 27: yb.master.SysXClusterConfigEntryPB
	(*SysRedisConfigEntryPB)(nil),                                              // 28: yb.master.SysRedisConfigEntryPB
	(*ResourcePermissionsPB)(nil),                                              // 29: yb.master.ResourcePermissionsPB
	(*SysRoleEntryPB)(nil),                                                     // 30: yb.master.SysRoleEntryPB
	(*SysSecurityConfigEntryPB)(nil),                                           // 31: yb.master.SysSecurityConfigEntryPB
	(*SysYSQLCatalogConfigEntryPB)(nil),                                        // 32: yb.master.SysYSQLCatalogConfigEntryPB
	(*SysTransactionTablesConfigEntryPB)(nil),                                  // 33: yb.master.SysTransactionTablesConfigEntryPB
	(*SysConfigEntryPB)(nil),                                                   // 34: yb.master.SysConfigEntryPB
	(*SysRowEntry)(nil),                                                        // 35: yb.master.SysRowEntry
	(*SysRowEntries)(nil),                                                      // 36: yb.master.SysRowEntries
	(*DdlLogEntryPB)(nil),                                                      // 37: yb.master.DdlLogEntryPB
	(*CDCStreamOptionsPB)(nil),                                                 // 38: yb.master.CDCStreamOptionsPB
	(*CDCSDKStreamEntryPB)(nil),                                                // 39: yb.master.CDCSDKStreamEntryPB
	(*SysCDCStreamEntryPB)(nil),                                                // 40: yb.master.SysCDCStreamEntryPB
	(*SysSnapshotEntryPB)(nil),                                                 // 41: yb.master.SysSnapshotEntryPB
	(*SysCloneStatePB)(nil),                                                    // 42: yb.master.SysCloneStatePB
	(*SchemaVersionMappingPB)(nil),                                             // 43: yb.master.SchemaVersionMappingPB
	(*ColocatedSchemaVersionMappingPB)(nil),                                    // 44: yb.master.ColocatedSchemaVersionMappingPB
	(*SchemaVersionMappingEntryPB)(nil),                                        // 45: yb.master.SchemaVersionMappingEntryPB
	(*SysUniverseReplicationEntryPB)(nil),                                      // 46: yb.master.SysUniverseReplicationEntryPB
	(*XClusterSafeTimePB)(nil),                                                 // 47: yb.master.XClusterSafeTimePB
	(*SysUniverseReplicationBootstrapEntryPB)(nil),                             // 48: yb.master.SysUniverseReplicationBootstrapEntryPB
	(*SysXClusterOutboundReplicationGroupEntryPB)(nil),                         // 49: yb.master.SysXClusterOutboundReplicationGroupEntryPB
	(*SysTServerEntryPB)(nil),                                                  // 50: yb.master.SysTServerEntryPB
	nil,                                                                        // 51: yb.master.BackfillJobPB.BackfillStateEntry
	nil,                                                                        // 52: yb.master.SysTabletsEntryPB.BackfilledUntilEntry
	(*SysObjectLockEntryPB_LockTypesPB)(nil),                                   // 53: yb.master.SysObjectLockEntryPB.LockTypesPB
	(*SysObjectLockEntryPB_ObjectLocksMapPB)(nil),                              // 54: yb.master.SysObjectLockEntryPB.ObjectLocksMapPB
	(*SysObjectLockEntryPB_DBObjectsMapPB)(nil),                                // 55: yb.master.SysObjectLockEntryPB.DBObjectsMapPB
	(*SysObjectLockEntryPB_SessionDBMapPB)(nil),                                // 56: yb.master.SysObjectLockEntryPB.SessionDBMapPB
	nil, // 57: yb.master.SysObjectLockEntryPB.IncarnationsEntry
	nil, // 58: yb.master.SysObjectLockEntryPB.ObjectLocksMapPB.ObjectsEntry
	nil, // 59: yb.master.SysObjectLockEntryPB.DBObjectsMapPB.DbsEntry
	nil, // 60: yb.master.SysObjectLockEntryPB.SessionDBMapPB.SessionsEntry
	nil, // 61: yb.master.SysCDCStreamEntryPB.ReplicaIdentityMapEntry
	(*SysSnapshotEntryPB_TabletSnapshotPB)(nil), // 62: yb.master.SysSnapshotEntryPB.TabletSnapshotPB
	nil, // 63: yb.master.SysUniverseReplicationEntryPB.ValidatedTablesEntry
	nil, // 64: yb.master.SysUniverseReplicationEntryPB.TableStreamsEntry
	(*SysUniverseReplicationEntryPB_DBScopeInfo)(nil),               // 65: yb.master.SysUniverseReplicationEntryPB.DBScopeInfo
	(*SysUniverseReplicationEntryPB_DBScopeInfo_NamespaceInfo)(nil), // 66: yb.master.SysUniverseReplicationEntryPB.DBScopeInfo.NamespaceInfo
	nil, // 67: yb.master.XClusterSafeTimePB.SafeTimeMapEntry
	(*SysUniverseReplicationBootstrapEntryPB_IdPairPB)(nil),             // 68: yb.master.SysUniverseReplicationBootstrapEntryPB.IdPairPB
	(*SysUniverseReplicationBootstrapEntryPB_TableDataPB)(nil),          // 69: yb.master.SysUniverseReplicationBootstrapEntryPB.TableDataPB
	(*SysUniverseReplicationBootstrapEntryPB_UDTypeDataPB)(nil),         // 70: yb.master.SysUniverseReplicationBootstrapEntryPB.UDTypeDataPB
	(*SysUniverseReplicationBootstrapEntryPB_NamespaceDataPB)(nil),      // 71: yb.master.SysUniverseReplicationBootstrapEntryPB.NamespaceDataPB
	(*SysUniverseReplicationBootstrapEntryPB_NewSnapshotObjectsPB)(nil), // 72: yb.master.SysUniverseReplicationBootstrapEntryPB.NewSnapshotObjectsPB
	nil, // 73: yb.master.SysUniverseReplicationBootstrapEntryPB.TableBootstrapIdsEntry
	(*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB)(nil), // 74: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB
	nil, // 75: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfosEntry
	(*SysXClusterOutboundReplicationGroupEntryPB_TargetUniverseInfoPB)(nil),        // 76: yb.master.SysXClusterOutboundReplicationGroupEntryPB.TargetUniverseInfoPB
	(*SysXClusterOutboundReplicationGroupEntryPB_NamespaceInfoPB_TableInfoPB)(nil), // 77: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.TableInfoPB
	nil,                                  // 78: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.TableInfosEntry
	(*common.CloudInfoPB)(nil),           // 79: yb.CloudInfoPB
	(*common.CloudInfoListPB)(nil),       // 80: yb.CloudInfoListPB
	(*common.IndexInfoPB)(nil),           // 81: yb.IndexInfoPB
	(*common.SchemaPB)(nil),              // 82: yb.SchemaPB
	(common.TableType)(0),                // 83: yb.TableType
	(*common.PartitionSchemaPB)(nil),     // 84: yb.PartitionSchemaPB
	(*common.TransactionMetadataPB)(nil), // 85: yb.TransactionMetadataPB
	(common.StatefulServiceKind)(0),      // 86: yb.StatefulServiceKind
	(*common.PartitionPB)(nil),           // 87: yb.PartitionPB
	(*consensus.ConsensusStatePB)(nil),   // 88: yb.consensus.ConsensusStatePB
	(common.YQLDatabase)(0),              // 89: yb.YQLDatabase
	(*common.QLTypePB)(nil),              // 90: yb.QLTypePB
	(*common.HostPortPB)(nil),            // 91: yb.HostPortPB
	(*cdc.ConsumerRegistryPB)(nil),       // 92: yb.cdc.ConsumerRegistryPB
	(*cdc.ProducerRegistryPB)(nil),       // 93: yb.xcluster.ProducerRegistryPB
	(common.ResourceType)(0),             // 94: yb.ResourceType
	(common.PermissionType)(0),           // 95: yb.PermissionType
	(SysRowEntryType)(0),                 // 96: yb.master.SysRowEntryType
	(common.CDCSDKSnapshotOption)(0),     // 97: yb.CDCSDKSnapshotOption
	(common.ReplicationSlotLsnType)(0),   // 98: yb.ReplicationSlotLsnType
	(*common.ServerRegistrationPB)(nil),  // 99: yb.ServerRegistrationPB
	(*ResourcesPB)(nil),                  // 100: yb.master.ResourcesPB
	(common.TableLockType)(0),            // 101: yb.TableLockType
	(common.PgReplicaIdentity)(0),        // 102: yb.PgReplicaIdentity
	(*common.AppStatusPB)(nil),           // 103: yb.AppStatusPB
}
var file_yb_master_catalog_entity_info_proto_depIdxs = []int32{
	79,  // 0: yb.master.PlacementBlockPB.cloud_info:type_name -> yb.CloudInfoPB
	14,  // 1: yb.master.PlacementInfoPB.placement_blocks:type_name -> yb.master.PlacementBlockPB
	15,  // 2: yb.master.ReplicationInfoPB.live_replicas:type_name -> yb.master.PlacementInfoPB
	15,  // 3: yb.master.ReplicationInfoPB.read_replicas:type_name -> yb.master.PlacementInfoPB
	79,  // 4: yb.master.ReplicationInfoPB.affinitized_leaders:type_name -> yb.CloudInfoPB
	80,  // 5: yb.master.ReplicationInfoPB.multi_affinitized_leaders:type_name -> yb.CloudInfoListPB
	81,  // 6: yb.master.BackfillJobPB.indexes:type_name -> yb.IndexInfoPB
	51,  // 7: yb.master.BackfillJobPB.backfill_state:type_name -> yb.master.BackfillJobPB.BackfillStateEntry
	82,  // 8: yb.master.YsqlDdlTxnVerifierStatePB.previous_schema:type_name -> yb.SchemaPB
	83,  // 9: yb.master.SysTablesEntryPB.table_type:type_name -> yb.TableType
	82,  // 10: yb.master.SysTablesEntryPB.schema:type_name -> yb.SchemaPB
	82,  // 11: yb.master.SysTablesEntryPB.fully_applied_schema:type_name -> yb.SchemaPB
	84,  // 12: yb.master.SysTablesEntryPB.partition_schema:type_name -> yb.PartitionSchemaPB
	16,  // 13: yb.master.SysTablesEntryPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	1,   // 14: yb.master.SysTablesEntryPB.state:type_name -> yb.master.SysTablesEntryPB.State
	81,  // 15: yb.master.SysTablesEntryPB.indexes:type_name -> yb.IndexInfoPB
	81,  // 16: yb.master.SysTablesEntryPB.index_info:type_name -> yb.IndexInfoPB
	81,  // 17: yb.master.SysTablesEntryPB.fully_applied_indexes:type_name -> yb.IndexInfoPB
	81,  // 18: yb.master.SysTablesEntryPB.fully_applied_index_info:type_name -> yb.IndexInfoPB
	17,  // 19: yb.master.SysTablesEntryPB.backfill_jobs:type_name -> yb.master.BackfillJobPB
	2,   // 20: yb.master.SysTablesEntryPB.hide_state:type_name -> yb.master.SysTablesEntryPB.HideState
	18,  // 21: yb.master.SysTablesEntryPB.ysql_ddl_txn_verifier_state:type_name -> yb.master.YsqlDdlTxnVerifierStatePB
	85,  // 22: yb.master.SysTablesEntryPB.transaction:type_name -> yb.TransactionMetadataPB
	86,  // 23: yb.master.SysTablesEntryPB.hosted_stateful_services:type_name -> yb.StatefulServiceKind
	87,  // 24: yb.master.SysTabletsEntryPB.partition:type_name -> yb.PartitionPB
	88,  // 25: yb.master.SysTabletsEntryPB.committed_consensus_state:type_name -> yb.consensus.ConsensusStatePB
	3,   // 26: yb.master.SysTabletsEntryPB.state:type_name -> yb.master.SysTabletsEntryPB.State
	52,  // 27: yb.master.SysTabletsEntryPB.backfilled_until:type_name -> yb.master.SysTabletsEntryPB.BackfilledUntilEntry
	89,  // 28: yb.master.SysNamespaceEntryPB.database_type:type_name -> yb.YQLDatabase
	85,  // 29: yb.master.SysNamespaceEntryPB.transaction:type_name -> yb.TransactionMetadataPB
	4,   // 30: yb.master.SysNamespaceEntryPB.state:type_name -> yb.master.SysNamespaceEntryPB.State
	90,  // 31: yb.master.SysUDTypeEntryPB.field_types:type_name -> yb.QLTypePB
	91,  // 32: yb.master.BlacklistPB.hosts:type_name -> yb.HostPortPB
	16,  // 33: yb.master.SysClusterConfigEntryPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	23,  // 34: yb.master.SysClusterConfigEntryPB.server_blacklist:type_name -> yb.master.BlacklistPB
	23,  // 35: yb.master.SysClusterConfigEntryPB.leader_blacklist:type_name -> yb.master.BlacklistPB
	24,  // 36: yb.master.SysClusterConfigEntryPB.encryption_info:type_name -> yb.master.EncryptionInfoPB
	92,  // 37: yb.master.SysClusterConfigEntryPB.consumer_registry:type_name -> yb.cdc.ConsumerRegistryPB
	57,  // 38: yb.master.SysObjectLockEntryPB.incarnations:type_name -> yb.master.SysObjectLockEntryPB.IncarnationsEntry
	93,  // 39: yb.master.SysXClusterConfigEntryPB.xcluster_producer_registry:type_name -> yb.xcluster.ProducerRegistryPB
	94,  // 40: yb.master.ResourcePermissionsPB.resource_type:type_name -> yb.ResourceType
	95,  // 41: yb.master.ResourcePermissionsPB.permissions:type_name -> yb.PermissionType
	29,  // 42: yb.master.SysRoleEntryPB.resources:type_name -> yb.master.ResourcePermissionsPB
	31,  // 43: yb.master.SysConfigEntryPB.security_config:type_name -> yb.master.SysSecurityConfigEntryPB
	32,  // 44: yb.master.SysConfigEntryPB.ysql_catalog_config:type_name -> yb.master.SysYSQLCatalogConfigEntryPB
	33,  // 45: yb.master.SysConfigEntryPB.transaction_tables_config:type_name -> yb.master.SysTransactionTablesConfigEntryPB
	96,  // 46: yb.master.SysRowEntry.type:type_name -> yb.master.SysRowEntryType
	35,  // 47: yb.master.SysRowEntries.entries:type_name -> yb.master.SysRowEntry
	83,  // 48: yb.master.DdlLogEntryPB.table_type:type_name -> yb.TableType
	97,  // 49: yb.master.CDCSDKStreamEntryPB.consistent_snapshot_option:type_name -> yb.CDCSDKSnapshotOption
	38,  // 50: yb.master.SysCDCStreamEntryPB.options:type_name -> yb.master.CDCStreamOptionsPB
	5,   // 51: yb.master.SysCDCStreamEntryPB.state:type_name -> yb.master.SysCDCStreamEntryPB.State
	39,  // 52: yb.master.SysCDCStreamEntryPB.cdcsdk_stream_metadata:type_name -> yb.master.CDCSDKStreamEntryPB
	61,  // 53: yb.master.SysCDCStreamEntryPB.replica_identity_map:type_name -> yb.master.SysCDCStreamEntryPB.ReplicaIdentityMapEntry
	98,  // 54: yb.master.SysCDCStreamEntryPB.cdcsdk_ysql_replication_slot_lsn_type:type_name -> yb.ReplicationSlotLsnType
	6,   // 55: yb.master.SysSnapshotEntryPB.state:type_name -> yb.master.SysSnapshotEntryPB.State
	62,  // 56: yb.master.SysSnapshotEntryPB.tablet_snapshots:type_name -> yb.master.SysSnapshotEntryPB.TabletSnapshotPB
	35,  // 57: yb.master.SysSnapshotEntryPB.entries:type_name -> yb.master.SysRowEntry
	7,   // 58: yb.master.SysCloneStatePB.aggregate_state:type_name -> yb.master.SysCloneStatePB.State
	89,  // 59: yb.master.SysCloneStatePB.database_type:type_name -> yb.YQLDatabase
	43,  // 60: yb.master.ColocatedSchemaVersionMappingPB.schema_version_mapping:type_name -> yb.master.SchemaVersionMappingPB
	43,  // 61: yb.master.SchemaVersionMappingEntryPB.schema_version_mapping:type_name -> yb.master.SchemaVersionMappingPB
	44,  // 62: yb.master.SchemaVersionMappingEntryPB.colocated_schema_versions:type_name -> yb.master.ColocatedSchemaVersionMappingPB
	91,  // 63: yb.master.SysUniverseReplicationEntryPB.producer_master_addresses:type_name -> yb.HostPortPB
	8,   // 64: yb.master.SysUniverseReplicationEntryPB.state:type_name -> yb.master.SysUniverseReplicationEntryPB.State
	63,  // 65: yb.master.SysUniverseReplicationEntryPB.validated_tables:type_name -> yb.master.SysUniverseReplicationEntryPB.ValidatedTablesEntry
	64,  // 66: yb.master.SysUniverseReplicationEntryPB.table_streams:type_name -> yb.master.SysUniverseReplicationEntryPB.TableStreamsEntry
	65,  // 67: yb.master.SysUniverseReplicationEntryPB.db_scoped_info:type_name -> yb.master.SysUniverseReplicationEntryPB.DBScopeInfo
	67,  // 68: yb.master.XClusterSafeTimePB.safe_time_map:type_name -> yb.master.XClusterSafeTimePB.SafeTimeMapEntry
	9,   // 69: yb.master.SysUniverseReplicationBootstrapEntryPB.state:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.State
	9,   // 70: yb.master.SysUniverseReplicationBootstrapEntryPB.failed_on:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.State
	91,  // 71: yb.master.SysUniverseReplicationBootstrapEntryPB.producer_master_addresses:type_name -> yb.HostPortPB
	73,  // 72: yb.master.SysUniverseReplicationBootstrapEntryPB.table_bootstrap_ids:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.TableBootstrapIdsEntry
	72,  // 73: yb.master.SysUniverseReplicationBootstrapEntryPB.new_snapshot_objects:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.NewSnapshotObjectsPB
	75,  // 74: yb.master.SysXClusterOutboundReplicationGroupEntryPB.namespace_infos:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfosEntry
	76,  // 75: yb.master.SysXClusterOutboundReplicationGroupEntryPB.target_universe_info:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.TargetUniverseInfoPB
	10,  // 76: yb.master.SysXClusterOutboundReplicationGroupEntryPB.state:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.State
	13,  // 77: yb.master.SysTServerEntryPB.state:type_name -> yb.master.SysTServerEntryPB.State
	99,  // 78: yb.master.SysTServerEntryPB.registration:type_name -> yb.ServerRegistrationPB
	100, // 79: yb.master.SysTServerEntryPB.resources:type_name -> yb.master.ResourcesPB
	0,   // 80: yb.master.BackfillJobPB.BackfillStateEntry.value:type_name -> yb.master.BackfillJobPB.State
	101, // 81: yb.master.SysObjectLockEntryPB.LockTypesPB.lock_type:type_name -> yb.TableLockType
	58,  // 82: yb.master.SysObjectLockEntryPB.ObjectLocksMapPB.objects:type_name -> yb.master.SysObjectLockEntryPB.ObjectLocksMapPB.ObjectsEntry
	59,  // 83: yb.master.SysObjectLockEntryPB.DBObjectsMapPB.dbs:type_name -> yb.master.SysObjectLockEntryPB.DBObjectsMapPB.DbsEntry
	60,  // 84: yb.master.SysObjectLockEntryPB.SessionDBMapPB.sessions:type_name -> yb.master.SysObjectLockEntryPB.SessionDBMapPB.SessionsEntry
	56,  // 85: yb.master.SysObjectLockEntryPB.IncarnationsEntry.value:type_name -> yb.master.SysObjectLockEntryPB.SessionDBMapPB
	53,  // 86: yb.master.SysObjectLockEntryPB.ObjectLocksMapPB.ObjectsEntry.value:type_name -> yb.master.SysObjectLockEntryPB.LockTypesPB
	54,  // 87: yb.master.SysObjectLockEntryPB.DBObjectsMapPB.DbsEntry.value:type_name -> yb.master.SysObjectLockEntryPB.ObjectLocksMapPB
	55,  // 88: yb.master.SysObjectLockEntryPB.SessionDBMapPB.SessionsEntry.value:type_name -> yb.master.SysObjectLockEntryPB.DBObjectsMapPB
	102, // 89: yb.master.SysCDCStreamEntryPB.ReplicaIdentityMapEntry.value:type_name -> yb.PgReplicaIdentity
	6,   // 90: yb.master.SysSnapshotEntryPB.TabletSnapshotPB.state:type_name -> yb.master.SysSnapshotEntryPB.State
	66,  // 91: yb.master.SysUniverseReplicationEntryPB.DBScopeInfo.namespace_infos:type_name -> yb.master.SysUniverseReplicationEntryPB.DBScopeInfo.NamespaceInfo
	68,  // 92: yb.master.SysUniverseReplicationBootstrapEntryPB.TableDataPB.ids:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.IdPairPB
	83,  // 93: yb.master.SysUniverseReplicationBootstrapEntryPB.TableDataPB.table_type:type_name -> yb.TableType
	68,  // 94: yb.master.SysUniverseReplicationBootstrapEntryPB.UDTypeDataPB.ids:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.IdPairPB
	68,  // 95: yb.master.SysUniverseReplicationBootstrapEntryPB.NamespaceDataPB.ids:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.IdPairPB
	89,  // 96: yb.master.SysUniverseReplicationBootstrapEntryPB.NamespaceDataPB.db_type:type_name -> yb.YQLDatabase
	69,  // 97: yb.master.SysUniverseReplicationBootstrapEntryPB.NewSnapshotObjectsPB.tables:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.TableDataPB
	70,  // 98: yb.master.SysUniverseReplicationBootstrapEntryPB.NewSnapshotObjectsPB.ud_types:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.UDTypeDataPB
	71,  // 99: yb.master.SysUniverseReplicationBootstrapEntryPB.NewSnapshotObjectsPB.namespaces:type_name -> yb.master.SysUniverseReplicationBootstrapEntryPB.NamespaceDataPB
	11,  // 100: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.state:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.State
	78,  // 101: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.table_infos:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.TableInfosEntry
	103, // 102: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.error_status:type_name -> yb.AppStatusPB
	74,  // 103: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfosEntry.value:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB
	12,  // 104: yb.master.SysXClusterOutboundReplicationGroupEntryPB.TargetUniverseInfoPB.state:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.TargetUniverseInfoPB.State
	103, // 105: yb.master.SysXClusterOutboundReplicationGroupEntryPB.TargetUniverseInfoPB.error_status:type_name -> yb.AppStatusPB
	77,  // 106: yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.TableInfosEntry.value:type_name -> yb.master.SysXClusterOutboundReplicationGroupEntryPB.NamespaceInfoPB.TableInfoPB
	107, // [107:107] is the sub-list for method output_type
	107, // [107:107] is the sub-list for method input_type
	107, // [107:107] is the sub-list for extension type_name
	107, // [107:107] is the sub-list for extension extendee
	0,   // [0:107] is the sub-list for field type_name
}

func init() { file_yb_master_catalog_entity_info_proto_init() }
func file_yb_master_catalog_entity_info_proto_init() {
	if File_yb_master_catalog_entity_info_proto != nil {
		return
	}
	file_yb_master_master_types_proto_init()
	file_yb_master_catalog_entity_info_proto_msgTypes[20].OneofWrappers = []any{
		(*SysConfigEntryPB_SecurityConfig)(nil),
		(*SysConfigEntryPB_YsqlCatalogConfig)(nil),
		(*SysConfigEntryPB_TransactionTablesConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_master_catalog_entity_info_proto_rawDesc), len(file_yb_master_catalog_entity_info_proto_rawDesc)),
			NumEnums:      14,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_master_catalog_entity_info_proto_goTypes,
		DependencyIndexes: file_yb_master_catalog_entity_info_proto_depIdxs,
		EnumInfos:         file_yb_master_catalog_entity_info_proto_enumTypes,
		MessageInfos:      file_yb_master_catalog_entity_info_proto_msgTypes,
	}.Build()
	File_yb_master_catalog_entity_info_proto = out.File
	file_yb_master_catalog_entity_info_proto_goTypes = nil
	file_yb_master_catalog_entity_info_proto_depIdxs = nil
}
