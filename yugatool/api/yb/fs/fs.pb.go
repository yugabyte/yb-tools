// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/fs/fs.proto

package fs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The kind of record.
type BlockRecordType int32

const (
	BlockRecordType_UNKNOWN BlockRecordType = 0
	BlockRecordType_CREATE  BlockRecordType = 1
	BlockRecordType_DELETE  BlockRecordType = 2
)

// Enum value maps for BlockRecordType.
var (
	BlockRecordType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE",
		2: "DELETE",
	}
	BlockRecordType_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATE":  1,
		"DELETE":  2,
	}
)

func (x BlockRecordType) Enum() *BlockRecordType {
	p := new(BlockRecordType)
	*p = x
	return p
}

func (x BlockRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_fs_fs_proto_enumTypes[0].Descriptor()
}

func (BlockRecordType) Type() protoreflect.EnumType {
	return &file_yb_fs_fs_proto_enumTypes[0]
}

func (x BlockRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BlockRecordType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BlockRecordType(num)
	return nil
}

// Deprecated: Use BlockRecordType.Descriptor instead.
func (BlockRecordType) EnumDescriptor() ([]byte, []int) {
	return file_yb_fs_fs_proto_rawDescGZIP(), []int{0}
}

// When any server initializes a new filesystem (eg a new node is created in the
// cluster), it creates this structure and stores it persistently.
type InstanceMetadataPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUID which is assigned when the instance is first formatted. This uniquely
	// identifies the node in the cluster.
	Uuid []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	// Human-readable string indicating when and where the node was first
	// initialized.
	FormatStamp *string `protobuf:"bytes,2,req,name=format_stamp,json=formatStamp" json:"format_stamp,omitempty"`
	// For all newly created clusters after this field is set, initialize this variable to true.
	// For existing clusters this will be false. This will be used on the sys catalog restore path
	// to indicate whether we want to run initdb.
	InitdbDoneSetAfterSysCatalogRestore *bool `protobuf:"varint,3,opt,name=initdb_done_set_after_sys_catalog_restore,json=initdbDoneSetAfterSysCatalogRestore" json:"initdb_done_set_after_sys_catalog_restore,omitempty"`
	// Tserver specific metadata.
	TserverInstanceMetadata *TserverInstanceMetadataPB `protobuf:"bytes,4,opt,name=tserver_instance_metadata,json=tserverInstanceMetadata" json:"tserver_instance_metadata,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *InstanceMetadataPB) Reset() {
	*x = InstanceMetadataPB{}
	mi := &file_yb_fs_fs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMetadataPB) ProtoMessage() {}

func (x *InstanceMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_fs_fs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMetadataPB.ProtoReflect.Descriptor instead.
func (*InstanceMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_fs_fs_proto_rawDescGZIP(), []int{0}
}

func (x *InstanceMetadataPB) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *InstanceMetadataPB) GetFormatStamp() string {
	if x != nil && x.FormatStamp != nil {
		return *x.FormatStamp
	}
	return ""
}

func (x *InstanceMetadataPB) GetInitdbDoneSetAfterSysCatalogRestore() bool {
	if x != nil && x.InitdbDoneSetAfterSysCatalogRestore != nil {
		return *x.InitdbDoneSetAfterSysCatalogRestore
	}
	return false
}

func (x *InstanceMetadataPB) GetTserverInstanceMetadata() *TserverInstanceMetadataPB {
	if x != nil {
		return x.TserverInstanceMetadata
	}
	return nil
}

type TserverInstanceMetadataPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The universe_uuid received from the master leader on the first heartbeat after creation
	// or an upgrade. This is the identifier for the cluster this server belongs to. It is passed
	// in every heartbeat request and compared with the value on master leader to ensure a match.
	// Only set on the tserver.
	UniverseUuid  *string `protobuf:"bytes,1,opt,name=universe_uuid,json=universeUuid" json:"universe_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TserverInstanceMetadataPB) Reset() {
	*x = TserverInstanceMetadataPB{}
	mi := &file_yb_fs_fs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TserverInstanceMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TserverInstanceMetadataPB) ProtoMessage() {}

func (x *TserverInstanceMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_fs_fs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TserverInstanceMetadataPB.ProtoReflect.Descriptor instead.
func (*TserverInstanceMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_fs_fs_proto_rawDescGZIP(), []int{1}
}

func (x *TserverInstanceMetadataPB) GetUniverseUuid() string {
	if x != nil && x.UniverseUuid != nil {
		return *x.UniverseUuid
	}
	return ""
}

// Describes a collection of filesystem path instances and the membership of a
// particular instance in the collection.
//
// In a healthy filesystem (see below), a path instance can be referred to via
// its UUID's position in all_uuids instead of via the UUID itself. This is
// useful when there are many such references, as the position is much shorter
// than the UUID.
type PathSetPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally unique identifier for this path instance.
	Uuid []byte `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	// All UUIDs in this path instance set. In a healthy filesystem:
	// 1. There exists an on-disk PathInstanceMetadataPB for each listed UUID, and
	// 2. Every PathSetPB contains an identical copy of all_uuids.
	AllUuids      [][]byte `protobuf:"bytes,2,rep,name=all_uuids,json=allUuids" json:"all_uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathSetPB) Reset() {
	*x = PathSetPB{}
	mi := &file_yb_fs_fs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathSetPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathSetPB) ProtoMessage() {}

func (x *PathSetPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_fs_fs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathSetPB.ProtoReflect.Descriptor instead.
func (*PathSetPB) Descriptor() ([]byte, []int) {
	return file_yb_fs_fs_proto_rawDescGZIP(), []int{2}
}

func (x *PathSetPB) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *PathSetPB) GetAllUuids() [][]byte {
	if x != nil {
		return x.AllUuids
	}
	return nil
}

// A filesystem instance can contain multiple paths. One of these structures
// is persisted in each path when the filesystem instance is created.
type PathInstanceMetadataPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Describes this path instance as well as all of the other path instances
	// that, taken together, describe a complete set.
	PathSet *PathSetPB `protobuf:"bytes,1,req,name=path_set,json=pathSet" json:"path_set,omitempty"`
	// Textual representation of the block manager that formatted this path.
	BlockManagerType *string `protobuf:"bytes,2,req,name=block_manager_type,json=blockManagerType" json:"block_manager_type,omitempty"`
	// Block size on the filesystem where this instance was created. If the
	// instance (and its data) are ever copied to another location, the block
	// size in that location must be the same.
	FilesystemBlockSizeBytes *uint64 `protobuf:"varint,3,req,name=filesystem_block_size_bytes,json=filesystemBlockSizeBytes" json:"filesystem_block_size_bytes,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *PathInstanceMetadataPB) Reset() {
	*x = PathInstanceMetadataPB{}
	mi := &file_yb_fs_fs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathInstanceMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathInstanceMetadataPB) ProtoMessage() {}

func (x *PathInstanceMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_fs_fs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathInstanceMetadataPB.ProtoReflect.Descriptor instead.
func (*PathInstanceMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_fs_fs_proto_rawDescGZIP(), []int{3}
}

func (x *PathInstanceMetadataPB) GetPathSet() *PathSetPB {
	if x != nil {
		return x.PathSet
	}
	return nil
}

func (x *PathInstanceMetadataPB) GetBlockManagerType() string {
	if x != nil && x.BlockManagerType != nil {
		return *x.BlockManagerType
	}
	return ""
}

func (x *PathInstanceMetadataPB) GetFilesystemBlockSizeBytes() uint64 {
	if x != nil && x.FilesystemBlockSizeBytes != nil {
		return *x.FilesystemBlockSizeBytes
	}
	return 0
}

type BlockIdPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"fixed64,1,req,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockIdPB) Reset() {
	*x = BlockIdPB{}
	mi := &file_yb_fs_fs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockIdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIdPB) ProtoMessage() {}

func (x *BlockIdPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_fs_fs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIdPB.ProtoReflect.Descriptor instead.
func (*BlockIdPB) Descriptor() ([]byte, []int) {
	return file_yb_fs_fs_proto_rawDescGZIP(), []int{4}
}

func (x *BlockIdPB) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

// An element found in a container metadata file of the log-backed block
// storage implementation.
//
// Each one tracks the existence (creation) or non-existence (deletion)
// of a particular block. They are written sequentially, with subsequent
// messages taking precedence over earlier ones (e.g. "CREATE foo" followed
// by "DELETE foo" means that block foo does not exist).
type BlockRecordPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the block.
	BlockId *BlockIdPB `protobuf:"bytes,1,req,name=block_id,json=blockId" json:"block_id,omitempty"`
	// Whether this is a CREATE or a DELETE.
	OpType *BlockRecordType `protobuf:"varint,2,req,name=op_type,json=opType,enum=yb.BlockRecordType" json:"op_type,omitempty"`
	// The time at which this block record was created, expressed in terms of
	// microseconds since the epoch.
	TimestampUs *uint64 `protobuf:"varint,3,req,name=timestamp_us,json=timestampUs" json:"timestamp_us,omitempty"`
	// The offset of the block in the container data file.
	//
	// Required for CREATE.
	Offset *int64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	// The length of the block in the container data file.
	//
	// Required for CREATE.
	Length        *int64 `protobuf:"varint,5,opt,name=length" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockRecordPB) Reset() {
	*x = BlockRecordPB{}
	mi := &file_yb_fs_fs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockRecordPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRecordPB) ProtoMessage() {}

func (x *BlockRecordPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_fs_fs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRecordPB.ProtoReflect.Descriptor instead.
func (*BlockRecordPB) Descriptor() ([]byte, []int) {
	return file_yb_fs_fs_proto_rawDescGZIP(), []int{5}
}

func (x *BlockRecordPB) GetBlockId() *BlockIdPB {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *BlockRecordPB) GetOpType() BlockRecordType {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return BlockRecordType_UNKNOWN
}

func (x *BlockRecordPB) GetTimestampUs() uint64 {
	if x != nil && x.TimestampUs != nil {
		return *x.TimestampUs
	}
	return 0
}

func (x *BlockRecordPB) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *BlockRecordPB) GetLength() int64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

var File_yb_fs_fs_proto protoreflect.FileDescriptor

var file_yb_fs_fs_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x79, 0x62, 0x2f, 0x66, 0x73, 0x2f, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x79, 0x62, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x56, 0x0a, 0x29, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x44, 0x6f, 0x6e,
	0x65, 0x53, 0x65, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x62, 0x2e, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x17, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x19, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x6c, 0x6c,
	0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x50,
	0x42, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x18, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x1b, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x06,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x2a, 0x36, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x2e, 0x79, 0x62,
})

var (
	file_yb_fs_fs_proto_rawDescOnce sync.Once
	file_yb_fs_fs_proto_rawDescData []byte
)

func file_yb_fs_fs_proto_rawDescGZIP() []byte {
	file_yb_fs_fs_proto_rawDescOnce.Do(func() {
		file_yb_fs_fs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_fs_fs_proto_rawDesc), len(file_yb_fs_fs_proto_rawDesc)))
	})
	return file_yb_fs_fs_proto_rawDescData
}

var file_yb_fs_fs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yb_fs_fs_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yb_fs_fs_proto_goTypes = []any{
	(BlockRecordType)(0),              // 0: yb.BlockRecordType
	(*InstanceMetadataPB)(nil),        // 1: yb.InstanceMetadataPB
	(*TserverInstanceMetadataPB)(nil), // 2: yb.TserverInstanceMetadataPB
	(*PathSetPB)(nil),                 // 3: yb.PathSetPB
	(*PathInstanceMetadataPB)(nil),    // 4: yb.PathInstanceMetadataPB
	(*BlockIdPB)(nil),                 // 5: yb.BlockIdPB
	(*BlockRecordPB)(nil),             // 6: yb.BlockRecordPB
}
var file_yb_fs_fs_proto_depIdxs = []int32{
	2, // 0: yb.InstanceMetadataPB.tserver_instance_metadata:type_name -> yb.TserverInstanceMetadataPB
	3, // 1: yb.PathInstanceMetadataPB.path_set:type_name -> yb.PathSetPB
	5, // 2: yb.BlockRecordPB.block_id:type_name -> yb.BlockIdPB
	0, // 3: yb.BlockRecordPB.op_type:type_name -> yb.BlockRecordType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_yb_fs_fs_proto_init() }
func file_yb_fs_fs_proto_init() {
	if File_yb_fs_fs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_fs_fs_proto_rawDesc), len(file_yb_fs_fs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_fs_fs_proto_goTypes,
		DependencyIndexes: file_yb_fs_fs_proto_depIdxs,
		EnumInfos:         file_yb_fs_fs_proto_enumTypes,
		MessageInfos:      file_yb_fs_fs_proto_msgTypes,
	}.Build()
	File_yb_fs_fs_proto = out.File
	file_yb_fs_fs_proto_goTypes = nil
	file_yb_fs_fs_proto_depIdxs = nil
}
