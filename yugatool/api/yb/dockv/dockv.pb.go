// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/dockv/dockv.proto

package dockv

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColumnPackingPB struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Id                          *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NumVarlenColumnsBefore      *uint64                `protobuf:"varint,2,opt,name=num_varlen_columns_before,json=numVarlenColumnsBefore" json:"num_varlen_columns_before,omitempty"`
	OffsetAfterPrevVarlenColumn *uint64                `protobuf:"varint,3,opt,name=offset_after_prev_varlen_column,json=offsetAfterPrevVarlenColumn" json:"offset_after_prev_varlen_column,omitempty"`
	Size                        *uint64                `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Nullable                    *bool                  `protobuf:"varint,5,opt,name=nullable" json:"nullable,omitempty"`
	// Present only in recent versions that were added after V2 implementation.
	DataType      *common.PersistentDataType `protobuf:"varint,6,opt,name=data_type,json=dataType,enum=yb.PersistentDataType" json:"data_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnPackingPB) Reset() {
	*x = ColumnPackingPB{}
	mi := &file_yb_dockv_dockv_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnPackingPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnPackingPB) ProtoMessage() {}

func (x *ColumnPackingPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_dockv_dockv_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnPackingPB.ProtoReflect.Descriptor instead.
func (*ColumnPackingPB) Descriptor() ([]byte, []int) {
	return file_yb_dockv_dockv_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnPackingPB) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ColumnPackingPB) GetNumVarlenColumnsBefore() uint64 {
	if x != nil && x.NumVarlenColumnsBefore != nil {
		return *x.NumVarlenColumnsBefore
	}
	return 0
}

func (x *ColumnPackingPB) GetOffsetAfterPrevVarlenColumn() uint64 {
	if x != nil && x.OffsetAfterPrevVarlenColumn != nil {
		return *x.OffsetAfterPrevVarlenColumn
	}
	return 0
}

func (x *ColumnPackingPB) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *ColumnPackingPB) GetNullable() bool {
	if x != nil && x.Nullable != nil {
		return *x.Nullable
	}
	return false
}

func (x *ColumnPackingPB) GetDataType() common.PersistentDataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return common.PersistentDataType(999)
}

type SchemaPackingPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemaVersion *uint32                `protobuf:"varint,1,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	Columns       []*ColumnPackingPB     `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	// Columns that present in schema but don't participate in packing.
	SkippedColumnIds []uint32 `protobuf:"varint,3,rep,name=skipped_column_ids,json=skippedColumnIds" json:"skipped_column_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SchemaPackingPB) Reset() {
	*x = SchemaPackingPB{}
	mi := &file_yb_dockv_dockv_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaPackingPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaPackingPB) ProtoMessage() {}

func (x *SchemaPackingPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_dockv_dockv_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaPackingPB.ProtoReflect.Descriptor instead.
func (*SchemaPackingPB) Descriptor() ([]byte, []int) {
	return file_yb_dockv_dockv_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaPackingPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *SchemaPackingPB) GetColumns() []*ColumnPackingPB {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SchemaPackingPB) GetSkippedColumnIds() []uint32 {
	if x != nil {
		return x.SkippedColumnIds
	}
	return nil
}

var File_yb_dockv_dockv_proto protoreflect.FileDescriptor

var file_yb_dockv_dockv_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x79, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x76, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x76,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x76,
	0x1a, 0x15, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6e,
	0x75, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x6c, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x72, 0x6c, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x6c,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76,
	0x56, 0x61, 0x72, 0x6c, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x76, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x76,
})

var (
	file_yb_dockv_dockv_proto_rawDescOnce sync.Once
	file_yb_dockv_dockv_proto_rawDescData []byte
)

func file_yb_dockv_dockv_proto_rawDescGZIP() []byte {
	file_yb_dockv_dockv_proto_rawDescOnce.Do(func() {
		file_yb_dockv_dockv_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_dockv_dockv_proto_rawDesc), len(file_yb_dockv_dockv_proto_rawDesc)))
	})
	return file_yb_dockv_dockv_proto_rawDescData
}

var file_yb_dockv_dockv_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yb_dockv_dockv_proto_goTypes = []any{
	(*ColumnPackingPB)(nil),        // 0: yb.dockv.ColumnPackingPB
	(*SchemaPackingPB)(nil),        // 1: yb.dockv.SchemaPackingPB
	(common.PersistentDataType)(0), // 2: yb.PersistentDataType
}
var file_yb_dockv_dockv_proto_depIdxs = []int32{
	2, // 0: yb.dockv.ColumnPackingPB.data_type:type_name -> yb.PersistentDataType
	0, // 1: yb.dockv.SchemaPackingPB.columns:type_name -> yb.dockv.ColumnPackingPB
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_yb_dockv_dockv_proto_init() }
func file_yb_dockv_dockv_proto_init() {
	if File_yb_dockv_dockv_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_dockv_dockv_proto_rawDesc), len(file_yb_dockv_dockv_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_dockv_dockv_proto_goTypes,
		DependencyIndexes: file_yb_dockv_dockv_proto_depIdxs,
		MessageInfos:      file_yb_dockv_dockv_proto_msgTypes,
	}.Build()
	File_yb_dockv_dockv_proto = out.File
	file_yb_dockv_dockv_proto_goTypes = nil
	file_yb_dockv_dockv_proto_depIdxs = nil
}
