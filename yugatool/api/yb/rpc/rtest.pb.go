// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
// Test protocol for yb RPC.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/rpc/rtest.proto

package rpc

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LightweightEnum int32

const (
	LightweightEnum_ZERO  LightweightEnum = 0
	LightweightEnum_ONE   LightweightEnum = 1
	LightweightEnum_TWO   LightweightEnum = 2
	LightweightEnum_THREE LightweightEnum = 3
	LightweightEnum_FOUR  LightweightEnum = 4
)

// Enum value maps for LightweightEnum.
var (
	LightweightEnum_name = map[int32]string{
		0: "ZERO",
		1: "ONE",
		2: "TWO",
		3: "THREE",
		4: "FOUR",
	}
	LightweightEnum_value = map[string]int32{
		"ZERO":  0,
		"ONE":   1,
		"TWO":   2,
		"THREE": 3,
		"FOUR":  4,
	}
)

func (x LightweightEnum) Enum() *LightweightEnum {
	p := new(LightweightEnum)
	*p = x
	return p
}

func (x LightweightEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LightweightEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_rpc_rtest_proto_enumTypes[0].Descriptor()
}

func (LightweightEnum) Type() protoreflect.EnumType {
	return &file_yb_rpc_rtest_proto_enumTypes[0]
}

func (x LightweightEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LightweightEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LightweightEnum(num)
	return nil
}

// Deprecated: Use LightweightEnum.Descriptor instead.
func (LightweightEnum) EnumDescriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{0}
}

type AddRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *uint32                `protobuf:"varint,1,req,name=x" json:"x,omitempty"`
	Y             *uint32                `protobuf:"varint,2,req,name=y" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRequestPB) Reset() {
	*x = AddRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequestPB) ProtoMessage() {}

func (x *AddRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequestPB.ProtoReflect.Descriptor instead.
func (*AddRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{0}
}

func (x *AddRequestPB) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *AddRequestPB) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

// Used by tests to simulate an old client which is missing
// a newly added required field.
type AddRequestPartialPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *uint32                `protobuf:"varint,1,req,name=x" json:"x,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRequestPartialPB) Reset() {
	*x = AddRequestPartialPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRequestPartialPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRequestPartialPB) ProtoMessage() {}

func (x *AddRequestPartialPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRequestPartialPB.ProtoReflect.Descriptor instead.
func (*AddRequestPartialPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{1}
}

func (x *AddRequestPartialPB) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

type AddResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *uint32                `protobuf:"varint,1,req,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddResponsePB) Reset() {
	*x = AddResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResponsePB) ProtoMessage() {}

func (x *AddResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResponsePB.ProtoReflect.Descriptor instead.
func (*AddResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{2}
}

func (x *AddResponsePB) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

type SleepRequestPB struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	SleepMicros *uint32                `protobuf:"varint,1,req,name=sleep_micros,json=sleepMicros" json:"sleep_micros,omitempty"`
	// Used in rpc_stub-test: if this is true, it will respond from a different
	// thread than the one that receives the request.
	Deferred *bool `protobuf:"varint,2,opt,name=deferred,def=0" json:"deferred,omitempty"`
	// If set, returns a CalculatorError response.
	ReturnAppError *bool `protobuf:"varint,3,opt,name=return_app_error,json=returnAppError,def=0" json:"return_app_error,omitempty"`
	// Used in rpc-test: if this is set to true and no client timeout is set,
	// the service will respond to the client with an error.
	ClientTimeoutDefined *bool `protobuf:"varint,4,opt,name=client_timeout_defined,json=clientTimeoutDefined,def=0" json:"client_timeout_defined,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for SleepRequestPB fields.
const (
	Default_SleepRequestPB_Deferred             = bool(false)
	Default_SleepRequestPB_ReturnAppError       = bool(false)
	Default_SleepRequestPB_ClientTimeoutDefined = bool(false)
)

func (x *SleepRequestPB) Reset() {
	*x = SleepRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SleepRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepRequestPB) ProtoMessage() {}

func (x *SleepRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepRequestPB.ProtoReflect.Descriptor instead.
func (*SleepRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{3}
}

func (x *SleepRequestPB) GetSleepMicros() uint32 {
	if x != nil && x.SleepMicros != nil {
		return *x.SleepMicros
	}
	return 0
}

func (x *SleepRequestPB) GetDeferred() bool {
	if x != nil && x.Deferred != nil {
		return *x.Deferred
	}
	return Default_SleepRequestPB_Deferred
}

func (x *SleepRequestPB) GetReturnAppError() bool {
	if x != nil && x.ReturnAppError != nil {
		return *x.ReturnAppError
	}
	return Default_SleepRequestPB_ReturnAppError
}

func (x *SleepRequestPB) GetClientTimeoutDefined() bool {
	if x != nil && x.ClientTimeoutDefined != nil {
		return *x.ClientTimeoutDefined
	}
	return Default_SleepRequestPB_ClientTimeoutDefined
}

type SleepResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SleepResponsePB) Reset() {
	*x = SleepResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SleepResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepResponsePB) ProtoMessage() {}

func (x *SleepResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepResponsePB.ProtoReflect.Descriptor instead.
func (*SleepResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{4}
}

type SendStringsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RandomSeed    *uint32                `protobuf:"varint,1,opt,name=random_seed,json=randomSeed" json:"random_seed,omitempty"`
	Sizes         []uint64               `protobuf:"varint,2,rep,name=sizes" json:"sizes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStringsRequestPB) Reset() {
	*x = SendStringsRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStringsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStringsRequestPB) ProtoMessage() {}

func (x *SendStringsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStringsRequestPB.ProtoReflect.Descriptor instead.
func (*SendStringsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{5}
}

func (x *SendStringsRequestPB) GetRandomSeed() uint32 {
	if x != nil && x.RandomSeed != nil {
		return *x.RandomSeed
	}
	return 0
}

func (x *SendStringsRequestPB) GetSizes() []uint64 {
	if x != nil {
		return x.Sizes
	}
	return nil
}

type SendStringsResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sidecars      []uint32               `protobuf:"varint,1,rep,name=sidecars" json:"sidecars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStringsResponsePB) Reset() {
	*x = SendStringsResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStringsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStringsResponsePB) ProtoMessage() {}

func (x *SendStringsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStringsResponsePB.ProtoReflect.Descriptor instead.
func (*SendStringsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{6}
}

func (x *SendStringsResponsePB) GetSidecars() []uint32 {
	if x != nil {
		return x.Sidecars
	}
	return nil
}

type EchoRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *string                `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoRequestPB) Reset() {
	*x = EchoRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequestPB) ProtoMessage() {}

func (x *EchoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequestPB.ProtoReflect.Descriptor instead.
func (*EchoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{7}
}

func (x *EchoRequestPB) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type EchoResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *string                `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoResponsePB) Reset() {
	*x = EchoResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponsePB) ProtoMessage() {}

func (x *EchoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponsePB.ProtoReflect.Descriptor instead.
func (*EchoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{8}
}

func (x *EchoResponsePB) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type RepeatedEchoRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Character     *int32                 `protobuf:"varint,1,req,name=character" json:"character,omitempty"`
	Count         *uint64                `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedEchoRequestPB) Reset() {
	*x = RepeatedEchoRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedEchoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedEchoRequestPB) ProtoMessage() {}

func (x *RepeatedEchoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedEchoRequestPB.ProtoReflect.Descriptor instead.
func (*RepeatedEchoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{9}
}

func (x *RepeatedEchoRequestPB) GetCharacter() int32 {
	if x != nil && x.Character != nil {
		return *x.Character
	}
	return 0
}

func (x *RepeatedEchoRequestPB) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type RepeatedEchoResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *string                `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedEchoResponsePB) Reset() {
	*x = RepeatedEchoResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedEchoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedEchoResponsePB) ProtoMessage() {}

func (x *RepeatedEchoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedEchoResponsePB.ProtoReflect.Descriptor instead.
func (*RepeatedEchoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{10}
}

func (x *RepeatedEchoResponsePB) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type WhoAmIRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAmIRequestPB) Reset() {
	*x = WhoAmIRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAmIRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAmIRequestPB) ProtoMessage() {}

func (x *WhoAmIRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAmIRequestPB.ProtoReflect.Descriptor instead.
func (*WhoAmIRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{11}
}

type WhoAmIResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       *string                `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WhoAmIResponsePB) Reset() {
	*x = WhoAmIResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WhoAmIResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoAmIResponsePB) ProtoMessage() {}

func (x *WhoAmIResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoAmIResponsePB.ProtoReflect.Descriptor instead.
func (*WhoAmIResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{12}
}

func (x *WhoAmIResponsePB) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type CalculatorError struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExtraErrorData *string                `protobuf:"bytes,1,req,name=extra_error_data,json=extraErrorData" json:"extra_error_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CalculatorError) Reset() {
	*x = CalculatorError{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculatorError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatorError) ProtoMessage() {}

func (x *CalculatorError) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatorError.ProtoReflect.Descriptor instead.
func (*CalculatorError) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{13}
}

func (x *CalculatorError) GetExtraErrorData() string {
	if x != nil && x.ExtraErrorData != nil {
		return *x.ExtraErrorData
	}
	return ""
}

type PanicRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PanicRequestPB) Reset() {
	*x = PanicRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PanicRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanicRequestPB) ProtoMessage() {}

func (x *PanicRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanicRequestPB.ProtoReflect.Descriptor instead.
func (*PanicRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{14}
}

type PanicResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PanicResponsePB) Reset() {
	*x = PanicResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PanicResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PanicResponsePB) ProtoMessage() {}

func (x *PanicResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PanicResponsePB.ProtoReflect.Descriptor instead.
func (*PanicResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{15}
}

type PingRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint64                `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequestPB) Reset() {
	*x = PingRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequestPB) ProtoMessage() {}

func (x *PingRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequestPB.ProtoReflect.Descriptor instead.
func (*PingRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{16}
}

func (x *PingRequestPB) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type PingResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *uint64                `protobuf:"varint,1,req,name=time" json:"time,omitempty"` // Time when this call was received by server.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponsePB) Reset() {
	*x = PingResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponsePB) ProtoMessage() {}

func (x *PingResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponsePB.ProtoReflect.Descriptor instead.
func (*PingResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{17}
}

func (x *PingResponsePB) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type DisconnectRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectRequestPB) Reset() {
	*x = DisconnectRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequestPB) ProtoMessage() {}

func (x *DisconnectRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequestPB.ProtoReflect.Descriptor instead.
func (*DisconnectRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{18}
}

type DisconnectResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectResponsePB) Reset() {
	*x = DisconnectResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponsePB) ProtoMessage() {}

func (x *DisconnectResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponsePB.ProtoReflect.Descriptor instead.
func (*DisconnectResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{19}
}

// Used to test connectivity between servers. Client asks one server to forward request to another.
type ForwardRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          *string                `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port          *uint32                `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardRequestPB) Reset() {
	*x = ForwardRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardRequestPB) ProtoMessage() {}

func (x *ForwardRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardRequestPB.ProtoReflect.Descriptor instead.
func (*ForwardRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{20}
}

func (x *ForwardRequestPB) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *ForwardRequestPB) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type ForwardResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"` // Name of server that handled this request.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardResponsePB) Reset() {
	*x = ForwardResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardResponsePB) ProtoMessage() {}

func (x *ForwardResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardResponsePB.ProtoReflect.Descriptor instead.
func (*ForwardResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{21}
}

func (x *ForwardResponsePB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ConcatRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lhs           *string                `protobuf:"bytes,1,opt,name=lhs" json:"lhs,omitempty"`
	Rhs           *string                `protobuf:"bytes,2,opt,name=rhs" json:"rhs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConcatRequestPB) Reset() {
	*x = ConcatRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcatRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatRequestPB) ProtoMessage() {}

func (x *ConcatRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatRequestPB.ProtoReflect.Descriptor instead.
func (*ConcatRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{22}
}

func (x *ConcatRequestPB) GetLhs() string {
	if x != nil && x.Lhs != nil {
		return *x.Lhs
	}
	return ""
}

func (x *ConcatRequestPB) GetRhs() string {
	if x != nil && x.Rhs != nil {
		return *x.Rhs
	}
	return ""
}

type ConcatResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *string                `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConcatResponsePB) Reset() {
	*x = ConcatResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcatResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcatResponsePB) ProtoMessage() {}

func (x *ConcatResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcatResponsePB.ProtoReflect.Descriptor instead.
func (*ConcatResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{23}
}

func (x *ConcatResponsePB) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

type LightweightSubMessagePB struct {
	state  protoimpl.MessageState   `protogen:"open.v1"`
	Sf32   *int32                   `protobuf:"fixed32,1,opt,name=sf32" json:"sf32,omitempty"`
	Rsi32  []int32                  `protobuf:"zigzag32,2,rep,name=rsi32" json:"rsi32,omitempty"`
	Str    *string                  `protobuf:"bytes,3,opt,name=str" json:"str,omitempty"`
	Rbytes [][]byte                 `protobuf:"bytes,4,rep,name=rbytes" json:"rbytes,omitempty"`
	Cycle  *LightweightSubMessagePB `protobuf:"bytes,5,opt,name=cycle" json:"cycle,omitempty"`
	// Types that are valid to be assigned to Variant:
	//
	//	*LightweightSubMessagePB_VI32
	//	*LightweightSubMessagePB_VStr
	//	*LightweightSubMessagePB_VMessage
	Variant       isLightweightSubMessagePB_Variant `protobuf_oneof:"variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightweightSubMessagePB) Reset() {
	*x = LightweightSubMessagePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightweightSubMessagePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightweightSubMessagePB) ProtoMessage() {}

func (x *LightweightSubMessagePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightweightSubMessagePB.ProtoReflect.Descriptor instead.
func (*LightweightSubMessagePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{24}
}

func (x *LightweightSubMessagePB) GetSf32() int32 {
	if x != nil && x.Sf32 != nil {
		return *x.Sf32
	}
	return 0
}

func (x *LightweightSubMessagePB) GetRsi32() []int32 {
	if x != nil {
		return x.Rsi32
	}
	return nil
}

func (x *LightweightSubMessagePB) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *LightweightSubMessagePB) GetRbytes() [][]byte {
	if x != nil {
		return x.Rbytes
	}
	return nil
}

func (x *LightweightSubMessagePB) GetCycle() *LightweightSubMessagePB {
	if x != nil {
		return x.Cycle
	}
	return nil
}

func (x *LightweightSubMessagePB) GetVariant() isLightweightSubMessagePB_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *LightweightSubMessagePB) GetVI32() int32 {
	if x != nil {
		if x, ok := x.Variant.(*LightweightSubMessagePB_VI32); ok {
			return x.VI32
		}
	}
	return 0
}

func (x *LightweightSubMessagePB) GetVStr() string {
	if x != nil {
		if x, ok := x.Variant.(*LightweightSubMessagePB_VStr); ok {
			return x.VStr
		}
	}
	return ""
}

func (x *LightweightSubMessagePB) GetVMessage() *LightweightSubMessagePB {
	if x != nil {
		if x, ok := x.Variant.(*LightweightSubMessagePB_VMessage); ok {
			return x.VMessage
		}
	}
	return nil
}

type isLightweightSubMessagePB_Variant interface {
	isLightweightSubMessagePB_Variant()
}

type LightweightSubMessagePB_VI32 struct {
	VI32 int32 `protobuf:"varint,6,opt,name=v_i32,json=vI32,oneof"`
}

type LightweightSubMessagePB_VStr struct {
	VStr string `protobuf:"bytes,7,opt,name=v_str,json=vStr,oneof"`
}

type LightweightSubMessagePB_VMessage struct {
	VMessage *LightweightSubMessagePB `protobuf:"bytes,8,opt,name=v_message,json=vMessage,oneof"`
}

func (*LightweightSubMessagePB_VI32) isLightweightSubMessagePB_Variant() {}

func (*LightweightSubMessagePB_VStr) isLightweightSubMessagePB_Variant() {}

func (*LightweightSubMessagePB_VMessage) isLightweightSubMessagePB_Variant() {}

type LightweightPairPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	S1            *string                `protobuf:"bytes,1,opt,name=s1" json:"s1,omitempty"`
	S2            *string                `protobuf:"bytes,2,opt,name=s2" json:"s2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightweightPairPB) Reset() {
	*x = LightweightPairPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightweightPairPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightweightPairPB) ProtoMessage() {}

func (x *LightweightPairPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightweightPairPB.ProtoReflect.Descriptor instead.
func (*LightweightPairPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{25}
}

func (x *LightweightPairPB) GetS1() string {
	if x != nil && x.S1 != nil {
		return *x.S1
	}
	return ""
}

func (x *LightweightPairPB) GetS2() string {
	if x != nil && x.S2 != nil {
		return *x.S2
	}
	return ""
}

type LightweightRequestPB struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	I32              *int32                     `protobuf:"varint,1,opt,name=i32" json:"i32,omitempty"`
	I64              *int64                     `protobuf:"varint,2,opt,name=i64" json:"i64,omitempty"`
	F32              *uint32                    `protobuf:"fixed32,3,opt,name=f32" json:"f32,omitempty"`
	F64              *uint64                    `protobuf:"fixed64,4,opt,name=f64" json:"f64,omitempty"`
	U32              *uint32                    `protobuf:"varint,5,opt,name=u32" json:"u32,omitempty"`
	U64              *uint64                    `protobuf:"varint,6,opt,name=u64" json:"u64,omitempty"`
	R32              *float32                   `protobuf:"fixed32,7,opt,name=r32" json:"r32,omitempty"`
	R64              *float64                   `protobuf:"fixed64,8,opt,name=r64" json:"r64,omitempty"`
	Str              *string                    `protobuf:"bytes,9,opt,name=str" json:"str,omitempty"`
	Bytes            []byte                     `protobuf:"bytes,10,opt,name=bytes" json:"bytes,omitempty"`
	En               *LightweightEnum           `protobuf:"varint,11,opt,name=en,enum=yb.rpc_test.LightweightEnum" json:"en,omitempty"`
	Sf32             *int32                     `protobuf:"fixed32,12,opt,name=sf32" json:"sf32,omitempty"`
	Sf64             *int64                     `protobuf:"fixed64,13,opt,name=sf64" json:"sf64,omitempty"`
	Si32             *int32                     `protobuf:"zigzag32,14,opt,name=si32" json:"si32,omitempty"`
	Si64             *int64                     `protobuf:"zigzag64,15,opt,name=si64" json:"si64,omitempty"`
	Ru32             []uint32                   `protobuf:"varint,16,rep,name=ru32" json:"ru32,omitempty"`
	Rf32             []uint32                   `protobuf:"fixed32,17,rep,name=rf32" json:"rf32,omitempty"`
	Rstr             []string                   `protobuf:"bytes,18,rep,name=rstr" json:"rstr,omitempty"`
	Message          *LightweightSubMessagePB   `protobuf:"bytes,19,opt,name=message" json:"message,omitempty"`
	RepeatedMessages []*LightweightSubMessagePB `protobuf:"bytes,20,rep,name=repeated_messages,json=repeatedMessages" json:"repeated_messages,omitempty"`
	PackedU64        []uint64                   `protobuf:"varint,21,rep,packed,name=packed_u64,json=packedU64" json:"packed_u64,omitempty"`
	PackedF32        []uint32                   `protobuf:"fixed32,22,rep,packed,name=packed_f32,json=packedF32" json:"packed_f32,omitempty"`
	Pairs            []*LightweightPairPB       `protobuf:"bytes,23,rep,name=pairs" json:"pairs,omitempty"`
	PtrMessage       *LightweightSubMessagePB   `protobuf:"bytes,24,opt,name=ptr_message,json=ptrMessage" json:"ptr_message,omitempty"`
	Map              map[string]int64           `protobuf:"bytes,25,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ExtraData        *any1.Any                  `protobuf:"bytes,26,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LightweightRequestPB) Reset() {
	*x = LightweightRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightweightRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightweightRequestPB) ProtoMessage() {}

func (x *LightweightRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightweightRequestPB.ProtoReflect.Descriptor instead.
func (*LightweightRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{26}
}

func (x *LightweightRequestPB) GetI32() int32 {
	if x != nil && x.I32 != nil {
		return *x.I32
	}
	return 0
}

func (x *LightweightRequestPB) GetI64() int64 {
	if x != nil && x.I64 != nil {
		return *x.I64
	}
	return 0
}

func (x *LightweightRequestPB) GetF32() uint32 {
	if x != nil && x.F32 != nil {
		return *x.F32
	}
	return 0
}

func (x *LightweightRequestPB) GetF64() uint64 {
	if x != nil && x.F64 != nil {
		return *x.F64
	}
	return 0
}

func (x *LightweightRequestPB) GetU32() uint32 {
	if x != nil && x.U32 != nil {
		return *x.U32
	}
	return 0
}

func (x *LightweightRequestPB) GetU64() uint64 {
	if x != nil && x.U64 != nil {
		return *x.U64
	}
	return 0
}

func (x *LightweightRequestPB) GetR32() float32 {
	if x != nil && x.R32 != nil {
		return *x.R32
	}
	return 0
}

func (x *LightweightRequestPB) GetR64() float64 {
	if x != nil && x.R64 != nil {
		return *x.R64
	}
	return 0
}

func (x *LightweightRequestPB) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *LightweightRequestPB) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *LightweightRequestPB) GetEn() LightweightEnum {
	if x != nil && x.En != nil {
		return *x.En
	}
	return LightweightEnum_ZERO
}

func (x *LightweightRequestPB) GetSf32() int32 {
	if x != nil && x.Sf32 != nil {
		return *x.Sf32
	}
	return 0
}

func (x *LightweightRequestPB) GetSf64() int64 {
	if x != nil && x.Sf64 != nil {
		return *x.Sf64
	}
	return 0
}

func (x *LightweightRequestPB) GetSi32() int32 {
	if x != nil && x.Si32 != nil {
		return *x.Si32
	}
	return 0
}

func (x *LightweightRequestPB) GetSi64() int64 {
	if x != nil && x.Si64 != nil {
		return *x.Si64
	}
	return 0
}

func (x *LightweightRequestPB) GetRu32() []uint32 {
	if x != nil {
		return x.Ru32
	}
	return nil
}

func (x *LightweightRequestPB) GetRf32() []uint32 {
	if x != nil {
		return x.Rf32
	}
	return nil
}

func (x *LightweightRequestPB) GetRstr() []string {
	if x != nil {
		return x.Rstr
	}
	return nil
}

func (x *LightweightRequestPB) GetMessage() *LightweightSubMessagePB {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *LightweightRequestPB) GetRepeatedMessages() []*LightweightSubMessagePB {
	if x != nil {
		return x.RepeatedMessages
	}
	return nil
}

func (x *LightweightRequestPB) GetPackedU64() []uint64 {
	if x != nil {
		return x.PackedU64
	}
	return nil
}

func (x *LightweightRequestPB) GetPackedF32() []uint32 {
	if x != nil {
		return x.PackedF32
	}
	return nil
}

func (x *LightweightRequestPB) GetPairs() []*LightweightPairPB {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *LightweightRequestPB) GetPtrMessage() *LightweightSubMessagePB {
	if x != nil {
		return x.PtrMessage
	}
	return nil
}

func (x *LightweightRequestPB) GetMap() map[string]int64 {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *LightweightRequestPB) GetExtraData() *any1.Any {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

type LightweightResponsePB struct {
	state                protoimpl.MessageState     `protogen:"open.v1"`
	I32                  *int32                     `protobuf:"varint,1,opt,name=i32" json:"i32,omitempty"`
	I64                  *int64                     `protobuf:"varint,2,opt,name=i64" json:"i64,omitempty"`
	F32                  *uint32                    `protobuf:"fixed32,3,opt,name=f32" json:"f32,omitempty"`
	F64                  *uint64                    `protobuf:"fixed64,4,opt,name=f64" json:"f64,omitempty"`
	U32                  *uint32                    `protobuf:"varint,5,opt,name=u32" json:"u32,omitempty"`
	U64                  *uint64                    `protobuf:"varint,6,opt,name=u64" json:"u64,omitempty"`
	R32                  *float32                   `protobuf:"fixed32,7,opt,name=r32" json:"r32,omitempty"`
	R64                  *float64                   `protobuf:"fixed64,8,opt,name=r64" json:"r64,omitempty"`
	Str                  *string                    `protobuf:"bytes,9,opt,name=str" json:"str,omitempty"`
	Bytes                []byte                     `protobuf:"bytes,10,opt,name=bytes" json:"bytes,omitempty"`
	En                   *LightweightEnum           `protobuf:"varint,11,opt,name=en,enum=yb.rpc_test.LightweightEnum" json:"en,omitempty"`
	Sf32                 *int32                     `protobuf:"fixed32,12,opt,name=sf32" json:"sf32,omitempty"`
	Sf64                 *int64                     `protobuf:"fixed64,13,opt,name=sf64" json:"sf64,omitempty"`
	Si32                 *int32                     `protobuf:"zigzag32,14,opt,name=si32" json:"si32,omitempty"`
	Si64                 *int64                     `protobuf:"zigzag64,15,opt,name=si64" json:"si64,omitempty"`
	Ru32                 []uint32                   `protobuf:"varint,16,rep,name=ru32" json:"ru32,omitempty"`
	Rf32                 []uint32                   `protobuf:"fixed32,17,rep,name=rf32" json:"rf32,omitempty"`
	Rstr                 []string                   `protobuf:"bytes,18,rep,name=rstr" json:"rstr,omitempty"`
	Message              *LightweightSubMessagePB   `protobuf:"bytes,19,opt,name=message" json:"message,omitempty"`
	RepeatedMessages     []*LightweightSubMessagePB `protobuf:"bytes,20,rep,name=repeated_messages,json=repeatedMessages" json:"repeated_messages,omitempty"`
	RepeatedMessagesCopy []*LightweightSubMessagePB `protobuf:"bytes,120,rep,name=repeated_messages_copy,json=repeatedMessagesCopy" json:"repeated_messages_copy,omitempty"`
	PackedU64            []uint64                   `protobuf:"varint,21,rep,packed,name=packed_u64,json=packedU64" json:"packed_u64,omitempty"`
	PackedF32            []uint32                   `protobuf:"fixed32,22,rep,packed,name=packed_f32,json=packedF32" json:"packed_f32,omitempty"`
	Pairs                []*LightweightPairPB       `protobuf:"bytes,23,rep,name=pairs" json:"pairs,omitempty"`
	PtrMessage           *LightweightSubMessagePB   `protobuf:"bytes,24,opt,name=ptr_message,json=ptrMessage" json:"ptr_message,omitempty"`
	Map                  map[string]int64           `protobuf:"bytes,25,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ShortDebugString     *string                    `protobuf:"bytes,100,opt,name=short_debug_string,json=shortDebugString" json:"short_debug_string,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LightweightResponsePB) Reset() {
	*x = LightweightResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightweightResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightweightResponsePB) ProtoMessage() {}

func (x *LightweightResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightweightResponsePB.ProtoReflect.Descriptor instead.
func (*LightweightResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{27}
}

func (x *LightweightResponsePB) GetI32() int32 {
	if x != nil && x.I32 != nil {
		return *x.I32
	}
	return 0
}

func (x *LightweightResponsePB) GetI64() int64 {
	if x != nil && x.I64 != nil {
		return *x.I64
	}
	return 0
}

func (x *LightweightResponsePB) GetF32() uint32 {
	if x != nil && x.F32 != nil {
		return *x.F32
	}
	return 0
}

func (x *LightweightResponsePB) GetF64() uint64 {
	if x != nil && x.F64 != nil {
		return *x.F64
	}
	return 0
}

func (x *LightweightResponsePB) GetU32() uint32 {
	if x != nil && x.U32 != nil {
		return *x.U32
	}
	return 0
}

func (x *LightweightResponsePB) GetU64() uint64 {
	if x != nil && x.U64 != nil {
		return *x.U64
	}
	return 0
}

func (x *LightweightResponsePB) GetR32() float32 {
	if x != nil && x.R32 != nil {
		return *x.R32
	}
	return 0
}

func (x *LightweightResponsePB) GetR64() float64 {
	if x != nil && x.R64 != nil {
		return *x.R64
	}
	return 0
}

func (x *LightweightResponsePB) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *LightweightResponsePB) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *LightweightResponsePB) GetEn() LightweightEnum {
	if x != nil && x.En != nil {
		return *x.En
	}
	return LightweightEnum_ZERO
}

func (x *LightweightResponsePB) GetSf32() int32 {
	if x != nil && x.Sf32 != nil {
		return *x.Sf32
	}
	return 0
}

func (x *LightweightResponsePB) GetSf64() int64 {
	if x != nil && x.Sf64 != nil {
		return *x.Sf64
	}
	return 0
}

func (x *LightweightResponsePB) GetSi32() int32 {
	if x != nil && x.Si32 != nil {
		return *x.Si32
	}
	return 0
}

func (x *LightweightResponsePB) GetSi64() int64 {
	if x != nil && x.Si64 != nil {
		return *x.Si64
	}
	return 0
}

func (x *LightweightResponsePB) GetRu32() []uint32 {
	if x != nil {
		return x.Ru32
	}
	return nil
}

func (x *LightweightResponsePB) GetRf32() []uint32 {
	if x != nil {
		return x.Rf32
	}
	return nil
}

func (x *LightweightResponsePB) GetRstr() []string {
	if x != nil {
		return x.Rstr
	}
	return nil
}

func (x *LightweightResponsePB) GetMessage() *LightweightSubMessagePB {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *LightweightResponsePB) GetRepeatedMessages() []*LightweightSubMessagePB {
	if x != nil {
		return x.RepeatedMessages
	}
	return nil
}

func (x *LightweightResponsePB) GetRepeatedMessagesCopy() []*LightweightSubMessagePB {
	if x != nil {
		return x.RepeatedMessagesCopy
	}
	return nil
}

func (x *LightweightResponsePB) GetPackedU64() []uint64 {
	if x != nil {
		return x.PackedU64
	}
	return nil
}

func (x *LightweightResponsePB) GetPackedF32() []uint32 {
	if x != nil {
		return x.PackedF32
	}
	return nil
}

func (x *LightweightResponsePB) GetPairs() []*LightweightPairPB {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *LightweightResponsePB) GetPtrMessage() *LightweightSubMessagePB {
	if x != nil {
		return x.PtrMessage
	}
	return nil
}

func (x *LightweightResponsePB) GetMap() map[string]int64 {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *LightweightResponsePB) GetShortDebugString() string {
	if x != nil && x.ShortDebugString != nil {
		return *x.ShortDebugString
	}
	return ""
}

type TrivialRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *int32                 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrivialRequestPB) Reset() {
	*x = TrivialRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrivialRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrivialRequestPB) ProtoMessage() {}

func (x *TrivialRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrivialRequestPB.ProtoReflect.Descriptor instead.
func (*TrivialRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{28}
}

func (x *TrivialRequestPB) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type TrivialErrorPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          *int32                 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrivialErrorPB) Reset() {
	*x = TrivialErrorPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrivialErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrivialErrorPB) ProtoMessage() {}

func (x *TrivialErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrivialErrorPB.ProtoReflect.Descriptor instead.
func (*TrivialErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{29}
}

func (x *TrivialErrorPB) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

type TrivialResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TrivialErrorPB        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Value         *int32                 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrivialResponsePB) Reset() {
	*x = TrivialResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrivialResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrivialResponsePB) ProtoMessage() {}

func (x *TrivialResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrivialResponsePB.ProtoReflect.Descriptor instead.
func (*TrivialResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{30}
}

func (x *TrivialResponsePB) GetError() *TrivialErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TrivialResponsePB) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type SidecarRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumSidecars   *uint64                `protobuf:"varint,1,opt,name=num_sidecars,json=numSidecars" json:"num_sidecars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SidecarRequestPB) Reset() {
	*x = SidecarRequestPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SidecarRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarRequestPB) ProtoMessage() {}

func (x *SidecarRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarRequestPB.ProtoReflect.Descriptor instead.
func (*SidecarRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{31}
}

func (x *SidecarRequestPB) GetNumSidecars() uint64 {
	if x != nil && x.NumSidecars != nil {
		return *x.NumSidecars
	}
	return 0
}

type SidecarResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumSidecars   *uint64                `protobuf:"varint,1,opt,name=num_sidecars,json=numSidecars" json:"num_sidecars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SidecarResponsePB) Reset() {
	*x = SidecarResponsePB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SidecarResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarResponsePB) ProtoMessage() {}

func (x *SidecarResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarResponsePB.ProtoReflect.Descriptor instead.
func (*SidecarResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{32}
}

func (x *SidecarResponsePB) GetNumSidecars() uint64 {
	if x != nil && x.NumSidecars != nil {
		return *x.NumSidecars
	}
	return 0
}

type TestStringOptionalPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          *string                `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestStringOptionalPB) Reset() {
	*x = TestStringOptionalPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStringOptionalPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStringOptionalPB) ProtoMessage() {}

func (x *TestStringOptionalPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStringOptionalPB.ProtoReflect.Descriptor instead.
func (*TestStringOptionalPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{33}
}

func (x *TestStringOptionalPB) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type TestObjectPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	String1       *string                `protobuf:"bytes,1,opt,name=string1" json:"string1,omitempty"`
	Record        *TestStringOptionalPB  `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
	String2       *string                `protobuf:"bytes,3,opt,name=string2" json:"string2,omitempty"`
	Int32         *int32                 `protobuf:"varint,4,opt,name=int32" json:"int32,omitempty"`
	Int32_2       *int32                 `protobuf:"varint,5,opt,name=int32_2,json=int322" json:"int32_2,omitempty"`
	Int32_3       *int32                 `protobuf:"varint,6,opt,name=int32_3,json=int323" json:"int32_3,omitempty"`
	Record2       *TestStringOptionalPB  `protobuf:"bytes,7,opt,name=record2" json:"record2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestObjectPB) Reset() {
	*x = TestObjectPB{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestObjectPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestObjectPB) ProtoMessage() {}

func (x *TestObjectPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestObjectPB.ProtoReflect.Descriptor instead.
func (*TestObjectPB) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{34}
}

func (x *TestObjectPB) GetString1() string {
	if x != nil && x.String1 != nil {
		return *x.String1
	}
	return ""
}

func (x *TestObjectPB) GetRecord() *TestStringOptionalPB {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *TestObjectPB) GetString2() string {
	if x != nil && x.String2 != nil {
		return *x.String2
	}
	return ""
}

func (x *TestObjectPB) GetInt32() int32 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *TestObjectPB) GetInt32_2() int32 {
	if x != nil && x.Int32_2 != nil {
		return *x.Int32_2
	}
	return 0
}

func (x *TestObjectPB) GetInt32_3() int32 {
	if x != nil && x.Int32_3 != nil {
		return *x.Int32_3
	}
	return 0
}

func (x *TestObjectPB) GetRecord2() *TestStringOptionalPB {
	if x != nil {
		return x.Record2
	}
	return nil
}

type TestObjectPBv2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Removed fields 2, 3, 4.
	String1       *string               `protobuf:"bytes,1,opt,name=string1" json:"string1,omitempty"`
	Int32_2       *int32                `protobuf:"varint,5,opt,name=int32_2,json=int322" json:"int32_2,omitempty"`
	Int32_3       *int32                `protobuf:"varint,6,opt,name=int32_3,json=int323" json:"int32_3,omitempty"`
	Record2       *TestStringOptionalPB `protobuf:"bytes,7,opt,name=record2" json:"record2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestObjectPBv2) Reset() {
	*x = TestObjectPBv2{}
	mi := &file_yb_rpc_rtest_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestObjectPBv2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestObjectPBv2) ProtoMessage() {}

func (x *TestObjectPBv2) ProtoReflect() protoreflect.Message {
	mi := &file_yb_rpc_rtest_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestObjectPBv2.ProtoReflect.Descriptor instead.
func (*TestObjectPBv2) Descriptor() ([]byte, []int) {
	return file_yb_rpc_rtest_proto_rawDescGZIP(), []int{35}
}

func (x *TestObjectPBv2) GetString1() string {
	if x != nil && x.String1 != nil {
		return *x.String1
	}
	return ""
}

func (x *TestObjectPBv2) GetInt32_2() int32 {
	if x != nil && x.Int32_2 != nil {
		return *x.Int32_2
	}
	return 0
}

func (x *TestObjectPBv2) GetInt32_3() int32 {
	if x != nil && x.Int32_3 != nil {
		return *x.Int32_3
	}
	return 0
}

func (x *TestObjectPBv2) GetRecord2() *TestStringOptionalPB {
	if x != nil {
		return x.Record2
	}
	return nil
}

var file_yb_rpc_rtest_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*ErrorStatusPB)(nil),
		ExtensionType: (*CalculatorError)(nil),
		Field:         101,
		Name:          "yb.rpc_test.CalculatorError.app_error_ext",
		Tag:           "bytes,101,opt,name=app_error_ext",
		Filename:      "yb/rpc/rtest.proto",
	},
}

// Extension fields to ErrorStatusPB.
var (
	// optional yb.rpc_test.CalculatorError app_error_ext = 101;
	E_CalculatorError_AppErrorExt = &file_yb_rpc_rtest_proto_extTypes[0]
)

var File_yb_rpc_rtest_proto protoreflect.FileDescriptor

var file_yb_rpc_rtest_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x62,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22, 0x23, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50,
	0x42, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x22,
	0x27, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x21,
	0x0a, 0x08, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x70, 0x70, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22,
	0x11, 0x0a, 0x0f, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x22, 0x4d, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x69, 0x7a, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65,
	0x73, 0x22, 0x33, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x0e, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x4b, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x63, 0x68,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c,
	0x0a, 0x16, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f,
	0x57, 0x68, 0x6f, 0x41, 0x6d, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x2c, 0x0a, 0x10, 0x57, 0x68, 0x6f, 0x41, 0x6d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x94, 0x01,
	0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x32, 0x57, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x12, 0x15, 0x2e, 0x79,
	0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x45, 0x78, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x22, 0x1f, 0x0a, 0x0d, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x0e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x15, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x22,
	0x3a, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x68, 0x73, 0x22, 0x2a, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x04, 0x73, 0x66, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x69, 0x33, 0x32,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x11, 0x52, 0x05, 0x72, 0x73, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x52, 0x05, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x76, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x76, 0x49, 0x33, 0x32, 0x12, 0x15, 0x0a, 0x05, 0x76, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x76, 0x53, 0x74,
	0x72, 0x12, 0x43, 0x0a, 0x09, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75,
	0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x08, 0x76, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x22, 0x33, 0x0a, 0x11, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x32, 0x22, 0x91, 0x07, 0x0a, 0x14, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x36, 0x34,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x33, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x36, 0x34, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x02, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x33, 0x32, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x04, 0x73, 0x66, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x36,
	0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x10, 0x52, 0x04, 0x73, 0x66, 0x36, 0x34, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x33, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x73, 0x69, 0x33,
	0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x04, 0x73, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x33, 0x32, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x75, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x66, 0x33,
	0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x07, 0x52, 0x04, 0x72, 0x66, 0x33, 0x32, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x73, 0x74, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x73, 0x74,
	0x72, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x62, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x51, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79,
	0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x42, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75,
	0x36, 0x34, 0x18, 0x15, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x66, 0x33, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x74, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x08, 0x01, 0x52, 0x0a, 0x70, 0x74, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79,
	0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x33, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x07, 0x0a, 0x15, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72,
	0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x72, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x02,
	0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x02, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66,
	0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x04, 0x73, 0x66, 0x33, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x66, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x10, 0x52, 0x04, 0x73, 0x66,
	0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x33, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x04, 0x73, 0x69, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x36, 0x34, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x04, 0x73, 0x69, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75,
	0x33, 0x32, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x75, 0x33, 0x32, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x66, 0x33, 0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x07, 0x52, 0x04, 0x72, 0x66,
	0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x74, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x73, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x75, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x70, 0x79, 0x18, 0x78, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x52,
	0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x75, 0x36, 0x34, 0x18, 0x15, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x66, 0x33, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e,
	0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x74, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5,
	0x18, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x70, 0x74, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x36, 0x0a,
	0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x24, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5c, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x10, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x22, 0x36, 0x0a, 0x11, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x82,
	0x02, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x42, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x42, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x33, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x42, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x32, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x42, 0x76, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x33, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x42, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x32, 0x2a,
	0x42, 0x0a, 0x0f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x55,
	0x52, 0x10, 0x04, 0x32, 0x87, 0x08, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x41, 0x64, 0x64,
	0x12, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1a, 0x2e, 0x79, 0x62,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x42, 0x0a, 0x05, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x12, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1c, 0x2e,
	0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x3f, 0x0a, 0x04, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x57, 0x0a, 0x0c,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x22, 0x2e, 0x79,
	0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x45, 0x0a, 0x06, 0x57, 0x68, 0x6f, 0x41, 0x6d, 0x49, 0x12,
	0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x68,
	0x6f, 0x41, 0x6d, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1d, 0x2e,
	0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x68, 0x6f, 0x41,
	0x6d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x75, 0x0a, 0x1a,
	0x54, 0x65, 0x73, 0x74, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x44,
	0x69, 0x66, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e,
	0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x69, 0x66, 0x66, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x69, 0x66, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x50, 0x42, 0x12, 0x42, 0x0a, 0x05, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x12, 0x1b, 0x2e, 0x79,
	0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x6e, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x72,
	0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x3f, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1b, 0x2e, 0x79, 0x62,
	0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x48, 0x0a, 0x07, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x22, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x08, 0x01, 0x12, 0x4e, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x6c, 0x12, 0x1d,
	0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x69,
	0x76, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1e, 0x2e,
	0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x76,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x22, 0x04, 0x88,
	0xb5, 0x18, 0x01, 0x12, 0x48, 0x0a, 0x07, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x1d,
	0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1e, 0x2e,
	0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x32, 0x79, 0x0a,
	0x0d, 0x41, 0x62, 0x61, 0x63, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x1a, 0x21, 0xda, 0xb5, 0x18, 0x1d, 0x79, 0x62, 0x2e, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
})

var (
	file_yb_rpc_rtest_proto_rawDescOnce sync.Once
	file_yb_rpc_rtest_proto_rawDescData []byte
)

func file_yb_rpc_rtest_proto_rawDescGZIP() []byte {
	file_yb_rpc_rtest_proto_rawDescOnce.Do(func() {
		file_yb_rpc_rtest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_rpc_rtest_proto_rawDesc), len(file_yb_rpc_rtest_proto_rawDesc)))
	})
	return file_yb_rpc_rtest_proto_rawDescData
}

var file_yb_rpc_rtest_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yb_rpc_rtest_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_yb_rpc_rtest_proto_goTypes = []any{
	(LightweightEnum)(0),            // 0: yb.rpc_test.LightweightEnum
	(*AddRequestPB)(nil),            // 1: yb.rpc_test.AddRequestPB
	(*AddRequestPartialPB)(nil),     // 2: yb.rpc_test.AddRequestPartialPB
	(*AddResponsePB)(nil),           // 3: yb.rpc_test.AddResponsePB
	(*SleepRequestPB)(nil),          // 4: yb.rpc_test.SleepRequestPB
	(*SleepResponsePB)(nil),         // 5: yb.rpc_test.SleepResponsePB
	(*SendStringsRequestPB)(nil),    // 6: yb.rpc_test.SendStringsRequestPB
	(*SendStringsResponsePB)(nil),   // 7: yb.rpc_test.SendStringsResponsePB
	(*EchoRequestPB)(nil),           // 8: yb.rpc_test.EchoRequestPB
	(*EchoResponsePB)(nil),          // 9: yb.rpc_test.EchoResponsePB
	(*RepeatedEchoRequestPB)(nil),   // 10: yb.rpc_test.RepeatedEchoRequestPB
	(*RepeatedEchoResponsePB)(nil),  // 11: yb.rpc_test.RepeatedEchoResponsePB
	(*WhoAmIRequestPB)(nil),         // 12: yb.rpc_test.WhoAmIRequestPB
	(*WhoAmIResponsePB)(nil),        // 13: yb.rpc_test.WhoAmIResponsePB
	(*CalculatorError)(nil),         // 14: yb.rpc_test.CalculatorError
	(*PanicRequestPB)(nil),          // 15: yb.rpc_test.PanicRequestPB
	(*PanicResponsePB)(nil),         // 16: yb.rpc_test.PanicResponsePB
	(*PingRequestPB)(nil),           // 17: yb.rpc_test.PingRequestPB
	(*PingResponsePB)(nil),          // 18: yb.rpc_test.PingResponsePB
	(*DisconnectRequestPB)(nil),     // 19: yb.rpc_test.DisconnectRequestPB
	(*DisconnectResponsePB)(nil),    // 20: yb.rpc_test.DisconnectResponsePB
	(*ForwardRequestPB)(nil),        // 21: yb.rpc_test.ForwardRequestPB
	(*ForwardResponsePB)(nil),       // 22: yb.rpc_test.ForwardResponsePB
	(*ConcatRequestPB)(nil),         // 23: yb.rpc_test.ConcatRequestPB
	(*ConcatResponsePB)(nil),        // 24: yb.rpc_test.ConcatResponsePB
	(*LightweightSubMessagePB)(nil), // 25: yb.rpc_test.LightweightSubMessagePB
	(*LightweightPairPB)(nil),       // 26: yb.rpc_test.LightweightPairPB
	(*LightweightRequestPB)(nil),    // 27: yb.rpc_test.LightweightRequestPB
	(*LightweightResponsePB)(nil),   // 28: yb.rpc_test.LightweightResponsePB
	(*TrivialRequestPB)(nil),        // 29: yb.rpc_test.TrivialRequestPB
	(*TrivialErrorPB)(nil),          // 30: yb.rpc_test.TrivialErrorPB
	(*TrivialResponsePB)(nil),       // 31: yb.rpc_test.TrivialResponsePB
	(*SidecarRequestPB)(nil),        // 32: yb.rpc_test.SidecarRequestPB
	(*SidecarResponsePB)(nil),       // 33: yb.rpc_test.SidecarResponsePB
	(*TestStringOptionalPB)(nil),    // 34: yb.rpc_test.TestStringOptionalPB
	(*TestObjectPB)(nil),            // 35: yb.rpc_test.TestObjectPB
	(*TestObjectPBv2)(nil),          // 36: yb.rpc_test.TestObjectPBv2
	nil,                             // 37: yb.rpc_test.LightweightRequestPB.MapEntry
	nil,                             // 38: yb.rpc_test.LightweightResponsePB.MapEntry
	(*any1.Any)(nil),                // 39: google.protobuf.Any
	(*ErrorStatusPB)(nil),           // 40: yb.rpc.ErrorStatusPB
	(*ReqDiffPackagePB)(nil),        // 41: yb.rpc_test_diff_package.ReqDiffPackagePB
	(*RespDiffPackagePB)(nil),       // 42: yb.rpc_test_diff_package.RespDiffPackagePB
}
var file_yb_rpc_rtest_proto_depIdxs = []int32{
	25, // 0: yb.rpc_test.LightweightSubMessagePB.cycle:type_name -> yb.rpc_test.LightweightSubMessagePB
	25, // 1: yb.rpc_test.LightweightSubMessagePB.v_message:type_name -> yb.rpc_test.LightweightSubMessagePB
	0,  // 2: yb.rpc_test.LightweightRequestPB.en:type_name -> yb.rpc_test.LightweightEnum
	25, // 3: yb.rpc_test.LightweightRequestPB.message:type_name -> yb.rpc_test.LightweightSubMessagePB
	25, // 4: yb.rpc_test.LightweightRequestPB.repeated_messages:type_name -> yb.rpc_test.LightweightSubMessagePB
	26, // 5: yb.rpc_test.LightweightRequestPB.pairs:type_name -> yb.rpc_test.LightweightPairPB
	25, // 6: yb.rpc_test.LightweightRequestPB.ptr_message:type_name -> yb.rpc_test.LightweightSubMessagePB
	37, // 7: yb.rpc_test.LightweightRequestPB.map:type_name -> yb.rpc_test.LightweightRequestPB.MapEntry
	39, // 8: yb.rpc_test.LightweightRequestPB.extra_data:type_name -> google.protobuf.Any
	0,  // 9: yb.rpc_test.LightweightResponsePB.en:type_name -> yb.rpc_test.LightweightEnum
	25, // 10: yb.rpc_test.LightweightResponsePB.message:type_name -> yb.rpc_test.LightweightSubMessagePB
	25, // 11: yb.rpc_test.LightweightResponsePB.repeated_messages:type_name -> yb.rpc_test.LightweightSubMessagePB
	25, // 12: yb.rpc_test.LightweightResponsePB.repeated_messages_copy:type_name -> yb.rpc_test.LightweightSubMessagePB
	26, // 13: yb.rpc_test.LightweightResponsePB.pairs:type_name -> yb.rpc_test.LightweightPairPB
	25, // 14: yb.rpc_test.LightweightResponsePB.ptr_message:type_name -> yb.rpc_test.LightweightSubMessagePB
	38, // 15: yb.rpc_test.LightweightResponsePB.map:type_name -> yb.rpc_test.LightweightResponsePB.MapEntry
	30, // 16: yb.rpc_test.TrivialResponsePB.error:type_name -> yb.rpc_test.TrivialErrorPB
	34, // 17: yb.rpc_test.TestObjectPB.record:type_name -> yb.rpc_test.TestStringOptionalPB
	34, // 18: yb.rpc_test.TestObjectPB.record2:type_name -> yb.rpc_test.TestStringOptionalPB
	34, // 19: yb.rpc_test.TestObjectPBv2.record2:type_name -> yb.rpc_test.TestStringOptionalPB
	40, // 20: yb.rpc_test.CalculatorError.app_error_ext:extendee -> yb.rpc.ErrorStatusPB
	14, // 21: yb.rpc_test.CalculatorError.app_error_ext:type_name -> yb.rpc_test.CalculatorError
	1,  // 22: yb.rpc_test.CalculatorService.Add:input_type -> yb.rpc_test.AddRequestPB
	4,  // 23: yb.rpc_test.CalculatorService.Sleep:input_type -> yb.rpc_test.SleepRequestPB
	8,  // 24: yb.rpc_test.CalculatorService.Echo:input_type -> yb.rpc_test.EchoRequestPB
	10, // 25: yb.rpc_test.CalculatorService.RepeatedEcho:input_type -> yb.rpc_test.RepeatedEchoRequestPB
	12, // 26: yb.rpc_test.CalculatorService.WhoAmI:input_type -> yb.rpc_test.WhoAmIRequestPB
	41, // 27: yb.rpc_test.CalculatorService.TestArgumentsInDiffPackage:input_type -> yb.rpc_test_diff_package.ReqDiffPackagePB
	15, // 28: yb.rpc_test.CalculatorService.Panic:input_type -> yb.rpc_test.PanicRequestPB
	17, // 29: yb.rpc_test.CalculatorService.Ping:input_type -> yb.rpc_test.PingRequestPB
	19, // 30: yb.rpc_test.CalculatorService.Disconnect:input_type -> yb.rpc_test.DisconnectRequestPB
	21, // 31: yb.rpc_test.CalculatorService.Forward:input_type -> yb.rpc_test.ForwardRequestPB
	27, // 32: yb.rpc_test.CalculatorService.Lightweight:input_type -> yb.rpc_test.LightweightRequestPB
	29, // 33: yb.rpc_test.CalculatorService.Trivial:input_type -> yb.rpc_test.TrivialRequestPB
	32, // 34: yb.rpc_test.CalculatorService.Sidecar:input_type -> yb.rpc_test.SidecarRequestPB
	23, // 35: yb.rpc_test.AbacusService.Concat:input_type -> yb.rpc_test.ConcatRequestPB
	3,  // 36: yb.rpc_test.CalculatorService.Add:output_type -> yb.rpc_test.AddResponsePB
	5,  // 37: yb.rpc_test.CalculatorService.Sleep:output_type -> yb.rpc_test.SleepResponsePB
	9,  // 38: yb.rpc_test.CalculatorService.Echo:output_type -> yb.rpc_test.EchoResponsePB
	11, // 39: yb.rpc_test.CalculatorService.RepeatedEcho:output_type -> yb.rpc_test.RepeatedEchoResponsePB
	13, // 40: yb.rpc_test.CalculatorService.WhoAmI:output_type -> yb.rpc_test.WhoAmIResponsePB
	42, // 41: yb.rpc_test.CalculatorService.TestArgumentsInDiffPackage:output_type -> yb.rpc_test_diff_package.RespDiffPackagePB
	16, // 42: yb.rpc_test.CalculatorService.Panic:output_type -> yb.rpc_test.PanicResponsePB
	18, // 43: yb.rpc_test.CalculatorService.Ping:output_type -> yb.rpc_test.PingResponsePB
	20, // 44: yb.rpc_test.CalculatorService.Disconnect:output_type -> yb.rpc_test.DisconnectResponsePB
	22, // 45: yb.rpc_test.CalculatorService.Forward:output_type -> yb.rpc_test.ForwardResponsePB
	28, // 46: yb.rpc_test.CalculatorService.Lightweight:output_type -> yb.rpc_test.LightweightResponsePB
	31, // 47: yb.rpc_test.CalculatorService.Trivial:output_type -> yb.rpc_test.TrivialResponsePB
	33, // 48: yb.rpc_test.CalculatorService.Sidecar:output_type -> yb.rpc_test.SidecarResponsePB
	24, // 49: yb.rpc_test.AbacusService.Concat:output_type -> yb.rpc_test.ConcatResponsePB
	36, // [36:50] is the sub-list for method output_type
	22, // [22:36] is the sub-list for method input_type
	21, // [21:22] is the sub-list for extension type_name
	20, // [20:21] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_yb_rpc_rtest_proto_init() }
func file_yb_rpc_rtest_proto_init() {
	if File_yb_rpc_rtest_proto != nil {
		return
	}
	file_yb_rpc_lightweight_message_proto_init()
	file_yb_rpc_rpc_header_proto_init()
	file_yb_rpc_rtest_diff_package_proto_init()
	file_yb_rpc_service_proto_init()
	file_yb_rpc_rtest_proto_msgTypes[24].OneofWrappers = []any{
		(*LightweightSubMessagePB_VI32)(nil),
		(*LightweightSubMessagePB_VStr)(nil),
		(*LightweightSubMessagePB_VMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_rpc_rtest_proto_rawDesc), len(file_yb_rpc_rtest_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 1,
			NumServices:   2,
		},
		GoTypes:           file_yb_rpc_rtest_proto_goTypes,
		DependencyIndexes: file_yb_rpc_rtest_proto_depIdxs,
		EnumInfos:         file_yb_rpc_rtest_proto_enumTypes,
		MessageInfos:      file_yb_rpc_rtest_proto_msgTypes,
		ExtensionInfos:    file_yb_rpc_rtest_proto_extTypes,
	}.Build()
	File_yb_rpc_rtest_proto = out.File
	file_yb_rpc_rtest_proto_goTypes = nil
	file_yb_rpc_rtest_proto_depIdxs = nil
}
