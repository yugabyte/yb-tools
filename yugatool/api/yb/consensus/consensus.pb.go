// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/consensus/consensus.proto

package consensus

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	tserver "github.com/yugabyte/yb-tools/yugatool/api/yb/tserver"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The transaction driver type: indicates whether a transaction is
// being executed on a leader or a replica.
type DriverType int32

const (
	DriverType_UNKNOWN_DRIVER DriverType = 0
	DriverType_LEADER         DriverType = 1
	DriverType_REPLICA        DriverType = 2
)

// Enum value maps for DriverType.
var (
	DriverType_name = map[int32]string{
		0: "UNKNOWN_DRIVER",
		1: "LEADER",
		2: "REPLICA",
	}
	DriverType_value = map[string]int32{
		"UNKNOWN_DRIVER": 0,
		"LEADER":         1,
		"REPLICA":        2,
	}
)

func (x DriverType) Enum() *DriverType {
	p := new(DriverType)
	*p = x
	return p
}

func (x DriverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriverType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_consensus_consensus_proto_enumTypes[0].Descriptor()
}

func (DriverType) Type() protoreflect.EnumType {
	return &file_yb_consensus_consensus_proto_enumTypes[0]
}

func (x DriverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DriverType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DriverType(num)
	return nil
}

// Deprecated: Use DriverType.Descriptor instead.
func (DriverType) EnumDescriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

// A configuration change request for the tablet with 'tablet_id'.
// This message is dynamically generated by the leader when AddServer() or
// RemoveServer() is called, and is what gets replicated to the log.
type ChangeConfigRecordPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TabletId []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// The old committed configuration config for verification purposes.
	OldConfig *RaftConfigPB `protobuf:"bytes,2,req,name=old_config,json=oldConfig" json:"old_config,omitempty"`
	// The new configuration to set the configuration to.
	NewConfig     *RaftConfigPB `protobuf:"bytes,3,req,name=new_config,json=newConfig" json:"new_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeConfigRecordPB) Reset() {
	*x = ChangeConfigRecordPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeConfigRecordPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigRecordPB) ProtoMessage() {}

func (x *ChangeConfigRecordPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigRecordPB.ProtoReflect.Descriptor instead.
func (*ChangeConfigRecordPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *ChangeConfigRecordPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ChangeConfigRecordPB) GetOldConfig() *RaftConfigPB {
	if x != nil {
		return x.OldConfig
	}
	return nil
}

func (x *ChangeConfigRecordPB) GetNewConfig() *RaftConfigPB {
	if x != nil {
		return x.NewConfig
	}
	return nil
}

// A configuration change request for the tablet with 'tablet_id'.
// These requests are restricted to one-by-one operations, as specified in
// Diego Ongaro's Raft PhD thesis.
// This is the RPC request, but it does not end up in the log.
// See also ChangeConfigRecordPB.
type ChangeConfigRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,4,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// The type of config change requested.
	// This field must be specified, but is left as optional due to being an enum.
	Type *ChangeConfigType `protobuf:"varint,2,opt,name=type,enum=yb.consensus.ChangeConfigType" json:"type,omitempty"`
	// The peer to add or remove.
	// When 'type' == ADD_SERVER, both the permanent_uuid and last_known_addr
	// fields must be set. For REMOVE_SERVER, either the permanent_uuid field or
	// last_known_addr should be set - 'use_host' is for using the latter.
	Server *RaftPeerPB `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	// The OpId index of the committed config to replace.
	// This optional parameter is here to provide an atomic (compare-and-swap)
	// ChangeConfig operation. The ChangeConfig() operation will fail if this
	// parameter is specified and the committed config does not have a matching
	// opid_index. See also the definition of RaftConfigPB.
	CasConfigOpidIndex *int64 `protobuf:"varint,5,opt,name=cas_config_opid_index,json=casConfigOpidIndex" json:"cas_config_opid_index,omitempty"`
	// For REMOVE case, when this is set, we assume that the peer is dead and will not
	// affect the quorum anymore. So we skip checking/using its server uuid and remove
	// it based on the ip/port info from 'server'.
	UseHost       *bool `protobuf:"varint,6,opt,name=use_host,json=useHost,def=0" json:"use_host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ChangeConfigRequestPB fields.
const (
	Default_ChangeConfigRequestPB_UseHost = bool(false)
)

func (x *ChangeConfigRequestPB) Reset() {
	*x = ChangeConfigRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigRequestPB) ProtoMessage() {}

func (x *ChangeConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *ChangeConfigRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *ChangeConfigRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ChangeConfigRequestPB) GetType() ChangeConfigType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChangeConfigType_UNKNOWN_CHANGE
}

func (x *ChangeConfigRequestPB) GetServer() *RaftPeerPB {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ChangeConfigRequestPB) GetCasConfigOpidIndex() int64 {
	if x != nil && x.CasConfigOpidIndex != nil {
		return *x.CasConfigOpidIndex
	}
	return 0
}

func (x *ChangeConfigRequestPB) GetUseHost() bool {
	if x != nil && x.UseHost != nil {
		return *x.UseHost
	}
	return Default_ChangeConfigRequestPB_UseHost
}

// The configuration change response. If any immediate error occurred
// the 'error' field is set with it.
type ChangeConfigResponsePB struct {
	state protoimpl.MessageState       `protogen:"open.v1"`
	Error *tserver.TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// The hybrid_time chosen by the server for this change config operation.
	// TODO: At the time of writing, this field is never set in the response.
	// TODO: Propagate signed hybrid_times. See KUDU-611.
	HybridTime    *uint64 `protobuf:"fixed64,2,opt,name=hybrid_time,json=hybridTime" json:"hybrid_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeConfigResponsePB) Reset() {
	*x = ChangeConfigResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeConfigResponsePB) ProtoMessage() {}

func (x *ChangeConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeConfigResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeConfigResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ChangeConfigResponsePB) GetHybridTime() uint64 {
	if x != nil && x.HybridTime != nil {
		return *x.HybridTime
	}
	return 0
}

// Required by HistoryCutoffOperation.
type HistoryCutoffPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// History cutoff of all the tables of this tablet.
	// On the master, this field is used for the sys catalog table.
	// For cotables i.e. ysql system tables, the cotables_cutoff_ht field
	// is used. On tservers, this field is used everywhere i.e. for both
	// colocated and non-colocated tables. In such cases, the
	// cotables_cutoff_ht is invalid.
	PrimaryCutoffHt *uint64 `protobuf:"fixed64,1,opt,name=primary_cutoff_ht,json=primaryCutoffHt" json:"primary_cutoff_ht,omitempty"`
	// Set only on the master for cotables.
	CotablesCutoffHt *uint64 `protobuf:"fixed64,2,opt,name=cotables_cutoff_ht,json=cotablesCutoffHt" json:"cotables_cutoff_ht,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *HistoryCutoffPB) Reset() {
	*x = HistoryCutoffPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryCutoffPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryCutoffPB) ProtoMessage() {}

func (x *HistoryCutoffPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryCutoffPB.ProtoReflect.Descriptor instead.
func (*HistoryCutoffPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *HistoryCutoffPB) GetPrimaryCutoffHt() uint64 {
	if x != nil && x.PrimaryCutoffHt != nil {
		return *x.PrimaryCutoffHt
	}
	return 0
}

func (x *HistoryCutoffPB) GetCotablesCutoffHt() uint64 {
	if x != nil && x.CotablesCutoffHt != nil {
		return *x.CotablesCutoffHt
	}
	return 0
}

// A Replicate message, sent to replicas by leader to indicate this operation must be stored in the
// write-ahead log.
type ReplicateMsg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *common.OpIdPB         `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// The hybrid time assigned to this message.
	HybridTime *uint64 `protobuf:"fixed64,2,req,name=hybrid_time,json=hybridTime" json:"hybrid_time,omitempty"`
	// A counter that is forever increasing in a tablet (like hybrid time). Used for list indexing.
	MonotonicCounter      *int64                             `protobuf:"varint,9,opt,name=monotonic_counter,json=monotonicCounter" json:"monotonic_counter,omitempty"`
	OpType                *OperationType                     `protobuf:"varint,4,req,name=op_type,json=opType,enum=yb.consensus.OperationType" json:"op_type,omitempty"`
	Write                 *tablet.WritePB                    `protobuf:"bytes,5,opt,name=write" json:"write,omitempty"`
	ChangeMetadataRequest *tablet.ChangeMetadataRequestPB    `protobuf:"bytes,6,opt,name=change_metadata_request,json=changeMetadataRequest" json:"change_metadata_request,omitempty"`
	TransactionState      *tablet.TransactionStatePB         `protobuf:"bytes,10,opt,name=transaction_state,json=transactionState" json:"transaction_state,omitempty"`
	SnapshotRequest       *tserver.TabletSnapshotOpRequestPB `protobuf:"bytes,11,opt,name=snapshot_request,json=snapshotRequest" json:"snapshot_request,omitempty"`
	Truncate              *tablet.TruncatePB                 `protobuf:"bytes,12,opt,name=truncate" json:"truncate,omitempty"`
	SplitRequest          *tablet.SplitTabletRequestPB       `protobuf:"bytes,14,opt,name=split_request,json=splitRequest" json:"split_request,omitempty"`
	ChangeConfigRecord    *ChangeConfigRecordPB              `protobuf:"bytes,7,opt,name=change_config_record,json=changeConfigRecord" json:"change_config_record,omitempty"`
	HistoryCutoff         *HistoryCutoffPB                   `protobuf:"bytes,13,opt,name=history_cutoff,json=historyCutoff" json:"history_cutoff,omitempty"`
	AutoFlagsConfig       *common.AutoFlagsConfigPB          `protobuf:"bytes,15,opt,name=auto_flags_config,json=autoFlagsConfig" json:"auto_flags_config,omitempty"`
	CloneTablet           *tablet.CloneTabletRequestPB       `protobuf:"bytes,16,opt,name=clone_tablet,json=cloneTablet" json:"clone_tablet,omitempty"`
	// The Raft operation ID known to the leader to be committed at the time this message was sent.
	// This is used during tablet bootstrap for RocksDB-backed tables.
	CommittedOpId *common.OpIdPB `protobuf:"bytes,8,opt,name=committed_op_id,json=committedOpId" json:"committed_op_id,omitempty"`
	NoopRequest   *NoOpRequestPB `protobuf:"bytes,999,opt,name=noop_request,json=noopRequest" json:"noop_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicateMsg) Reset() {
	*x = ReplicateMsg{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateMsg) ProtoMessage() {}

func (x *ReplicateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateMsg.ProtoReflect.Descriptor instead.
func (*ReplicateMsg) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *ReplicateMsg) GetId() *common.OpIdPB {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReplicateMsg) GetHybridTime() uint64 {
	if x != nil && x.HybridTime != nil {
		return *x.HybridTime
	}
	return 0
}

func (x *ReplicateMsg) GetMonotonicCounter() int64 {
	if x != nil && x.MonotonicCounter != nil {
		return *x.MonotonicCounter
	}
	return 0
}

func (x *ReplicateMsg) GetOpType() OperationType {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return OperationType_UNKNOWN_OP
}

func (x *ReplicateMsg) GetWrite() *tablet.WritePB {
	if x != nil {
		return x.Write
	}
	return nil
}

func (x *ReplicateMsg) GetChangeMetadataRequest() *tablet.ChangeMetadataRequestPB {
	if x != nil {
		return x.ChangeMetadataRequest
	}
	return nil
}

func (x *ReplicateMsg) GetTransactionState() *tablet.TransactionStatePB {
	if x != nil {
		return x.TransactionState
	}
	return nil
}

func (x *ReplicateMsg) GetSnapshotRequest() *tserver.TabletSnapshotOpRequestPB {
	if x != nil {
		return x.SnapshotRequest
	}
	return nil
}

func (x *ReplicateMsg) GetTruncate() *tablet.TruncatePB {
	if x != nil {
		return x.Truncate
	}
	return nil
}

func (x *ReplicateMsg) GetSplitRequest() *tablet.SplitTabletRequestPB {
	if x != nil {
		return x.SplitRequest
	}
	return nil
}

func (x *ReplicateMsg) GetChangeConfigRecord() *ChangeConfigRecordPB {
	if x != nil {
		return x.ChangeConfigRecord
	}
	return nil
}

func (x *ReplicateMsg) GetHistoryCutoff() *HistoryCutoffPB {
	if x != nil {
		return x.HistoryCutoff
	}
	return nil
}

func (x *ReplicateMsg) GetAutoFlagsConfig() *common.AutoFlagsConfigPB {
	if x != nil {
		return x.AutoFlagsConfig
	}
	return nil
}

func (x *ReplicateMsg) GetCloneTablet() *tablet.CloneTabletRequestPB {
	if x != nil {
		return x.CloneTablet
	}
	return nil
}

func (x *ReplicateMsg) GetCommittedOpId() *common.OpIdPB {
	if x != nil {
		return x.CommittedOpId
	}
	return nil
}

func (x *ReplicateMsg) GetNoopRequest() *NoOpRequestPB {
	if x != nil {
		return x.NoopRequest
	}
	return nil
}

// NoOp requests, mostly used in tests.
type NoOpRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allows to set a dummy payload, for tests.
	PayloadForTests []byte `protobuf:"bytes,1,opt,name=payload_for_tests,json=payloadForTests" json:"payload_for_tests,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NoOpRequestPB) Reset() {
	*x = NoOpRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoOpRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpRequestPB) ProtoMessage() {}

func (x *NoOpRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpRequestPB.ProtoReflect.Descriptor instead.
func (*NoOpRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *NoOpRequestPB) GetPayloadForTests() []byte {
	if x != nil {
		return x.PayloadForTests
	}
	return nil
}

// NoOp responses, mostly used in tests.
type NoOpResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Allows to set a dummy payload, for tests.
	PayloadForTests []byte `protobuf:"bytes,1,opt,name=payload_for_tests,json=payloadForTests" json:"payload_for_tests,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NoOpResponsePB) Reset() {
	*x = NoOpResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoOpResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpResponsePB) ProtoMessage() {}

func (x *NoOpResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpResponsePB.ProtoReflect.Descriptor instead.
func (*NoOpResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *NoOpResponsePB) GetPayloadForTests() []byte {
	if x != nil {
		return x.PayloadForTests
	}
	return nil
}

type PerOpErrorPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the operation that failed in the other peer.
	Id *common.OpIdPB `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// The Status explaining why the operation failed.
	Status        *common.AppStatusPB `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerOpErrorPB) Reset() {
	*x = PerOpErrorPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerOpErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerOpErrorPB) ProtoMessage() {}

func (x *PerOpErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerOpErrorPB.ProtoReflect.Descriptor instead.
func (*PerOpErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *PerOpErrorPB) GetId() *common.OpIdPB {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PerOpErrorPB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

// Status message received in the peer responses.
type ConsensusStatusPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The last message received (and replicated) by the peer.
	LastReceived *common.OpIdPB `protobuf:"bytes,1,req,name=last_received,json=lastReceived" json:"last_received,omitempty"`
	// The id of the last op that was replicated by the current leader.
	// This doesn't necessarily mean that the term of this op equals the current
	// term, since the current leader may be replicating ops from a prior term.
	// Unset if none currently received.
	//
	// In the case where there is a log matching property error
	// (PRECEDING_ENTRY_DIDNT_MATCH), this field is important and may still be
	// set, since the leader queue uses this field in conjuction with
	// last_received to decide on the next id to send to the follower.
	LastReceivedCurrentLeader *common.OpIdPB `protobuf:"bytes,4,opt,name=last_received_current_leader,json=lastReceivedCurrentLeader" json:"last_received_current_leader,omitempty"`
	// The last committed index that is known to the peer.
	LastCommittedIdx *int64 `protobuf:"varint,2,opt,name=last_committed_idx,json=lastCommittedIdx" json:"last_committed_idx,omitempty"`
	// The last operation applied by the peer.
	LastApplied *common.OpIdPB `protobuf:"bytes,5,opt,name=last_applied,json=lastApplied" json:"last_applied,omitempty"`
	// When the last request failed for some consensus related (internal) reason.
	// In some cases the error will have a specific code that the caller will
	// have to handle in certain ways.
	Error         *ConsensusErrorPB `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusStatusPB) Reset() {
	*x = ConsensusStatusPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusStatusPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStatusPB) ProtoMessage() {}

func (x *ConsensusStatusPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStatusPB.ProtoReflect.Descriptor instead.
func (*ConsensusStatusPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *ConsensusStatusPB) GetLastReceived() *common.OpIdPB {
	if x != nil {
		return x.LastReceived
	}
	return nil
}

func (x *ConsensusStatusPB) GetLastReceivedCurrentLeader() *common.OpIdPB {
	if x != nil {
		return x.LastReceivedCurrentLeader
	}
	return nil
}

func (x *ConsensusStatusPB) GetLastCommittedIdx() int64 {
	if x != nil && x.LastCommittedIdx != nil {
		return *x.LastCommittedIdx
	}
	return 0
}

func (x *ConsensusStatusPB) GetLastApplied() *common.OpIdPB {
	if x != nil {
		return x.LastApplied
	}
	return nil
}

func (x *ConsensusStatusPB) GetError() *ConsensusErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// A request from a candidate peer that wishes to become leader of
// the configuration serving tablet with 'tablet_id'.
// See RAFT sec. 5.2.
type VoteRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,6,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// Identifies the tablet configuration a the vote is being requested for.
	TabletId *string `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// The uuid of the sending peer.
	CandidateUuid []byte `protobuf:"bytes,2,req,name=candidate_uuid,json=candidateUuid" json:"candidate_uuid,omitempty"`
	// The term we are requesting a vote for.
	// If this term is higher than the callee's term, the callee will update its
	// own term to match, and if it is the current leader it will step down.
	CandidateTerm *int64 `protobuf:"varint,3,req,name=candidate_term,json=candidateTerm" json:"candidate_term,omitempty"`
	// The candidate node status so that the voter node can
	// decide whether to vote for it as LEADER.
	//
	// In particular, this includes the last OpId persisted in the candidate's
	// log, which corresponds to the lastLogIndex and lastLogTerm fields in Raft.
	// A replica must vote no for a candidate that has an OpId lower than them.
	CandidateStatus *ConsensusStatusPB `protobuf:"bytes,4,req,name=candidate_status,json=candidateStatus" json:"candidate_status,omitempty"`
	// Normally, replicas will deny a vote with a LEADER_IS_ALIVE error if
	// they are a leader or recently heard from a leader. This is to prevent
	// partitioned nodes from disturbing liveness. If this flag is true,
	// peers will vote even if they think a leader is alive. This can be used
	// for example to force a faster leader hand-off rather than waiting for
	// the election timer to expire.
	IgnoreLiveLeader *bool `protobuf:"varint,5,opt,name=ignore_live_leader,json=ignoreLiveLeader,def=0" json:"ignore_live_leader,omitempty"`
	// true if it is pre-election request and state of voter should not be changed.
	Preelection   *bool `protobuf:"varint,7,opt,name=preelection" json:"preelection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for VoteRequestPB fields.
const (
	Default_VoteRequestPB_IgnoreLiveLeader = bool(false)
)

func (x *VoteRequestPB) Reset() {
	*x = VoteRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequestPB) ProtoMessage() {}

func (x *VoteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequestPB.ProtoReflect.Descriptor instead.
func (*VoteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *VoteRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *VoteRequestPB) GetTabletId() string {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return ""
}

func (x *VoteRequestPB) GetCandidateUuid() []byte {
	if x != nil {
		return x.CandidateUuid
	}
	return nil
}

func (x *VoteRequestPB) GetCandidateTerm() int64 {
	if x != nil && x.CandidateTerm != nil {
		return *x.CandidateTerm
	}
	return 0
}

func (x *VoteRequestPB) GetCandidateStatus() *ConsensusStatusPB {
	if x != nil {
		return x.CandidateStatus
	}
	return nil
}

func (x *VoteRequestPB) GetIgnoreLiveLeader() bool {
	if x != nil && x.IgnoreLiveLeader != nil {
		return *x.IgnoreLiveLeader
	}
	return Default_VoteRequestPB_IgnoreLiveLeader
}

func (x *VoteRequestPB) GetPreelection() bool {
	if x != nil && x.Preelection != nil {
		return *x.Preelection
	}
	return false
}

// A response from a replica to a leader election request.
type VoteResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The uuid of the node sending the reply.
	ResponderUuid []byte `protobuf:"bytes,1,opt,name=responder_uuid,json=responderUuid" json:"responder_uuid,omitempty"`
	// The term of the node sending the reply.
	// Allows the candidate to update itself if it is behind.
	ResponderTerm *int64 `protobuf:"varint,2,opt,name=responder_term,json=responderTerm" json:"responder_term,omitempty"`
	// True if this peer voted for the caller, false otherwise.
	VoteGranted *bool `protobuf:"varint,3,opt,name=vote_granted,json=voteGranted" json:"vote_granted,omitempty"`
	// An upper bound on the remainder of the old leader's lease that the new leader has to wait out
	// before it can start serving read and write requests.
	RemainingLeaderLeaseDurationMs *int32 `protobuf:"varint,4,opt,name=remaining_leader_lease_duration_ms,json=remainingLeaderLeaseDurationMs" json:"remaining_leader_lease_duration_ms,omitempty"`
	// UUID of node that has lease.
	LeaderLeaseUuid []byte `protobuf:"bytes,7,opt,name=leader_lease_uuid,json=leaderLeaseUuid" json:"leader_lease_uuid,omitempty"`
	// An upper bound on the deadline of the old hybrid time leader's lease that the new leader has
	// to wait out before it can start serving read and write requests.
	// Contains only physical part of hybrid time.
	LeaderHtLeaseExpiration *uint64 `protobuf:"fixed64,5,opt,name=leader_ht_lease_expiration,json=leaderHtLeaseExpiration" json:"leader_ht_lease_expiration,omitempty"`
	// UUID of node that has ht lease.
	LeaderHtLeaseUuid []byte `protobuf:"bytes,8,opt,name=leader_ht_lease_uuid,json=leaderHtLeaseUuid" json:"leader_ht_lease_uuid,omitempty"`
	// true if it is response to pre-election request.
	Preelection *bool `protobuf:"varint,6,opt,name=preelection" json:"preelection,omitempty"`
	// TODO: Migrate ConsensusService to the AppStatusPB RPC style and merge these errors.
	// Error message from the consensus implementation.
	ConsensusError *ConsensusErrorPB `protobuf:"bytes,998,opt,name=consensus_error,json=consensusError" json:"consensus_error,omitempty"`
	// A generic error message (such as tablet not found).
	Error         *tserver.TabletServerErrorPB `protobuf:"bytes,999,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteResponsePB) Reset() {
	*x = VoteResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponsePB) ProtoMessage() {}

func (x *VoteResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponsePB.ProtoReflect.Descriptor instead.
func (*VoteResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{10}
}

func (x *VoteResponsePB) GetResponderUuid() []byte {
	if x != nil {
		return x.ResponderUuid
	}
	return nil
}

func (x *VoteResponsePB) GetResponderTerm() int64 {
	if x != nil && x.ResponderTerm != nil {
		return *x.ResponderTerm
	}
	return 0
}

func (x *VoteResponsePB) GetVoteGranted() bool {
	if x != nil && x.VoteGranted != nil {
		return *x.VoteGranted
	}
	return false
}

func (x *VoteResponsePB) GetRemainingLeaderLeaseDurationMs() int32 {
	if x != nil && x.RemainingLeaderLeaseDurationMs != nil {
		return *x.RemainingLeaderLeaseDurationMs
	}
	return 0
}

func (x *VoteResponsePB) GetLeaderLeaseUuid() []byte {
	if x != nil {
		return x.LeaderLeaseUuid
	}
	return nil
}

func (x *VoteResponsePB) GetLeaderHtLeaseExpiration() uint64 {
	if x != nil && x.LeaderHtLeaseExpiration != nil {
		return *x.LeaderHtLeaseExpiration
	}
	return 0
}

func (x *VoteResponsePB) GetLeaderHtLeaseUuid() []byte {
	if x != nil {
		return x.LeaderHtLeaseUuid
	}
	return nil
}

func (x *VoteResponsePB) GetPreelection() bool {
	if x != nil && x.Preelection != nil {
		return *x.Preelection
	}
	return false
}

func (x *VoteResponsePB) GetConsensusError() *ConsensusErrorPB {
	if x != nil {
		return x.ConsensusError
	}
	return nil
}

func (x *VoteResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// A consensus request message, the basic unit of a consensus round.
type ConsensusRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte  `protobuf:"bytes,7,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId *string `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// The uuid of the peer making the call.
	CallerUuid []byte `protobuf:"bytes,2,req,name=caller_uuid,json=callerUuid" json:"caller_uuid,omitempty"`
	// The caller's term. As only leaders can send messages,
	// replicas will accept all messages as long as the term
	// is equal to or higher than the last term they know about.
	// If a leader receives a request with a term higher than its own,
	// it will step down and enter FOLLOWER state (see Raft sec. 5.1).
	CallerTerm *int64 `protobuf:"varint,3,req,name=caller_term,json=callerTerm" json:"caller_term,omitempty"`
	// The id of the operation immediately preceding the first
	// operation in 'ops'. If the replica is receiving 'ops' for
	// the first time 'preceding_id' must match the replica's
	// last operation.
	//
	// This must be set if 'ops' is non-empty.
	PrecedingId *common.OpIdPB `protobuf:"bytes,4,opt,name=preceding_id,json=precedingId" json:"preceding_id,omitempty"`
	// The id of the last committed operation in the configuration. This is the
	// id of the last operation the leader deemed committed from a consensus
	// standpoint (not the last operation the leader applied).
	//
	// Raft calls this field 'leaderCommit'.
	CommittedOpId *common.OpIdPB `protobuf:"bytes,5,req,name=committed_op_id,json=committedOpId" json:"committed_op_id,omitempty"`
	// Sequence of operations to be replicated by this peer.
	// These will be committed when committed_index advances above their
	// respective OpIds. In some cases committed_index can indicate that
	// these operations are already committed, in which case they will be
	// committed during the same request.
	Ops []*ReplicateMsg `protobuf:"bytes,6,rep,name=ops" json:"ops,omitempty"`
	// Leader lease duration in milliseconds. A leader is not allowed to serve up-to-date reads
	// until it is able to replicate a lease extension. A new leader cannot assume its
	// responsibilities until this amount time has definitely passed since the old leader sent the
	// consensus request. Due to potential clock skew, we are not sending a timestamp, but an amount
	// of time followers have to wait.
	LeaderLeaseDurationMs *int32 `protobuf:"varint,8,opt,name=leader_lease_duration_ms,json=leaderLeaseDurationMs" json:"leader_lease_duration_ms,omitempty"`
	// Leader lease expiration, physical part of hybrid time. A new leader cannot add new
	// entries to RAFT log until hybrid time passes this expiration.
	HtLeaseExpiration *uint64 `protobuf:"fixed64,9,opt,name=ht_lease_expiration,json=htLeaseExpiration" json:"ht_lease_expiration,omitempty"`
	// Safe time measured on the leader at the time this request was generated.
	PropagatedSafeTime *uint64 `protobuf:"fixed64,10,opt,name=propagated_safe_time,json=propagatedSafeTime" json:"propagated_safe_time,omitempty"`
	// Hybrid time on the leader when this request was generated.
	PropagatedHybridTime *uint64 `protobuf:"fixed64,11,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// If enabled, a trace will be collected for this RPC and returned in the response.
	TraceRequested *bool `protobuf:"varint,12,opt,name=trace_requested,json=traceRequested" json:"trace_requested,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConsensusRequestPB) Reset() {
	*x = ConsensusRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusRequestPB) ProtoMessage() {}

func (x *ConsensusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusRequestPB.ProtoReflect.Descriptor instead.
func (*ConsensusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{11}
}

func (x *ConsensusRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *ConsensusRequestPB) GetTabletId() string {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return ""
}

func (x *ConsensusRequestPB) GetCallerUuid() []byte {
	if x != nil {
		return x.CallerUuid
	}
	return nil
}

func (x *ConsensusRequestPB) GetCallerTerm() int64 {
	if x != nil && x.CallerTerm != nil {
		return *x.CallerTerm
	}
	return 0
}

func (x *ConsensusRequestPB) GetPrecedingId() *common.OpIdPB {
	if x != nil {
		return x.PrecedingId
	}
	return nil
}

func (x *ConsensusRequestPB) GetCommittedOpId() *common.OpIdPB {
	if x != nil {
		return x.CommittedOpId
	}
	return nil
}

func (x *ConsensusRequestPB) GetOps() []*ReplicateMsg {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *ConsensusRequestPB) GetLeaderLeaseDurationMs() int32 {
	if x != nil && x.LeaderLeaseDurationMs != nil {
		return *x.LeaderLeaseDurationMs
	}
	return 0
}

func (x *ConsensusRequestPB) GetHtLeaseExpiration() uint64 {
	if x != nil && x.HtLeaseExpiration != nil {
		return *x.HtLeaseExpiration
	}
	return 0
}

func (x *ConsensusRequestPB) GetPropagatedSafeTime() uint64 {
	if x != nil && x.PropagatedSafeTime != nil {
		return *x.PropagatedSafeTime
	}
	return 0
}

func (x *ConsensusRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ConsensusRequestPB) GetTraceRequested() bool {
	if x != nil && x.TraceRequested != nil {
		return *x.TraceRequested
	}
	return false
}

type ConsensusResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The uuid of the peer making the response.
	ResponderUuid []byte `protobuf:"bytes,1,opt,name=responder_uuid,json=responderUuid" json:"responder_uuid,omitempty"`
	// The current term of the peer making the response.
	// This is used to update the caller (and make it step down if it is
	// out of date).
	ResponderTerm *int64 `protobuf:"varint,2,opt,name=responder_term,json=responderTerm" json:"responder_term,omitempty"`
	// The current consensus status of the receiver peer.
	Status *ConsensusStatusPB `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	// A generic error message (such as tablet not found), per operation
	// error messages are sent along with the consensus status.
	Error *tserver.TabletServerErrorPB `protobuf:"bytes,999,opt,name=error" json:"error,omitempty"`
	// Number of SST files in this follower regular db.
	NumSstFiles *int64 `protobuf:"varint,5,opt,name=num_sst_files,json=numSstFiles" json:"num_sst_files,omitempty"`
	// Hybrid time on the follower when this request was processed.
	PropagatedHybridTime *uint64 `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// The trace for the RPC as a string, returned only if requested.
	TraceBuffer   *string `protobuf:"bytes,7,opt,name=trace_buffer,json=traceBuffer" json:"trace_buffer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusResponsePB) Reset() {
	*x = ConsensusResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusResponsePB) ProtoMessage() {}

func (x *ConsensusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusResponsePB.ProtoReflect.Descriptor instead.
func (*ConsensusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{12}
}

func (x *ConsensusResponsePB) GetResponderUuid() []byte {
	if x != nil {
		return x.ResponderUuid
	}
	return nil
}

func (x *ConsensusResponsePB) GetResponderTerm() int64 {
	if x != nil && x.ResponderTerm != nil {
		return *x.ResponderTerm
	}
	return 0
}

func (x *ConsensusResponsePB) GetStatus() *ConsensusStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ConsensusResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ConsensusResponsePB) GetNumSstFiles() int64 {
	if x != nil && x.NumSstFiles != nil {
		return *x.NumSstFiles
	}
	return 0
}

func (x *ConsensusResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ConsensusResponsePB) GetTraceBuffer() string {
	if x != nil && x.TraceBuffer != nil {
		return *x.TraceBuffer
	}
	return ""
}

type MultiRaftConsensusRequestPB struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ConsensusRequest []*ConsensusRequestPB  `protobuf:"bytes,1,rep,name=consensus_request,json=consensusRequest" json:"consensus_request,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MultiRaftConsensusRequestPB) Reset() {
	*x = MultiRaftConsensusRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiRaftConsensusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRaftConsensusRequestPB) ProtoMessage() {}

func (x *MultiRaftConsensusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRaftConsensusRequestPB.ProtoReflect.Descriptor instead.
func (*MultiRaftConsensusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{13}
}

func (x *MultiRaftConsensusRequestPB) GetConsensusRequest() []*ConsensusRequestPB {
	if x != nil {
		return x.ConsensusRequest
	}
	return nil
}

type MultiRaftConsensusResponsePB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ConsensusResponse []*ConsensusResponsePB `protobuf:"bytes,1,rep,name=consensus_response,json=consensusResponse" json:"consensus_response,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MultiRaftConsensusResponsePB) Reset() {
	*x = MultiRaftConsensusResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiRaftConsensusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiRaftConsensusResponsePB) ProtoMessage() {}

func (x *MultiRaftConsensusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiRaftConsensusResponsePB.ProtoReflect.Descriptor instead.
func (*MultiRaftConsensusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{14}
}

func (x *MultiRaftConsensusResponsePB) GetConsensusResponse() []*ConsensusResponsePB {
	if x != nil {
		return x.ConsensusResponse
	}
	return nil
}

// A message reflecting the status of an in-flight transaction.
type OperationStatusPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpId          *common.OpIdPB         `protobuf:"bytes,1,req,name=op_id,json=opId" json:"op_id,omitempty"`
	OperationType *OperationType         `protobuf:"varint,2,req,name=operation_type,json=operationType,enum=yb.consensus.OperationType" json:"operation_type,omitempty"`
	// Time the transaction has been in flight.
	RunningForMicros *int64 `protobuf:"varint,3,req,name=running_for_micros,json=runningForMicros" json:"running_for_micros,omitempty"`
	// Quick human-readable description (e.g., ToString() output).
	Description *string `protobuf:"bytes,4,req,name=description" json:"description,omitempty"`
	// If tracing is enabled when viewing the transaction, the trace
	// buffer is copied here.
	TraceBuffer   *string `protobuf:"bytes,6,opt,name=trace_buffer,json=traceBuffer" json:"trace_buffer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationStatusPB) Reset() {
	*x = OperationStatusPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationStatusPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStatusPB) ProtoMessage() {}

func (x *OperationStatusPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStatusPB.ProtoReflect.Descriptor instead.
func (*OperationStatusPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{15}
}

func (x *OperationStatusPB) GetOpId() *common.OpIdPB {
	if x != nil {
		return x.OpId
	}
	return nil
}

func (x *OperationStatusPB) GetOperationType() OperationType {
	if x != nil && x.OperationType != nil {
		return *x.OperationType
	}
	return OperationType_UNKNOWN_OP
}

func (x *OperationStatusPB) GetRunningForMicros() int64 {
	if x != nil && x.RunningForMicros != nil {
		return *x.RunningForMicros
	}
	return 0
}

func (x *OperationStatusPB) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *OperationStatusPB) GetTraceBuffer() string {
	if x != nil && x.TraceBuffer != nil {
		return *x.TraceBuffer
	}
	return ""
}

type GetNodeInstanceRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeInstanceRequestPB) Reset() {
	*x = GetNodeInstanceRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeInstanceRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInstanceRequestPB) ProtoMessage() {}

func (x *GetNodeInstanceRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInstanceRequestPB.ProtoReflect.Descriptor instead.
func (*GetNodeInstanceRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{16}
}

type GetNodeInstanceResponsePB struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	NodeInstance  *common.NodeInstancePB       `protobuf:"bytes,1,opt,name=node_instance,json=nodeInstance" json:"node_instance,omitempty"`
	Registration  *common.ServerRegistrationPB `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeInstanceResponsePB) Reset() {
	*x = GetNodeInstanceResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeInstanceResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInstanceResponsePB) ProtoMessage() {}

func (x *GetNodeInstanceResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInstanceResponsePB.ProtoReflect.Descriptor instead.
func (*GetNodeInstanceResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{17}
}

func (x *GetNodeInstanceResponsePB) GetNodeInstance() *common.NodeInstancePB {
	if x != nil {
		return x.NodeInstance
	}
	return nil
}

func (x *GetNodeInstanceResponsePB) GetRegistration() *common.ServerRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

// Message that makes the local peer run leader election to be elected leader.
// Assumes that a tablet with 'tablet_id' exists.
type RunLeaderElectionRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// the id of the tablet
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// The id of the last operation the current leader has committed to its log.
	// When specified, the peer must wait till the operation has been committed
	// to its log before starting the election to be qualified as a leader.
	CommittedIndex *common.OpIdPB `protobuf:"bytes,3,opt,name=committed_index,json=committedIndex" json:"committed_index,omitempty"`
	// UUID of old leader, that requested this election.
	// If we lost election, we would notify originator about this fact.
	// So it would reset its withold timeout and try to become a leader again.
	OriginatorUuid      []byte `protobuf:"bytes,4,opt,name=originator_uuid,json=originatorUuid" json:"originator_uuid,omitempty"`
	SuppressVoteRequest *bool  `protobuf:"varint,5,opt,name=suppress_vote_request,json=suppressVoteRequest" json:"suppress_vote_request,omitempty"`
	InitialElection     *bool  `protobuf:"varint,6,opt,name=initial_election,json=initialElection" json:"initial_election,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RunLeaderElectionRequestPB) Reset() {
	*x = RunLeaderElectionRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLeaderElectionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLeaderElectionRequestPB) ProtoMessage() {}

func (x *RunLeaderElectionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLeaderElectionRequestPB.ProtoReflect.Descriptor instead.
func (*RunLeaderElectionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{18}
}

func (x *RunLeaderElectionRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *RunLeaderElectionRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *RunLeaderElectionRequestPB) GetCommittedIndex() *common.OpIdPB {
	if x != nil {
		return x.CommittedIndex
	}
	return nil
}

func (x *RunLeaderElectionRequestPB) GetOriginatorUuid() []byte {
	if x != nil {
		return x.OriginatorUuid
	}
	return nil
}

func (x *RunLeaderElectionRequestPB) GetSuppressVoteRequest() bool {
	if x != nil && x.SuppressVoteRequest != nil {
		return *x.SuppressVoteRequest
	}
	return false
}

func (x *RunLeaderElectionRequestPB) GetInitialElection() bool {
	if x != nil && x.InitialElection != nil {
		return *x.InitialElection
	}
	return false
}

type RunLeaderElectionResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A generic error message (such as tablet not found).
	Error         *tserver.TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunLeaderElectionResponsePB) Reset() {
	*x = RunLeaderElectionResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLeaderElectionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLeaderElectionResponsePB) ProtoMessage() {}

func (x *RunLeaderElectionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLeaderElectionResponsePB.ProtoReflect.Descriptor instead.
func (*RunLeaderElectionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{19}
}

func (x *RunLeaderElectionResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type LeaderElectionLostRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	// It is originator_uuid from RunLeaderElectionRequestPB
	DestUuid []byte `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// the id of the tablet
	TabletId []byte `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// UUID of server that lost election
	ElectionLostByUuid []byte `protobuf:"bytes,3,opt,name=election_lost_by_uuid,json=electionLostByUuid" json:"election_lost_by_uuid,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LeaderElectionLostRequestPB) Reset() {
	*x = LeaderElectionLostRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderElectionLostRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderElectionLostRequestPB) ProtoMessage() {}

func (x *LeaderElectionLostRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderElectionLostRequestPB.ProtoReflect.Descriptor instead.
func (*LeaderElectionLostRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{20}
}

func (x *LeaderElectionLostRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *LeaderElectionLostRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *LeaderElectionLostRequestPB) GetElectionLostByUuid() []byte {
	if x != nil {
		return x.ElectionLostByUuid
	}
	return nil
}

type LeaderElectionLostResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A generic error message (such as tablet not found).
	Error         *tserver.TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderElectionLostResponsePB) Reset() {
	*x = LeaderElectionLostResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderElectionLostResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderElectionLostResponsePB) ProtoMessage() {}

func (x *LeaderElectionLostResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderElectionLostResponsePB.ProtoReflect.Descriptor instead.
func (*LeaderElectionLostResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{21}
}

func (x *LeaderElectionLostResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type LeaderStepDownRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// The id of the tablet.
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// UUID of the server that should run the election to become the new leader.
	NewLeaderUuid []byte `protobuf:"bytes,3,opt,name=new_leader_uuid,json=newLeaderUuid" json:"new_leader_uuid,omitempty"`
	// Used in tests to ignore check for new leader conditions.
	ForceStepDown *bool `protobuf:"varint,4,opt,name=force_step_down,json=forceStepDown" json:"force_step_down,omitempty"`
	// If new_leader_uuid is not specified, the current leader will attempt
	// to gracefully transfer leadership to another peer. Setting this flag
	// disables that behavior.
	DisableGracefulTransition *bool `protobuf:"varint,5,opt,name=disable_graceful_transition,json=disableGracefulTransition" json:"disable_graceful_transition,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LeaderStepDownRequestPB) Reset() {
	*x = LeaderStepDownRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderStepDownRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderStepDownRequestPB) ProtoMessage() {}

func (x *LeaderStepDownRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderStepDownRequestPB.ProtoReflect.Descriptor instead.
func (*LeaderStepDownRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{22}
}

func (x *LeaderStepDownRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *LeaderStepDownRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *LeaderStepDownRequestPB) GetNewLeaderUuid() []byte {
	if x != nil {
		return x.NewLeaderUuid
	}
	return nil
}

func (x *LeaderStepDownRequestPB) GetForceStepDown() bool {
	if x != nil && x.ForceStepDown != nil {
		return *x.ForceStepDown
	}
	return false
}

func (x *LeaderStepDownRequestPB) GetDisableGracefulTransition() bool {
	if x != nil && x.DisableGracefulTransition != nil {
		return *x.DisableGracefulTransition
	}
	return false
}

type LeaderStepDownResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A generic error message (such as tablet not found).
	Error *tserver.TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Time in milliseconds since previous election failure with the same intended ("protege") leader.
	// This is used to track the remaining amount of time during which the load balancer should not
	// attempt to ask (any) leader of this tablet to step down in favor of the same peer.
	TimeSinceElectionFailureMs *int64 `protobuf:"varint,2,opt,name=time_since_election_failure_ms,json=timeSinceElectionFailureMs" json:"time_since_election_failure_ms,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *LeaderStepDownResponsePB) Reset() {
	*x = LeaderStepDownResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderStepDownResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderStepDownResponsePB) ProtoMessage() {}

func (x *LeaderStepDownResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderStepDownResponsePB.ProtoReflect.Descriptor instead.
func (*LeaderStepDownResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{23}
}

func (x *LeaderStepDownResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *LeaderStepDownResponsePB) GetTimeSinceElectionFailureMs() int64 {
	if x != nil && x.TimeSinceElectionFailureMs != nil {
		return *x.TimeSinceElectionFailureMs
	}
	return 0
}

type GetLastOpIdRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// the id of the tablet
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Whether to return the last-received or last-committed OpId.
	OpidType      *OpIdType      `protobuf:"varint,3,opt,name=opid_type,json=opidType,enum=yb.consensus.OpIdType,def=1" json:"opid_type,omitempty"`
	OpType        *OperationType `protobuf:"varint,4,opt,name=op_type,json=opType,enum=yb.consensus.OperationType" json:"op_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GetLastOpIdRequestPB fields.
const (
	Default_GetLastOpIdRequestPB_OpidType = OpIdType_RECEIVED_OPID
)

func (x *GetLastOpIdRequestPB) Reset() {
	*x = GetLastOpIdRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastOpIdRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastOpIdRequestPB) ProtoMessage() {}

func (x *GetLastOpIdRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastOpIdRequestPB.ProtoReflect.Descriptor instead.
func (*GetLastOpIdRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{24}
}

func (x *GetLastOpIdRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *GetLastOpIdRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetLastOpIdRequestPB) GetOpidType() OpIdType {
	if x != nil && x.OpidType != nil {
		return *x.OpidType
	}
	return Default_GetLastOpIdRequestPB_OpidType
}

func (x *GetLastOpIdRequestPB) GetOpType() OperationType {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return OperationType_UNKNOWN_OP
}

type GetLastOpIdResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Opid  *common.OpIdPB         `protobuf:"bytes,1,opt,name=opid" json:"opid,omitempty"`
	// A generic error message (such as tablet not found).
	Error         *tserver.TabletServerErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLastOpIdResponsePB) Reset() {
	*x = GetLastOpIdResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastOpIdResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastOpIdResponsePB) ProtoMessage() {}

func (x *GetLastOpIdResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastOpIdResponsePB.ProtoReflect.Descriptor instead.
func (*GetLastOpIdResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{25}
}

func (x *GetLastOpIdResponsePB) GetOpid() *common.OpIdPB {
	if x != nil {
		return x.Opid
	}
	return nil
}

func (x *GetLastOpIdResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetConsensusStateRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// The id of the tablet.
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Whether to fetch the committed or active consensus state.
	Type          *ConsensusConfigType `protobuf:"varint,3,opt,name=type,enum=yb.consensus.ConsensusConfigType,def=1" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GetConsensusStateRequestPB fields.
const (
	Default_GetConsensusStateRequestPB_Type = ConsensusConfigType_CONSENSUS_CONFIG_COMMITTED
)

func (x *GetConsensusStateRequestPB) Reset() {
	*x = GetConsensusStateRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsensusStateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusStateRequestPB) ProtoMessage() {}

func (x *GetConsensusStateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusStateRequestPB.ProtoReflect.Descriptor instead.
func (*GetConsensusStateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{26}
}

func (x *GetConsensusStateRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *GetConsensusStateRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetConsensusStateRequestPB) GetType() ConsensusConfigType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_GetConsensusStateRequestPB_Type
}

type GetConsensusStateResponsePB struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Cstate *ConsensusStatePB      `protobuf:"bytes,1,opt,name=cstate" json:"cstate,omitempty"`
	// A generic error message (such as tablet not found).
	Error *tserver.TabletServerErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// Allows returning the leader lease status in the same RPC. Useful for waiting for the leader
	// to be allowed to serve requests.
	LeaderLeaseStatus *LeaderLeaseStatus `protobuf:"varint,3,opt,name=leader_lease_status,json=leaderLeaseStatus,enum=yb.consensus.LeaderLeaseStatus" json:"leader_lease_status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetConsensusStateResponsePB) Reset() {
	*x = GetConsensusStateResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsensusStateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsensusStateResponsePB) ProtoMessage() {}

func (x *GetConsensusStateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsensusStateResponsePB.ProtoReflect.Descriptor instead.
func (*GetConsensusStateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{27}
}

func (x *GetConsensusStateResponsePB) GetCstate() *ConsensusStatePB {
	if x != nil {
		return x.Cstate
	}
	return nil
}

func (x *GetConsensusStateResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetConsensusStateResponsePB) GetLeaderLeaseStatus() LeaderLeaseStatus {
	if x != nil && x.LeaderLeaseStatus != nil {
		return *x.LeaderLeaseStatus
	}
	return LeaderLeaseStatus_HAS_LEASE
}

type StartRemoteBootstrapRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid            []byte `protobuf:"bytes,5,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId            []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SplitParentTabletId []byte `protobuf:"bytes,8,opt,name=split_parent_tablet_id,json=splitParentTabletId" json:"split_parent_tablet_id,omitempty"`
	// Identification for the host we are bootstrapping from.
	BootstrapSourcePeerUuid      []byte               `protobuf:"bytes,2,req,name=bootstrap_source_peer_uuid,json=bootstrapSourcePeerUuid" json:"bootstrap_source_peer_uuid,omitempty"`
	BootstrapSourcePrivateAddr   []*common.HostPortPB `protobuf:"bytes,3,rep,name=bootstrap_source_private_addr,json=bootstrapSourcePrivateAddr" json:"bootstrap_source_private_addr,omitempty"`
	BootstrapSourceBroadcastAddr []*common.HostPortPB `protobuf:"bytes,6,rep,name=bootstrap_source_broadcast_addr,json=bootstrapSourceBroadcastAddr" json:"bootstrap_source_broadcast_addr,omitempty"`
	BootstrapSourceCloudInfo     *common.CloudInfoPB  `protobuf:"bytes,7,opt,name=bootstrap_source_cloud_info,json=bootstrapSourceCloudInfo" json:"bootstrap_source_cloud_info,omitempty"`
	// The caller's term. In the case that the target of this request has a
	// TOMBSTONED replica with a term higher than this one, the request will fail.
	CallerTerm *int64 `protobuf:"varint,4,opt,name=caller_term,json=callerTerm,def=-1" json:"caller_term,omitempty"`
	// When the remote bootstrap request is served by a closest follower to the
	// new peer, the new peer needs to update the leader on progessing the log
	// anchor.
	IsServedByTabletLeader    *bool                `protobuf:"varint,9,opt,name=is_served_by_tablet_leader,json=isServedByTabletLeader,def=1" json:"is_served_by_tablet_leader,omitempty"`
	TabletLeaderPeerUuid      []byte               `protobuf:"bytes,10,opt,name=tablet_leader_peer_uuid,json=tabletLeaderPeerUuid" json:"tablet_leader_peer_uuid,omitempty"`
	TabletLeaderPrivateAddr   []*common.HostPortPB `protobuf:"bytes,11,rep,name=tablet_leader_private_addr,json=tabletLeaderPrivateAddr" json:"tablet_leader_private_addr,omitempty"`
	TabletLeaderBroadcastAddr []*common.HostPortPB `protobuf:"bytes,12,rep,name=tablet_leader_broadcast_addr,json=tabletLeaderBroadcastAddr" json:"tablet_leader_broadcast_addr,omitempty"`
	TabletLeaderCloudInfo     *common.CloudInfoPB  `protobuf:"bytes,13,opt,name=tablet_leader_cloud_info,json=tabletLeaderCloudInfo" json:"tablet_leader_cloud_info,omitempty"`
	// If this tablet was created by cloning, the sequence number of the operation that created it and
	// the clone source tablet's id. This is used to reject RBS requests if the source tablet is
	// present on the destination and has not applied the clone yet.
	CloneSourceSeqNo    *uint32 `protobuf:"varint,14,opt,name=clone_source_seq_no,json=cloneSourceSeqNo" json:"clone_source_seq_no,omitempty"`
	CloneSourceTabletId *string `protobuf:"bytes,15,opt,name=clone_source_tablet_id,json=cloneSourceTabletId" json:"clone_source_tablet_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for StartRemoteBootstrapRequestPB fields.
const (
	Default_StartRemoteBootstrapRequestPB_CallerTerm             = int64(-1)
	Default_StartRemoteBootstrapRequestPB_IsServedByTabletLeader = bool(true)
)

func (x *StartRemoteBootstrapRequestPB) Reset() {
	*x = StartRemoteBootstrapRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRemoteBootstrapRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRemoteBootstrapRequestPB) ProtoMessage() {}

func (x *StartRemoteBootstrapRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRemoteBootstrapRequestPB.ProtoReflect.Descriptor instead.
func (*StartRemoteBootstrapRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{28}
}

func (x *StartRemoteBootstrapRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetSplitParentTabletId() []byte {
	if x != nil {
		return x.SplitParentTabletId
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetBootstrapSourcePeerUuid() []byte {
	if x != nil {
		return x.BootstrapSourcePeerUuid
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetBootstrapSourcePrivateAddr() []*common.HostPortPB {
	if x != nil {
		return x.BootstrapSourcePrivateAddr
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetBootstrapSourceBroadcastAddr() []*common.HostPortPB {
	if x != nil {
		return x.BootstrapSourceBroadcastAddr
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetBootstrapSourceCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.BootstrapSourceCloudInfo
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetCallerTerm() int64 {
	if x != nil && x.CallerTerm != nil {
		return *x.CallerTerm
	}
	return Default_StartRemoteBootstrapRequestPB_CallerTerm
}

func (x *StartRemoteBootstrapRequestPB) GetIsServedByTabletLeader() bool {
	if x != nil && x.IsServedByTabletLeader != nil {
		return *x.IsServedByTabletLeader
	}
	return Default_StartRemoteBootstrapRequestPB_IsServedByTabletLeader
}

func (x *StartRemoteBootstrapRequestPB) GetTabletLeaderPeerUuid() []byte {
	if x != nil {
		return x.TabletLeaderPeerUuid
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetTabletLeaderPrivateAddr() []*common.HostPortPB {
	if x != nil {
		return x.TabletLeaderPrivateAddr
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetTabletLeaderBroadcastAddr() []*common.HostPortPB {
	if x != nil {
		return x.TabletLeaderBroadcastAddr
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetTabletLeaderCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.TabletLeaderCloudInfo
	}
	return nil
}

func (x *StartRemoteBootstrapRequestPB) GetCloneSourceSeqNo() uint32 {
	if x != nil && x.CloneSourceSeqNo != nil {
		return *x.CloneSourceSeqNo
	}
	return 0
}

func (x *StartRemoteBootstrapRequestPB) GetCloneSourceTabletId() string {
	if x != nil && x.CloneSourceTabletId != nil {
		return *x.CloneSourceTabletId
	}
	return ""
}

type StartRemoteBootstrapResponsePB struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Error         *tserver.TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRemoteBootstrapResponsePB) Reset() {
	*x = StartRemoteBootstrapResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRemoteBootstrapResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRemoteBootstrapResponsePB) ProtoMessage() {}

func (x *StartRemoteBootstrapResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRemoteBootstrapResponsePB.ProtoReflect.Descriptor instead.
func (*StartRemoteBootstrapResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{29}
}

func (x *StartRemoteBootstrapResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// An unsafe change configuration request for the tablet with 'tablet_id'.
type UnsafeChangeConfigRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Sender identification, it could be a static string as well.
	CallerId []byte `protobuf:"bytes,3,req,name=caller_id,json=callerId" json:"caller_id,omitempty"`
	// The raft config sent to destination server.
	// Only the 'permanent_uuid' of each peer in the config is
	// required (address-related information is ignored by the server).
	// The peers specified in the 'new_config' are required to be a
	// subset of (or equal to) the peers in the committed config on the
	// destination replica.
	NewConfig     *RaftConfigPB `protobuf:"bytes,4,req,name=new_config,json=newConfig" json:"new_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsafeChangeConfigRequestPB) Reset() {
	*x = UnsafeChangeConfigRequestPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsafeChangeConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsafeChangeConfigRequestPB) ProtoMessage() {}

func (x *UnsafeChangeConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsafeChangeConfigRequestPB.ProtoReflect.Descriptor instead.
func (*UnsafeChangeConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{30}
}

func (x *UnsafeChangeConfigRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *UnsafeChangeConfigRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *UnsafeChangeConfigRequestPB) GetCallerId() []byte {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *UnsafeChangeConfigRequestPB) GetNewConfig() *RaftConfigPB {
	if x != nil {
		return x.NewConfig
	}
	return nil
}

// The unsafe change configuration response. 'error' field is set if operation failed.
type UnsafeChangeConfigResponsePB struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Error         *tserver.TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsafeChangeConfigResponsePB) Reset() {
	*x = UnsafeChangeConfigResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsafeChangeConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsafeChangeConfigResponsePB) ProtoMessage() {}

func (x *UnsafeChangeConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsafeChangeConfigResponsePB.ProtoReflect.Descriptor instead.
func (*UnsafeChangeConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{31}
}

func (x *UnsafeChangeConfigResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ChangeAutoFlagsConfigOpResponsePB struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Error         *tserver.TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeAutoFlagsConfigOpResponsePB) Reset() {
	*x = ChangeAutoFlagsConfigOpResponsePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeAutoFlagsConfigOpResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAutoFlagsConfigOpResponsePB) ProtoMessage() {}

func (x *ChangeAutoFlagsConfigOpResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAutoFlagsConfigOpResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeAutoFlagsConfigOpResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{32}
}

func (x *ChangeAutoFlagsConfigOpResponsePB) GetError() *tserver.TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Retryable requests.
type ReplicatedRetryableRequestRangePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FirstId       *int64                 `protobuf:"varint,1,opt,name=first_id,json=firstId" json:"first_id,omitempty"`
	LastId        *int64                 `protobuf:"varint,2,opt,name=last_id,json=lastId" json:"last_id,omitempty"`
	MinOpId       *common.OpIdPB         `protobuf:"bytes,3,opt,name=min_op_id,json=minOpId" json:"min_op_id,omitempty"`
	MinTime       *uint64                `protobuf:"varint,4,opt,name=min_time,json=minTime" json:"min_time,omitempty"`
	MaxTime       *uint64                `protobuf:"varint,5,opt,name=max_time,json=maxTime" json:"max_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicatedRetryableRequestRangePB) Reset() {
	*x = ReplicatedRetryableRequestRangePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicatedRetryableRequestRangePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedRetryableRequestRangePB) ProtoMessage() {}

func (x *ReplicatedRetryableRequestRangePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedRetryableRequestRangePB.ProtoReflect.Descriptor instead.
func (*ReplicatedRetryableRequestRangePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{33}
}

func (x *ReplicatedRetryableRequestRangePB) GetFirstId() int64 {
	if x != nil && x.FirstId != nil {
		return *x.FirstId
	}
	return 0
}

func (x *ReplicatedRetryableRequestRangePB) GetLastId() int64 {
	if x != nil && x.LastId != nil {
		return *x.LastId
	}
	return 0
}

func (x *ReplicatedRetryableRequestRangePB) GetMinOpId() *common.OpIdPB {
	if x != nil {
		return x.MinOpId
	}
	return nil
}

func (x *ReplicatedRetryableRequestRangePB) GetMinTime() uint64 {
	if x != nil && x.MinTime != nil {
		return *x.MinTime
	}
	return 0
}

func (x *ReplicatedRetryableRequestRangePB) GetMaxTime() uint64 {
	if x != nil && x.MaxTime != nil {
		return *x.MaxTime
	}
	return 0
}

type ClientReplicatedRetryableRequestRangesPB struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	ClientId1     *uint64                              `protobuf:"fixed64,1,opt,name=client_id1,json=clientId1" json:"client_id1,omitempty"`
	ClientId2     *uint64                              `protobuf:"fixed64,2,opt,name=client_id2,json=clientId2" json:"client_id2,omitempty"`
	Range         []*ReplicatedRetryableRequestRangePB `protobuf:"bytes,3,rep,name=range" json:"range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientReplicatedRetryableRequestRangesPB) Reset() {
	*x = ClientReplicatedRetryableRequestRangesPB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientReplicatedRetryableRequestRangesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReplicatedRetryableRequestRangesPB) ProtoMessage() {}

func (x *ClientReplicatedRetryableRequestRangesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReplicatedRetryableRequestRangesPB.ProtoReflect.Descriptor instead.
func (*ClientReplicatedRetryableRequestRangesPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{34}
}

func (x *ClientReplicatedRetryableRequestRangesPB) GetClientId1() uint64 {
	if x != nil && x.ClientId1 != nil {
		return *x.ClientId1
	}
	return 0
}

func (x *ClientReplicatedRetryableRequestRangesPB) GetClientId2() uint64 {
	if x != nil && x.ClientId2 != nil {
		return *x.ClientId2
	}
	return 0
}

func (x *ClientReplicatedRetryableRequestRangesPB) GetRange() []*ReplicatedRetryableRequestRangePB {
	if x != nil {
		return x.Range
	}
	return nil
}

type TabletBootstrapStatePB struct {
	state               protoimpl.MessageState                      `protogen:"open.v1"`
	LastOpId            *common.OpIdPB                              `protobuf:"bytes,1,opt,name=last_op_id,json=lastOpId" json:"last_op_id,omitempty"`
	ClientRequests      []*ClientReplicatedRetryableRequestRangesPB `protobuf:"bytes,2,rep,name=client_requests,json=clientRequests" json:"client_requests,omitempty"`
	MinReplayTxnStartHt *uint64                                     `protobuf:"fixed64,4,opt,name=min_replay_txn_start_ht,json=minReplayTxnStartHt" json:"min_replay_txn_start_ht,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TabletBootstrapStatePB) Reset() {
	*x = TabletBootstrapStatePB{}
	mi := &file_yb_consensus_consensus_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletBootstrapStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletBootstrapStatePB) ProtoMessage() {}

func (x *TabletBootstrapStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_consensus_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletBootstrapStatePB.ProtoReflect.Descriptor instead.
func (*TabletBootstrapStatePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_consensus_proto_rawDescGZIP(), []int{35}
}

func (x *TabletBootstrapStatePB) GetLastOpId() *common.OpIdPB {
	if x != nil {
		return x.LastOpId
	}
	return nil
}

func (x *TabletBootstrapStatePB) GetClientRequests() []*ClientReplicatedRetryableRequestRangesPB {
	if x != nil {
		return x.ClientRequests
	}
	return nil
}

func (x *TabletBootstrapStatePB) GetMinReplayTxnStartHt() uint64 {
	if x != nil && x.MinReplayTxnStartHt != nil {
		return *x.MinReplayTxnStartHt
	}
	return 0
}

var File_yb_consensus_consensus_proto protoreflect.FileDescriptor

var file_yb_consensus_consensus_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a, 0x1a, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x79, 0x62,
	0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6f,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52,
	0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x42, 0x52, 0x09, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x8c, 0x02, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65,
	0x72, 0x50, 0x42, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x63,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x61, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x22, 0x70, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x73, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x74,
	0x6f, 0x66, 0x66, 0x50, 0x42, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x48,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x63,
	0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x48, 0x74, 0x3a,
	0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x22, 0xb3, 0x08, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x06, 0x52, 0x0a, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x08, 0x01, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x42,
	0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x08, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x42,
	0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52,
	0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02,
	0x08, 0x01, 0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x74, 0x6f, 0x66,
	0x66, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x62, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x42, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c,
	0x6e, 0x6f, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xe7, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x52, 0x0b, 0x6e, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a,
	0x0d, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x0e, 0x4e, 0x6f,
	0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x4f,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa4, 0x02,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x12, 0x2f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e,
	0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e,
	0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x64, 0x78, 0x12,
	0x2d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50,
	0x42, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x4a,
	0x0a, 0x10, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x12, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x8b, 0x04, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x17, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x48, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0xe6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x9b, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x2d, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70,
	0x49, 0x64, 0x50, 0x42, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e,
	0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x03,
	0x6f, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x68, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x68, 0x74, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0xd1, 0x02,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x65, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x73, 0x74, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d,
	0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x22, 0x6c, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x4d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x70, 0x0a, 0x1c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x50, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64,
	0x50, 0x42, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22,
	0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x92, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x42, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x93, 0x02, 0x0a, 0x1a, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x1b, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8a, 0x01, 0x0a,
	0x1b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x73, 0x74, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x1c, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xe3, 0x01, 0x0a, 0x17, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x44,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x73, 0x22, 0xca,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x70, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x1e, 0x0a, 0x04, 0x6f, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x04,
	0x6f, 0x70, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x44, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x06, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf, 0x07, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x17, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x1d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79,
	0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x1a, 0x62, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x55, 0x0a, 0x1f, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50,
	0x42, 0x52, 0x1c, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x4e, 0x0a, 0x1b, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x18, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x40, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x16,
	0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4b, 0x0a,
	0x1a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50,
	0x42, 0x52, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4f, 0x0a, 0x1c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42,
	0x52, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x48, 0x0a, 0x18, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x15,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x71, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x1b, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x55, 0x0a, 0x1c, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x21, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x42, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xaf, 0x01, 0x0a, 0x28, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x12, 0x45, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x42, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xdf, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x50, 0x42, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x74, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x52, 0x49,
	0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x02, 0x32, 0xd1,
	0x09, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x22, 0x06, 0x82, 0xb5, 0x18,
	0x02, 0x08, 0x03, 0x12, 0x71, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x61, 0x66, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12,
	0x29, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x51, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1b,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1c, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x6b, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x6b, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x0e,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x25,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x44,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x71, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
})

var (
	file_yb_consensus_consensus_proto_rawDescOnce sync.Once
	file_yb_consensus_consensus_proto_rawDescData []byte
)

func file_yb_consensus_consensus_proto_rawDescGZIP() []byte {
	file_yb_consensus_consensus_proto_rawDescOnce.Do(func() {
		file_yb_consensus_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_consensus_consensus_proto_rawDesc), len(file_yb_consensus_consensus_proto_rawDesc)))
	})
	return file_yb_consensus_consensus_proto_rawDescData
}

var file_yb_consensus_consensus_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yb_consensus_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_yb_consensus_consensus_proto_goTypes = []any{
	(DriverType)(0),                                  // 0: yb.consensus.DriverType
	(*ChangeConfigRecordPB)(nil),                     // 1: yb.consensus.ChangeConfigRecordPB
	(*ChangeConfigRequestPB)(nil),                    // 2: yb.consensus.ChangeConfigRequestPB
	(*ChangeConfigResponsePB)(nil),                   // 3: yb.consensus.ChangeConfigResponsePB
	(*HistoryCutoffPB)(nil),                          // 4: yb.consensus.HistoryCutoffPB
	(*ReplicateMsg)(nil),                             // 5: yb.consensus.ReplicateMsg
	(*NoOpRequestPB)(nil),                            // 6: yb.consensus.NoOpRequestPB
	(*NoOpResponsePB)(nil),                           // 7: yb.consensus.NoOpResponsePB
	(*PerOpErrorPB)(nil),                             // 8: yb.consensus.PerOpErrorPB
	(*ConsensusStatusPB)(nil),                        // 9: yb.consensus.ConsensusStatusPB
	(*VoteRequestPB)(nil),                            // 10: yb.consensus.VoteRequestPB
	(*VoteResponsePB)(nil),                           // 11: yb.consensus.VoteResponsePB
	(*ConsensusRequestPB)(nil),                       // 12: yb.consensus.ConsensusRequestPB
	(*ConsensusResponsePB)(nil),                      // 13: yb.consensus.ConsensusResponsePB
	(*MultiRaftConsensusRequestPB)(nil),              // 14: yb.consensus.MultiRaftConsensusRequestPB
	(*MultiRaftConsensusResponsePB)(nil),             // 15: yb.consensus.MultiRaftConsensusResponsePB
	(*OperationStatusPB)(nil),                        // 16: yb.consensus.OperationStatusPB
	(*GetNodeInstanceRequestPB)(nil),                 // 17: yb.consensus.GetNodeInstanceRequestPB
	(*GetNodeInstanceResponsePB)(nil),                // 18: yb.consensus.GetNodeInstanceResponsePB
	(*RunLeaderElectionRequestPB)(nil),               // 19: yb.consensus.RunLeaderElectionRequestPB
	(*RunLeaderElectionResponsePB)(nil),              // 20: yb.consensus.RunLeaderElectionResponsePB
	(*LeaderElectionLostRequestPB)(nil),              // 21: yb.consensus.LeaderElectionLostRequestPB
	(*LeaderElectionLostResponsePB)(nil),             // 22: yb.consensus.LeaderElectionLostResponsePB
	(*LeaderStepDownRequestPB)(nil),                  // 23: yb.consensus.LeaderStepDownRequestPB
	(*LeaderStepDownResponsePB)(nil),                 // 24: yb.consensus.LeaderStepDownResponsePB
	(*GetLastOpIdRequestPB)(nil),                     // 25: yb.consensus.GetLastOpIdRequestPB
	(*GetLastOpIdResponsePB)(nil),                    // 26: yb.consensus.GetLastOpIdResponsePB
	(*GetConsensusStateRequestPB)(nil),               // 27: yb.consensus.GetConsensusStateRequestPB
	(*GetConsensusStateResponsePB)(nil),              // 28: yb.consensus.GetConsensusStateResponsePB
	(*StartRemoteBootstrapRequestPB)(nil),            // 29: yb.consensus.StartRemoteBootstrapRequestPB
	(*StartRemoteBootstrapResponsePB)(nil),           // 30: yb.consensus.StartRemoteBootstrapResponsePB
	(*UnsafeChangeConfigRequestPB)(nil),              // 31: yb.consensus.UnsafeChangeConfigRequestPB
	(*UnsafeChangeConfigResponsePB)(nil),             // 32: yb.consensus.UnsafeChangeConfigResponsePB
	(*ChangeAutoFlagsConfigOpResponsePB)(nil),        // 33: yb.consensus.ChangeAutoFlagsConfigOpResponsePB
	(*ReplicatedRetryableRequestRangePB)(nil),        // 34: yb.consensus.ReplicatedRetryableRequestRangePB
	(*ClientReplicatedRetryableRequestRangesPB)(nil), // 35: yb.consensus.ClientReplicatedRetryableRequestRangesPB
	(*TabletBootstrapStatePB)(nil),                   // 36: yb.consensus.TabletBootstrapStatePB
	(*RaftConfigPB)(nil),                             // 37: yb.consensus.RaftConfigPB
	(ChangeConfigType)(0),                            // 38: yb.consensus.ChangeConfigType
	(*RaftPeerPB)(nil),                               // 39: yb.consensus.RaftPeerPB
	(*tserver.TabletServerErrorPB)(nil),              // 40: yb.tserver.TabletServerErrorPB
	(*common.OpIdPB)(nil),                            // 41: yb.OpIdPB
	(OperationType)(0),                               // 42: yb.consensus.OperationType
	(*tablet.WritePB)(nil),                           // 43: yb.tablet.WritePB
	(*tablet.ChangeMetadataRequestPB)(nil),           // 44: yb.tablet.ChangeMetadataRequestPB
	(*tablet.TransactionStatePB)(nil),                // 45: yb.tablet.TransactionStatePB
	(*tserver.TabletSnapshotOpRequestPB)(nil),        // 46: yb.tserver.TabletSnapshotOpRequestPB
	(*tablet.TruncatePB)(nil),                        // 47: yb.tablet.TruncatePB
	(*tablet.SplitTabletRequestPB)(nil),              // 48: yb.tablet.SplitTabletRequestPB
	(*common.AutoFlagsConfigPB)(nil),                 // 49: yb.AutoFlagsConfigPB
	(*tablet.CloneTabletRequestPB)(nil),              // 50: yb.tablet.CloneTabletRequestPB
	(*common.AppStatusPB)(nil),                       // 51: yb.AppStatusPB
	(*ConsensusErrorPB)(nil),                         // 52: yb.consensus.ConsensusErrorPB
	(*common.NodeInstancePB)(nil),                    // 53: yb.NodeInstancePB
	(*common.ServerRegistrationPB)(nil),              // 54: yb.ServerRegistrationPB
	(OpIdType)(0),                                    // 55: yb.consensus.OpIdType
	(ConsensusConfigType)(0),                         // 56: yb.consensus.ConsensusConfigType
	(*ConsensusStatePB)(nil),                         // 57: yb.consensus.ConsensusStatePB
	(LeaderLeaseStatus)(0),                           // 58: yb.consensus.LeaderLeaseStatus
	(*common.HostPortPB)(nil),                        // 59: yb.HostPortPB
	(*common.CloudInfoPB)(nil),                       // 60: yb.CloudInfoPB
}
var file_yb_consensus_consensus_proto_depIdxs = []int32{
	37, // 0: yb.consensus.ChangeConfigRecordPB.old_config:type_name -> yb.consensus.RaftConfigPB
	37, // 1: yb.consensus.ChangeConfigRecordPB.new_config:type_name -> yb.consensus.RaftConfigPB
	38, // 2: yb.consensus.ChangeConfigRequestPB.type:type_name -> yb.consensus.ChangeConfigType
	39, // 3: yb.consensus.ChangeConfigRequestPB.server:type_name -> yb.consensus.RaftPeerPB
	40, // 4: yb.consensus.ChangeConfigResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	41, // 5: yb.consensus.ReplicateMsg.id:type_name -> yb.OpIdPB
	42, // 6: yb.consensus.ReplicateMsg.op_type:type_name -> yb.consensus.OperationType
	43, // 7: yb.consensus.ReplicateMsg.write:type_name -> yb.tablet.WritePB
	44, // 8: yb.consensus.ReplicateMsg.change_metadata_request:type_name -> yb.tablet.ChangeMetadataRequestPB
	45, // 9: yb.consensus.ReplicateMsg.transaction_state:type_name -> yb.tablet.TransactionStatePB
	46, // 10: yb.consensus.ReplicateMsg.snapshot_request:type_name -> yb.tserver.TabletSnapshotOpRequestPB
	47, // 11: yb.consensus.ReplicateMsg.truncate:type_name -> yb.tablet.TruncatePB
	48, // 12: yb.consensus.ReplicateMsg.split_request:type_name -> yb.tablet.SplitTabletRequestPB
	1,  // 13: yb.consensus.ReplicateMsg.change_config_record:type_name -> yb.consensus.ChangeConfigRecordPB
	4,  // 14: yb.consensus.ReplicateMsg.history_cutoff:type_name -> yb.consensus.HistoryCutoffPB
	49, // 15: yb.consensus.ReplicateMsg.auto_flags_config:type_name -> yb.AutoFlagsConfigPB
	50, // 16: yb.consensus.ReplicateMsg.clone_tablet:type_name -> yb.tablet.CloneTabletRequestPB
	41, // 17: yb.consensus.ReplicateMsg.committed_op_id:type_name -> yb.OpIdPB
	6,  // 18: yb.consensus.ReplicateMsg.noop_request:type_name -> yb.consensus.NoOpRequestPB
	41, // 19: yb.consensus.PerOpErrorPB.id:type_name -> yb.OpIdPB
	51, // 20: yb.consensus.PerOpErrorPB.status:type_name -> yb.AppStatusPB
	41, // 21: yb.consensus.ConsensusStatusPB.last_received:type_name -> yb.OpIdPB
	41, // 22: yb.consensus.ConsensusStatusPB.last_received_current_leader:type_name -> yb.OpIdPB
	41, // 23: yb.consensus.ConsensusStatusPB.last_applied:type_name -> yb.OpIdPB
	52, // 24: yb.consensus.ConsensusStatusPB.error:type_name -> yb.consensus.ConsensusErrorPB
	9,  // 25: yb.consensus.VoteRequestPB.candidate_status:type_name -> yb.consensus.ConsensusStatusPB
	52, // 26: yb.consensus.VoteResponsePB.consensus_error:type_name -> yb.consensus.ConsensusErrorPB
	40, // 27: yb.consensus.VoteResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	41, // 28: yb.consensus.ConsensusRequestPB.preceding_id:type_name -> yb.OpIdPB
	41, // 29: yb.consensus.ConsensusRequestPB.committed_op_id:type_name -> yb.OpIdPB
	5,  // 30: yb.consensus.ConsensusRequestPB.ops:type_name -> yb.consensus.ReplicateMsg
	9,  // 31: yb.consensus.ConsensusResponsePB.status:type_name -> yb.consensus.ConsensusStatusPB
	40, // 32: yb.consensus.ConsensusResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	12, // 33: yb.consensus.MultiRaftConsensusRequestPB.consensus_request:type_name -> yb.consensus.ConsensusRequestPB
	13, // 34: yb.consensus.MultiRaftConsensusResponsePB.consensus_response:type_name -> yb.consensus.ConsensusResponsePB
	41, // 35: yb.consensus.OperationStatusPB.op_id:type_name -> yb.OpIdPB
	42, // 36: yb.consensus.OperationStatusPB.operation_type:type_name -> yb.consensus.OperationType
	53, // 37: yb.consensus.GetNodeInstanceResponsePB.node_instance:type_name -> yb.NodeInstancePB
	54, // 38: yb.consensus.GetNodeInstanceResponsePB.registration:type_name -> yb.ServerRegistrationPB
	41, // 39: yb.consensus.RunLeaderElectionRequestPB.committed_index:type_name -> yb.OpIdPB
	40, // 40: yb.consensus.RunLeaderElectionResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	40, // 41: yb.consensus.LeaderElectionLostResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	40, // 42: yb.consensus.LeaderStepDownResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	55, // 43: yb.consensus.GetLastOpIdRequestPB.opid_type:type_name -> yb.consensus.OpIdType
	42, // 44: yb.consensus.GetLastOpIdRequestPB.op_type:type_name -> yb.consensus.OperationType
	41, // 45: yb.consensus.GetLastOpIdResponsePB.opid:type_name -> yb.OpIdPB
	40, // 46: yb.consensus.GetLastOpIdResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	56, // 47: yb.consensus.GetConsensusStateRequestPB.type:type_name -> yb.consensus.ConsensusConfigType
	57, // 48: yb.consensus.GetConsensusStateResponsePB.cstate:type_name -> yb.consensus.ConsensusStatePB
	40, // 49: yb.consensus.GetConsensusStateResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	58, // 50: yb.consensus.GetConsensusStateResponsePB.leader_lease_status:type_name -> yb.consensus.LeaderLeaseStatus
	59, // 51: yb.consensus.StartRemoteBootstrapRequestPB.bootstrap_source_private_addr:type_name -> yb.HostPortPB
	59, // 52: yb.consensus.StartRemoteBootstrapRequestPB.bootstrap_source_broadcast_addr:type_name -> yb.HostPortPB
	60, // 53: yb.consensus.StartRemoteBootstrapRequestPB.bootstrap_source_cloud_info:type_name -> yb.CloudInfoPB
	59, // 54: yb.consensus.StartRemoteBootstrapRequestPB.tablet_leader_private_addr:type_name -> yb.HostPortPB
	59, // 55: yb.consensus.StartRemoteBootstrapRequestPB.tablet_leader_broadcast_addr:type_name -> yb.HostPortPB
	60, // 56: yb.consensus.StartRemoteBootstrapRequestPB.tablet_leader_cloud_info:type_name -> yb.CloudInfoPB
	40, // 57: yb.consensus.StartRemoteBootstrapResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	37, // 58: yb.consensus.UnsafeChangeConfigRequestPB.new_config:type_name -> yb.consensus.RaftConfigPB
	40, // 59: yb.consensus.UnsafeChangeConfigResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	40, // 60: yb.consensus.ChangeAutoFlagsConfigOpResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	41, // 61: yb.consensus.ReplicatedRetryableRequestRangePB.min_op_id:type_name -> yb.OpIdPB
	34, // 62: yb.consensus.ClientReplicatedRetryableRequestRangesPB.range:type_name -> yb.consensus.ReplicatedRetryableRequestRangePB
	41, // 63: yb.consensus.TabletBootstrapStatePB.last_op_id:type_name -> yb.OpIdPB
	35, // 64: yb.consensus.TabletBootstrapStatePB.client_requests:type_name -> yb.consensus.ClientReplicatedRetryableRequestRangesPB
	12, // 65: yb.consensus.ConsensusService.UpdateConsensus:input_type -> yb.consensus.ConsensusRequestPB
	14, // 66: yb.consensus.ConsensusService.MultiRaftUpdateConsensus:input_type -> yb.consensus.MultiRaftConsensusRequestPB
	10, // 67: yb.consensus.ConsensusService.RequestConsensusVote:input_type -> yb.consensus.VoteRequestPB
	2,  // 68: yb.consensus.ConsensusService.ChangeConfig:input_type -> yb.consensus.ChangeConfigRequestPB
	31, // 69: yb.consensus.ConsensusService.UnsafeChangeConfig:input_type -> yb.consensus.UnsafeChangeConfigRequestPB
	17, // 70: yb.consensus.ConsensusService.GetNodeInstance:input_type -> yb.consensus.GetNodeInstanceRequestPB
	19, // 71: yb.consensus.ConsensusService.RunLeaderElection:input_type -> yb.consensus.RunLeaderElectionRequestPB
	21, // 72: yb.consensus.ConsensusService.LeaderElectionLost:input_type -> yb.consensus.LeaderElectionLostRequestPB
	23, // 73: yb.consensus.ConsensusService.LeaderStepDown:input_type -> yb.consensus.LeaderStepDownRequestPB
	25, // 74: yb.consensus.ConsensusService.GetLastOpId:input_type -> yb.consensus.GetLastOpIdRequestPB
	27, // 75: yb.consensus.ConsensusService.GetConsensusState:input_type -> yb.consensus.GetConsensusStateRequestPB
	29, // 76: yb.consensus.ConsensusService.StartRemoteBootstrap:input_type -> yb.consensus.StartRemoteBootstrapRequestPB
	13, // 77: yb.consensus.ConsensusService.UpdateConsensus:output_type -> yb.consensus.ConsensusResponsePB
	15, // 78: yb.consensus.ConsensusService.MultiRaftUpdateConsensus:output_type -> yb.consensus.MultiRaftConsensusResponsePB
	11, // 79: yb.consensus.ConsensusService.RequestConsensusVote:output_type -> yb.consensus.VoteResponsePB
	3,  // 80: yb.consensus.ConsensusService.ChangeConfig:output_type -> yb.consensus.ChangeConfigResponsePB
	32, // 81: yb.consensus.ConsensusService.UnsafeChangeConfig:output_type -> yb.consensus.UnsafeChangeConfigResponsePB
	18, // 82: yb.consensus.ConsensusService.GetNodeInstance:output_type -> yb.consensus.GetNodeInstanceResponsePB
	20, // 83: yb.consensus.ConsensusService.RunLeaderElection:output_type -> yb.consensus.RunLeaderElectionResponsePB
	22, // 84: yb.consensus.ConsensusService.LeaderElectionLost:output_type -> yb.consensus.LeaderElectionLostResponsePB
	24, // 85: yb.consensus.ConsensusService.LeaderStepDown:output_type -> yb.consensus.LeaderStepDownResponsePB
	26, // 86: yb.consensus.ConsensusService.GetLastOpId:output_type -> yb.consensus.GetLastOpIdResponsePB
	28, // 87: yb.consensus.ConsensusService.GetConsensusState:output_type -> yb.consensus.GetConsensusStateResponsePB
	30, // 88: yb.consensus.ConsensusService.StartRemoteBootstrap:output_type -> yb.consensus.StartRemoteBootstrapResponsePB
	77, // [77:89] is the sub-list for method output_type
	65, // [65:77] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_yb_consensus_consensus_proto_init() }
func file_yb_consensus_consensus_proto_init() {
	if File_yb_consensus_consensus_proto != nil {
		return
	}
	file_yb_consensus_consensus_types_proto_init()
	file_yb_consensus_metadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_consensus_consensus_proto_rawDesc), len(file_yb_consensus_consensus_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_consensus_consensus_proto_goTypes,
		DependencyIndexes: file_yb_consensus_consensus_proto_depIdxs,
		EnumInfos:         file_yb_consensus_consensus_proto_enumTypes,
		MessageInfos:      file_yb_consensus_consensus_proto_msgTypes,
	}.Build()
	File_yb_consensus_consensus_proto = out.File
	file_yb_consensus_consensus_proto_goTypes = nil
	file_yb_consensus_consensus_proto_depIdxs = nil
}
