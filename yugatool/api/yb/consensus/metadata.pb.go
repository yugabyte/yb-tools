// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/consensus/metadata.proto

package consensus

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeerMemberType int32

const (
	PeerMemberType_UNKNOWN_MEMBER_TYPE PeerMemberType = 999
	// Any server added into a running consensus with the intention of becoming a VOTER, should be
	// added as a PRE_VOTER. Such a server stays as a PRE_VOTER (for a specific tablet) till it is
	// remote bootstrapped, after which it is promoted to VOTER. While in this mode, a server will
	// not vote nor try to become a leader.
	PeerMemberType_PRE_VOTER PeerMemberType = 0
	PeerMemberType_VOTER     PeerMemberType = 1
	// Any server added into a running consensus with the intention of becoming an async replica
	// (OBSERVER), Such a server stays as a PRE_OBSERVER (for a specific tablet) till it is
	// remote bootstrapped, after which it is promoted to OBSERVER. While in this mode, a server
	// will not vote nor try to become a leader.
	PeerMemberType_PRE_OBSERVER PeerMemberType = 2
	// Async replication mode. An OBSERVER doesn't participate in any decisions regarding the
	// consensus configuration. It only accepts update requests and allows read requests.
	PeerMemberType_OBSERVER PeerMemberType = 3
)

// Enum value maps for PeerMemberType.
var (
	PeerMemberType_name = map[int32]string{
		999: "UNKNOWN_MEMBER_TYPE",
		0:   "PRE_VOTER",
		1:   "VOTER",
		2:   "PRE_OBSERVER",
		3:   "OBSERVER",
	}
	PeerMemberType_value = map[string]int32{
		"UNKNOWN_MEMBER_TYPE": 999,
		"PRE_VOTER":           0,
		"VOTER":               1,
		"PRE_OBSERVER":        2,
		"OBSERVER":            3,
	}
)

func (x PeerMemberType) Enum() *PeerMemberType {
	p := new(PeerMemberType)
	*p = x
	return p
}

func (x PeerMemberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerMemberType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_consensus_metadata_proto_enumTypes[0].Descriptor()
}

func (PeerMemberType) Type() protoreflect.EnumType {
	return &file_yb_consensus_metadata_proto_enumTypes[0]
}

func (x PeerMemberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PeerMemberType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PeerMemberType(num)
	return nil
}

// Deprecated: Use PeerMemberType.Descriptor instead.
func (PeerMemberType) EnumDescriptor() ([]byte, []int) {
	return file_yb_consensus_metadata_proto_rawDescGZIP(), []int{0}
}

type ConsensusConfigType int32

const (
	ConsensusConfigType_CONSENSUS_CONFIG_UNKNOWN ConsensusConfigType = 999
	// Committed consensus config. This includes the consensus configuration that
	// has been serialized through consensus and committed, thus having a valid
	// opid_index field set.
	ConsensusConfigType_CONSENSUS_CONFIG_COMMITTED ConsensusConfigType = 1
	// Active consensus config. This could be a pending consensus config that
	// has not yet been committed. If the config is not committed, its opid_index
	// field will not be set.
	ConsensusConfigType_CONSENSUS_CONFIG_ACTIVE ConsensusConfigType = 2
)

// Enum value maps for ConsensusConfigType.
var (
	ConsensusConfigType_name = map[int32]string{
		999: "CONSENSUS_CONFIG_UNKNOWN",
		1:   "CONSENSUS_CONFIG_COMMITTED",
		2:   "CONSENSUS_CONFIG_ACTIVE",
	}
	ConsensusConfigType_value = map[string]int32{
		"CONSENSUS_CONFIG_UNKNOWN":   999,
		"CONSENSUS_CONFIG_COMMITTED": 1,
		"CONSENSUS_CONFIG_ACTIVE":    2,
	}
)

func (x ConsensusConfigType) Enum() *ConsensusConfigType {
	p := new(ConsensusConfigType)
	*p = x
	return p
}

func (x ConsensusConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsensusConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_consensus_metadata_proto_enumTypes[1].Descriptor()
}

func (ConsensusConfigType) Type() protoreflect.EnumType {
	return &file_yb_consensus_metadata_proto_enumTypes[1]
}

func (x ConsensusConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConsensusConfigType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConsensusConfigType(num)
	return nil
}

// Deprecated: Use ConsensusConfigType.Descriptor instead.
func (ConsensusConfigType) EnumDescriptor() ([]byte, []int) {
	return file_yb_consensus_metadata_proto_rawDescGZIP(), []int{1}
}

// A peer in a configuration.
type RaftPeerPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Permanent uuid is optional: RaftPeerPB/RaftConfigPB instances may
	// be created before the permanent uuid is known (e.g., when
	// manually specifying a configuration for Master/CatalogManager);
	// permament uuid can be retrieved at a later time through RPC.
	PermanentUuid          []byte               `protobuf:"bytes,1,opt,name=permanent_uuid,json=permanentUuid" json:"permanent_uuid,omitempty"`
	MemberType             *PeerMemberType      `protobuf:"varint,2,opt,name=member_type,json=memberType,enum=yb.consensus.PeerMemberType" json:"member_type,omitempty"`
	LastKnownPrivateAddr   []*common.HostPortPB `protobuf:"bytes,3,rep,name=last_known_private_addr,json=lastKnownPrivateAddr" json:"last_known_private_addr,omitempty"`
	LastKnownBroadcastAddr []*common.HostPortPB `protobuf:"bytes,4,rep,name=last_known_broadcast_addr,json=lastKnownBroadcastAddr" json:"last_known_broadcast_addr,omitempty"`
	CloudInfo              *common.CloudInfoPB  `protobuf:"bytes,5,opt,name=cloud_info,json=cloudInfo" json:"cloud_info,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RaftPeerPB) Reset() {
	*x = RaftPeerPB{}
	mi := &file_yb_consensus_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftPeerPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPeerPB) ProtoMessage() {}

func (x *RaftPeerPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPeerPB.ProtoReflect.Descriptor instead.
func (*RaftPeerPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *RaftPeerPB) GetPermanentUuid() []byte {
	if x != nil {
		return x.PermanentUuid
	}
	return nil
}

func (x *RaftPeerPB) GetMemberType() PeerMemberType {
	if x != nil && x.MemberType != nil {
		return *x.MemberType
	}
	return PeerMemberType_UNKNOWN_MEMBER_TYPE
}

func (x *RaftPeerPB) GetLastKnownPrivateAddr() []*common.HostPortPB {
	if x != nil {
		return x.LastKnownPrivateAddr
	}
	return nil
}

func (x *RaftPeerPB) GetLastKnownBroadcastAddr() []*common.HostPortPB {
	if x != nil {
		return x.LastKnownBroadcastAddr
	}
	return nil
}

func (x *RaftPeerPB) GetCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

// A set of peers, serving a single tablet.
type RaftConfigPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The index of the operation which serialized this RaftConfigPB through
	// consensus. It is set when the operation is consensus-committed (replicated
	// to a majority of voters) and before the consensus metadata is updated.
	// It is left undefined if the operation isn't committed.
	OpidIndex *int64 `protobuf:"varint,1,opt,name=opid_index,json=opidIndex" json:"opid_index,omitempty"`
	// Flag to allow unsafe config change operations.
	UnsafeConfigChange *bool `protobuf:"varint,4,opt,name=unsafe_config_change,json=unsafeConfigChange,def=0" json:"unsafe_config_change,omitempty"`
	// The set of peers in the configuration.
	Peers         []*RaftPeerPB `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for RaftConfigPB fields.
const (
	Default_RaftConfigPB_UnsafeConfigChange = bool(false)
)

func (x *RaftConfigPB) Reset() {
	*x = RaftConfigPB{}
	mi := &file_yb_consensus_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftConfigPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftConfigPB) ProtoMessage() {}

func (x *RaftConfigPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftConfigPB.ProtoReflect.Descriptor instead.
func (*RaftConfigPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *RaftConfigPB) GetOpidIndex() int64 {
	if x != nil && x.OpidIndex != nil {
		return *x.OpidIndex
	}
	return 0
}

func (x *RaftConfigPB) GetUnsafeConfigChange() bool {
	if x != nil && x.UnsafeConfigChange != nil {
		return *x.UnsafeConfigChange
	}
	return Default_RaftConfigPB_UnsafeConfigChange
}

func (x *RaftConfigPB) GetPeers() []*RaftPeerPB {
	if x != nil {
		return x.Peers
	}
	return nil
}

// Represents a snapshot of a configuration at a given moment in time.
type ConsensusStatePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A configuration is always guaranteed to have a known term.
	CurrentTerm *int64 `protobuf:"varint,1,req,name=current_term,json=currentTerm" json:"current_term,omitempty"`
	// There may not always be a leader of a configuration at any given time.
	//
	// The node that the local peer considers to be leader changes based on rules defined in the Raft
	// specification. Roughly, this corresponds either to being elected leader (in the case that the
	// local peer is the leader), or when an update is accepted from another node, which basically
	// just amounts to a term check on the UpdateConsensus() RPC request.
	//
	// Whenever the local peer sees a new term, the leader flag is cleared until a new leader is
	// acknowledged based on the above critera. Simply casting a vote for a peer is not sufficient to
	// assume that that peer has won the election, so we do not update this field based on our vote.
	//
	// The leader listed here, if any, should always be a member of 'configuration', and the term that
	// the node is leader of _must_ equal the term listed above in the 'current_term' field. The
	// Master will use the combination of current term and leader uuid to determine when to update its
	// cache of the current leader for client lookup purposes.
	//
	// There is a corner case in Raft where a node may be elected leader of a pending (uncommitted)
	// configuration. In such a case, if the leader of the pending configuration is not a member of
	// the committed configuration, and it is the committed configuration that is being reported, then
	// the leader_uuid field should be cleared by the process filling in the ConsensusStatePB object.
	LeaderUuid *string `protobuf:"bytes,2,opt,name=leader_uuid,json=leaderUuid" json:"leader_uuid,omitempty"`
	// The peers. In some contexts, this will be the committed configuration, which will always have
	// configuration.opid_index set. In other contexts, this may a "pending" configuration, which is
	// active but in the process of being committed.  In any case, initial peership is set on tablet
	// start, so this field should always be present.
	Config        *RaftConfigPB `protobuf:"bytes,3,req,name=config" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusStatePB) Reset() {
	*x = ConsensusStatePB{}
	mi := &file_yb_consensus_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusStatePB) ProtoMessage() {}

func (x *ConsensusStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusStatePB.ProtoReflect.Descriptor instead.
func (*ConsensusStatePB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *ConsensusStatePB) GetCurrentTerm() int64 {
	if x != nil && x.CurrentTerm != nil {
		return *x.CurrentTerm
	}
	return 0
}

func (x *ConsensusStatePB) GetLeaderUuid() string {
	if x != nil && x.LeaderUuid != nil {
		return *x.LeaderUuid
	}
	return ""
}

func (x *ConsensusStatePB) GetConfig() *RaftConfigPB {
	if x != nil {
		return x.Config
	}
	return nil
}

// This PB is used to serialize all of the persistent state needed for
// Consensus that is not in the WAL, such as leader election and
// communication on startup.
type ConsensusMetadataPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Last-committed peership.
	CommittedConfig *RaftConfigPB `protobuf:"bytes,1,req,name=committed_config,json=committedConfig" json:"committed_config,omitempty"`
	// Latest term this server has seen.
	// When a configuration is first created, initialized to 0.
	//
	// Whenever a new election is started, the candidate increments this by one
	// and requests votes from peers.
	//
	// If any RPC or RPC response is received from another node containing a term higher
	// than this one, the server should step down to FOLLOWER and set its current_term to
	// match the caller's term.
	//
	// If a follower receives an UpdateConsensus RPC with a term lower than this
	// term, then that implies that the RPC is coming from a former LEADER who has
	// not realized yet that its term is over. In that case, we will reject the
	// UpdateConsensus() call with ConsensusErrorPB::INVALID_TERM.
	//
	// If a follower receives a RequestConsensusVote() RPC with an earlier term,
	// the vote is denied.
	CurrentTerm *int64 `protobuf:"varint,2,req,name=current_term,json=currentTerm" json:"current_term,omitempty"`
	// Permanent UUID of the candidate voted for in 'current_term', or not present
	// if no vote was made in the current term.
	VotedFor            *string `protobuf:"bytes,3,opt,name=voted_for,json=votedFor" json:"voted_for,omitempty"`
	SplitParentTabletId []byte  `protobuf:"bytes,4,opt,name=split_parent_tablet_id,json=splitParentTabletId" json:"split_parent_tablet_id,omitempty"`
	CloneSourceSeqNo    *uint32 `protobuf:"varint,5,opt,name=clone_source_seq_no,json=cloneSourceSeqNo" json:"clone_source_seq_no,omitempty"`
	CloneSourceTabletId *string `protobuf:"bytes,6,opt,name=clone_source_tablet_id,json=cloneSourceTabletId" json:"clone_source_tablet_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ConsensusMetadataPB) Reset() {
	*x = ConsensusMetadataPB{}
	mi := &file_yb_consensus_metadata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusMetadataPB) ProtoMessage() {}

func (x *ConsensusMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_consensus_metadata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusMetadataPB.ProtoReflect.Descriptor instead.
func (*ConsensusMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_consensus_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *ConsensusMetadataPB) GetCommittedConfig() *RaftConfigPB {
	if x != nil {
		return x.CommittedConfig
	}
	return nil
}

func (x *ConsensusMetadataPB) GetCurrentTerm() int64 {
	if x != nil && x.CurrentTerm != nil {
		return *x.CurrentTerm
	}
	return 0
}

func (x *ConsensusMetadataPB) GetVotedFor() string {
	if x != nil && x.VotedFor != nil {
		return *x.VotedFor
	}
	return ""
}

func (x *ConsensusMetadataPB) GetSplitParentTabletId() []byte {
	if x != nil {
		return x.SplitParentTabletId
	}
	return nil
}

func (x *ConsensusMetadataPB) GetCloneSourceSeqNo() uint32 {
	if x != nil && x.CloneSourceSeqNo != nil {
		return *x.CloneSourceSeqNo
	}
	return 0
}

func (x *ConsensusMetadataPB) GetCloneSourceTabletId() string {
	if x != nil && x.CloneSourceTabletId != nil {
		return *x.CloneSourceTabletId
	}
	return ""
}

var File_yb_consensus_metadata_proto protoreflect.FileDescriptor

var file_yb_consensus_metadata_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x79,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a, 0x1a, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x0a, 0x52, 0x61, 0x66, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x17,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x49, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e,
	0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x96,
	0x01, 0x0a, 0x0c, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x42, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37,
	0x0a, 0x14, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x42, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xb5, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x45, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x42, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x2a, 0x64, 0x0a, 0x0e,
	0x50, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xe7, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x5f,
	0x56, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f, 0x54, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x10, 0x03, 0x2a, 0x71, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
})

var (
	file_yb_consensus_metadata_proto_rawDescOnce sync.Once
	file_yb_consensus_metadata_proto_rawDescData []byte
)

func file_yb_consensus_metadata_proto_rawDescGZIP() []byte {
	file_yb_consensus_metadata_proto_rawDescOnce.Do(func() {
		file_yb_consensus_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_consensus_metadata_proto_rawDesc), len(file_yb_consensus_metadata_proto_rawDesc)))
	})
	return file_yb_consensus_metadata_proto_rawDescData
}

var file_yb_consensus_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yb_consensus_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_yb_consensus_metadata_proto_goTypes = []any{
	(PeerMemberType)(0),         // 0: yb.consensus.PeerMemberType
	(ConsensusConfigType)(0),    // 1: yb.consensus.ConsensusConfigType
	(*RaftPeerPB)(nil),          // 2: yb.consensus.RaftPeerPB
	(*RaftConfigPB)(nil),        // 3: yb.consensus.RaftConfigPB
	(*ConsensusStatePB)(nil),    // 4: yb.consensus.ConsensusStatePB
	(*ConsensusMetadataPB)(nil), // 5: yb.consensus.ConsensusMetadataPB
	(*common.HostPortPB)(nil),   // 6: yb.HostPortPB
	(*common.CloudInfoPB)(nil),  // 7: yb.CloudInfoPB
}
var file_yb_consensus_metadata_proto_depIdxs = []int32{
	0, // 0: yb.consensus.RaftPeerPB.member_type:type_name -> yb.consensus.PeerMemberType
	6, // 1: yb.consensus.RaftPeerPB.last_known_private_addr:type_name -> yb.HostPortPB
	6, // 2: yb.consensus.RaftPeerPB.last_known_broadcast_addr:type_name -> yb.HostPortPB
	7, // 3: yb.consensus.RaftPeerPB.cloud_info:type_name -> yb.CloudInfoPB
	2, // 4: yb.consensus.RaftConfigPB.peers:type_name -> yb.consensus.RaftPeerPB
	3, // 5: yb.consensus.ConsensusStatePB.config:type_name -> yb.consensus.RaftConfigPB
	3, // 6: yb.consensus.ConsensusMetadataPB.committed_config:type_name -> yb.consensus.RaftConfigPB
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_yb_consensus_metadata_proto_init() }
func file_yb_consensus_metadata_proto_init() {
	if File_yb_consensus_metadata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_consensus_metadata_proto_rawDesc), len(file_yb_consensus_metadata_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_consensus_metadata_proto_goTypes,
		DependencyIndexes: file_yb_consensus_metadata_proto_depIdxs,
		EnumInfos:         file_yb_consensus_metadata_proto_enumTypes,
		MessageInfos:      file_yb_consensus_metadata_proto_msgTypes,
	}.Build()
	File_yb_consensus_metadata_proto = out.File
	file_yb_consensus_metadata_proto_goTypes = nil
	file_yb_consensus_metadata_proto_depIdxs = nil
}
