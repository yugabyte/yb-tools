// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/docdb/docdb.proto

package docdb

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyValuePairPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Key                []byte                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value              []byte                 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	ExternalHybridTime *uint64                `protobuf:"fixed64,3,opt,name=external_hybrid_time,json=externalHybridTime" json:"external_hybrid_time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KeyValuePairPB) Reset() {
	*x = KeyValuePairPB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValuePairPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePairPB) ProtoMessage() {}

func (x *KeyValuePairPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePairPB.ProtoReflect.Descriptor instead.
func (*KeyValuePairPB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{0}
}

func (x *KeyValuePairPB) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValuePairPB) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyValuePairPB) GetExternalHybridTime() uint64 {
	if x != nil && x.ExternalHybridTime != nil {
		return *x.ExternalHybridTime
	}
	return 0
}

type ApplyExternalTransactionPB struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	TransactionId          []byte                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	AbortedSubtransactions *common.SubtxnSetPB    `protobuf:"bytes,3,opt,name=aborted_subtransactions,json=abortedSubtransactions" json:"aborted_subtransactions,omitempty"`
	CommitHybridTime       *uint64                `protobuf:"fixed64,2,opt,name=commit_hybrid_time,json=commitHybridTime" json:"commit_hybrid_time,omitempty"`
	// Defaults to empty string, which is the full key range.
	FilterStartKey []byte `protobuf:"bytes,4,opt,name=filter_start_key,json=filterStartKey" json:"filter_start_key,omitempty"`
	FilterEndKey   []byte `protobuf:"bytes,5,opt,name=filter_end_key,json=filterEndKey" json:"filter_end_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ApplyExternalTransactionPB) Reset() {
	*x = ApplyExternalTransactionPB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyExternalTransactionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyExternalTransactionPB) ProtoMessage() {}

func (x *ApplyExternalTransactionPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyExternalTransactionPB.ProtoReflect.Descriptor instead.
func (*ApplyExternalTransactionPB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyExternalTransactionPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *ApplyExternalTransactionPB) GetAbortedSubtransactions() *common.SubtxnSetPB {
	if x != nil {
		return x.AbortedSubtransactions
	}
	return nil
}

func (x *ApplyExternalTransactionPB) GetCommitHybridTime() uint64 {
	if x != nil && x.CommitHybridTime != nil {
		return *x.CommitHybridTime
	}
	return 0
}

func (x *ApplyExternalTransactionPB) GetFilterStartKey() []byte {
	if x != nil {
		return x.FilterStartKey
	}
	return nil
}

func (x *ApplyExternalTransactionPB) GetFilterEndKey() []byte {
	if x != nil {
		return x.FilterEndKey
	}
	return nil
}

type TableSchemaVersionPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       []byte                 `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	SchemaVersion *uint32                `protobuf:"varint,2,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableSchemaVersionPB) Reset() {
	*x = TableSchemaVersionPB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableSchemaVersionPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchemaVersionPB) ProtoMessage() {}

func (x *TableSchemaVersionPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchemaVersionPB.ProtoReflect.Descriptor instead.
func (*TableSchemaVersionPB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{2}
}

func (x *TableSchemaVersionPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TableSchemaVersionPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

// A set of key/value pairs to be written into RocksDB.
type KeyValueWriteBatchPB struct {
	state                     protoimpl.MessageState           `protogen:"open.v1"`
	WritePairs                []*KeyValuePairPB                `protobuf:"bytes,1,rep,name=write_pairs,json=writePairs" json:"write_pairs,omitempty"`
	Transaction               *common.TransactionMetadataPB    `protobuf:"bytes,2,opt,name=transaction" json:"transaction,omitempty"`
	Subtransaction            *common.SubTransactionMetadataPB `protobuf:"bytes,8,opt,name=subtransaction" json:"subtransaction,omitempty"`
	DEPRECATEDMayHaveMetadata *bool                            `protobuf:"varint,3,opt,name=DEPRECATED_may_have_metadata,json=DEPRECATEDMayHaveMetadata" json:"DEPRECATED_may_have_metadata,omitempty"`
	// Used by serializable isolation transactions and row locking statements to store read intents.
	// In case of read-modify-write operation both read_pairs and write_pairs could present.
	ReadPairs []*KeyValuePairPB `protobuf:"bytes,5,rep,name=read_pairs,json=readPairs" json:"read_pairs,omitempty"`
	// Even though there can be multiple write_pairs we have only one row_mark_type/ wait_policy since
	// currently we don't batch read RPCs from YSQL (which are the only ones that can set these 2
	// fields). And hence, only a singular value is sufficient.
	RowMarkType *common.RowMarkType `protobuf:"varint,6,opt,name=row_mark_type,json=rowMarkType,enum=yb.RowMarkType" json:"row_mark_type,omitempty"`
	// wait_policy is used only for explicit row-locking to identify 3 possibilities: WAIT_BLOCK,
	// WAIT_SKIP, or WAIT_ERROR. See WaitPolicy for detailed information.
	//
	// If this request has read_pairs but row_mark_type is not set, then wait_policy should not be
	// set. Such a situation can occur when read intents are to be written as part of SERIALIZABLE
	// isolation level.
	WaitPolicy                *common.WaitPolicy            `protobuf:"varint,10,opt,name=wait_policy,json=waitPolicy,enum=yb.WaitPolicy" json:"wait_policy,omitempty"`
	ApplyExternalTransactions []*ApplyExternalTransactionPB `protobuf:"bytes,7,rep,name=apply_external_transactions,json=applyExternalTransactions" json:"apply_external_transactions,omitempty"`
	Ttl                       *int64                        `protobuf:"varint,9,opt,name=ttl" json:"ttl,omitempty"`
	// Table schema version used by this write batch.
	// We could have writes to multiple cotables in a single write batch.
	TableSchemaVersion []*TableSchemaVersionPB `protobuf:"bytes,11,rep,name=table_schema_version,json=tableSchemaVersion" json:"table_schema_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KeyValueWriteBatchPB) Reset() {
	*x = KeyValueWriteBatchPB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueWriteBatchPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueWriteBatchPB) ProtoMessage() {}

func (x *KeyValueWriteBatchPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueWriteBatchPB.ProtoReflect.Descriptor instead.
func (*KeyValueWriteBatchPB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValueWriteBatchPB) GetWritePairs() []*KeyValuePairPB {
	if x != nil {
		return x.WritePairs
	}
	return nil
}

func (x *KeyValueWriteBatchPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *KeyValueWriteBatchPB) GetSubtransaction() *common.SubTransactionMetadataPB {
	if x != nil {
		return x.Subtransaction
	}
	return nil
}

func (x *KeyValueWriteBatchPB) GetDEPRECATEDMayHaveMetadata() bool {
	if x != nil && x.DEPRECATEDMayHaveMetadata != nil {
		return *x.DEPRECATEDMayHaveMetadata
	}
	return false
}

func (x *KeyValueWriteBatchPB) GetReadPairs() []*KeyValuePairPB {
	if x != nil {
		return x.ReadPairs
	}
	return nil
}

func (x *KeyValueWriteBatchPB) GetRowMarkType() common.RowMarkType {
	if x != nil && x.RowMarkType != nil {
		return *x.RowMarkType
	}
	return common.RowMarkType(0)
}

func (x *KeyValueWriteBatchPB) GetWaitPolicy() common.WaitPolicy {
	if x != nil && x.WaitPolicy != nil {
		return *x.WaitPolicy
	}
	return common.WaitPolicy(0)
}

func (x *KeyValueWriteBatchPB) GetApplyExternalTransactions() []*ApplyExternalTransactionPB {
	if x != nil {
		return x.ApplyExternalTransactions
	}
	return nil
}

func (x *KeyValueWriteBatchPB) GetTtl() int64 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *KeyValueWriteBatchPB) GetTableSchemaVersion() []*TableSchemaVersionPB {
	if x != nil {
		return x.TableSchemaVersion
	}
	return nil
}

type PerDbFilterPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbOid         *uint32                `protobuf:"varint,1,opt,name=db_oid,json=dbOid" json:"db_oid,omitempty"`
	HtFilter      *uint64                `protobuf:"fixed64,2,opt,name=ht_filter,json=htFilter" json:"ht_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerDbFilterPB) Reset() {
	*x = PerDbFilterPB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerDbFilterPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerDbFilterPB) ProtoMessage() {}

func (x *PerDbFilterPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerDbFilterPB.ProtoReflect.Descriptor instead.
func (*PerDbFilterPB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{4}
}

func (x *PerDbFilterPB) GetDbOid() uint32 {
	if x != nil && x.DbOid != nil {
		return *x.DbOid
	}
	return 0
}

func (x *PerDbFilterPB) GetHtFilter() uint64 {
	if x != nil && x.HtFilter != nil {
		return *x.HtFilter
	}
	return 0
}

type ConsensusFrontierPB struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	OpId       *common.OpIdPB         `protobuf:"bytes,1,opt,name=op_id,json=opId" json:"op_id,omitempty"`
	HybridTime *uint64                `protobuf:"fixed64,2,opt,name=hybrid_time,json=hybridTime" json:"hybrid_time,omitempty"`
	// History cutoff of all the tables of this tablet.
	// On the master, this field is used for the sys catalog table.
	// For cotables (i.e. ysql system tables) for which
	// the cotables_history_cutoff field is used. On tservers,
	// this field is used for everything i.e. both colocated and non colocated tables
	// and the cotables_history_cutoff field is invalid.
	PrimaryCutoffHt *uint64 `protobuf:"fixed64,3,opt,name=primary_cutoff_ht,json=primaryCutoffHt" json:"primary_cutoff_ht,omitempty"`
	// Filter applies to all the entries of the sst file.
	// Only set for the largest frontier.
	HybridTimeFilter               *uint64                 `protobuf:"fixed64,4,opt,name=hybrid_time_filter,json=hybridTimeFilter" json:"hybrid_time_filter,omitempty"`
	MaxValueLevelTtlExpirationTime *uint64                 `protobuf:"fixed64,5,opt,name=max_value_level_ttl_expiration_time,json=maxValueLevelTtlExpirationTime" json:"max_value_level_ttl_expiration_time,omitempty"`
	TableSchemaVersion             []*TableSchemaVersionPB `protobuf:"bytes,6,rep,name=table_schema_version,json=tableSchemaVersion" json:"table_schema_version,omitempty"`
	// Used only for sys catalog tablet during PITR restores
	// to selectively restore some databases. Only set for
	// the largest frontier.
	DbOidToHtFilter []*PerDbFilterPB `protobuf:"bytes,7,rep,name=db_oid_to_ht_filter,json=dbOidToHtFilter" json:"db_oid_to_ht_filter,omitempty"`
	// Set only on the master for cotables.
	CotablesCutoffHt *uint64 `protobuf:"fixed64,8,opt,name=cotables_cutoff_ht,json=cotablesCutoffHt" json:"cotables_cutoff_ht,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConsensusFrontierPB) Reset() {
	*x = ConsensusFrontierPB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusFrontierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusFrontierPB) ProtoMessage() {}

func (x *ConsensusFrontierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusFrontierPB.ProtoReflect.Descriptor instead.
func (*ConsensusFrontierPB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{5}
}

func (x *ConsensusFrontierPB) GetOpId() *common.OpIdPB {
	if x != nil {
		return x.OpId
	}
	return nil
}

func (x *ConsensusFrontierPB) GetHybridTime() uint64 {
	if x != nil && x.HybridTime != nil {
		return *x.HybridTime
	}
	return 0
}

func (x *ConsensusFrontierPB) GetPrimaryCutoffHt() uint64 {
	if x != nil && x.PrimaryCutoffHt != nil {
		return *x.PrimaryCutoffHt
	}
	return 0
}

func (x *ConsensusFrontierPB) GetHybridTimeFilter() uint64 {
	if x != nil && x.HybridTimeFilter != nil {
		return *x.HybridTimeFilter
	}
	return 0
}

func (x *ConsensusFrontierPB) GetMaxValueLevelTtlExpirationTime() uint64 {
	if x != nil && x.MaxValueLevelTtlExpirationTime != nil {
		return *x.MaxValueLevelTtlExpirationTime
	}
	return 0
}

func (x *ConsensusFrontierPB) GetTableSchemaVersion() []*TableSchemaVersionPB {
	if x != nil {
		return x.TableSchemaVersion
	}
	return nil
}

func (x *ConsensusFrontierPB) GetDbOidToHtFilter() []*PerDbFilterPB {
	if x != nil {
		return x.DbOidToHtFilter
	}
	return nil
}

func (x *ConsensusFrontierPB) GetCotablesCutoffHt() uint64 {
	if x != nil && x.CotablesCutoffHt != nil {
		return *x.CotablesCutoffHt
	}
	return 0
}

type ApplyTransactionStatePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Apply should be continued from this key in reverse index.
	Key []byte `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Write id for first continued record.
	WriteId *uint32 `protobuf:"varint,2,opt,name=write_id,json=writeId" json:"write_id,omitempty"`
	// Transaction commit hybrid time.
	CommitHt *uint64 `protobuf:"fixed64,3,opt,name=commit_ht,json=commitHt" json:"commit_ht,omitempty"`
	// Set of aborted subtransactions.
	Aborted       *common.SubtxnSetPB `protobuf:"bytes,4,opt,name=aborted" json:"aborted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyTransactionStatePB) Reset() {
	*x = ApplyTransactionStatePB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyTransactionStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTransactionStatePB) ProtoMessage() {}

func (x *ApplyTransactionStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTransactionStatePB.ProtoReflect.Descriptor instead.
func (*ApplyTransactionStatePB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{6}
}

func (x *ApplyTransactionStatePB) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ApplyTransactionStatePB) GetWriteId() uint32 {
	if x != nil && x.WriteId != nil {
		return *x.WriteId
	}
	return 0
}

func (x *ApplyTransactionStatePB) GetCommitHt() uint64 {
	if x != nil && x.CommitHt != nil {
		return *x.CommitHt
	}
	return 0
}

func (x *ApplyTransactionStatePB) GetAborted() *common.SubtxnSetPB {
	if x != nil {
		return x.Aborted
	}
	return nil
}

// This message is currently only being used for table level locks, which is protected under a
// test gflag that is disabled by default. The message shouldn't be re-used for production code.
type ObjectLockPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatabaseOid   *uint64                `protobuf:"varint,1,opt,name=database_oid,json=databaseOid" json:"database_oid,omitempty"`
	ObjectOid     *uint64                `protobuf:"varint,2,opt,name=object_oid,json=objectOid" json:"object_oid,omitempty"`
	LockType      *common.TableLockType  `protobuf:"varint,3,opt,name=lock_type,json=lockType,enum=yb.TableLockType" json:"lock_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectLockPB) Reset() {
	*x = ObjectLockPB{}
	mi := &file_yb_docdb_docdb_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectLockPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectLockPB) ProtoMessage() {}

func (x *ObjectLockPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_docdb_docdb_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectLockPB.ProtoReflect.Descriptor instead.
func (*ObjectLockPB) Descriptor() ([]byte, []int) {
	return file_yb_docdb_docdb_proto_rawDescGZIP(), []int{7}
}

func (x *ObjectLockPB) GetDatabaseOid() uint64 {
	if x != nil && x.DatabaseOid != nil {
		return *x.DatabaseOid
	}
	return 0
}

func (x *ObjectLockPB) GetObjectOid() uint64 {
	if x != nil && x.ObjectOid != nil {
		return *x.ObjectOid
	}
	return 0
}

func (x *ObjectLockPB) GetLockType() common.TableLockType {
	if x != nil && x.LockType != nil {
		return *x.LockType
	}
	return common.TableLockType(0)
}

var File_yb_docdb_docdb_proto protoreflect.FileDescriptor

var file_yb_docdb_docdb_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x79, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62,
	0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x0e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x8b, 0x02,
	0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x17, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e,
	0x53, 0x65, 0x74, 0x50, 0x42, 0x52, 0x16, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75,
	0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x14, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x05, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x42, 0x12, 0x39,
	0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x0a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0e, 0x73, 0x75,
	0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c,
	0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x68,
	0x61, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4d, 0x61,
	0x79, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x72, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x1b,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x50, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x42, 0x52, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0x43, 0x0a, 0x0d,
	0x50, 0x65, 0x72, 0x44, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x42, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64,
	0x62, 0x4f, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x68, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0xc5, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70,
	0x49, 0x64, 0x50, 0x42, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0a, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x75, 0x74, 0x6f, 0x66, 0x66, 0x48, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x10, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x74, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x13, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x68, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x44, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0f, 0x64, 0x62, 0x4f, 0x69,
	0x64, 0x54, 0x6f, 0x48, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x68,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x63, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x48, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x12,
	0x29, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x74, 0x50,
	0x42, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62,
})

var (
	file_yb_docdb_docdb_proto_rawDescOnce sync.Once
	file_yb_docdb_docdb_proto_rawDescData []byte
)

func file_yb_docdb_docdb_proto_rawDescGZIP() []byte {
	file_yb_docdb_docdb_proto_rawDescOnce.Do(func() {
		file_yb_docdb_docdb_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_docdb_docdb_proto_rawDesc), len(file_yb_docdb_docdb_proto_rawDesc)))
	})
	return file_yb_docdb_docdb_proto_rawDescData
}

var file_yb_docdb_docdb_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yb_docdb_docdb_proto_goTypes = []any{
	(*KeyValuePairPB)(nil),                  // 0: yb.docdb.KeyValuePairPB
	(*ApplyExternalTransactionPB)(nil),      // 1: yb.docdb.ApplyExternalTransactionPB
	(*TableSchemaVersionPB)(nil),            // 2: yb.docdb.TableSchemaVersionPB
	(*KeyValueWriteBatchPB)(nil),            // 3: yb.docdb.KeyValueWriteBatchPB
	(*PerDbFilterPB)(nil),                   // 4: yb.docdb.PerDbFilterPB
	(*ConsensusFrontierPB)(nil),             // 5: yb.docdb.ConsensusFrontierPB
	(*ApplyTransactionStatePB)(nil),         // 6: yb.docdb.ApplyTransactionStatePB
	(*ObjectLockPB)(nil),                    // 7: yb.docdb.ObjectLockPB
	(*common.SubtxnSetPB)(nil),              // 8: yb.SubtxnSetPB
	(*common.TransactionMetadataPB)(nil),    // 9: yb.TransactionMetadataPB
	(*common.SubTransactionMetadataPB)(nil), // 10: yb.SubTransactionMetadataPB
	(common.RowMarkType)(0),                 // 11: yb.RowMarkType
	(common.WaitPolicy)(0),                  // 12: yb.WaitPolicy
	(*common.OpIdPB)(nil),                   // 13: yb.OpIdPB
	(common.TableLockType)(0),               // 14: yb.TableLockType
}
var file_yb_docdb_docdb_proto_depIdxs = []int32{
	8,  // 0: yb.docdb.ApplyExternalTransactionPB.aborted_subtransactions:type_name -> yb.SubtxnSetPB
	0,  // 1: yb.docdb.KeyValueWriteBatchPB.write_pairs:type_name -> yb.docdb.KeyValuePairPB
	9,  // 2: yb.docdb.KeyValueWriteBatchPB.transaction:type_name -> yb.TransactionMetadataPB
	10, // 3: yb.docdb.KeyValueWriteBatchPB.subtransaction:type_name -> yb.SubTransactionMetadataPB
	0,  // 4: yb.docdb.KeyValueWriteBatchPB.read_pairs:type_name -> yb.docdb.KeyValuePairPB
	11, // 5: yb.docdb.KeyValueWriteBatchPB.row_mark_type:type_name -> yb.RowMarkType
	12, // 6: yb.docdb.KeyValueWriteBatchPB.wait_policy:type_name -> yb.WaitPolicy
	1,  // 7: yb.docdb.KeyValueWriteBatchPB.apply_external_transactions:type_name -> yb.docdb.ApplyExternalTransactionPB
	2,  // 8: yb.docdb.KeyValueWriteBatchPB.table_schema_version:type_name -> yb.docdb.TableSchemaVersionPB
	13, // 9: yb.docdb.ConsensusFrontierPB.op_id:type_name -> yb.OpIdPB
	2,  // 10: yb.docdb.ConsensusFrontierPB.table_schema_version:type_name -> yb.docdb.TableSchemaVersionPB
	4,  // 11: yb.docdb.ConsensusFrontierPB.db_oid_to_ht_filter:type_name -> yb.docdb.PerDbFilterPB
	8,  // 12: yb.docdb.ApplyTransactionStatePB.aborted:type_name -> yb.SubtxnSetPB
	14, // 13: yb.docdb.ObjectLockPB.lock_type:type_name -> yb.TableLockType
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_yb_docdb_docdb_proto_init() }
func file_yb_docdb_docdb_proto_init() {
	if File_yb_docdb_docdb_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_docdb_docdb_proto_rawDesc), len(file_yb_docdb_docdb_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_docdb_docdb_proto_goTypes,
		DependencyIndexes: file_yb_docdb_docdb_proto_depIdxs,
		MessageInfos:      file_yb_docdb_docdb_proto_msgTypes,
	}.Build()
	File_yb_docdb_docdb_proto = out.File
	file_yb_docdb_docdb_proto_goTypes = nil
	file_yb_docdb_docdb_proto_depIdxs = nil
}
