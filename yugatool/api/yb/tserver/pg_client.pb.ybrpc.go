// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package tserver

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.tserver.PgClientService
// service: PgClientService
type PgClientService interface {
	Heartbeat(request *PgHeartbeatRequestPB) (*PgHeartbeatResponsePB, error)
	AlterDatabase(request *PgAlterDatabaseRequestPB) (*PgAlterDatabaseResponsePB, error)
	AlterTable(request *PgAlterTableRequestPB) (*PgAlterTableResponsePB, error)
	BackfillIndex(request *PgBackfillIndexRequestPB) (*PgBackfillIndexResponsePB, error)
	CreateDatabase(request *PgCreateDatabaseRequestPB) (*PgCreateDatabaseResponsePB, error)
	CreateReplicationSlot(request *PgCreateReplicationSlotRequestPB) (*PgCreateReplicationSlotResponsePB, error)
	CreateSequencesDataTable(request *PgCreateSequencesDataTableRequestPB) (*PgCreateSequencesDataTableResponsePB, error)
	CreateTable(request *PgCreateTableRequestPB) (*PgCreateTableResponsePB, error)
	CreateTablegroup(request *PgCreateTablegroupRequestPB) (*PgCreateTablegroupResponsePB, error)
	DropDatabase(request *PgDropDatabaseRequestPB) (*PgDropDatabaseResponsePB, error)
	DropReplicationSlot(request *PgDropReplicationSlotRequestPB) (*PgDropReplicationSlotResponsePB, error)
	DropTable(request *PgDropTableRequestPB) (*PgDropTableResponsePB, error)
	DropTablegroup(request *PgDropTablegroupRequestPB) (*PgDropTablegroupResponsePB, error)
	FinishTransaction(request *PgFinishTransactionRequestPB) (*PgFinishTransactionResponsePB, error)
	GetCatalogMasterVersion(request *PgGetCatalogMasterVersionRequestPB) (*PgGetCatalogMasterVersionResponsePB, error)
	GetDatabaseInfo(request *PgGetDatabaseInfoRequestPB) (*PgGetDatabaseInfoResponsePB, error)
	GetLockStatus(request *PgGetLockStatusRequestPB) (*PgGetLockStatusResponsePB, error)
	GetReplicationSlot(request *PgGetReplicationSlotRequestPB) (*PgGetReplicationSlotResponsePB, error)
	IsInitDbDone(request *PgIsInitDbDoneRequestPB) (*PgIsInitDbDoneResponsePB, error)
	ListLiveTabletServers(request *PgListLiveTabletServersRequestPB) (*PgListLiveTabletServersResponsePB, error)
	ListReplicationSlots(request *PgListReplicationSlotsRequestPB) (*PgListReplicationSlotsResponsePB, error)
	GetIndexBackfillProgress(request *PgGetIndexBackfillProgressRequestPB) (*PgGetIndexBackfillProgressResponsePB, error)
	OpenTable(request *PgOpenTableRequestPB) (*PgOpenTableResponsePB, error)
	GetTablePartitionList(request *PgGetTablePartitionListRequestPB) (*PgGetTablePartitionListResponsePB, error)
	Perform(request *PgPerformRequestPB) (*PgPerformResponsePB, error)
	ReserveOids(request *PgReserveOidsRequestPB) (*PgReserveOidsResponsePB, error)
	RollbackToSubTransaction(request *PgRollbackToSubTransactionRequestPB) (*PgRollbackToSubTransactionResponsePB, error)
	TabletServerCount(request *PgTabletServerCountRequestPB) (*PgTabletServerCountResponsePB, error)
	TruncateTable(request *PgTruncateTableRequestPB) (*PgTruncateTableResponsePB, error)
	ValidatePlacement(request *PgValidatePlacementRequestPB) (*PgValidatePlacementResponsePB, error)
	GetTableDiskSize(request *PgGetTableDiskSizeRequestPB) (*PgGetTableDiskSizeResponsePB, error)
	WaitForBackendsCatalogVersion(request *PgWaitForBackendsCatalogVersionRequestPB) (*PgWaitForBackendsCatalogVersionResponsePB, error)
	InsertSequenceTuple(request *PgInsertSequenceTupleRequestPB) (*PgInsertSequenceTupleResponsePB, error)
	UpdateSequenceTuple(request *PgUpdateSequenceTupleRequestPB) (*PgUpdateSequenceTupleResponsePB, error)
	FetchSequenceTuple(request *PgFetchSequenceTupleRequestPB) (*PgFetchSequenceTupleResponsePB, error)
	ReadSequenceTuple(request *PgReadSequenceTupleRequestPB) (*PgReadSequenceTupleResponsePB, error)
	DeleteSequenceTuple(request *PgDeleteSequenceTupleRequestPB) (*PgDeleteSequenceTupleResponsePB, error)
	DeleteDBSequences(request *PgDeleteDBSequencesRequestPB) (*PgDeleteDBSequencesResponsePB, error)
	CheckIfPitrActive(request *PgCheckIfPitrActiveRequestPB) (*PgCheckIfPitrActiveResponsePB, error)
	IsObjectPartOfXRepl(request *PgIsObjectPartOfXReplRequestPB) (*PgIsObjectPartOfXReplResponsePB, error)
	GetTserverCatalogVersionInfo(request *PgGetTserverCatalogVersionInfoRequestPB) (*PgGetTserverCatalogVersionInfoResponsePB, error)
	CancelTransaction(request *PgCancelTransactionRequestPB) (*PgCancelTransactionResponsePB, error)
	ActiveSessionHistory(request *PgActiveSessionHistoryRequestPB) (*PgActiveSessionHistoryResponsePB, error)
	GetActiveTransactionList(request *PgGetActiveTransactionListRequestPB) (*PgGetActiveTransactionListResponsePB, error)
	GetTableKeyRanges(request *PgGetTableKeyRangesRequestPB) (*PgGetTableKeyRangesResponsePB, error)
	GetNewObjectId(request *PgGetNewObjectIdRequestPB) (*PgGetNewObjectIdResponsePB, error)
	TabletsMetadata(request *PgTabletsMetadataRequestPB) (*PgTabletsMetadataResponsePB, error)
	ServersMetrics(request *PgServersMetricsRequestPB) (*PgServersMetricsResponsePB, error)
	ListClones(request *PgListClonesRequestPB) (*PgListClonesResponsePB, error)
	GetReplicationSlotStatus(request *PgGetReplicationSlotStatusRequestPB) (*PgGetReplicationSlotStatusResponsePB, error)
	SetActiveSubTransaction(request *PgSetActiveSubTransactionRequestPB) (*PgSetActiveSubTransactionResponsePB, error)
	FetchData(request *PgFetchDataRequestPB) (*PgFetchDataResponsePB, error)
	YCQLStatementStats(request *PgYCQLStatementStatsRequestPB) (*PgYCQLStatementStatsResponsePB, error)
	CronSetLastMinute(request *PgCronSetLastMinuteRequestPB) (*PgCronSetLastMinuteResponsePB, error)
	CronGetLastMinute(request *PgCronGetLastMinuteRequestPB) (*PgCronGetLastMinuteResponsePB, error)
	ExportTxnSnapshot(request *PgExportTxnSnapshotRequestPB) (*PgExportTxnSnapshotResponsePB, error)
	SetTxnSnapshot(request *PgSetTxnSnapshotRequestPB) (*PgSetTxnSnapshotResponsePB, error)
	ClearExportedTxnSnapshots(request *PgClearExportedTxnSnapshotsRequestPB) (*PgClearExportedTxnSnapshotsResponsePB, error)
}

type PgClientServiceImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

func (s *PgClientServiceImpl) Heartbeat(request *PgHeartbeatRequestPB) (*PgHeartbeatResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "Heartbeat", "request", request)
	response := &PgHeartbeatResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "Heartbeat", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "Heartbeat", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) AlterDatabase(request *PgAlterDatabaseRequestPB) (*PgAlterDatabaseResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "AlterDatabase", "request", request)
	response := &PgAlterDatabaseResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "AlterDatabase", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "AlterDatabase", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) AlterTable(request *PgAlterTableRequestPB) (*PgAlterTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "AlterTable", "request", request)
	response := &PgAlterTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "AlterTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "AlterTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) BackfillIndex(request *PgBackfillIndexRequestPB) (*PgBackfillIndexResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "BackfillIndex", "request", request)
	response := &PgBackfillIndexResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "BackfillIndex", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "BackfillIndex", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateDatabase(request *PgCreateDatabaseRequestPB) (*PgCreateDatabaseResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateDatabase", "request", request)
	response := &PgCreateDatabaseResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateDatabase", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateDatabase", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateReplicationSlot(request *PgCreateReplicationSlotRequestPB) (*PgCreateReplicationSlotResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateReplicationSlot", "request", request)
	response := &PgCreateReplicationSlotResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateReplicationSlot", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateReplicationSlot", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateSequencesDataTable(request *PgCreateSequencesDataTableRequestPB) (*PgCreateSequencesDataTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateSequencesDataTable", "request", request)
	response := &PgCreateSequencesDataTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateSequencesDataTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateSequencesDataTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateTable(request *PgCreateTableRequestPB) (*PgCreateTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateTable", "request", request)
	response := &PgCreateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CreateTablegroup(request *PgCreateTablegroupRequestPB) (*PgCreateTablegroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CreateTablegroup", "request", request)
	response := &PgCreateTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CreateTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CreateTablegroup", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DropDatabase(request *PgDropDatabaseRequestPB) (*PgDropDatabaseResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DropDatabase", "request", request)
	response := &PgDropDatabaseResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DropDatabase", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DropDatabase", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DropReplicationSlot(request *PgDropReplicationSlotRequestPB) (*PgDropReplicationSlotResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DropReplicationSlot", "request", request)
	response := &PgDropReplicationSlotResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DropReplicationSlot", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DropReplicationSlot", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DropTable(request *PgDropTableRequestPB) (*PgDropTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DropTable", "request", request)
	response := &PgDropTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DropTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DropTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DropTablegroup(request *PgDropTablegroupRequestPB) (*PgDropTablegroupResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DropTablegroup", "request", request)
	response := &PgDropTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DropTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DropTablegroup", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) FinishTransaction(request *PgFinishTransactionRequestPB) (*PgFinishTransactionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "FinishTransaction", "request", request)
	response := &PgFinishTransactionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "FinishTransaction", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "FinishTransaction", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetCatalogMasterVersion(request *PgGetCatalogMasterVersionRequestPB) (*PgGetCatalogMasterVersionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetCatalogMasterVersion", "request", request)
	response := &PgGetCatalogMasterVersionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetCatalogMasterVersion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetCatalogMasterVersion", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetDatabaseInfo(request *PgGetDatabaseInfoRequestPB) (*PgGetDatabaseInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetDatabaseInfo", "request", request)
	response := &PgGetDatabaseInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetDatabaseInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetDatabaseInfo", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetLockStatus(request *PgGetLockStatusRequestPB) (*PgGetLockStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetLockStatus", "request", request)
	response := &PgGetLockStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetLockStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetLockStatus", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetReplicationSlot(request *PgGetReplicationSlotRequestPB) (*PgGetReplicationSlotResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetReplicationSlot", "request", request)
	response := &PgGetReplicationSlotResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetReplicationSlot", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetReplicationSlot", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) IsInitDbDone(request *PgIsInitDbDoneRequestPB) (*PgIsInitDbDoneResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "IsInitDbDone", "request", request)
	response := &PgIsInitDbDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "IsInitDbDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "IsInitDbDone", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ListLiveTabletServers(request *PgListLiveTabletServersRequestPB) (*PgListLiveTabletServersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ListLiveTabletServers", "request", request)
	response := &PgListLiveTabletServersResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ListLiveTabletServers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ListLiveTabletServers", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ListReplicationSlots(request *PgListReplicationSlotsRequestPB) (*PgListReplicationSlotsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ListReplicationSlots", "request", request)
	response := &PgListReplicationSlotsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ListReplicationSlots", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ListReplicationSlots", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetIndexBackfillProgress(request *PgGetIndexBackfillProgressRequestPB) (*PgGetIndexBackfillProgressResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetIndexBackfillProgress", "request", request)
	response := &PgGetIndexBackfillProgressResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetIndexBackfillProgress", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetIndexBackfillProgress", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) OpenTable(request *PgOpenTableRequestPB) (*PgOpenTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "OpenTable", "request", request)
	response := &PgOpenTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "OpenTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "OpenTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetTablePartitionList(request *PgGetTablePartitionListRequestPB) (*PgGetTablePartitionListResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetTablePartitionList", "request", request)
	response := &PgGetTablePartitionListResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetTablePartitionList", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetTablePartitionList", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) Perform(request *PgPerformRequestPB) (*PgPerformResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "Perform", "request", request)
	response := &PgPerformResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "Perform", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "Perform", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ReserveOids(request *PgReserveOidsRequestPB) (*PgReserveOidsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ReserveOids", "request", request)
	response := &PgReserveOidsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ReserveOids", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ReserveOids", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) RollbackToSubTransaction(request *PgRollbackToSubTransactionRequestPB) (*PgRollbackToSubTransactionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "RollbackToSubTransaction", "request", request)
	response := &PgRollbackToSubTransactionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "RollbackToSubTransaction", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "RollbackToSubTransaction", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) TabletServerCount(request *PgTabletServerCountRequestPB) (*PgTabletServerCountResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "TabletServerCount", "request", request)
	response := &PgTabletServerCountResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "TabletServerCount", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "TabletServerCount", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) TruncateTable(request *PgTruncateTableRequestPB) (*PgTruncateTableResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "TruncateTable", "request", request)
	response := &PgTruncateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "TruncateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "TruncateTable", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ValidatePlacement(request *PgValidatePlacementRequestPB) (*PgValidatePlacementResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ValidatePlacement", "request", request)
	response := &PgValidatePlacementResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ValidatePlacement", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ValidatePlacement", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetTableDiskSize(request *PgGetTableDiskSizeRequestPB) (*PgGetTableDiskSizeResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetTableDiskSize", "request", request)
	response := &PgGetTableDiskSizeResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetTableDiskSize", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetTableDiskSize", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) WaitForBackendsCatalogVersion(request *PgWaitForBackendsCatalogVersionRequestPB) (*PgWaitForBackendsCatalogVersionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "WaitForBackendsCatalogVersion", "request", request)
	response := &PgWaitForBackendsCatalogVersionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "WaitForBackendsCatalogVersion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "WaitForBackendsCatalogVersion", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) InsertSequenceTuple(request *PgInsertSequenceTupleRequestPB) (*PgInsertSequenceTupleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "InsertSequenceTuple", "request", request)
	response := &PgInsertSequenceTupleResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "InsertSequenceTuple", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "InsertSequenceTuple", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) UpdateSequenceTuple(request *PgUpdateSequenceTupleRequestPB) (*PgUpdateSequenceTupleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "UpdateSequenceTuple", "request", request)
	response := &PgUpdateSequenceTupleResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "UpdateSequenceTuple", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "UpdateSequenceTuple", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) FetchSequenceTuple(request *PgFetchSequenceTupleRequestPB) (*PgFetchSequenceTupleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "FetchSequenceTuple", "request", request)
	response := &PgFetchSequenceTupleResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "FetchSequenceTuple", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "FetchSequenceTuple", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ReadSequenceTuple(request *PgReadSequenceTupleRequestPB) (*PgReadSequenceTupleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ReadSequenceTuple", "request", request)
	response := &PgReadSequenceTupleResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ReadSequenceTuple", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ReadSequenceTuple", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DeleteSequenceTuple(request *PgDeleteSequenceTupleRequestPB) (*PgDeleteSequenceTupleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DeleteSequenceTuple", "request", request)
	response := &PgDeleteSequenceTupleResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DeleteSequenceTuple", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DeleteSequenceTuple", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) DeleteDBSequences(request *PgDeleteDBSequencesRequestPB) (*PgDeleteDBSequencesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "DeleteDBSequences", "request", request)
	response := &PgDeleteDBSequencesResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "DeleteDBSequences", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "DeleteDBSequences", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CheckIfPitrActive(request *PgCheckIfPitrActiveRequestPB) (*PgCheckIfPitrActiveResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CheckIfPitrActive", "request", request)
	response := &PgCheckIfPitrActiveResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CheckIfPitrActive", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CheckIfPitrActive", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) IsObjectPartOfXRepl(request *PgIsObjectPartOfXReplRequestPB) (*PgIsObjectPartOfXReplResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "IsObjectPartOfXRepl", "request", request)
	response := &PgIsObjectPartOfXReplResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "IsObjectPartOfXRepl", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "IsObjectPartOfXRepl", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetTserverCatalogVersionInfo(request *PgGetTserverCatalogVersionInfoRequestPB) (*PgGetTserverCatalogVersionInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetTserverCatalogVersionInfo", "request", request)
	response := &PgGetTserverCatalogVersionInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetTserverCatalogVersionInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetTserverCatalogVersionInfo", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CancelTransaction(request *PgCancelTransactionRequestPB) (*PgCancelTransactionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CancelTransaction", "request", request)
	response := &PgCancelTransactionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CancelTransaction", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CancelTransaction", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ActiveSessionHistory(request *PgActiveSessionHistoryRequestPB) (*PgActiveSessionHistoryResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ActiveSessionHistory", "request", request)
	response := &PgActiveSessionHistoryResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ActiveSessionHistory", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ActiveSessionHistory", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetActiveTransactionList(request *PgGetActiveTransactionListRequestPB) (*PgGetActiveTransactionListResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetActiveTransactionList", "request", request)
	response := &PgGetActiveTransactionListResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetActiveTransactionList", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetActiveTransactionList", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetTableKeyRanges(request *PgGetTableKeyRangesRequestPB) (*PgGetTableKeyRangesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetTableKeyRanges", "request", request)
	response := &PgGetTableKeyRangesResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetTableKeyRanges", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetTableKeyRanges", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) GetNewObjectId(request *PgGetNewObjectIdRequestPB) (*PgGetNewObjectIdResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetNewObjectId", "request", request)
	response := &PgGetNewObjectIdResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetNewObjectId", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetNewObjectId", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) TabletsMetadata(request *PgTabletsMetadataRequestPB) (*PgTabletsMetadataResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "TabletsMetadata", "request", request)
	response := &PgTabletsMetadataResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "TabletsMetadata", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "TabletsMetadata", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ServersMetrics(request *PgServersMetricsRequestPB) (*PgServersMetricsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ServersMetrics", "request", request)
	response := &PgServersMetricsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ServersMetrics", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ServersMetrics", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ListClones(request *PgListClonesRequestPB) (*PgListClonesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ListClones", "request", request)
	response := &PgListClonesResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ListClones", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ListClones", "response", response)

	return response, nil
}

// DEPRECATED: GetReplicationSlot RPC is a superset of this GetReplicationSlotStatus.
// So GetReplicationSlot should be used everywhere.

func (s *PgClientServiceImpl) GetReplicationSlotStatus(request *PgGetReplicationSlotStatusRequestPB) (*PgGetReplicationSlotStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "GetReplicationSlotStatus", "request", request)
	response := &PgGetReplicationSlotStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "GetReplicationSlotStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "GetReplicationSlotStatus", "response", response)

	return response, nil
}

// DEPRECATED

func (s *PgClientServiceImpl) SetActiveSubTransaction(request *PgSetActiveSubTransactionRequestPB) (*PgSetActiveSubTransactionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "SetActiveSubTransaction", "request", request)
	response := &PgSetActiveSubTransactionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "SetActiveSubTransaction", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "SetActiveSubTransaction", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) FetchData(request *PgFetchDataRequestPB) (*PgFetchDataResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "FetchData", "request", request)
	response := &PgFetchDataResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "FetchData", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "FetchData", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) YCQLStatementStats(request *PgYCQLStatementStatsRequestPB) (*PgYCQLStatementStatsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "YCQLStatementStats", "request", request)
	response := &PgYCQLStatementStatsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "YCQLStatementStats", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "YCQLStatementStats", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CronSetLastMinute(request *PgCronSetLastMinuteRequestPB) (*PgCronSetLastMinuteResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CronSetLastMinute", "request", request)
	response := &PgCronSetLastMinuteResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CronSetLastMinute", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CronSetLastMinute", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) CronGetLastMinute(request *PgCronGetLastMinuteRequestPB) (*PgCronGetLastMinuteResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "CronGetLastMinute", "request", request)
	response := &PgCronGetLastMinuteResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "CronGetLastMinute", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "CronGetLastMinute", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ExportTxnSnapshot(request *PgExportTxnSnapshotRequestPB) (*PgExportTxnSnapshotResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ExportTxnSnapshot", "request", request)
	response := &PgExportTxnSnapshotResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ExportTxnSnapshot", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ExportTxnSnapshot", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) SetTxnSnapshot(request *PgSetTxnSnapshotRequestPB) (*PgSetTxnSnapshotResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "SetTxnSnapshot", "request", request)
	response := &PgSetTxnSnapshotResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "SetTxnSnapshot", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "SetTxnSnapshot", "response", response)

	return response, nil
}

func (s *PgClientServiceImpl) ClearExportedTxnSnapshots(request *PgClearExportedTxnSnapshotsRequestPB) (*PgClearExportedTxnSnapshotsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.PgClientService", "method", "ClearExportedTxnSnapshots", "request", request)
	response := &PgClearExportedTxnSnapshotsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.PgClientService", "ClearExportedTxnSnapshots", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.PgClientService", "method", "ClearExportedTxnSnapshots", "response", response)

	return response, nil
}
