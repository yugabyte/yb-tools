// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package tserver

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.tserver.RemoteBootstrapService
// service: RemoteBootstrapService
// RaftConfig remote bootstrap RPC calls.

type RemoteBootstrapService interface {
	BeginRemoteBootstrapSession(request *BeginRemoteBootstrapSessionRequestPB) (*BeginRemoteBootstrapSessionResponsePB, error)
	BeginRemoteSnapshotTransferSession(request *BeginRemoteSnapshotTransferSessionRequestPB) (*BeginRemoteSnapshotTransferSessionResponsePB, error)
	CheckRemoteBootstrapSessionActive(request *CheckRemoteBootstrapSessionActiveRequestPB) (*CheckRemoteBootstrapSessionActiveResponsePB, error)
	FetchData(request *FetchDataRequestPB) (*FetchDataResponsePB, error)
	EndRemoteBootstrapSession(request *EndRemoteBootstrapSessionRequestPB) (*EndRemoteBootstrapSessionResponsePB, error)
	RemoveRemoteBootstrapSession(request *RemoveRemoteBootstrapSessionRequestPB) (*RemoveRemoteBootstrapSessionResponsePB, error)
	RegisterLogAnchor(request *RegisterLogAnchorRequestPB) (*RegisterLogAnchorResponsePB, error)
	UpdateLogAnchor(request *UpdateLogAnchorRequestPB) (*UpdateLogAnchorResponsePB, error)
	UnregisterLogAnchor(request *UnregisterLogAnchorRequestPB) (*UnregisterLogAnchorResponsePB, error)
	KeepLogAnchorAlive(request *KeepLogAnchorAliveRequestPB) (*KeepLogAnchorAliveResponsePB, error)
	ChangePeerRole(request *ChangePeerRoleRequestPB) (*ChangePeerRoleResponsePB, error)
}

type RemoteBootstrapServiceImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

// Establish a remote bootstrap session.

func (s *RemoteBootstrapServiceImpl) BeginRemoteBootstrapSession(request *BeginRemoteBootstrapSessionRequestPB) (*BeginRemoteBootstrapSessionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "BeginRemoteBootstrapSession", "request", request)
	response := &BeginRemoteBootstrapSessionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "BeginRemoteBootstrapSession", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "BeginRemoteBootstrapSession", "response", response)

	return response, nil
}

// Establish a remote snapshot transfer session.

func (s *RemoteBootstrapServiceImpl) BeginRemoteSnapshotTransferSession(request *BeginRemoteSnapshotTransferSessionRequestPB) (*BeginRemoteSnapshotTransferSessionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "BeginRemoteSnapshotTransferSession", "request", request)
	response := &BeginRemoteSnapshotTransferSessionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "BeginRemoteSnapshotTransferSession", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "BeginRemoteSnapshotTransferSession", "response", response)

	return response, nil
}

// Check whether the specified session is active.

func (s *RemoteBootstrapServiceImpl) CheckRemoteBootstrapSessionActive(request *CheckRemoteBootstrapSessionActiveRequestPB) (*CheckRemoteBootstrapSessionActiveResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "CheckRemoteBootstrapSessionActive", "request", request)
	response := &CheckRemoteBootstrapSessionActiveResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "CheckRemoteBootstrapSessionActive", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "CheckRemoteBootstrapSessionActive", "response", response)

	return response, nil
}

// Fetch data (blocks, logs) from the server.

func (s *RemoteBootstrapServiceImpl) FetchData(request *FetchDataRequestPB) (*FetchDataResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "FetchData", "request", request)
	response := &FetchDataResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "FetchData", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "FetchData", "response", response)

	return response, nil
}

// End a remote bootstrap session, allow server to release resources.

func (s *RemoteBootstrapServiceImpl) EndRemoteBootstrapSession(request *EndRemoteBootstrapSessionRequestPB) (*EndRemoteBootstrapSessionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "EndRemoteBootstrapSession", "request", request)
	response := &EndRemoteBootstrapSessionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "EndRemoteBootstrapSession", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "EndRemoteBootstrapSession", "response", response)

	return response, nil
}

func (s *RemoteBootstrapServiceImpl) RemoveRemoteBootstrapSession(request *RemoveRemoteBootstrapSessionRequestPB) (*RemoveRemoteBootstrapSessionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "RemoveRemoteBootstrapSession", "request", request)
	response := &RemoveRemoteBootstrapSessionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "RemoveRemoteBootstrapSession", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "RemoveRemoteBootstrapSession", "response", response)

	return response, nil
}

// Register Log Anchor on the leader. RBS source calls this function on the
// tablet leader while beginning the RemoteBootstrapSession

func (s *RemoteBootstrapServiceImpl) RegisterLogAnchor(request *RegisterLogAnchorRequestPB) (*RegisterLogAnchorResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "RegisterLogAnchor", "request", request)
	response := &RegisterLogAnchorResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "RegisterLogAnchor", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "RegisterLogAnchor", "response", response)

	return response, nil
}

// Updates the Log Anchor on the tablet leader. RBS source calls the function
// whenever the LogAnchor is being updated locally.

func (s *RemoteBootstrapServiceImpl) UpdateLogAnchor(request *UpdateLogAnchorRequestPB) (*UpdateLogAnchorResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "UpdateLogAnchor", "request", request)
	response := &UpdateLogAnchorResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "UpdateLogAnchor", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "UpdateLogAnchor", "response", response)

	return response, nil
}

// Unregisters the Log Anchor on the leader, called by RBS source.

func (s *RemoteBootstrapServiceImpl) UnregisterLogAnchor(request *UnregisterLogAnchorRequestPB) (*UnregisterLogAnchorResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "UnregisterLogAnchor", "request", request)
	response := &UnregisterLogAnchorResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "UnregisterLogAnchor", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "UnregisterLogAnchor", "response", response)

	return response, nil
}

// Request to refresh the Log Anchor Session, called by RBS source.

func (s *RemoteBootstrapServiceImpl) KeepLogAnchorAlive(request *KeepLogAnchorAliveRequestPB) (*KeepLogAnchorAliveResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "KeepLogAnchorAlive", "request", request)
	response := &KeepLogAnchorAliveResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "KeepLogAnchorAlive", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "KeepLogAnchorAlive", "response", response)

	return response, nil
}

// RBS source asks the leader to change the role of the new peer post
// bootstrap.

func (s *RemoteBootstrapServiceImpl) ChangePeerRole(request *ChangePeerRoleRequestPB) (*ChangePeerRoleResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.RemoteBootstrapService", "method", "ChangePeerRole", "request", request)
	response := &ChangePeerRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.RemoteBootstrapService", "ChangePeerRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.RemoteBootstrapService", "method", "ChangePeerRole", "response", response)

	return response, nil
}
