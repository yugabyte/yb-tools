// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/tserver/tserver_admin.proto

package tserver

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	consensus "github.com/yugabyte/yb-tools/yugatool/api/yb/consensus"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlushTabletsRequestPB_Operation int32

const (
	FlushTabletsRequestPB_FLUSH   FlushTabletsRequestPB_Operation = 0
	FlushTabletsRequestPB_COMPACT FlushTabletsRequestPB_Operation = 1
	FlushTabletsRequestPB_LOG_GC  FlushTabletsRequestPB_Operation = 2
)

// Enum value maps for FlushTabletsRequestPB_Operation.
var (
	FlushTabletsRequestPB_Operation_name = map[int32]string{
		0: "FLUSH",
		1: "COMPACT",
		2: "LOG_GC",
	}
	FlushTabletsRequestPB_Operation_value = map[string]int32{
		"FLUSH":   0,
		"COMPACT": 1,
		"LOG_GC":  2,
	}
)

func (x FlushTabletsRequestPB_Operation) Enum() *FlushTabletsRequestPB_Operation {
	p := new(FlushTabletsRequestPB_Operation)
	*p = x
	return p
}

func (x FlushTabletsRequestPB_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlushTabletsRequestPB_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_tserver_admin_proto_enumTypes[0].Descriptor()
}

func (FlushTabletsRequestPB_Operation) Type() protoreflect.EnumType {
	return &file_yb_tserver_tserver_admin_proto_enumTypes[0]
}

func (x FlushTabletsRequestPB_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FlushTabletsRequestPB_Operation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FlushTabletsRequestPB_Operation(num)
	return nil
}

// Deprecated: Use FlushTabletsRequestPB_Operation.Descriptor instead.
func (FlushTabletsRequestPB_Operation) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{12, 0}
}

// This is used to export tablet metadata changes to a protobuf file to be reloaded on a new cluster
// startup to avoid running initdb.
type ExportedTabletMetadataChanges struct {
	state           protoimpl.MessageState            `protogen:"open.v1"`
	MetadataChanges []*tablet.ChangeMetadataRequestPB `protobuf:"bytes,1,rep,name=metadata_changes,json=metadataChanges" json:"metadata_changes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExportedTabletMetadataChanges) Reset() {
	*x = ExportedTabletMetadataChanges{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportedTabletMetadataChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportedTabletMetadataChanges) ProtoMessage() {}

func (x *ExportedTabletMetadataChanges) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportedTabletMetadataChanges.ProtoReflect.Descriptor instead.
func (*ExportedTabletMetadataChanges) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{0}
}

func (x *ExportedTabletMetadataChanges) GetMetadataChanges() []*tablet.ChangeMetadataRequestPB {
	if x != nil {
		return x.MetadataChanges
	}
	return nil
}

type ChangeMetadataResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// CDC SDK Create Stream context
	CdcSdkSnapshotSafeOpId *common.OpIdPB `protobuf:"bytes,3,opt,name=cdc_sdk_snapshot_safe_op_id,json=cdcSdkSnapshotSafeOpId" json:"cdc_sdk_snapshot_safe_op_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ChangeMetadataResponsePB) Reset() {
	*x = ChangeMetadataResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeMetadataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMetadataResponsePB) ProtoMessage() {}

func (x *ChangeMetadataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMetadataResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeMetadataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{1}
}

func (x *ChangeMetadataResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ChangeMetadataResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ChangeMetadataResponsePB) GetCdcSdkSnapshotSafeOpId() *common.OpIdPB {
	if x != nil {
		return x.CdcSdkSnapshotSafeOpId
	}
	return nil
}

type GetSafeTimeRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid                 []byte  `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId                 []byte  `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SchemaVersion            *uint32 `protobuf:"varint,3,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	PropagatedHybridTime     *uint64 `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	MinHybridTimeForBackfill *uint64 `protobuf:"fixed64,5,opt,name=min_hybrid_time_for_backfill,json=minHybridTimeForBackfill" json:"min_hybrid_time_for_backfill,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetSafeTimeRequestPB) Reset() {
	*x = GetSafeTimeRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSafeTimeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafeTimeRequestPB) ProtoMessage() {}

func (x *GetSafeTimeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafeTimeRequestPB.ProtoReflect.Descriptor instead.
func (*GetSafeTimeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{2}
}

func (x *GetSafeTimeRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *GetSafeTimeRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetSafeTimeRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *GetSafeTimeRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetSafeTimeRequestPB) GetMinHybridTimeForBackfill() uint64 {
	if x != nil && x.MinHybridTimeForBackfill != nil {
		return *x.MinHybridTimeForBackfill
	}
	return 0
}

type GetSafeTimeResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	SafeTime             *uint64                `protobuf:"fixed64,2,opt,name=safe_time,json=safeTime" json:"safe_time,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetSafeTimeResponsePB) Reset() {
	*x = GetSafeTimeResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSafeTimeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafeTimeResponsePB) ProtoMessage() {}

func (x *GetSafeTimeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafeTimeResponsePB.ProtoReflect.Descriptor instead.
func (*GetSafeTimeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{3}
}

func (x *GetSafeTimeResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetSafeTimeResponsePB) GetSafeTime() uint64 {
	if x != nil && x.SafeTime != nil {
		return *x.SafeTime
	}
	return 0
}

func (x *GetSafeTimeResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type BackfillIndexRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Indexes on the _same table_ to backfill.
	Indexes              []*common.IndexInfoPB `protobuf:"bytes,3,rep,name=indexes" json:"indexes,omitempty"`
	SchemaVersion        *uint32               `protobuf:"varint,4,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	ReadAtHybridTime     *uint64               `protobuf:"fixed64,5,opt,name=read_at_hybrid_time,json=readAtHybridTime" json:"read_at_hybrid_time,omitempty"`
	StartKey             []byte                `protobuf:"bytes,6,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	EndKey               []byte                `protobuf:"bytes,7,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	PropagatedHybridTime *uint64               `protobuf:"fixed64,8,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Currently only used for YSQL.
	NamespaceName *string `protobuf:"bytes,9,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	// Indexed table ID so we can properly address a colocated table.
	IndexedTableId []byte `protobuf:"bytes,10,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BackfillIndexRequestPB) Reset() {
	*x = BackfillIndexRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackfillIndexRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexRequestPB) ProtoMessage() {}

func (x *BackfillIndexRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexRequestPB.ProtoReflect.Descriptor instead.
func (*BackfillIndexRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{4}
}

func (x *BackfillIndexRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetIndexes() []*common.IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *BackfillIndexRequestPB) GetReadAtHybridTime() uint64 {
	if x != nil && x.ReadAtHybridTime != nil {
		return *x.ReadAtHybridTime
	}
	return 0
}

func (x *BackfillIndexRequestPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *BackfillIndexRequestPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *BackfillIndexRequestPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

type BackfillIndexResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// If non-empty, this is used to keep track of how far along
	// the backfill has completed, so that it can be resumed.
	// Encoded as the DocKey for the next row to be backfilled.
	BackfilledUntil []byte `protobuf:"bytes,3,opt,name=backfilled_until,json=backfilledUntil" json:"backfilled_until,omitempty"`
	// In case of a partial error, list of indexes that failed.
	FailedIndexIds [][]byte `protobuf:"bytes,4,rep,name=failed_index_ids,json=failedIndexIds" json:"failed_index_ids,omitempty"`
	// Returns the number of rows backfilled in the request.
	NumberRowsProcessed *uint64 `protobuf:"varint,5,opt,name=number_rows_processed,json=numberRowsProcessed" json:"number_rows_processed,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BackfillIndexResponsePB) Reset() {
	*x = BackfillIndexResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackfillIndexResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexResponsePB) ProtoMessage() {}

func (x *BackfillIndexResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexResponsePB.ProtoReflect.Descriptor instead.
func (*BackfillIndexResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{5}
}

func (x *BackfillIndexResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *BackfillIndexResponsePB) GetBackfilledUntil() []byte {
	if x != nil {
		return x.BackfilledUntil
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetFailedIndexIds() [][]byte {
	if x != nil {
		return x.FailedIndexIds
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetNumberRowsProcessed() uint64 {
	if x != nil && x.NumberRowsProcessed != nil {
		return *x.NumberRowsProcessed
	}
	return 0
}

// A create tablet request.
type CreateTabletRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,8,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TableId  []byte `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	TabletId []byte `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// DEPRECATED.
	StartKey []byte `protobuf:"bytes,3,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	// DEPRECATED.
	EndKey []byte `protobuf:"bytes,4,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	// The partition of the tablet.
	Partition     *common.PartitionPB `protobuf:"bytes,9,opt,name=partition" json:"partition,omitempty"`
	NamespaceId   []byte              `protobuf:"bytes,14,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	NamespaceName []byte              `protobuf:"bytes,15,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	TableName     *string             `protobuf:"bytes,5,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableType     *common.TableType   `protobuf:"varint,11,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	Schema        *common.SchemaPB    `protobuf:"bytes,6,req,name=schema" json:"schema,omitempty"`
	// The partition schema of the table which the tablet belongs to.
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,10,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	// Initial consensus configuration for the tablet.
	Config *consensus.RaftConfigPB `protobuf:"bytes,7,req,name=config" json:"config,omitempty"`
	// For index table: information about this index.
	IndexInfo *common.IndexInfoPB `protobuf:"bytes,12,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// True if the tablet is colocated.
	Colocated              *bool                        `protobuf:"varint,13,opt,name=colocated,def=0" json:"colocated,omitempty"`
	SnapshotSchedules      [][]byte                     `protobuf:"bytes,16,rep,name=snapshot_schedules,json=snapshotSchedules" json:"snapshot_schedules,omitempty"`
	HostedStatefulServices []common.StatefulServiceKind `protobuf:"varint,17,rep,name=hosted_stateful_services,json=hostedStatefulServices,enum=yb.StatefulServiceKind" json:"hosted_stateful_services,omitempty"`
	// In case the table was rewritten, explicitly store the TableId containing the PG table OID
	// (as the table's TableId no longer matches).
	PgTableId        []byte  `protobuf:"bytes,18,opt,name=pg_table_id,json=pgTableId" json:"pg_table_id,omitempty"`
	WalRetentionSecs *uint32 `protobuf:"varint,19,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	// If set to true, retention barriers will be set on the tablet.
	CdcSdkSetRetentionBarriers *bool `protobuf:"varint,20,opt,name=cdc_sdk_set_retention_barriers,json=cdcSdkSetRetentionBarriers" json:"cdc_sdk_set_retention_barriers,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for CreateTabletRequestPB fields.
const (
	Default_CreateTabletRequestPB_Colocated = bool(false)
)

func (x *CreateTabletRequestPB) Reset() {
	*x = CreateTabletRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTabletRequestPB) ProtoMessage() {}

func (x *CreateTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTabletRequestPB.ProtoReflect.Descriptor instead.
func (*CreateTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *CreateTabletRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CreateTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *CreateTabletRequestPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *CreateTabletRequestPB) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *CreateTabletRequestPB) GetPartition() *common.PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *CreateTabletRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CreateTabletRequestPB) GetNamespaceName() []byte {
	if x != nil {
		return x.NamespaceName
	}
	return nil
}

func (x *CreateTabletRequestPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *CreateTabletRequestPB) GetTableType() common.TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return common.TableType(2)
}

func (x *CreateTabletRequestPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateTabletRequestPB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *CreateTabletRequestPB) GetConfig() *consensus.RaftConfigPB {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateTabletRequestPB) GetIndexInfo() *common.IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *CreateTabletRequestPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_CreateTabletRequestPB_Colocated
}

func (x *CreateTabletRequestPB) GetSnapshotSchedules() [][]byte {
	if x != nil {
		return x.SnapshotSchedules
	}
	return nil
}

func (x *CreateTabletRequestPB) GetHostedStatefulServices() []common.StatefulServiceKind {
	if x != nil {
		return x.HostedStatefulServices
	}
	return nil
}

func (x *CreateTabletRequestPB) GetPgTableId() []byte {
	if x != nil {
		return x.PgTableId
	}
	return nil
}

func (x *CreateTabletRequestPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *CreateTabletRequestPB) GetCdcSdkSetRetentionBarriers() bool {
	if x != nil && x.CdcSdkSetRetentionBarriers != nil {
		return *x.CdcSdkSetRetentionBarriers
	}
	return false
}

type CreateTabletResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// CDC SDK Create dynamic table context. The initial safe_op_id for a tablet of a
	// dynamically added table.
	CdcSdkSafeOpId *common.OpIdPB `protobuf:"bytes,2,opt,name=cdc_sdk_safe_op_id,json=cdcSdkSafeOpId" json:"cdc_sdk_safe_op_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateTabletResponsePB) Reset() {
	*x = CreateTabletResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTabletResponsePB) ProtoMessage() {}

func (x *CreateTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTabletResponsePB.ProtoReflect.Descriptor instead.
func (*CreateTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateTabletResponsePB) GetCdcSdkSafeOpId() *common.OpIdPB {
	if x != nil {
		return x.CdcSdkSafeOpId
	}
	return nil
}

type PrepareDeleteTransactionTabletRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid      []byte `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId      []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareDeleteTransactionTabletRequestPB) Reset() {
	*x = PrepareDeleteTransactionTabletRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareDeleteTransactionTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareDeleteTransactionTabletRequestPB) ProtoMessage() {}

func (x *PrepareDeleteTransactionTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareDeleteTransactionTabletRequestPB.ProtoReflect.Descriptor instead.
func (*PrepareDeleteTransactionTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{8}
}

func (x *PrepareDeleteTransactionTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *PrepareDeleteTransactionTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type PrepareDeleteTransactionTabletResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareDeleteTransactionTabletResponsePB) Reset() {
	*x = PrepareDeleteTransactionTabletResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareDeleteTransactionTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareDeleteTransactionTabletResponsePB) ProtoMessage() {}

func (x *PrepareDeleteTransactionTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareDeleteTransactionTabletResponsePB.ProtoReflect.Descriptor instead.
func (*PrepareDeleteTransactionTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{9}
}

func (x *PrepareDeleteTransactionTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// A delete tablet request.
type DeleteTabletRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,4,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Reason the tablet is being deleted (for logging purposes)
	Reason *string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	// Must be one of TABLET_DATA_DELETED (for table deletes) or
	// TABLET_DATA_TOMBSTONED (for replica retirement).
	DeleteType *tablet.TabletDataState `protobuf:"varint,3,opt,name=delete_type,json=deleteType,enum=yb.tablet.TabletDataState,def=3" json:"delete_type,omitempty"`
	// The highest allowed OpId index of the latest known committed config.
	// This optional parameter is here to provide an atomic (compare-and-swap)
	// DeleteTablet operation. If this parameter is specified, the DeleteTablet()
	// operation will succeed only if the committed config has an opid_index that
	// is less than or equal to this value.
	// See also the definition of RaftConfigPB.
	// Note: At the time of this writing, there is a small race between checking
	// the value of the committed config opid index and shutting down the tablet
	// for deletion. See comments in ts_tablet_manager.cc
	CasConfigOpidIndexLessOrEqual *int64 `protobuf:"varint,5,opt,name=cas_config_opid_index_less_or_equal,json=casConfigOpidIndexLessOrEqual" json:"cas_config_opid_index_less_or_equal,omitempty"`
	// Hide tablet instead of deleting it.
	HideOnly *bool `protobuf:"varint,6,opt,name=hide_only,json=hideOnly" json:"hide_only,omitempty"`
	// Tablet server should trigger abort of all transactions it participates in upon shutting down
	// this tablet. Should generally be set to true in the case of a dropped table.
	ShouldAbortActiveTxns *bool `protobuf:"varint,7,opt,name=should_abort_active_txns,json=shouldAbortActiveTxns" json:"should_abort_active_txns,omitempty"`
	// Do not delete tablet data.
	KeepData      *bool `protobuf:"varint,8,opt,name=keep_data,json=keepData" json:"keep_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for DeleteTabletRequestPB fields.
const (
	Default_DeleteTabletRequestPB_DeleteType = tablet.TabletDataState(3) // tablet.TabletDataState_TABLET_DATA_TOMBSTONED
)

func (x *DeleteTabletRequestPB) Reset() {
	*x = DeleteTabletRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletRequestPB) ProtoMessage() {}

func (x *DeleteTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *DeleteTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *DeleteTabletRequestPB) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *DeleteTabletRequestPB) GetDeleteType() tablet.TabletDataState {
	if x != nil && x.DeleteType != nil {
		return *x.DeleteType
	}
	return Default_DeleteTabletRequestPB_DeleteType
}

func (x *DeleteTabletRequestPB) GetCasConfigOpidIndexLessOrEqual() int64 {
	if x != nil && x.CasConfigOpidIndexLessOrEqual != nil {
		return *x.CasConfigOpidIndexLessOrEqual
	}
	return 0
}

func (x *DeleteTabletRequestPB) GetHideOnly() bool {
	if x != nil && x.HideOnly != nil {
		return *x.HideOnly
	}
	return false
}

func (x *DeleteTabletRequestPB) GetShouldAbortActiveTxns() bool {
	if x != nil && x.ShouldAbortActiveTxns != nil {
		return *x.ShouldAbortActiveTxns
	}
	return false
}

func (x *DeleteTabletRequestPB) GetKeepData() bool {
	if x != nil && x.KeepData != nil {
		return *x.KeepData
	}
	return false
}

type DeleteTabletResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTabletResponsePB) Reset() {
	*x = DeleteTabletResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletResponsePB) ProtoMessage() {}

func (x *DeleteTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// TODO: rename this to FlushOrCompactTabletsRequestPB
type FlushTabletsRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// Tablets to flush.
	TabletIds            [][]byte `protobuf:"bytes,2,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"`
	PropagatedHybridTime *uint64  `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Actual operation that we plan to perform.
	Operation *FlushTabletsRequestPB_Operation `protobuf:"varint,4,opt,name=operation,enum=yb.tserver.FlushTabletsRequestPB_Operation" json:"operation,omitempty"`
	// Whether we want to flush or compact all tablets in the server.
	AllTablets *bool `protobuf:"varint,5,opt,name=all_tablets,json=allTablets" json:"all_tablets,omitempty"`
	// Only flush/compact regular RocksDB, not intents RocksDB.
	RegularOnly   *bool `protobuf:"varint,6,opt,name=regular_only,json=regularOnly" json:"regular_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushTabletsRequestPB) Reset() {
	*x = FlushTabletsRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushTabletsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTabletsRequestPB) ProtoMessage() {}

func (x *FlushTabletsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTabletsRequestPB.ProtoReflect.Descriptor instead.
func (*FlushTabletsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{12}
}

func (x *FlushTabletsRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *FlushTabletsRequestPB) GetTabletIds() [][]byte {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

func (x *FlushTabletsRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *FlushTabletsRequestPB) GetOperation() FlushTabletsRequestPB_Operation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return FlushTabletsRequestPB_FLUSH
}

func (x *FlushTabletsRequestPB) GetAllTablets() bool {
	if x != nil && x.AllTablets != nil {
		return *x.AllTablets
	}
	return false
}

func (x *FlushTabletsRequestPB) GetRegularOnly() bool {
	if x != nil && x.RegularOnly != nil {
		return *x.RegularOnly
	}
	return false
}

type FlushTabletsResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	FailedTabletId       []byte                 `protobuf:"bytes,2,opt,name=failed_tablet_id,json=failedTabletId" json:"failed_tablet_id,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FlushTabletsResponsePB) Reset() {
	*x = FlushTabletsResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushTabletsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTabletsResponsePB) ProtoMessage() {}

func (x *FlushTabletsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTabletsResponsePB.ProtoReflect.Descriptor instead.
func (*FlushTabletsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{13}
}

func (x *FlushTabletsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FlushTabletsResponsePB) GetFailedTabletId() []byte {
	if x != nil {
		return x.FailedTabletId
	}
	return nil
}

func (x *FlushTabletsResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type CountIntentsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountIntentsRequestPB) Reset() {
	*x = CountIntentsRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountIntentsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountIntentsRequestPB) ProtoMessage() {}

func (x *CountIntentsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountIntentsRequestPB.ProtoReflect.Descriptor instead.
func (*CountIntentsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{14}
}

type CountIntentsResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NumIntents    *int64                 `protobuf:"varint,2,opt,name=num_intents,json=numIntents" json:"num_intents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CountIntentsResponsePB) Reset() {
	*x = CountIntentsResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountIntentsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountIntentsResponsePB) ProtoMessage() {}

func (x *CountIntentsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountIntentsResponsePB.ProtoReflect.Descriptor instead.
func (*CountIntentsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{15}
}

func (x *CountIntentsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CountIntentsResponsePB) GetNumIntents() int64 {
	if x != nil && x.NumIntents != nil {
		return *x.NumIntents
	}
	return 0
}

type AddTableToTabletRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	AddTable      *tablet.TableInfoPB    `protobuf:"bytes,2,req,name=add_table,json=addTable" json:"add_table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTableToTabletRequestPB) Reset() {
	*x = AddTableToTabletRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTableToTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTableToTabletRequestPB) ProtoMessage() {}

func (x *AddTableToTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTableToTabletRequestPB.ProtoReflect.Descriptor instead.
func (*AddTableToTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{16}
}

func (x *AddTableToTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *AddTableToTabletRequestPB) GetAddTable() *tablet.TableInfoPB {
	if x != nil {
		return x.AddTable
	}
	return nil
}

type AddTableToTabletResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AddTableToTabletResponsePB) Reset() {
	*x = AddTableToTabletResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTableToTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTableToTabletResponsePB) ProtoMessage() {}

func (x *AddTableToTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTableToTabletResponsePB.ProtoReflect.Descriptor instead.
func (*AddTableToTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{17}
}

func (x *AddTableToTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AddTableToTabletResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type RemoveTableFromTabletRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	RemoveTableId []byte                 `protobuf:"bytes,2,req,name=remove_table_id,json=removeTableId" json:"remove_table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTableFromTabletRequestPB) Reset() {
	*x = RemoveTableFromTabletRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTableFromTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableFromTabletRequestPB) ProtoMessage() {}

func (x *RemoveTableFromTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableFromTabletRequestPB.ProtoReflect.Descriptor instead.
func (*RemoveTableFromTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveTableFromTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *RemoveTableFromTabletRequestPB) GetRemoveTableId() []byte {
	if x != nil {
		return x.RemoveTableId
	}
	return nil
}

type RemoveTableFromTabletResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RemoveTableFromTabletResponsePB) Reset() {
	*x = RemoveTableFromTabletResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTableFromTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableFromTabletResponsePB) ProtoMessage() {}

func (x *RemoveTableFromTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableFromTabletResponsePB.ProtoReflect.Descriptor instead.
func (*RemoveTableFromTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveTableFromTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RemoveTableFromTabletResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type SplitTabletResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SplitTabletResponsePB) Reset() {
	*x = SplitTabletResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletResponsePB) ProtoMessage() {}

func (x *SplitTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletResponsePB.ProtoReflect.Descriptor instead.
func (*SplitTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{20}
}

func (x *SplitTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SplitTabletResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type UpgradeYsqlRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Perform an upgrade unsing just one connection.
	// This is much slower but does not incur overhead for each database.
	UseSingleConnection *bool `protobuf:"varint,1,opt,name=use_single_connection,json=useSingleConnection,def=0" json:"use_single_connection,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for UpgradeYsqlRequestPB fields.
const (
	Default_UpgradeYsqlRequestPB_UseSingleConnection = bool(false)
)

func (x *UpgradeYsqlRequestPB) Reset() {
	*x = UpgradeYsqlRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeYsqlRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeYsqlRequestPB) ProtoMessage() {}

func (x *UpgradeYsqlRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeYsqlRequestPB.ProtoReflect.Descriptor instead.
func (*UpgradeYsqlRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{21}
}

func (x *UpgradeYsqlRequestPB) GetUseSingleConnection() bool {
	if x != nil && x.UseSingleConnection != nil {
		return *x.UseSingleConnection
	}
	return Default_UpgradeYsqlRequestPB_UseSingleConnection
}

type UpgradeYsqlResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpgradeYsqlResponsePB) Reset() {
	*x = UpgradeYsqlResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradeYsqlResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeYsqlResponsePB) ProtoMessage() {}

func (x *UpgradeYsqlResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeYsqlResponsePB.ProtoReflect.Descriptor instead.
func (*UpgradeYsqlResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{22}
}

func (x *UpgradeYsqlResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type WaitForYsqlBackendsCatalogVersionRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	DatabaseOid           *uint32                `protobuf:"varint,1,opt,name=database_oid,json=databaseOid" json:"database_oid,omitempty"`                                   // required
	CatalogVersion        *uint64                `protobuf:"varint,2,opt,name=catalog_version,json=catalogVersion" json:"catalog_version,omitempty"`                          // required
	RequestorPgBackendPid *int32                 `protobuf:"varint,4,opt,name=requestor_pg_backend_pid,json=requestorPgBackendPid" json:"requestor_pg_backend_pid,omitempty"` // optional
	// Previously known number of YSQL backends that have not reached the requested catalog version.
	// -1 means unknown.
	PrevNumLaggingBackends *int32 `protobuf:"varint,3,opt,name=prev_num_lagging_backends,json=prevNumLaggingBackends" json:"prev_num_lagging_backends,omitempty"` // required
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) Reset() {
	*x = WaitForYsqlBackendsCatalogVersionRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForYsqlBackendsCatalogVersionRequestPB) ProtoMessage() {}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForYsqlBackendsCatalogVersionRequestPB.ProtoReflect.Descriptor instead.
func (*WaitForYsqlBackendsCatalogVersionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{23}
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetDatabaseOid() uint32 {
	if x != nil && x.DatabaseOid != nil {
		return *x.DatabaseOid
	}
	return 0
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetCatalogVersion() uint64 {
	if x != nil && x.CatalogVersion != nil {
		return *x.CatalogVersion
	}
	return 0
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetRequestorPgBackendPid() int32 {
	if x != nil && x.RequestorPgBackendPid != nil {
		return *x.RequestorPgBackendPid
	}
	return 0
}

func (x *WaitForYsqlBackendsCatalogVersionRequestPB) GetPrevNumLaggingBackends() int32 {
	if x != nil && x.PrevNumLaggingBackends != nil {
		return *x.PrevNumLaggingBackends
	}
	return 0
}

type WaitForYsqlBackendsCatalogVersionResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Error *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// Number of YSQL backends that have not reached the requested catalog version.
	NumLaggingBackends *int32 `protobuf:"varint,2,opt,name=num_lagging_backends,json=numLaggingBackends" json:"num_lagging_backends,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) Reset() {
	*x = WaitForYsqlBackendsCatalogVersionResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForYsqlBackendsCatalogVersionResponsePB) ProtoMessage() {}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForYsqlBackendsCatalogVersionResponsePB.ProtoReflect.Descriptor instead.
func (*WaitForYsqlBackendsCatalogVersionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{24}
}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WaitForYsqlBackendsCatalogVersionResponsePB) GetNumLaggingBackends() int32 {
	if x != nil && x.NumLaggingBackends != nil {
		return *x.NumLaggingBackends
	}
	return 0
}

type TestRetryRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid             []byte  `protobuf:"bytes,2,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// See TestRetry RPC method description below.
	NumRetries    *int32 `protobuf:"varint,4,req,name=num_retries,json=numRetries" json:"num_retries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRetryRequestPB) Reset() {
	*x = TestRetryRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRetryRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRetryRequestPB) ProtoMessage() {}

func (x *TestRetryRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRetryRequestPB.ProtoReflect.Descriptor instead.
func (*TestRetryRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{25}
}

func (x *TestRetryRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *TestRetryRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *TestRetryRequestPB) GetNumRetries() int32 {
	if x != nil && x.NumRetries != nil {
		return *x.NumRetries
	}
	return 0
}

type TestRetryResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TestRetryResponsePB) Reset() {
	*x = TestRetryResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRetryResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRetryResponsePB) ProtoMessage() {}

func (x *TestRetryResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRetryResponsePB.ProtoReflect.Descriptor instead.
func (*TestRetryResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{26}
}

func (x *TestRetryResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TestRetryResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type UpdateTransactionTablesVersionRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *uint64                `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTransactionTablesVersionRequestPB) Reset() {
	*x = UpdateTransactionTablesVersionRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionTablesVersionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionTablesVersionRequestPB) ProtoMessage() {}

func (x *UpdateTransactionTablesVersionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionTablesVersionRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionTablesVersionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateTransactionTablesVersionRequestPB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type UpdateTransactionTablesVersionResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTransactionTablesVersionResponsePB) Reset() {
	*x = UpdateTransactionTablesVersionResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionTablesVersionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionTablesVersionResponsePB) ProtoMessage() {}

func (x *UpdateTransactionTablesVersionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionTablesVersionResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionTablesVersionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateTransactionTablesVersionResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CloneTabletResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CloneTabletResponsePB) Reset() {
	*x = CloneTabletResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneTabletResponsePB) ProtoMessage() {}

func (x *CloneTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneTabletResponsePB.ProtoReflect.Descriptor instead.
func (*CloneTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{29}
}

func (x *CloneTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CloneTabletResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type ClonePgSchemaRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceDbName  []byte                 `protobuf:"bytes,1,opt,name=source_db_name,json=sourceDbName" json:"source_db_name,omitempty"`
	TargetDbName  []byte                 `protobuf:"bytes,2,opt,name=target_db_name,json=targetDbName" json:"target_db_name,omitempty"`
	RestoreHt     *uint64                `protobuf:"fixed64,3,opt,name=restore_ht,json=restoreHt" json:"restore_ht,omitempty"`
	SourceOwner   []byte                 `protobuf:"bytes,4,opt,name=source_owner,json=sourceOwner" json:"source_owner,omitempty"`
	TargetOwner   []byte                 `protobuf:"bytes,5,opt,name=target_owner,json=targetOwner" json:"target_owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClonePgSchemaRequestPB) Reset() {
	*x = ClonePgSchemaRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClonePgSchemaRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClonePgSchemaRequestPB) ProtoMessage() {}

func (x *ClonePgSchemaRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClonePgSchemaRequestPB.ProtoReflect.Descriptor instead.
func (*ClonePgSchemaRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{30}
}

func (x *ClonePgSchemaRequestPB) GetSourceDbName() []byte {
	if x != nil {
		return x.SourceDbName
	}
	return nil
}

func (x *ClonePgSchemaRequestPB) GetTargetDbName() []byte {
	if x != nil {
		return x.TargetDbName
	}
	return nil
}

func (x *ClonePgSchemaRequestPB) GetRestoreHt() uint64 {
	if x != nil && x.RestoreHt != nil {
		return *x.RestoreHt
	}
	return 0
}

func (x *ClonePgSchemaRequestPB) GetSourceOwner() []byte {
	if x != nil {
		return x.SourceOwner
	}
	return nil
}

func (x *ClonePgSchemaRequestPB) GetTargetOwner() []byte {
	if x != nil {
		return x.TargetOwner
	}
	return nil
}

type ClonePgSchemaResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClonePgSchemaResponsePB) Reset() {
	*x = ClonePgSchemaResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClonePgSchemaResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClonePgSchemaResponsePB) ProtoMessage() {}

func (x *ClonePgSchemaResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClonePgSchemaResponsePB.ProtoReflect.Descriptor instead.
func (*ClonePgSchemaResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{31}
}

func (x *ClonePgSchemaResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type EnableDbConnsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetDbName  []byte                 `protobuf:"bytes,1,opt,name=target_db_name,json=targetDbName" json:"target_db_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableDbConnsRequestPB) Reset() {
	*x = EnableDbConnsRequestPB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableDbConnsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDbConnsRequestPB) ProtoMessage() {}

func (x *EnableDbConnsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDbConnsRequestPB.ProtoReflect.Descriptor instead.
func (*EnableDbConnsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{32}
}

func (x *EnableDbConnsRequestPB) GetTargetDbName() []byte {
	if x != nil {
		return x.TargetDbName
	}
	return nil
}

type EnableDbConnsResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableDbConnsResponsePB) Reset() {
	*x = EnableDbConnsResponsePB{}
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableDbConnsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableDbConnsResponsePB) ProtoMessage() {}

func (x *EnableDbConnsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableDbConnsResponsePB.ProtoReflect.Descriptor instead.
func (*EnableDbConnsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{33}
}

func (x *EnableDbConnsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_yb_tserver_tserver_admin_proto protoreflect.FileDescriptor

var file_yb_tserver_tserver_admin_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x1b, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42,
	0x52, 0x16, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x53, 0x61, 0x66, 0x65, 0x4f, 0x70, 0x49, 0x64, 0x22, 0xed, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x18,
	0x6d, 0x69, 0x6e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x61,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x03, 0x0a,
	0x16, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x8f, 0x02, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x22, 0xed, 0x06, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x42,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x18,
	0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x79, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x70, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x42, 0x0a,
	0x1e, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x64, 0x63, 0x53, 0x64, 0x6b, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x73, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x12, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x73,
	0x61, 0x66, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0e, 0x63, 0x64, 0x63,
	0x53, 0x64, 0x6b, 0x53, 0x61, 0x66, 0x65, 0x4f, 0x70, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x27, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x61, 0x0a, 0x28, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xfd, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x16, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f,
	0x4d, 0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x23, 0x63, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1d, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x69, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x69, 0x64, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x37, 0x0a,
	0x18, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xc9, 0x02, 0x0a, 0x15, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x2f, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x5f, 0x47, 0x43, 0x10, 0x02,
	0x22, 0xaf, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x70, 0x0a, 0x16, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a,
	0x19, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x08, 0x61, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x89, 0x01, 0x0a,
	0x1a, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x8e, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x84, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x39, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x75, 0x73, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x15, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x2a, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x5f, 0x70, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x50, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x70, 0x72, 0x65, 0x76, 0x4e, 0x75, 0x6d, 0x4c, 0x61, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x2b, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x43, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc9, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x67, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x50, 0x0a,
	0x17, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x3e, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x50, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x32, 0xdb, 0x0e, 0x0a, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x21,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x34, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x55, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x57, 0x0a, 0x0b, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x58, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x6e,
	0x65, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x55, 0x0a, 0x0c, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x55, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x61, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x25, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x70, 0x0a, 0x15,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x51,
	0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x52, 0x0a, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x59, 0x73, 0x71, 0x6c,
	0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x59, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x59, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x8b, 0x01, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x51, 0x0a, 0x0b, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x58, 0x0a,
	0x0d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x22,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x50, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x50, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x62, 0x43, 0x6f,
	0x6e, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x4c, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1e,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x42,
	0x10, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72,
})

var (
	file_yb_tserver_tserver_admin_proto_rawDescOnce sync.Once
	file_yb_tserver_tserver_admin_proto_rawDescData []byte
)

func file_yb_tserver_tserver_admin_proto_rawDescGZIP() []byte {
	file_yb_tserver_tserver_admin_proto_rawDescOnce.Do(func() {
		file_yb_tserver_tserver_admin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_tserver_tserver_admin_proto_rawDesc), len(file_yb_tserver_tserver_admin_proto_rawDesc)))
	})
	return file_yb_tserver_tserver_admin_proto_rawDescData
}

var file_yb_tserver_tserver_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yb_tserver_tserver_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_yb_tserver_tserver_admin_proto_goTypes = []any{
	(FlushTabletsRequestPB_Operation)(0),                // 0: yb.tserver.FlushTabletsRequestPB.Operation
	(*ExportedTabletMetadataChanges)(nil),               // 1: yb.tserver.ExportedTabletMetadataChanges
	(*ChangeMetadataResponsePB)(nil),                    // 2: yb.tserver.ChangeMetadataResponsePB
	(*GetSafeTimeRequestPB)(nil),                        // 3: yb.tserver.GetSafeTimeRequestPB
	(*GetSafeTimeResponsePB)(nil),                       // 4: yb.tserver.GetSafeTimeResponsePB
	(*BackfillIndexRequestPB)(nil),                      // 5: yb.tserver.BackfillIndexRequestPB
	(*BackfillIndexResponsePB)(nil),                     // 6: yb.tserver.BackfillIndexResponsePB
	(*CreateTabletRequestPB)(nil),                       // 7: yb.tserver.CreateTabletRequestPB
	(*CreateTabletResponsePB)(nil),                      // 8: yb.tserver.CreateTabletResponsePB
	(*PrepareDeleteTransactionTabletRequestPB)(nil),     // 9: yb.tserver.PrepareDeleteTransactionTabletRequestPB
	(*PrepareDeleteTransactionTabletResponsePB)(nil),    // 10: yb.tserver.PrepareDeleteTransactionTabletResponsePB
	(*DeleteTabletRequestPB)(nil),                       // 11: yb.tserver.DeleteTabletRequestPB
	(*DeleteTabletResponsePB)(nil),                      // 12: yb.tserver.DeleteTabletResponsePB
	(*FlushTabletsRequestPB)(nil),                       // 13: yb.tserver.FlushTabletsRequestPB
	(*FlushTabletsResponsePB)(nil),                      // 14: yb.tserver.FlushTabletsResponsePB
	(*CountIntentsRequestPB)(nil),                       // 15: yb.tserver.CountIntentsRequestPB
	(*CountIntentsResponsePB)(nil),                      // 16: yb.tserver.CountIntentsResponsePB
	(*AddTableToTabletRequestPB)(nil),                   // 17: yb.tserver.AddTableToTabletRequestPB
	(*AddTableToTabletResponsePB)(nil),                  // 18: yb.tserver.AddTableToTabletResponsePB
	(*RemoveTableFromTabletRequestPB)(nil),              // 19: yb.tserver.RemoveTableFromTabletRequestPB
	(*RemoveTableFromTabletResponsePB)(nil),             // 20: yb.tserver.RemoveTableFromTabletResponsePB
	(*SplitTabletResponsePB)(nil),                       // 21: yb.tserver.SplitTabletResponsePB
	(*UpgradeYsqlRequestPB)(nil),                        // 22: yb.tserver.UpgradeYsqlRequestPB
	(*UpgradeYsqlResponsePB)(nil),                       // 23: yb.tserver.UpgradeYsqlResponsePB
	(*WaitForYsqlBackendsCatalogVersionRequestPB)(nil),  // 24: yb.tserver.WaitForYsqlBackendsCatalogVersionRequestPB
	(*WaitForYsqlBackendsCatalogVersionResponsePB)(nil), // 25: yb.tserver.WaitForYsqlBackendsCatalogVersionResponsePB
	(*TestRetryRequestPB)(nil),                          // 26: yb.tserver.TestRetryRequestPB
	(*TestRetryResponsePB)(nil),                         // 27: yb.tserver.TestRetryResponsePB
	(*UpdateTransactionTablesVersionRequestPB)(nil),     // 28: yb.tserver.UpdateTransactionTablesVersionRequestPB
	(*UpdateTransactionTablesVersionResponsePB)(nil),    // 29: yb.tserver.UpdateTransactionTablesVersionResponsePB
	(*CloneTabletResponsePB)(nil),                       // 30: yb.tserver.CloneTabletResponsePB
	(*ClonePgSchemaRequestPB)(nil),                      // 31: yb.tserver.ClonePgSchemaRequestPB
	(*ClonePgSchemaResponsePB)(nil),                     // 32: yb.tserver.ClonePgSchemaResponsePB
	(*EnableDbConnsRequestPB)(nil),                      // 33: yb.tserver.EnableDbConnsRequestPB
	(*EnableDbConnsResponsePB)(nil),                     // 34: yb.tserver.EnableDbConnsResponsePB
	(*tablet.ChangeMetadataRequestPB)(nil),              // 35: yb.tablet.ChangeMetadataRequestPB
	(*TabletServerErrorPB)(nil),                         // 36: yb.tserver.TabletServerErrorPB
	(*common.OpIdPB)(nil),                               // 37: yb.OpIdPB
	(*common.IndexInfoPB)(nil),                          // 38: yb.IndexInfoPB
	(*common.PartitionPB)(nil),                          // 39: yb.PartitionPB
	(common.TableType)(0),                               // 40: yb.TableType
	(*common.SchemaPB)(nil),                             // 41: yb.SchemaPB
	(*common.PartitionSchemaPB)(nil),                    // 42: yb.PartitionSchemaPB
	(*consensus.RaftConfigPB)(nil),                      // 43: yb.consensus.RaftConfigPB
	(common.StatefulServiceKind)(0),                     // 44: yb.StatefulServiceKind
	(tablet.TabletDataState)(0),                         // 45: yb.tablet.TabletDataState
	(*tablet.TableInfoPB)(nil),                          // 46: yb.tablet.TableInfoPB
	(*tablet.SplitTabletRequestPB)(nil),                 // 47: yb.tablet.SplitTabletRequestPB
	(*tablet.CloneTabletRequestPB)(nil),                 // 48: yb.tablet.CloneTabletRequestPB
}
var file_yb_tserver_tserver_admin_proto_depIdxs = []int32{
	35, // 0: yb.tserver.ExportedTabletMetadataChanges.metadata_changes:type_name -> yb.tablet.ChangeMetadataRequestPB
	36, // 1: yb.tserver.ChangeMetadataResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	37, // 2: yb.tserver.ChangeMetadataResponsePB.cdc_sdk_snapshot_safe_op_id:type_name -> yb.OpIdPB
	36, // 3: yb.tserver.GetSafeTimeResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	38, // 4: yb.tserver.BackfillIndexRequestPB.indexes:type_name -> yb.IndexInfoPB
	36, // 5: yb.tserver.BackfillIndexResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	39, // 6: yb.tserver.CreateTabletRequestPB.partition:type_name -> yb.PartitionPB
	40, // 7: yb.tserver.CreateTabletRequestPB.table_type:type_name -> yb.TableType
	41, // 8: yb.tserver.CreateTabletRequestPB.schema:type_name -> yb.SchemaPB
	42, // 9: yb.tserver.CreateTabletRequestPB.partition_schema:type_name -> yb.PartitionSchemaPB
	43, // 10: yb.tserver.CreateTabletRequestPB.config:type_name -> yb.consensus.RaftConfigPB
	38, // 11: yb.tserver.CreateTabletRequestPB.index_info:type_name -> yb.IndexInfoPB
	44, // 12: yb.tserver.CreateTabletRequestPB.hosted_stateful_services:type_name -> yb.StatefulServiceKind
	36, // 13: yb.tserver.CreateTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	37, // 14: yb.tserver.CreateTabletResponsePB.cdc_sdk_safe_op_id:type_name -> yb.OpIdPB
	36, // 15: yb.tserver.PrepareDeleteTransactionTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	45, // 16: yb.tserver.DeleteTabletRequestPB.delete_type:type_name -> yb.tablet.TabletDataState
	36, // 17: yb.tserver.DeleteTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	0,  // 18: yb.tserver.FlushTabletsRequestPB.operation:type_name -> yb.tserver.FlushTabletsRequestPB.Operation
	36, // 19: yb.tserver.FlushTabletsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 20: yb.tserver.CountIntentsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	46, // 21: yb.tserver.AddTableToTabletRequestPB.add_table:type_name -> yb.tablet.TableInfoPB
	36, // 22: yb.tserver.AddTableToTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 23: yb.tserver.RemoveTableFromTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 24: yb.tserver.SplitTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 25: yb.tserver.UpgradeYsqlResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 26: yb.tserver.WaitForYsqlBackendsCatalogVersionResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 27: yb.tserver.TestRetryResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 28: yb.tserver.UpdateTransactionTablesVersionResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 29: yb.tserver.CloneTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 30: yb.tserver.ClonePgSchemaResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	36, // 31: yb.tserver.EnableDbConnsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	7,  // 32: yb.tserver.TabletServerAdminService.CreateTablet:input_type -> yb.tserver.CreateTabletRequestPB
	9,  // 33: yb.tserver.TabletServerAdminService.PrepareDeleteTransactionTablet:input_type -> yb.tserver.PrepareDeleteTransactionTabletRequestPB
	11, // 34: yb.tserver.TabletServerAdminService.DeleteTablet:input_type -> yb.tserver.DeleteTabletRequestPB
	35, // 35: yb.tserver.TabletServerAdminService.AlterSchema:input_type -> yb.tablet.ChangeMetadataRequestPB
	3,  // 36: yb.tserver.TabletServerAdminService.GetSafeTime:input_type -> yb.tserver.GetSafeTimeRequestPB
	5,  // 37: yb.tserver.TabletServerAdminService.BackfillIndex:input_type -> yb.tserver.BackfillIndexRequestPB
	35, // 38: yb.tserver.TabletServerAdminService.BackfillDone:input_type -> yb.tablet.ChangeMetadataRequestPB
	13, // 39: yb.tserver.TabletServerAdminService.FlushTablets:input_type -> yb.tserver.FlushTabletsRequestPB
	15, // 40: yb.tserver.TabletServerAdminService.CountIntents:input_type -> yb.tserver.CountIntentsRequestPB
	17, // 41: yb.tserver.TabletServerAdminService.AddTableToTablet:input_type -> yb.tserver.AddTableToTabletRequestPB
	19, // 42: yb.tserver.TabletServerAdminService.RemoveTableFromTablet:input_type -> yb.tserver.RemoveTableFromTabletRequestPB
	47, // 43: yb.tserver.TabletServerAdminService.SplitTablet:input_type -> yb.tablet.SplitTabletRequestPB
	22, // 44: yb.tserver.TabletServerAdminService.UpgradeYsql:input_type -> yb.tserver.UpgradeYsqlRequestPB
	24, // 45: yb.tserver.TabletServerAdminService.WaitForYsqlBackendsCatalogVersion:input_type -> yb.tserver.WaitForYsqlBackendsCatalogVersionRequestPB
	28, // 46: yb.tserver.TabletServerAdminService.UpdateTransactionTablesVersion:input_type -> yb.tserver.UpdateTransactionTablesVersionRequestPB
	48, // 47: yb.tserver.TabletServerAdminService.CloneTablet:input_type -> yb.tablet.CloneTabletRequestPB
	31, // 48: yb.tserver.TabletServerAdminService.ClonePgSchema:input_type -> yb.tserver.ClonePgSchemaRequestPB
	33, // 49: yb.tserver.TabletServerAdminService.EnableDbConns:input_type -> yb.tserver.EnableDbConnsRequestPB
	26, // 50: yb.tserver.TabletServerAdminService.TestRetry:input_type -> yb.tserver.TestRetryRequestPB
	8,  // 51: yb.tserver.TabletServerAdminService.CreateTablet:output_type -> yb.tserver.CreateTabletResponsePB
	10, // 52: yb.tserver.TabletServerAdminService.PrepareDeleteTransactionTablet:output_type -> yb.tserver.PrepareDeleteTransactionTabletResponsePB
	12, // 53: yb.tserver.TabletServerAdminService.DeleteTablet:output_type -> yb.tserver.DeleteTabletResponsePB
	2,  // 54: yb.tserver.TabletServerAdminService.AlterSchema:output_type -> yb.tserver.ChangeMetadataResponsePB
	4,  // 55: yb.tserver.TabletServerAdminService.GetSafeTime:output_type -> yb.tserver.GetSafeTimeResponsePB
	6,  // 56: yb.tserver.TabletServerAdminService.BackfillIndex:output_type -> yb.tserver.BackfillIndexResponsePB
	2,  // 57: yb.tserver.TabletServerAdminService.BackfillDone:output_type -> yb.tserver.ChangeMetadataResponsePB
	14, // 58: yb.tserver.TabletServerAdminService.FlushTablets:output_type -> yb.tserver.FlushTabletsResponsePB
	16, // 59: yb.tserver.TabletServerAdminService.CountIntents:output_type -> yb.tserver.CountIntentsResponsePB
	18, // 60: yb.tserver.TabletServerAdminService.AddTableToTablet:output_type -> yb.tserver.AddTableToTabletResponsePB
	20, // 61: yb.tserver.TabletServerAdminService.RemoveTableFromTablet:output_type -> yb.tserver.RemoveTableFromTabletResponsePB
	21, // 62: yb.tserver.TabletServerAdminService.SplitTablet:output_type -> yb.tserver.SplitTabletResponsePB
	23, // 63: yb.tserver.TabletServerAdminService.UpgradeYsql:output_type -> yb.tserver.UpgradeYsqlResponsePB
	25, // 64: yb.tserver.TabletServerAdminService.WaitForYsqlBackendsCatalogVersion:output_type -> yb.tserver.WaitForYsqlBackendsCatalogVersionResponsePB
	29, // 65: yb.tserver.TabletServerAdminService.UpdateTransactionTablesVersion:output_type -> yb.tserver.UpdateTransactionTablesVersionResponsePB
	30, // 66: yb.tserver.TabletServerAdminService.CloneTablet:output_type -> yb.tserver.CloneTabletResponsePB
	32, // 67: yb.tserver.TabletServerAdminService.ClonePgSchema:output_type -> yb.tserver.ClonePgSchemaResponsePB
	34, // 68: yb.tserver.TabletServerAdminService.EnableDbConns:output_type -> yb.tserver.EnableDbConnsResponsePB
	27, // 69: yb.tserver.TabletServerAdminService.TestRetry:output_type -> yb.tserver.TestRetryResponsePB
	51, // [51:70] is the sub-list for method output_type
	32, // [32:51] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_yb_tserver_tserver_admin_proto_init() }
func file_yb_tserver_tserver_admin_proto_init() {
	if File_yb_tserver_tserver_admin_proto != nil {
		return
	}
	file_yb_tserver_tserver_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_tserver_tserver_admin_proto_rawDesc), len(file_yb_tserver_tserver_admin_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_tserver_tserver_admin_proto_goTypes,
		DependencyIndexes: file_yb_tserver_tserver_admin_proto_depIdxs,
		EnumInfos:         file_yb_tserver_tserver_admin_proto_enumTypes,
		MessageInfos:      file_yb_tserver_tserver_admin_proto_msgTypes,
	}.Build()
	File_yb_tserver_tserver_admin_proto = out.File
	file_yb_tserver_tserver_admin_proto_goTypes = nil
	file_yb_tserver_tserver_admin_proto_depIdxs = nil
}
