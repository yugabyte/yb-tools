// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package tserver

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.tserver.TabletServerService
// service: TabletServerService
type TabletServerService interface {
	Write(request *WriteRequestPB) (*WriteResponsePB, error)
	Read(request *ReadRequestPB) (*ReadResponsePB, error)
	VerifyTableRowRange(request *VerifyTableRowRangeRequestPB) (*VerifyTableRowRangeResponsePB, error)
	NoOp(request *NoOpRequestPB) (*NoOpResponsePB, error)
	ListTablets(request *ListTabletsRequestPB) (*ListTabletsResponsePB, error)
	GetLogLocation(request *GetLogLocationRequestPB) (*GetLogLocationResponsePB, error)
	Checksum(request *ChecksumRequestPB) (*ChecksumResponsePB, error)
	ListTabletsForTabletServer(request *ListTabletsForTabletServerRequestPB) (*ListTabletsForTabletServerResponsePB, error)
	ImportData(request *ImportDataRequestPB) (*ImportDataResponsePB, error)
	UpdateTransaction(request *UpdateTransactionRequestPB) (*UpdateTransactionResponsePB, error)
	GetTransactionStatus(request *GetTransactionStatusRequestPB) (*GetTransactionStatusResponsePB, error)
	GetOldTransactions(request *GetOldTransactionsRequestPB) (*GetOldTransactionsResponsePB, error)
	GetOldSingleShardWaiters(request *GetOldSingleShardWaitersRequestPB) (*GetOldSingleShardWaitersResponsePB, error)
	GetTransactionStatusAtParticipant(request *GetTransactionStatusAtParticipantRequestPB) (*GetTransactionStatusAtParticipantResponsePB, error)
	AbortTransaction(request *AbortTransactionRequestPB) (*AbortTransactionResponsePB, error)
	UpdateTransactionStatusLocation(request *UpdateTransactionStatusLocationRequestPB) (*UpdateTransactionStatusLocationResponsePB, error)
	UpdateTransactionWaitingForStatus(request *UpdateTransactionWaitingForStatusRequestPB) (*UpdateTransactionWaitingForStatusResponsePB, error)
	ProbeTransactionDeadlock(request *ProbeTransactionDeadlockRequestPB) (*ProbeTransactionDeadlockResponsePB, error)
	Truncate(request *TruncateRequestPB) (*TruncateResponsePB, error)
	GetTabletStatus(request *GetTabletStatusRequestPB) (*GetTabletStatusResponsePB, error)
	GetMasterAddresses(request *GetMasterAddressesRequestPB) (*GetMasterAddressesResponsePB, error)
	Publish(request *PublishRequestPB) (*PublishResponsePB, error)
	IsTabletServerReady(request *IsTabletServerReadyRequestPB) (*IsTabletServerReadyResponsePB, error)
	GetSplitKey(request *GetSplitKeyRequestPB) (*GetSplitKeyResponsePB, error)
	GetSharedData(request *GetSharedDataRequestPB) (*GetSharedDataResponsePB, error)
	GetTserverCatalogVersionInfo(request *GetTserverCatalogVersionInfoRequestPB) (*GetTserverCatalogVersionInfoResponsePB, error)
	ListMasterServers(request *ListMasterServersRequestPB) (*ListMasterServersResponsePB, error)
	GetLockStatus(request *GetLockStatusRequestPB) (*GetLockStatusResponsePB, error)
	CancelTransaction(request *CancelTransactionRequestPB) (*CancelTransactionResponsePB, error)
	GetCompatibleSchemaVersion(request *GetCompatibleSchemaVersionRequestPB) (*GetCompatibleSchemaVersionResponsePB, error)
	StartRemoteSnapshotTransfer(request *StartRemoteSnapshotTransferRequestPB) (*StartRemoteSnapshotTransferResponsePB, error)
	GetTabletKeyRanges(request *GetTabletKeyRangesRequestPB) (*GetTabletKeyRangesResponsePB, error)
	CheckTserverTabletHealth(request *CheckTserverTabletHealthRequestPB) (*CheckTserverTabletHealthResponsePB, error)
	ClearAllMetaCachesOnServer(request *ClearAllMetaCachesOnServerRequestPB) (*ClearAllMetaCachesOnServerResponsePB, error)
	ClearMetacache(request *ClearMetacacheRequestPB) (*ClearMetacacheResponsePB, error)
	ClearUniverseUuid(request *ClearUniverseUuidRequestPB) (*ClearUniverseUuidResponsePB, error)
	AcquireObjectLocks(request *AcquireObjectLockRequestPB) (*AcquireObjectLockResponsePB, error)
	ReleaseObjectLocks(request *ReleaseObjectLockRequestPB) (*ReleaseObjectLockResponsePB, error)
	AdminExecutePgsql(request *AdminExecutePgsqlRequestPB) (*AdminExecutePgsqlResponsePB, error)
	GetLocalPgTxnSnapshot(request *GetLocalPgTxnSnapshotRequestPB) (*GetLocalPgTxnSnapshotResponsePB, error)
	GetMetrics(request *GetMetricsRequestPB) (*GetMetricsResponsePB, error)
}

type TabletServerServiceImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

func (s *TabletServerServiceImpl) Write(request *WriteRequestPB) (*WriteResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "Write", "request", request)
	response := &WriteResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "Write", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "Write", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) Read(request *ReadRequestPB) (*ReadResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "Read", "request", request)
	response := &ReadResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "Read", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "Read", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) VerifyTableRowRange(request *VerifyTableRowRangeRequestPB) (*VerifyTableRowRangeResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "VerifyTableRowRange", "request", request)
	response := &VerifyTableRowRangeResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "VerifyTableRowRange", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "VerifyTableRowRange", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) NoOp(request *NoOpRequestPB) (*NoOpResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "NoOp", "request", request)
	response := &NoOpResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "NoOp", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "NoOp", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ListTablets(request *ListTabletsRequestPB) (*ListTabletsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ListTablets", "request", request)
	response := &ListTabletsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ListTablets", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ListTablets", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetLogLocation(request *GetLogLocationRequestPB) (*GetLogLocationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetLogLocation", "request", request)
	response := &GetLogLocationResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetLogLocation", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetLogLocation", "response", response)

	return response, nil
}

// Run full-scan data checksum on a tablet to verify data integrity.
//
// TODO: Consider refactoring this as a scan that runs a checksum aggregation
// function.

func (s *TabletServerServiceImpl) Checksum(request *ChecksumRequestPB) (*ChecksumResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "Checksum", "request", request)
	response := &ChecksumResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "Checksum", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "Checksum", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ListTabletsForTabletServer(request *ListTabletsForTabletServerRequestPB) (*ListTabletsForTabletServerResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ListTabletsForTabletServer", "request", request)
	response := &ListTabletsForTabletServerResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ListTabletsForTabletServer", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ListTabletsForTabletServer", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ImportData(request *ImportDataRequestPB) (*ImportDataResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ImportData", "request", request)
	response := &ImportDataResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ImportData", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ImportData", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) UpdateTransaction(request *UpdateTransactionRequestPB) (*UpdateTransactionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "UpdateTransaction", "request", request)
	response := &UpdateTransactionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "UpdateTransaction", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "UpdateTransaction", "response", response)

	return response, nil
}

// Returns transaction status at coordinator, i.e. PENDING, ABORTED, COMMITTED etc.

func (s *TabletServerServiceImpl) GetTransactionStatus(request *GetTransactionStatusRequestPB) (*GetTransactionStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetTransactionStatus", "request", request)
	response := &GetTransactionStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetTransactionStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetTransactionStatus", "response", response)

	return response, nil
}

// Returns the oldest transactions (older than a specified age) from a specified status tablet.

func (s *TabletServerServiceImpl) GetOldTransactions(request *GetOldTransactionsRequestPB) (*GetOldTransactionsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetOldTransactions", "request", request)
	response := &GetOldTransactionsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetOldTransactions", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetOldTransactions", "response", response)

	return response, nil
}

// Returns the oldest single shard waiters (older than a specified age) by querying the
// waiting transaction registry at the Tablet Server.

func (s *TabletServerServiceImpl) GetOldSingleShardWaiters(request *GetOldSingleShardWaitersRequestPB) (*GetOldSingleShardWaitersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetOldSingleShardWaiters", "request", request)
	response := &GetOldSingleShardWaitersResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetOldSingleShardWaiters", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetOldSingleShardWaiters", "response", response)

	return response, nil
}

// Returns transaction status at participant, i.e. number of replicated batches or whether it was
// aborted.

func (s *TabletServerServiceImpl) GetTransactionStatusAtParticipant(request *GetTransactionStatusAtParticipantRequestPB) (*GetTransactionStatusAtParticipantResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetTransactionStatusAtParticipant", "request", request)
	response := &GetTransactionStatusAtParticipantResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetTransactionStatusAtParticipant", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetTransactionStatusAtParticipant", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) AbortTransaction(request *AbortTransactionRequestPB) (*AbortTransactionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "AbortTransaction", "request", request)
	response := &AbortTransactionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "AbortTransaction", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "AbortTransaction", "response", response)

	return response, nil
}

// Change the status tablet id used for a transaction.

func (s *TabletServerServiceImpl) UpdateTransactionStatusLocation(request *UpdateTransactionStatusLocationRequestPB) (*UpdateTransactionStatusLocationResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "UpdateTransactionStatusLocation", "request", request)
	response := &UpdateTransactionStatusLocationResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "UpdateTransactionStatusLocation", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "UpdateTransactionStatusLocation", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) UpdateTransactionWaitingForStatus(request *UpdateTransactionWaitingForStatusRequestPB) (*UpdateTransactionWaitingForStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "UpdateTransactionWaitingForStatus", "request", request)
	response := &UpdateTransactionWaitingForStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "UpdateTransactionWaitingForStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "UpdateTransactionWaitingForStatus", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ProbeTransactionDeadlock(request *ProbeTransactionDeadlockRequestPB) (*ProbeTransactionDeadlockResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ProbeTransactionDeadlock", "request", request)
	response := &ProbeTransactionDeadlockResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ProbeTransactionDeadlock", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ProbeTransactionDeadlock", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) Truncate(request *TruncateRequestPB) (*TruncateResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "Truncate", "request", request)
	response := &TruncateResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "Truncate", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "Truncate", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetTabletStatus(request *GetTabletStatusRequestPB) (*GetTabletStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetTabletStatus", "request", request)
	response := &GetTabletStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetTabletStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetTabletStatus", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetMasterAddresses(request *GetMasterAddressesRequestPB) (*GetMasterAddressesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetMasterAddresses", "request", request)
	response := &GetMasterAddressesResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetMasterAddresses", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetMasterAddresses", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) Publish(request *PublishRequestPB) (*PublishResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "Publish", "request", request)
	response := &PublishResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "Publish", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "Publish", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) IsTabletServerReady(request *IsTabletServerReadyRequestPB) (*IsTabletServerReadyResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "IsTabletServerReady", "request", request)
	response := &IsTabletServerReadyResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "IsTabletServerReady", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "IsTabletServerReady", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetSplitKey(request *GetSplitKeyRequestPB) (*GetSplitKeyResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetSplitKey", "request", request)
	response := &GetSplitKeyResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetSplitKey", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetSplitKey", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetSharedData(request *GetSharedDataRequestPB) (*GetSharedDataResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetSharedData", "request", request)
	response := &GetSharedDataResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetSharedData", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetSharedData", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetTserverCatalogVersionInfo(request *GetTserverCatalogVersionInfoRequestPB) (*GetTserverCatalogVersionInfoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetTserverCatalogVersionInfo", "request", request)
	response := &GetTserverCatalogVersionInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetTserverCatalogVersionInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetTserverCatalogVersionInfo", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ListMasterServers(request *ListMasterServersRequestPB) (*ListMasterServersResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ListMasterServers", "request", request)
	response := &ListMasterServersResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ListMasterServers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ListMasterServers", "response", response)

	return response, nil
}

// Returns all lock information requested, based on persisted intents and any requests waiting on
// a persisted intent. These intents may correspond to explicit or implicit locks.

func (s *TabletServerServiceImpl) GetLockStatus(request *GetLockStatusRequestPB) (*GetLockStatusResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetLockStatus", "request", request)
	response := &GetLockStatusResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetLockStatus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetLockStatus", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) CancelTransaction(request *CancelTransactionRequestPB) (*CancelTransactionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "CancelTransaction", "request", request)
	response := &CancelTransactionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "CancelTransaction", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "CancelTransaction", "response", response)

	return response, nil
}

// Returns the schema version on the XCluster consumer side that is
// compatible with the schema provided in the request.

func (s *TabletServerServiceImpl) GetCompatibleSchemaVersion(request *GetCompatibleSchemaVersionRequestPB) (*GetCompatibleSchemaVersionResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetCompatibleSchemaVersion", "request", request)
	response := &GetCompatibleSchemaVersionResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetCompatibleSchemaVersion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetCompatibleSchemaVersion", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) StartRemoteSnapshotTransfer(request *StartRemoteSnapshotTransferRequestPB) (*StartRemoteSnapshotTransferResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "StartRemoteSnapshotTransfer", "request", request)
	response := &StartRemoteSnapshotTransferResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "StartRemoteSnapshotTransfer", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "StartRemoteSnapshotTransfer", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetTabletKeyRanges(request *GetTabletKeyRangesRequestPB) (*GetTabletKeyRangesResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetTabletKeyRanges", "request", request)
	response := &GetTabletKeyRangesResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetTabletKeyRanges", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetTabletKeyRanges", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) CheckTserverTabletHealth(request *CheckTserverTabletHealthRequestPB) (*CheckTserverTabletHealthResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "CheckTserverTabletHealth", "request", request)
	response := &CheckTserverTabletHealthResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "CheckTserverTabletHealth", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "CheckTserverTabletHealth", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ClearAllMetaCachesOnServer(request *ClearAllMetaCachesOnServerRequestPB) (*ClearAllMetaCachesOnServerResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ClearAllMetaCachesOnServer", "request", request)
	response := &ClearAllMetaCachesOnServerResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ClearAllMetaCachesOnServer", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ClearAllMetaCachesOnServer", "response", response)

	return response, nil
}

// Clear metacache entries (tables and tablets) that belong to the provided namespace.

func (s *TabletServerServiceImpl) ClearMetacache(request *ClearMetacacheRequestPB) (*ClearMetacacheResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ClearMetacache", "request", request)
	response := &ClearMetacacheResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ClearMetacache", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ClearMetacache", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ClearUniverseUuid(request *ClearUniverseUuidRequestPB) (*ClearUniverseUuidResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ClearUniverseUuid", "request", request)
	response := &ClearUniverseUuidResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ClearUniverseUuid", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ClearUniverseUuid", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) AcquireObjectLocks(request *AcquireObjectLockRequestPB) (*AcquireObjectLockResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "AcquireObjectLocks", "request", request)
	response := &AcquireObjectLockResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "AcquireObjectLocks", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "AcquireObjectLocks", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) ReleaseObjectLocks(request *ReleaseObjectLockRequestPB) (*ReleaseObjectLockResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "ReleaseObjectLocks", "request", request)
	response := &ReleaseObjectLockResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "ReleaseObjectLocks", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "ReleaseObjectLocks", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) AdminExecutePgsql(request *AdminExecutePgsqlRequestPB) (*AdminExecutePgsqlResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "AdminExecutePgsql", "request", request)
	response := &AdminExecutePgsqlResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "AdminExecutePgsql", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "AdminExecutePgsql", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetLocalPgTxnSnapshot(request *GetLocalPgTxnSnapshotRequestPB) (*GetLocalPgTxnSnapshotResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetLocalPgTxnSnapshot", "request", request)
	response := &GetLocalPgTxnSnapshotResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetLocalPgTxnSnapshot", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetLocalPgTxnSnapshot", "response", response)

	return response, nil
}

func (s *TabletServerServiceImpl) GetMetrics(request *GetMetricsRequestPB) (*GetMetricsResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.tserver.TabletServerService", "method", "GetMetrics", "request", request)
	response := &GetMetricsResponsePB{}

	err := s.Messenger.SendMessage("yb.tserver.TabletServerService", "GetMetrics", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.tserver.TabletServerService", "method", "GetMetrics", "response", response)

	return response, nil
}
