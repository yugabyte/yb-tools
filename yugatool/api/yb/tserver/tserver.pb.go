// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/tserver/tserver.proto

package tserver

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	consensus "github.com/yugabyte/yb-tools/yugatool/api/yb/consensus"
	docdb "github.com/yugabyte/yb-tools/yugatool/api/yb/docdb"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TabletConsensusInfoPB struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	TabletId       []byte                      `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	ConsensusState *consensus.ConsensusStatePB `protobuf:"bytes,2,opt,name=consensus_state,json=consensusState" json:"consensus_state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TabletConsensusInfoPB) Reset() {
	*x = TabletConsensusInfoPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TabletConsensusInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletConsensusInfoPB) ProtoMessage() {}

func (x *TabletConsensusInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletConsensusInfoPB.ProtoReflect.Descriptor instead.
func (*TabletConsensusInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{0}
}

func (x *TabletConsensusInfoPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletConsensusInfoPB) GetConsensusState() *consensus.ConsensusStatePB {
	if x != nil {
		return x.ConsensusState
	}
	return nil
}

// A batched set of insert/mutate requests.
type WriteRequestPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TabletId []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// When replicating RocksDB write operations through Raft for single-shard transactions,
	// we put a write batch here.
	WriteBatch *docdb.KeyValueWriteBatchPB `protobuf:"bytes,7,opt,name=write_batch,json=writeBatch" json:"write_batch,omitempty"`
	// A batch of redis operations.
	RedisWriteBatch []*common.RedisWriteRequestPB `protobuf:"bytes,8,rep,name=redis_write_batch,json=redisWriteBatch" json:"redis_write_batch,omitempty"`
	// A batch of QL operations.
	QlWriteBatch []*common.QLWriteRequestPB `protobuf:"bytes,10,rep,name=ql_write_batch,json=qlWriteBatch" json:"ql_write_batch,omitempty"`
	// A batch of Pgsql operations.
	PgsqlWriteBatch []*common.PgsqlWriteRequestPB `protobuf:"bytes,13,rep,name=pgsql_write_batch,json=pgsqlWriteBatch" json:"pgsql_write_batch,omitempty"`
	// A hybrid_time obtained by the client from a previous request.
	// TODO crypto sign this and propagate the signature along with
	// the hybrid_time.
	PropagatedHybridTime *uint64                  `protobuf:"fixed64,5,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	IncludeTrace         *bool                    `protobuf:"varint,6,opt,name=include_trace,json=includeTrace,def=0" json:"include_trace,omitempty"`
	ReadTime             *common.ReadHybridTimePB `protobuf:"bytes,12,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	// Use 2 int64 to represent UUID.
	ClientId1           *uint64               `protobuf:"fixed64,14,opt,name=client_id1,json=clientId1" json:"client_id1,omitempty"`
	ClientId2           *uint64               `protobuf:"fixed64,15,opt,name=client_id2,json=clientId2" json:"client_id2,omitempty"`
	RequestId           *int64                `protobuf:"varint,16,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	MinRunningRequestId *int64                `protobuf:"varint,17,opt,name=min_running_request_id,json=minRunningRequestId" json:"min_running_request_id,omitempty"`
	RejectionScore      *float64              `protobuf:"fixed64,18,opt,name=rejection_score,json=rejectionScore" json:"rejection_score,omitempty"`
	ExternalHybridTime  *uint64               `protobuf:"fixed64,19,opt,name=external_hybrid_time,json=externalHybridTime" json:"external_hybrid_time,omitempty"`
	BatchIdx            *uint64               `protobuf:"varint,20,opt,name=batch_idx,json=batchIdx" json:"batch_idx,omitempty"`
	LeaderTerm          *int64                `protobuf:"varint,21,opt,name=leader_term,json=leaderTerm" json:"leader_term,omitempty"`
	StartTimeMicros     *uint64               `protobuf:"varint,22,opt,name=start_time_micros,json=startTimeMicros" json:"start_time_micros,omitempty"`
	AshMetadata         *common.AshMetadataPB `protobuf:"bytes,23,opt,name=ash_metadata,json=ashMetadata" json:"ash_metadata,omitempty"`
	RaftConfigOpidIndex *int64                `protobuf:"varint,24,opt,name=raft_config_opid_index,json=raftConfigOpidIndex" json:"raft_config_opid_index,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for WriteRequestPB fields.
const (
	Default_WriteRequestPB_IncludeTrace = bool(false)
)

func (x *WriteRequestPB) Reset() {
	*x = WriteRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequestPB) ProtoMessage() {}

func (x *WriteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequestPB.ProtoReflect.Descriptor instead.
func (*WriteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{1}
}

func (x *WriteRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *WriteRequestPB) GetWriteBatch() *docdb.KeyValueWriteBatchPB {
	if x != nil {
		return x.WriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetRedisWriteBatch() []*common.RedisWriteRequestPB {
	if x != nil {
		return x.RedisWriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetQlWriteBatch() []*common.QLWriteRequestPB {
	if x != nil {
		return x.QlWriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetPgsqlWriteBatch() []*common.PgsqlWriteRequestPB {
	if x != nil {
		return x.PgsqlWriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *WriteRequestPB) GetIncludeTrace() bool {
	if x != nil && x.IncludeTrace != nil {
		return *x.IncludeTrace
	}
	return Default_WriteRequestPB_IncludeTrace
}

func (x *WriteRequestPB) GetReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

func (x *WriteRequestPB) GetClientId1() uint64 {
	if x != nil && x.ClientId1 != nil {
		return *x.ClientId1
	}
	return 0
}

func (x *WriteRequestPB) GetClientId2() uint64 {
	if x != nil && x.ClientId2 != nil {
		return *x.ClientId2
	}
	return 0
}

func (x *WriteRequestPB) GetRequestId() int64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *WriteRequestPB) GetMinRunningRequestId() int64 {
	if x != nil && x.MinRunningRequestId != nil {
		return *x.MinRunningRequestId
	}
	return 0
}

func (x *WriteRequestPB) GetRejectionScore() float64 {
	if x != nil && x.RejectionScore != nil {
		return *x.RejectionScore
	}
	return 0
}

func (x *WriteRequestPB) GetExternalHybridTime() uint64 {
	if x != nil && x.ExternalHybridTime != nil {
		return *x.ExternalHybridTime
	}
	return 0
}

func (x *WriteRequestPB) GetBatchIdx() uint64 {
	if x != nil && x.BatchIdx != nil {
		return *x.BatchIdx
	}
	return 0
}

func (x *WriteRequestPB) GetLeaderTerm() int64 {
	if x != nil && x.LeaderTerm != nil {
		return *x.LeaderTerm
	}
	return 0
}

func (x *WriteRequestPB) GetStartTimeMicros() uint64 {
	if x != nil && x.StartTimeMicros != nil {
		return *x.StartTimeMicros
	}
	return 0
}

func (x *WriteRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

func (x *WriteRequestPB) GetRaftConfigOpidIndex() int64 {
	if x != nil && x.RaftConfigOpidIndex != nil {
		return *x.RaftConfigOpidIndex
	}
	return 0
}

type WriteResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If the entire WriteResponsePB request failed, the error status that
	// caused the failure. This type of error is triggered for
	// cases such as the tablet not being on this server, or the
	// schema not matching. If any error specific to a given row
	// occurs, this error will be recorded in per_row_errors below,
	// even if all rows failed.
	Error        *TabletServerErrorPB             `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PerRowErrors []*WriteResponsePB_PerRowErrorPB `protobuf:"bytes,2,rep,name=per_row_errors,json=perRowErrors" json:"per_row_errors,omitempty"`
	// A batch of redis responses.
	RedisResponseBatch []*common.RedisResponsePB `protobuf:"bytes,8,rep,name=redis_response_batch,json=redisResponseBatch" json:"redis_response_batch,omitempty"`
	// A batch of QL responses.
	QlResponseBatch []*common.QLResponsePB `protobuf:"bytes,9,rep,name=ql_response_batch,json=qlResponseBatch" json:"ql_response_batch,omitempty"`
	// A batch of QL responses.
	PgsqlResponseBatch []*common.PgsqlResponsePB `protobuf:"bytes,12,rep,name=pgsql_response_batch,json=pgsqlResponseBatch" json:"pgsql_response_batch,omitempty"`
	// The hybrid_time chosen by the server for this write.
	// TODO KUDU-611 propagate hybrid_times with server signature.
	PropagatedHybridTime *uint64 `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TraceBuffer          *string `protobuf:"bytes,10,opt,name=trace_buffer,json=traceBuffer" json:"trace_buffer,omitempty"`
	// Used to report restart whether this operation requires read restart.
	RestartReadTime *common.ReadHybridTimePB `protobuf:"bytes,11,opt,name=restart_read_time,json=restartReadTime" json:"restart_read_time,omitempty"`
	// Used to report used read time when transaction asked for it.
	UsedReadTime        *common.ReadHybridTimePB `protobuf:"bytes,13,opt,name=used_read_time,json=usedReadTime" json:"used_read_time,omitempty"`
	LocalLimitHt        *uint64                  `protobuf:"fixed64,14,opt,name=local_limit_ht,json=localLimitHt" json:"local_limit_ht,omitempty"`
	TabletConsensusInfo *TabletConsensusInfoPB   `protobuf:"bytes,15,opt,name=tablet_consensus_info,json=tabletConsensusInfo" json:"tablet_consensus_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *WriteResponsePB) Reset() {
	*x = WriteResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponsePB) ProtoMessage() {}

func (x *WriteResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponsePB.ProtoReflect.Descriptor instead.
func (*WriteResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{2}
}

func (x *WriteResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WriteResponsePB) GetPerRowErrors() []*WriteResponsePB_PerRowErrorPB {
	if x != nil {
		return x.PerRowErrors
	}
	return nil
}

func (x *WriteResponsePB) GetRedisResponseBatch() []*common.RedisResponsePB {
	if x != nil {
		return x.RedisResponseBatch
	}
	return nil
}

func (x *WriteResponsePB) GetQlResponseBatch() []*common.QLResponsePB {
	if x != nil {
		return x.QlResponseBatch
	}
	return nil
}

func (x *WriteResponsePB) GetPgsqlResponseBatch() []*common.PgsqlResponsePB {
	if x != nil {
		return x.PgsqlResponseBatch
	}
	return nil
}

func (x *WriteResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *WriteResponsePB) GetTraceBuffer() string {
	if x != nil && x.TraceBuffer != nil {
		return *x.TraceBuffer
	}
	return ""
}

func (x *WriteResponsePB) GetRestartReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.RestartReadTime
	}
	return nil
}

func (x *WriteResponsePB) GetUsedReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.UsedReadTime
	}
	return nil
}

func (x *WriteResponsePB) GetLocalLimitHt() uint64 {
	if x != nil && x.LocalLimitHt != nil {
		return *x.LocalLimitHt
	}
	return 0
}

func (x *WriteResponsePB) GetTabletConsensusInfo() *TabletConsensusInfoPB {
	if x != nil {
		return x.TabletConsensusInfo
	}
	return nil
}

// A list tablets request
type ListTabletsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTabletsRequestPB) Reset() {
	*x = ListTabletsRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsRequestPB) ProtoMessage() {}

func (x *ListTabletsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsRequestPB.ProtoReflect.Descriptor instead.
func (*ListTabletsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{3}
}

// A list tablets response
type ListTabletsResponsePB struct {
	state           protoimpl.MessageState                     `protogen:"open.v1"`
	Error           *TabletServerErrorPB                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StatusAndSchema []*ListTabletsResponsePB_StatusAndSchemaPB `protobuf:"bytes,2,rep,name=status_and_schema,json=statusAndSchema" json:"status_and_schema,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListTabletsResponsePB) Reset() {
	*x = ListTabletsResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsResponsePB) ProtoMessage() {}

func (x *ListTabletsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsResponsePB.ProtoReflect.Descriptor instead.
func (*ListTabletsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{4}
}

func (x *ListTabletsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTabletsResponsePB) GetStatusAndSchema() []*ListTabletsResponsePB_StatusAndSchemaPB {
	if x != nil {
		return x.StatusAndSchema
	}
	return nil
}

type NoOpRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoOpRequestPB) Reset() {
	*x = NoOpRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoOpRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpRequestPB) ProtoMessage() {}

func (x *NoOpRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpRequestPB.ProtoReflect.Descriptor instead.
func (*NoOpRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{5}
}

func (x *NoOpRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type NoOpResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoOpResponsePB) Reset() {
	*x = NoOpResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoOpResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpResponsePB) ProtoMessage() {}

func (x *NoOpResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpResponsePB.ProtoReflect.Descriptor instead.
func (*NoOpResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{6}
}

func (x *NoOpResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// A verification request to check if a range of rows in main table is
// consistent with index table content. We will verify index table rows using
// the primary table.
type VerifyTableRowRangeRequestPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TabletId []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// If indexes is empty, we will check all indexes
	// If it contains entries, then we will check only the ones provided.
	IndexIds [][]byte `protobuf:"bytes,2,rep,name=index_ids,json=indexIds" json:"index_ids,omitempty"`
	StartKey []byte   `protobuf:"bytes,3,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	NumRows  *uint32  `protobuf:"varint,4,opt,name=num_rows,json=numRows" json:"num_rows,omitempty"`
	// Read time if left empty will be replaced by the earliest safe time to read
	ReadTime             *uint64 `protobuf:"fixed64,5,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *VerifyTableRowRangeRequestPB) Reset() {
	*x = VerifyTableRowRangeRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTableRowRangeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTableRowRangeRequestPB) ProtoMessage() {}

func (x *VerifyTableRowRangeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTableRowRangeRequestPB.ProtoReflect.Descriptor instead.
func (*VerifyTableRowRangeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyTableRowRangeRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *VerifyTableRowRangeRequestPB) GetIndexIds() [][]byte {
	if x != nil {
		return x.IndexIds
	}
	return nil
}

func (x *VerifyTableRowRangeRequestPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *VerifyTableRowRangeRequestPB) GetNumRows() uint32 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

func (x *VerifyTableRowRangeRequestPB) GetReadTime() uint64 {
	if x != nil && x.ReadTime != nil {
		return *x.ReadTime
	}
	return 0
}

func (x *VerifyTableRowRangeRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type VerifyTableRowRangeResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ConsistencyStats     map[string]uint64      `protobuf:"bytes,2,rep,name=consistency_stats,json=consistencyStats" json:"consistency_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	VerifiedUntil        []byte                 `protobuf:"bytes,3,opt,name=verified_until,json=verifiedUntil" json:"verified_until,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *VerifyTableRowRangeResponsePB) Reset() {
	*x = VerifyTableRowRangeResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTableRowRangeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTableRowRangeResponsePB) ProtoMessage() {}

func (x *VerifyTableRowRangeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTableRowRangeResponsePB.ProtoReflect.Descriptor instead.
func (*VerifyTableRowRangeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyTableRowRangeResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *VerifyTableRowRangeResponsePB) GetConsistencyStats() map[string]uint64 {
	if x != nil {
		return x.ConsistencyStats
	}
	return nil
}

func (x *VerifyTableRowRangeResponsePB) GetVerifiedUntil() []byte {
	if x != nil {
		return x.VerifiedUntil
	}
	return nil
}

func (x *VerifyTableRowRangeResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type ReadRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tablet to scan.
	TabletId   []byte                       `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	RedisBatch []*common.RedisReadRequestPB `protobuf:"bytes,2,rep,name=redis_batch,json=redisBatch" json:"redis_batch,omitempty"`
	QlBatch    []*common.QLReadRequestPB    `protobuf:"bytes,4,rep,name=ql_batch,json=qlBatch" json:"ql_batch,omitempty"`
	PgsqlBatch []*common.PgsqlReadRequestPB `protobuf:"bytes,10,rep,name=pgsql_batch,json=pgsqlBatch" json:"pgsql_batch,omitempty"`
	// Whether data blocks will be cached when read from the files or discarded after use.
	// Disable this to lower cache churn when doing large scans.
	CacheBlocks          *bool                            `protobuf:"varint,3,opt,name=cache_blocks,json=cacheBlocks,def=1" json:"cache_blocks,omitempty"`
	IncludeTrace         *bool                            `protobuf:"varint,5,opt,name=include_trace,json=includeTrace,def=0" json:"include_trace,omitempty"`
	ConsistencyLevel     *common.YBConsistencyLevel       `protobuf:"varint,6,opt,name=consistency_level,json=consistencyLevel,enum=yb.YBConsistencyLevel,def=1" json:"consistency_level,omitempty"` // TODO: add hybrid_time in future
	Transaction          *common.TransactionMetadataPB    `protobuf:"bytes,7,opt,name=transaction" json:"transaction,omitempty"`
	Subtransaction       *common.SubTransactionMetadataPB `protobuf:"bytes,15,opt,name=subtransaction" json:"subtransaction,omitempty"`
	PropagatedHybridTime *uint64                          `protobuf:"fixed64,8,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// See ReadHybridTime for explation of next two fields.
	ReadTime                  *common.ReadHybridTimePB `protobuf:"bytes,9,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	ProxyUuid                 *string                  `protobuf:"bytes,11,opt,name=proxy_uuid,json=proxyUuid" json:"proxy_uuid,omitempty"`
	DEPRECATEDMayHaveMetadata *bool                    `protobuf:"varint,12,opt,name=DEPRECATED_may_have_metadata,json=DEPRECATEDMayHaveMetadata" json:"DEPRECATED_may_have_metadata,omitempty"`
	RejectionScore            *float64                 `protobuf:"fixed64,13,opt,name=rejection_score,json=rejectionScore" json:"rejection_score,omitempty"`
	BatchIdx                  *uint64                  `protobuf:"varint,14,opt,name=batch_idx,json=batchIdx" json:"batch_idx,omitempty"`
	StartTimeMicros           *uint64                  `protobuf:"varint,16,opt,name=start_time_micros,json=startTimeMicros" json:"start_time_micros,omitempty"`
	AshMetadata               *common.AshMetadataPB    `protobuf:"bytes,17,opt,name=ash_metadata,json=ashMetadata" json:"ash_metadata,omitempty"`
	RaftConfigOpidIndex       *int64                   `protobuf:"varint,18,opt,name=raft_config_opid_index,json=raftConfigOpidIndex" json:"raft_config_opid_index,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for ReadRequestPB fields.
const (
	Default_ReadRequestPB_CacheBlocks      = bool(true)
	Default_ReadRequestPB_IncludeTrace     = bool(false)
	Default_ReadRequestPB_ConsistencyLevel = common.YBConsistencyLevel(1) // common.YBConsistencyLevel_STRONG
)

func (x *ReadRequestPB) Reset() {
	*x = ReadRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequestPB) ProtoMessage() {}

func (x *ReadRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequestPB.ProtoReflect.Descriptor instead.
func (*ReadRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{9}
}

func (x *ReadRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ReadRequestPB) GetRedisBatch() []*common.RedisReadRequestPB {
	if x != nil {
		return x.RedisBatch
	}
	return nil
}

func (x *ReadRequestPB) GetQlBatch() []*common.QLReadRequestPB {
	if x != nil {
		return x.QlBatch
	}
	return nil
}

func (x *ReadRequestPB) GetPgsqlBatch() []*common.PgsqlReadRequestPB {
	if x != nil {
		return x.PgsqlBatch
	}
	return nil
}

func (x *ReadRequestPB) GetCacheBlocks() bool {
	if x != nil && x.CacheBlocks != nil {
		return *x.CacheBlocks
	}
	return Default_ReadRequestPB_CacheBlocks
}

func (x *ReadRequestPB) GetIncludeTrace() bool {
	if x != nil && x.IncludeTrace != nil {
		return *x.IncludeTrace
	}
	return Default_ReadRequestPB_IncludeTrace
}

func (x *ReadRequestPB) GetConsistencyLevel() common.YBConsistencyLevel {
	if x != nil && x.ConsistencyLevel != nil {
		return *x.ConsistencyLevel
	}
	return Default_ReadRequestPB_ConsistencyLevel
}

func (x *ReadRequestPB) GetTransaction() *common.TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ReadRequestPB) GetSubtransaction() *common.SubTransactionMetadataPB {
	if x != nil {
		return x.Subtransaction
	}
	return nil
}

func (x *ReadRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ReadRequestPB) GetReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

func (x *ReadRequestPB) GetProxyUuid() string {
	if x != nil && x.ProxyUuid != nil {
		return *x.ProxyUuid
	}
	return ""
}

func (x *ReadRequestPB) GetDEPRECATEDMayHaveMetadata() bool {
	if x != nil && x.DEPRECATEDMayHaveMetadata != nil {
		return *x.DEPRECATEDMayHaveMetadata
	}
	return false
}

func (x *ReadRequestPB) GetRejectionScore() float64 {
	if x != nil && x.RejectionScore != nil {
		return *x.RejectionScore
	}
	return 0
}

func (x *ReadRequestPB) GetBatchIdx() uint64 {
	if x != nil && x.BatchIdx != nil {
		return *x.BatchIdx
	}
	return 0
}

func (x *ReadRequestPB) GetStartTimeMicros() uint64 {
	if x != nil && x.StartTimeMicros != nil {
		return *x.StartTimeMicros
	}
	return 0
}

func (x *ReadRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

func (x *ReadRequestPB) GetRaftConfigOpidIndex() int64 {
	if x != nil && x.RaftConfigOpidIndex != nil {
		return *x.RaftConfigOpidIndex
	}
	return 0
}

type ReadResponsePB struct {
	state                protoimpl.MessageState    `protogen:"open.v1"`
	RedisBatch           []*common.RedisResponsePB `protobuf:"bytes,1,rep,name=redis_batch,json=redisBatch" json:"redis_batch,omitempty"`
	QlBatch              []*common.QLResponsePB    `protobuf:"bytes,4,rep,name=ql_batch,json=qlBatch" json:"ql_batch,omitempty"`
	PgsqlBatch           []*common.PgsqlResponsePB `protobuf:"bytes,8,rep,name=pgsql_batch,json=pgsqlBatch" json:"pgsql_batch,omitempty"`
	Error                *TabletServerErrorPB      `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	TraceBuffer          *string                   `protobuf:"bytes,5,opt,name=trace_buffer,json=traceBuffer" json:"trace_buffer,omitempty"`
	PropagatedHybridTime *uint64                   `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Used to report restart whether this operation requires read restart.
	RestartReadTime *common.ReadHybridTimePB `protobuf:"bytes,7,opt,name=restart_read_time,json=restartReadTime" json:"restart_read_time,omitempty"`
	// Used to report used read time when transaction asked for it.
	UsedReadTime        *common.ReadHybridTimePB `protobuf:"bytes,9,opt,name=used_read_time,json=usedReadTime" json:"used_read_time,omitempty"`
	LocalLimitHt        *uint64                  `protobuf:"fixed64,10,opt,name=local_limit_ht,json=localLimitHt" json:"local_limit_ht,omitempty"`
	TabletConsensusInfo *TabletConsensusInfoPB   `protobuf:"bytes,11,opt,name=tablet_consensus_info,json=tabletConsensusInfo" json:"tablet_consensus_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ReadResponsePB) Reset() {
	*x = ReadResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponsePB) ProtoMessage() {}

func (x *ReadResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponsePB.ProtoReflect.Descriptor instead.
func (*ReadResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{10}
}

func (x *ReadResponsePB) GetRedisBatch() []*common.RedisResponsePB {
	if x != nil {
		return x.RedisBatch
	}
	return nil
}

func (x *ReadResponsePB) GetQlBatch() []*common.QLResponsePB {
	if x != nil {
		return x.QlBatch
	}
	return nil
}

func (x *ReadResponsePB) GetPgsqlBatch() []*common.PgsqlResponsePB {
	if x != nil {
		return x.PgsqlBatch
	}
	return nil
}

func (x *ReadResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReadResponsePB) GetTraceBuffer() string {
	if x != nil && x.TraceBuffer != nil {
		return *x.TraceBuffer
	}
	return ""
}

func (x *ReadResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ReadResponsePB) GetRestartReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.RestartReadTime
	}
	return nil
}

func (x *ReadResponsePB) GetUsedReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.UsedReadTime
	}
	return nil
}

func (x *ReadResponsePB) GetLocalLimitHt() uint64 {
	if x != nil && x.LocalLimitHt != nil {
		return *x.LocalLimitHt
	}
	return 0
}

func (x *ReadResponsePB) GetTabletConsensusInfo() *TabletConsensusInfoPB {
	if x != nil {
		return x.TabletConsensusInfo
	}
	return nil
}

type GetTabletKeyRangesRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TabletId             []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	LowerBoundKey        []byte                 `protobuf:"bytes,3,opt,name=lower_bound_key,json=lowerBoundKey" json:"lower_bound_key,omitempty"`
	UpperBoundKey        []byte                 `protobuf:"bytes,4,opt,name=upper_bound_key,json=upperBoundKey" json:"upper_bound_key,omitempty"`
	MaxNumRanges         *uint64                `protobuf:"varint,5,opt,name=max_num_ranges,json=maxNumRanges" json:"max_num_ranges,omitempty"`
	RangeSizeBytes       *uint64                `protobuf:"varint,6,opt,name=range_size_bytes,json=rangeSizeBytes" json:"range_size_bytes,omitempty"`
	IsForward            *bool                  `protobuf:"varint,7,opt,name=is_forward,json=isForward,def=1" json:"is_forward,omitempty"`
	MaxKeyLength         *uint32                `protobuf:"varint,8,opt,name=max_key_length,json=maxKeyLength" json:"max_key_length,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for GetTabletKeyRangesRequestPB fields.
const (
	Default_GetTabletKeyRangesRequestPB_IsForward = bool(true)
)

func (x *GetTabletKeyRangesRequestPB) Reset() {
	*x = GetTabletKeyRangesRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletKeyRangesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletKeyRangesRequestPB) ProtoMessage() {}

func (x *GetTabletKeyRangesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletKeyRangesRequestPB.ProtoReflect.Descriptor instead.
func (*GetTabletKeyRangesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{11}
}

func (x *GetTabletKeyRangesRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetTabletKeyRangesRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetTabletKeyRangesRequestPB) GetLowerBoundKey() []byte {
	if x != nil {
		return x.LowerBoundKey
	}
	return nil
}

func (x *GetTabletKeyRangesRequestPB) GetUpperBoundKey() []byte {
	if x != nil {
		return x.UpperBoundKey
	}
	return nil
}

func (x *GetTabletKeyRangesRequestPB) GetMaxNumRanges() uint64 {
	if x != nil && x.MaxNumRanges != nil {
		return *x.MaxNumRanges
	}
	return 0
}

func (x *GetTabletKeyRangesRequestPB) GetRangeSizeBytes() uint64 {
	if x != nil && x.RangeSizeBytes != nil {
		return *x.RangeSizeBytes
	}
	return 0
}

func (x *GetTabletKeyRangesRequestPB) GetIsForward() bool {
	if x != nil && x.IsForward != nil {
		return *x.IsForward
	}
	return Default_GetTabletKeyRangesRequestPB_IsForward
}

func (x *GetTabletKeyRangesRequestPB) GetMaxKeyLength() uint32 {
	if x != nil && x.MaxKeyLength != nil {
		return *x.MaxKeyLength
	}
	return 0
}

type GetTabletKeyRangesResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetTabletKeyRangesResponsePB) Reset() {
	*x = GetTabletKeyRangesResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletKeyRangesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletKeyRangesResponsePB) ProtoMessage() {}

func (x *GetTabletKeyRangesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletKeyRangesResponsePB.ProtoReflect.Descriptor instead.
func (*GetTabletKeyRangesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{12}
}

func (x *GetTabletKeyRangesResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTabletKeyRangesResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

// Truncate tablet request.
type TruncateRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TabletId             []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	Truncate             *tablet.TruncatePB     `protobuf:"bytes,3,opt,name=truncate" json:"truncate,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TruncateRequestPB) Reset() {
	*x = TruncateRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruncateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateRequestPB) ProtoMessage() {}

func (x *TruncateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateRequestPB.ProtoReflect.Descriptor instead.
func (*TruncateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{13}
}

func (x *TruncateRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TruncateRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *TruncateRequestPB) GetTruncate() *tablet.TruncatePB {
	if x != nil {
		return x.Truncate
	}
	return nil
}

// Truncate tablet response.
type TruncateResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TruncateResponsePB) Reset() {
	*x = TruncateResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TruncateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateResponsePB) ProtoMessage() {}

func (x *TruncateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateResponsePB.ProtoReflect.Descriptor instead.
func (*TruncateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{14}
}

func (x *TruncateResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TruncateResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

// Tablet's status request
type GetTabletStatusRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletStatusRequestPB) Reset() {
	*x = GetTabletStatusRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletStatusRequestPB) ProtoMessage() {}

func (x *GetTabletStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletStatusRequestPB.ProtoReflect.Descriptor instead.
func (*GetTabletStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{15}
}

func (x *GetTabletStatusRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

// Tablet's status response
type GetTabletStatusResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletStatus  *tablet.TabletStatusPB `protobuf:"bytes,2,opt,name=tablet_status,json=tabletStatus" json:"tablet_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTabletStatusResponsePB) Reset() {
	*x = GetTabletStatusResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTabletStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletStatusResponsePB) ProtoMessage() {}

func (x *GetTabletStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletStatusResponsePB.ProtoReflect.Descriptor instead.
func (*GetTabletStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{16}
}

func (x *GetTabletStatusResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTabletStatusResponsePB) GetTabletStatus() *tablet.TabletStatusPB {
	if x != nil {
		return x.TabletStatus
	}
	return nil
}

type GetMasterAddressesRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMasterAddressesRequestPB) Reset() {
	*x = GetMasterAddressesRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMasterAddressesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterAddressesRequestPB) ProtoMessage() {}

func (x *GetMasterAddressesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterAddressesRequestPB.ProtoReflect.Descriptor instead.
func (*GetMasterAddressesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{17}
}

type GetMasterAddressesResponsePB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Error           *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MasterAddresses *string                `protobuf:"bytes,2,opt,name=master_addresses,json=masterAddresses" json:"master_addresses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMasterAddressesResponsePB) Reset() {
	*x = GetMasterAddressesResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMasterAddressesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterAddressesResponsePB) ProtoMessage() {}

func (x *GetMasterAddressesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterAddressesResponsePB.ProtoReflect.Descriptor instead.
func (*GetMasterAddressesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{18}
}

func (x *GetMasterAddressesResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetMasterAddressesResponsePB) GetMasterAddresses() string {
	if x != nil && x.MasterAddresses != nil {
		return *x.MasterAddresses
	}
	return ""
}

type PublishRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       []byte                 `protobuf:"bytes,1,req,name=channel" json:"channel,omitempty"`
	Message       []byte                 `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequestPB) Reset() {
	*x = PublishRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequestPB) ProtoMessage() {}

func (x *PublishRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequestPB.ProtoReflect.Descriptor instead.
func (*PublishRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{19}
}

func (x *PublishRequestPB) GetChannel() []byte {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *PublishRequestPB) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PublishResponsePB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	NumClientsForwardedTo *int32                 `protobuf:"varint,1,req,name=num_clients_forwarded_to,json=numClientsForwardedTo" json:"num_clients_forwarded_to,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PublishResponsePB) Reset() {
	*x = PublishResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponsePB) ProtoMessage() {}

func (x *PublishResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponsePB.ProtoReflect.Descriptor instead.
func (*PublishResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{20}
}

func (x *PublishResponsePB) GetNumClientsForwardedTo() int32 {
	if x != nil && x.NumClientsForwardedTo != nil {
		return *x.NumClientsForwardedTo
	}
	return 0
}

// Get this tserver's notion of being ready for handling IO requests across all
// tablets that it owns.
type IsTabletServerReadyRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsTabletServerReadyRequestPB) Reset() {
	*x = IsTabletServerReadyRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTabletServerReadyRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTabletServerReadyRequestPB) ProtoMessage() {}

func (x *IsTabletServerReadyRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTabletServerReadyRequestPB.ProtoReflect.Descriptor instead.
func (*IsTabletServerReadyRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{21}
}

// When response has no errors, the tserver is deemed ready as per its tablet manager layer
// when the number of not running tablets is 0. Or the client can choose to
// timeout before that. Also returns total tablets under this tablet server.
type IsTabletServerReadyResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NumTabletsNotRunning *int32                 `protobuf:"varint,2,opt,name=num_tablets_not_running,json=numTabletsNotRunning" json:"num_tablets_not_running,omitempty"`
	TotalTablets         *int32                 `protobuf:"varint,3,opt,name=total_tablets,json=totalTablets,def=0" json:"total_tablets,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for IsTabletServerReadyResponsePB fields.
const (
	Default_IsTabletServerReadyResponsePB_TotalTablets = int32(0)
)

func (x *IsTabletServerReadyResponsePB) Reset() {
	*x = IsTabletServerReadyResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsTabletServerReadyResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTabletServerReadyResponsePB) ProtoMessage() {}

func (x *IsTabletServerReadyResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTabletServerReadyResponsePB.ProtoReflect.Descriptor instead.
func (*IsTabletServerReadyResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{22}
}

func (x *IsTabletServerReadyResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsTabletServerReadyResponsePB) GetNumTabletsNotRunning() int32 {
	if x != nil && x.NumTabletsNotRunning != nil {
		return *x.NumTabletsNotRunning
	}
	return 0
}

func (x *IsTabletServerReadyResponsePB) GetTotalTablets() int32 {
	if x != nil && x.TotalTablets != nil {
		return *x.TotalTablets
	}
	return Default_IsTabletServerReadyResponsePB_TotalTablets
}

// A list master servers request
type ListMasterServersRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMasterServersRequestPB) Reset() {
	*x = ListMasterServersRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMasterServersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterServersRequestPB) ProtoMessage() {}

func (x *ListMasterServersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterServersRequestPB.ProtoReflect.Descriptor instead.
func (*ListMasterServersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{23}
}

// A list master servers response
type ListMasterServersResponsePB struct {
	state               protoimpl.MessageState                               `protogen:"open.v1"`
	Error               *TabletServerErrorPB                                 `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MasterServerAndType []*ListMasterServersResponsePB_MasterServerAndTypePB `protobuf:"bytes,2,rep,name=master_server_and_type,json=masterServerAndType" json:"master_server_and_type,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListMasterServersResponsePB) Reset() {
	*x = ListMasterServersResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMasterServersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterServersResponsePB) ProtoMessage() {}

func (x *ListMasterServersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterServersResponsePB.ProtoReflect.Descriptor instead.
func (*ListMasterServersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{24}
}

func (x *ListMasterServersResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListMasterServersResponsePB) GetMasterServerAndType() []*ListMasterServersResponsePB_MasterServerAndTypePB {
	if x != nil {
		return x.MasterServerAndType
	}
	return nil
}

// Gets the schema version of the schema that is compatible with the requested schema.
type GetCompatibleSchemaVersionRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	Schema        *common.SchemaPB       `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCompatibleSchemaVersionRequestPB) Reset() {
	*x = GetCompatibleSchemaVersionRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompatibleSchemaVersionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompatibleSchemaVersionRequestPB) ProtoMessage() {}

func (x *GetCompatibleSchemaVersionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompatibleSchemaVersionRequestPB.ProtoReflect.Descriptor instead.
func (*GetCompatibleSchemaVersionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{25}
}

func (x *GetCompatibleSchemaVersionRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetCompatibleSchemaVersionRequestPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

// Update Schema version mapping response PB.
type GetCompatibleSchemaVersionResponsePB struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Error                   *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	CompatibleSchemaVersion *uint32                `protobuf:"varint,2,opt,name=compatible_schema_version,json=compatibleSchemaVersion" json:"compatible_schema_version,omitempty"`
	// Added on Oct 2024 (v2025.1), will not be set for older versions.
	// Value is set in the case of a schema mismatch.
	LatestSchemaVersion *uint32 `protobuf:"varint,3,opt,name=latest_schema_version,json=latestSchemaVersion" json:"latest_schema_version,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetCompatibleSchemaVersionResponsePB) Reset() {
	*x = GetCompatibleSchemaVersionResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompatibleSchemaVersionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompatibleSchemaVersionResponsePB) ProtoMessage() {}

func (x *GetCompatibleSchemaVersionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompatibleSchemaVersionResponsePB.ProtoReflect.Descriptor instead.
func (*GetCompatibleSchemaVersionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{26}
}

func (x *GetCompatibleSchemaVersionResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCompatibleSchemaVersionResponsePB) GetCompatibleSchemaVersion() uint32 {
	if x != nil && x.CompatibleSchemaVersion != nil {
		return *x.CompatibleSchemaVersion
	}
	return 0
}

func (x *GetCompatibleSchemaVersionResponsePB) GetLatestSchemaVersion() uint32 {
	if x != nil && x.LatestSchemaVersion != nil {
		return *x.LatestSchemaVersion
	}
	return 0
}

type CheckTserverTabletHealthRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletIds     [][]byte               `protobuf:"bytes,1,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckTserverTabletHealthRequestPB) Reset() {
	*x = CheckTserverTabletHealthRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckTserverTabletHealthRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTserverTabletHealthRequestPB) ProtoMessage() {}

func (x *CheckTserverTabletHealthRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTserverTabletHealthRequestPB.ProtoReflect.Descriptor instead.
func (*CheckTserverTabletHealthRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{27}
}

func (x *CheckTserverTabletHealthRequestPB) GetTabletIds() [][]byte {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

type CheckTserverTabletHealthResponsePB struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Error         *TabletServerErrorPB                                 `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletHealths []*CheckTserverTabletHealthResponsePB_TabletHealthPB `protobuf:"bytes,2,rep,name=tablet_healths,json=tabletHealths" json:"tablet_healths,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckTserverTabletHealthResponsePB) Reset() {
	*x = CheckTserverTabletHealthResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckTserverTabletHealthResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTserverTabletHealthResponsePB) ProtoMessage() {}

func (x *CheckTserverTabletHealthResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTserverTabletHealthResponsePB.ProtoReflect.Descriptor instead.
func (*CheckTserverTabletHealthResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{28}
}

func (x *CheckTserverTabletHealthResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CheckTserverTabletHealthResponsePB) GetTabletHealths() []*CheckTserverTabletHealthResponsePB_TabletHealthPB {
	if x != nil {
		return x.TabletHealths
	}
	return nil
}

type ClearAllMetaCachesOnServerRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearAllMetaCachesOnServerRequestPB) Reset() {
	*x = ClearAllMetaCachesOnServerRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearAllMetaCachesOnServerRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAllMetaCachesOnServerRequestPB) ProtoMessage() {}

func (x *ClearAllMetaCachesOnServerRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAllMetaCachesOnServerRequestPB.ProtoReflect.Descriptor instead.
func (*ClearAllMetaCachesOnServerRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{29}
}

type ClearAllMetaCachesOnServerResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearAllMetaCachesOnServerResponsePB) Reset() {
	*x = ClearAllMetaCachesOnServerResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearAllMetaCachesOnServerResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAllMetaCachesOnServerResponsePB) ProtoMessage() {}

func (x *ClearAllMetaCachesOnServerResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAllMetaCachesOnServerResponsePB.ProtoReflect.Descriptor instead.
func (*ClearAllMetaCachesOnServerResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{30}
}

type ClearMetacacheRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only Ysql namespace can be cleared from metacache.
	NamespaceId   *string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearMetacacheRequestPB) Reset() {
	*x = ClearMetacacheRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearMetacacheRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearMetacacheRequestPB) ProtoMessage() {}

func (x *ClearMetacacheRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearMetacacheRequestPB.ProtoReflect.Descriptor instead.
func (*ClearMetacacheRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{31}
}

func (x *ClearMetacacheRequestPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

type ClearMetacacheResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearMetacacheResponsePB) Reset() {
	*x = ClearMetacacheResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearMetacacheResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearMetacacheResponsePB) ProtoMessage() {}

func (x *ClearMetacacheResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearMetacacheResponsePB.ProtoReflect.Descriptor instead.
func (*ClearMetacacheResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{32}
}

func (x *ClearMetacacheResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ClearUniverseUuidRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearUniverseUuidRequestPB) Reset() {
	*x = ClearUniverseUuidRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearUniverseUuidRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUniverseUuidRequestPB) ProtoMessage() {}

func (x *ClearUniverseUuidRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUniverseUuidRequestPB.ProtoReflect.Descriptor instead.
func (*ClearUniverseUuidRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{33}
}

type ClearUniverseUuidResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearUniverseUuidResponsePB) Reset() {
	*x = ClearUniverseUuidResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearUniverseUuidResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUniverseUuidResponsePB) ProtoMessage() {}

func (x *ClearUniverseUuidResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUniverseUuidResponsePB.ProtoReflect.Descriptor instead.
func (*ClearUniverseUuidResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{34}
}

func (x *ClearUniverseUuidResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AcquireObjectLockRequestPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SessionId       *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SessionHostUuid []byte                 `protobuf:"bytes,2,opt,name=session_host_uuid,json=sessionHostUuid" json:"session_host_uuid,omitempty"`
	ObjectLocks     []*docdb.ObjectLockPB  `protobuf:"bytes,3,rep,name=object_locks,json=objectLocks" json:"object_locks,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AcquireObjectLockRequestPB) Reset() {
	*x = AcquireObjectLockRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireObjectLockRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireObjectLockRequestPB) ProtoMessage() {}

func (x *AcquireObjectLockRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireObjectLockRequestPB.ProtoReflect.Descriptor instead.
func (*AcquireObjectLockRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{35}
}

func (x *AcquireObjectLockRequestPB) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *AcquireObjectLockRequestPB) GetSessionHostUuid() []byte {
	if x != nil {
		return x.SessionHostUuid
	}
	return nil
}

func (x *AcquireObjectLockRequestPB) GetObjectLocks() []*docdb.ObjectLockPB {
	if x != nil {
		return x.ObjectLocks
	}
	return nil
}

type AcquireObjectLockResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcquireObjectLockResponsePB) Reset() {
	*x = AcquireObjectLockResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcquireObjectLockResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireObjectLockResponsePB) ProtoMessage() {}

func (x *AcquireObjectLockResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireObjectLockResponsePB.ProtoReflect.Descriptor instead.
func (*AcquireObjectLockResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{36}
}

func (x *AcquireObjectLockResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ReleaseObjectLockRequestPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SessionId       *uint64                `protobuf:"varint,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	SessionHostUuid []byte                 `protobuf:"bytes,2,opt,name=session_host_uuid,json=sessionHostUuid" json:"session_host_uuid,omitempty"`
	// The lock_type in ObjectLockPB is irrelevant here.
	ObjectLocks []*docdb.ObjectLockPB `protobuf:"bytes,3,rep,name=object_locks,json=objectLocks" json:"object_locks,omitempty"`
	// When set, releases locks on all objects held against the given session id.
	ReleaseAllLocks *bool `protobuf:"varint,4,opt,name=release_all_locks,json=releaseAllLocks" json:"release_all_locks,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReleaseObjectLockRequestPB) Reset() {
	*x = ReleaseObjectLockRequestPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseObjectLockRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseObjectLockRequestPB) ProtoMessage() {}

func (x *ReleaseObjectLockRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseObjectLockRequestPB.ProtoReflect.Descriptor instead.
func (*ReleaseObjectLockRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{37}
}

func (x *ReleaseObjectLockRequestPB) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *ReleaseObjectLockRequestPB) GetSessionHostUuid() []byte {
	if x != nil {
		return x.SessionHostUuid
	}
	return nil
}

func (x *ReleaseObjectLockRequestPB) GetObjectLocks() []*docdb.ObjectLockPB {
	if x != nil {
		return x.ObjectLocks
	}
	return nil
}

func (x *ReleaseObjectLockRequestPB) GetReleaseAllLocks() bool {
	if x != nil && x.ReleaseAllLocks != nil {
		return *x.ReleaseAllLocks
	}
	return false
}

type ReleaseObjectLockResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseObjectLockResponsePB) Reset() {
	*x = ReleaseObjectLockResponsePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseObjectLockResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseObjectLockResponsePB) ProtoMessage() {}

func (x *ReleaseObjectLockResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseObjectLockResponsePB.ProtoReflect.Descriptor instead.
func (*ReleaseObjectLockResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{38}
}

func (x *ReleaseObjectLockResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type DdlLockEntriesPB struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	LockEntries   []*AcquireObjectLockRequestPB `protobuf:"bytes,1,rep,name=lock_entries,json=lockEntries" json:"lock_entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DdlLockEntriesPB) Reset() {
	*x = DdlLockEntriesPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DdlLockEntriesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdlLockEntriesPB) ProtoMessage() {}

func (x *DdlLockEntriesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdlLockEntriesPB.ProtoReflect.Descriptor instead.
func (*DdlLockEntriesPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{39}
}

func (x *DdlLockEntriesPB) GetLockEntries() []*AcquireObjectLockRequestPB {
	if x != nil {
		return x.LockEntries
	}
	return nil
}

// If errors occurred with particular row operations, then the errors
// for those operations will be passed back in 'per_row_errors'.
type WriteResponsePB_PerRowErrorPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The index of the row in the incoming batch.
	RowIndex *int32 `protobuf:"varint,1,req,name=row_index,json=rowIndex" json:"row_index,omitempty"`
	// The error that occurred.
	Error         *common.AppStatusPB `protobuf:"bytes,2,req,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteResponsePB_PerRowErrorPB) Reset() {
	*x = WriteResponsePB_PerRowErrorPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteResponsePB_PerRowErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponsePB_PerRowErrorPB) ProtoMessage() {}

func (x *WriteResponsePB_PerRowErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponsePB_PerRowErrorPB.ProtoReflect.Descriptor instead.
func (*WriteResponsePB_PerRowErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{2, 0}
}

func (x *WriteResponsePB_PerRowErrorPB) GetRowIndex() int32 {
	if x != nil && x.RowIndex != nil {
		return *x.RowIndex
	}
	return 0
}

func (x *WriteResponsePB_PerRowErrorPB) GetError() *common.AppStatusPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListTabletsResponsePB_StatusAndSchemaPB struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	TabletStatus    *tablet.TabletStatusPB    `protobuf:"bytes,1,req,name=tablet_status,json=tabletStatus" json:"tablet_status,omitempty"`
	Schema          *common.SchemaPB          `protobuf:"bytes,2,req,name=schema" json:"schema,omitempty"`
	PartitionSchema *common.PartitionSchemaPB `protobuf:"bytes,3,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) Reset() {
	*x = ListTabletsResponsePB_StatusAndSchemaPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsResponsePB_StatusAndSchemaPB) ProtoMessage() {}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsResponsePB_StatusAndSchemaPB.ProtoReflect.Descriptor instead.
func (*ListTabletsResponsePB_StatusAndSchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) GetTabletStatus() *tablet.TabletStatusPB {
	if x != nil {
		return x.TabletStatus
	}
	return nil
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) GetSchema() *common.SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) GetPartitionSchema() *common.PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

type ListMasterServersResponsePB_MasterServerAndTypePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MasterServer  *string                `protobuf:"bytes,1,opt,name=master_server,json=masterServer" json:"master_server,omitempty"`
	IsLeader      *bool                  `protobuf:"varint,2,opt,name=is_leader,json=isLeader" json:"is_leader,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMasterServersResponsePB_MasterServerAndTypePB) Reset() {
	*x = ListMasterServersResponsePB_MasterServerAndTypePB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMasterServersResponsePB_MasterServerAndTypePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterServersResponsePB_MasterServerAndTypePB) ProtoMessage() {}

func (x *ListMasterServersResponsePB_MasterServerAndTypePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterServersResponsePB_MasterServerAndTypePB.ProtoReflect.Descriptor instead.
func (*ListMasterServersResponsePB_MasterServerAndTypePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ListMasterServersResponsePB_MasterServerAndTypePB) GetMasterServer() string {
	if x != nil && x.MasterServer != nil {
		return *x.MasterServer
	}
	return ""
}

func (x *ListMasterServersResponsePB_MasterServerAndTypePB) GetIsLeader() bool {
	if x != nil && x.IsLeader != nil {
		return *x.IsLeader
	}
	return false
}

type CheckTserverTabletHealthResponsePB_TabletHealthPB struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TabletId []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	Role     *common.PeerRole       `protobuf:"varint,2,opt,name=role,enum=yb.PeerRole" json:"role,omitempty"`
	// Only valid if role is not LEADER.
	FollowerLagMs *int64 `protobuf:"varint,3,opt,name=follower_lag_ms,json=followerLagMs" json:"follower_lag_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckTserverTabletHealthResponsePB_TabletHealthPB) Reset() {
	*x = CheckTserverTabletHealthResponsePB_TabletHealthPB{}
	mi := &file_yb_tserver_tserver_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckTserverTabletHealthResponsePB_TabletHealthPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTserverTabletHealthResponsePB_TabletHealthPB) ProtoMessage() {}

func (x *CheckTserverTabletHealthResponsePB_TabletHealthPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTserverTabletHealthResponsePB_TabletHealthPB.ProtoReflect.Descriptor instead.
func (*CheckTserverTabletHealthResponsePB_TabletHealthPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{28, 0}
}

func (x *CheckTserverTabletHealthResponsePB_TabletHealthPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *CheckTserverTabletHealthResponsePB_TabletHealthPB) GetRole() common.PeerRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return common.PeerRole(0)
}

func (x *CheckTserverTabletHealthResponsePB_TabletHealthPB) GetFollowerLagMs() int64 {
	if x != nil && x.FollowerLagMs != nil {
		return *x.FollowerLagMs
	}
	return 0
}

var File_yb_tserver_tserver_proto protoreflect.FileDescriptor

var file_yb_tserver_tserver_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2f, 0x64, 0x6f, 0x63,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62,
	0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x15,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8b, 0x07, 0x0a, 0x0e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x42,
	0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x11,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x3a, 0x0a, 0x0e, 0x71, 0x6c, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x51,
	0x4c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52,
	0x0c, 0x71, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a,
	0x11, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x52, 0x0f, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65,
	0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x34,
	0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x70, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8e, 0x06, 0x0a, 0x0f, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x77,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x11,
	0x71, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x0f, 0x71, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x14, 0x70, 0x67,
	0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x12, 0x70,
	0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x12, 0x55,
	0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x53, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x22, 0xed, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x42, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x1a, 0xbb, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41,
	0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x22, 0x2c, 0x0a, 0x0d, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x47, 0x0a, 0x0e, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xe6, 0x02, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x07, 0x0a, 0x0d, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x2e, 0x0a, 0x08, 0x71, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x07, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x37, 0x0a, 0x0b, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0a, 0x70,
	0x67, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x59,
	0x42, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x3a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0e,
	0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4d, 0x61, 0x79, 0x48, 0x61, 0x76, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x78, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x33, 0x0a, 0x16, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f,
	0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x69, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xba, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a,
	0x08, 0x71, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x52, 0x07, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x67,
	0x73, 0x71, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x42, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x48, 0x74, 0x12, 0x55, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xdb, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09,
	0x69, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0x8b, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01,
	0x0a, 0x11, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52,
	0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x46, 0x0a,
	0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x75,
	0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x22, 0xb5, 0x01, 0x0a, 0x1d, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e,
	0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0xa3, 0x02, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x72, 0x0a, 0x16, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52,
	0x13, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x59, 0x0a, 0x15, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x68, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x21, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0xba, 0x02,
	0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x0e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x50, 0x42, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x73, 0x1a, 0x77, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c,
	0x61, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x67, 0x4d, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73,
	0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x22, 0x3c, 0x0a, 0x17, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x54, 0x0a, 0x1b, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2,
	0x01, 0x0a, 0x1a, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x1a, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x64,
	0x6f, 0x63, 0x64, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x50,
	0x42, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x5d, 0x0a, 0x10, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x50, 0x42, 0x12, 0x49, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42,
	0x10, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72,
})

var (
	file_yb_tserver_tserver_proto_rawDescOnce sync.Once
	file_yb_tserver_tserver_proto_rawDescData []byte
)

func file_yb_tserver_tserver_proto_rawDescGZIP() []byte {
	file_yb_tserver_tserver_proto_rawDescOnce.Do(func() {
		file_yb_tserver_tserver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_tserver_tserver_proto_rawDesc), len(file_yb_tserver_tserver_proto_rawDesc)))
	})
	return file_yb_tserver_tserver_proto_rawDescData
}

var file_yb_tserver_tserver_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_yb_tserver_tserver_proto_goTypes = []any{
	(*TabletConsensusInfoPB)(nil),                   // 0: yb.tserver.TabletConsensusInfoPB
	(*WriteRequestPB)(nil),                          // 1: yb.tserver.WriteRequestPB
	(*WriteResponsePB)(nil),                         // 2: yb.tserver.WriteResponsePB
	(*ListTabletsRequestPB)(nil),                    // 3: yb.tserver.ListTabletsRequestPB
	(*ListTabletsResponsePB)(nil),                   // 4: yb.tserver.ListTabletsResponsePB
	(*NoOpRequestPB)(nil),                           // 5: yb.tserver.NoOpRequestPB
	(*NoOpResponsePB)(nil),                          // 6: yb.tserver.NoOpResponsePB
	(*VerifyTableRowRangeRequestPB)(nil),            // 7: yb.tserver.VerifyTableRowRangeRequestPB
	(*VerifyTableRowRangeResponsePB)(nil),           // 8: yb.tserver.VerifyTableRowRangeResponsePB
	(*ReadRequestPB)(nil),                           // 9: yb.tserver.ReadRequestPB
	(*ReadResponsePB)(nil),                          // 10: yb.tserver.ReadResponsePB
	(*GetTabletKeyRangesRequestPB)(nil),             // 11: yb.tserver.GetTabletKeyRangesRequestPB
	(*GetTabletKeyRangesResponsePB)(nil),            // 12: yb.tserver.GetTabletKeyRangesResponsePB
	(*TruncateRequestPB)(nil),                       // 13: yb.tserver.TruncateRequestPB
	(*TruncateResponsePB)(nil),                      // 14: yb.tserver.TruncateResponsePB
	(*GetTabletStatusRequestPB)(nil),                // 15: yb.tserver.GetTabletStatusRequestPB
	(*GetTabletStatusResponsePB)(nil),               // 16: yb.tserver.GetTabletStatusResponsePB
	(*GetMasterAddressesRequestPB)(nil),             // 17: yb.tserver.GetMasterAddressesRequestPB
	(*GetMasterAddressesResponsePB)(nil),            // 18: yb.tserver.GetMasterAddressesResponsePB
	(*PublishRequestPB)(nil),                        // 19: yb.tserver.PublishRequestPB
	(*PublishResponsePB)(nil),                       // 20: yb.tserver.PublishResponsePB
	(*IsTabletServerReadyRequestPB)(nil),            // 21: yb.tserver.IsTabletServerReadyRequestPB
	(*IsTabletServerReadyResponsePB)(nil),           // 22: yb.tserver.IsTabletServerReadyResponsePB
	(*ListMasterServersRequestPB)(nil),              // 23: yb.tserver.ListMasterServersRequestPB
	(*ListMasterServersResponsePB)(nil),             // 24: yb.tserver.ListMasterServersResponsePB
	(*GetCompatibleSchemaVersionRequestPB)(nil),     // 25: yb.tserver.GetCompatibleSchemaVersionRequestPB
	(*GetCompatibleSchemaVersionResponsePB)(nil),    // 26: yb.tserver.GetCompatibleSchemaVersionResponsePB
	(*CheckTserverTabletHealthRequestPB)(nil),       // 27: yb.tserver.CheckTserverTabletHealthRequestPB
	(*CheckTserverTabletHealthResponsePB)(nil),      // 28: yb.tserver.CheckTserverTabletHealthResponsePB
	(*ClearAllMetaCachesOnServerRequestPB)(nil),     // 29: yb.tserver.ClearAllMetaCachesOnServerRequestPB
	(*ClearAllMetaCachesOnServerResponsePB)(nil),    // 30: yb.tserver.ClearAllMetaCachesOnServerResponsePB
	(*ClearMetacacheRequestPB)(nil),                 // 31: yb.tserver.ClearMetacacheRequestPB
	(*ClearMetacacheResponsePB)(nil),                // 32: yb.tserver.ClearMetacacheResponsePB
	(*ClearUniverseUuidRequestPB)(nil),              // 33: yb.tserver.ClearUniverseUuidRequestPB
	(*ClearUniverseUuidResponsePB)(nil),             // 34: yb.tserver.ClearUniverseUuidResponsePB
	(*AcquireObjectLockRequestPB)(nil),              // 35: yb.tserver.AcquireObjectLockRequestPB
	(*AcquireObjectLockResponsePB)(nil),             // 36: yb.tserver.AcquireObjectLockResponsePB
	(*ReleaseObjectLockRequestPB)(nil),              // 37: yb.tserver.ReleaseObjectLockRequestPB
	(*ReleaseObjectLockResponsePB)(nil),             // 38: yb.tserver.ReleaseObjectLockResponsePB
	(*DdlLockEntriesPB)(nil),                        // 39: yb.tserver.DdlLockEntriesPB
	(*WriteResponsePB_PerRowErrorPB)(nil),           // 40: yb.tserver.WriteResponsePB.PerRowErrorPB
	(*ListTabletsResponsePB_StatusAndSchemaPB)(nil), // 41: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB
	nil, // 42: yb.tserver.VerifyTableRowRangeResponsePB.ConsistencyStatsEntry
	(*ListMasterServersResponsePB_MasterServerAndTypePB)(nil), // 43: yb.tserver.ListMasterServersResponsePB.MasterServerAndTypePB
	(*CheckTserverTabletHealthResponsePB_TabletHealthPB)(nil), // 44: yb.tserver.CheckTserverTabletHealthResponsePB.TabletHealthPB
	(*consensus.ConsensusStatePB)(nil),                        // 45: yb.consensus.ConsensusStatePB
	(*docdb.KeyValueWriteBatchPB)(nil),                        // 46: yb.docdb.KeyValueWriteBatchPB
	(*common.RedisWriteRequestPB)(nil),                        // 47: yb.RedisWriteRequestPB
	(*common.QLWriteRequestPB)(nil),                           // 48: yb.QLWriteRequestPB
	(*common.PgsqlWriteRequestPB)(nil),                        // 49: yb.PgsqlWriteRequestPB
	(*common.ReadHybridTimePB)(nil),                           // 50: yb.ReadHybridTimePB
	(*common.AshMetadataPB)(nil),                              // 51: yb.AshMetadataPB
	(*TabletServerErrorPB)(nil),                               // 52: yb.tserver.TabletServerErrorPB
	(*common.RedisResponsePB)(nil),                            // 53: yb.RedisResponsePB
	(*common.QLResponsePB)(nil),                               // 54: yb.QLResponsePB
	(*common.PgsqlResponsePB)(nil),                            // 55: yb.PgsqlResponsePB
	(*common.RedisReadRequestPB)(nil),                         // 56: yb.RedisReadRequestPB
	(*common.QLReadRequestPB)(nil),                            // 57: yb.QLReadRequestPB
	(*common.PgsqlReadRequestPB)(nil),                         // 58: yb.PgsqlReadRequestPB
	(common.YBConsistencyLevel)(0),                            // 59: yb.YBConsistencyLevel
	(*common.TransactionMetadataPB)(nil),                      // 60: yb.TransactionMetadataPB
	(*common.SubTransactionMetadataPB)(nil),                   // 61: yb.SubTransactionMetadataPB
	(*tablet.TruncatePB)(nil),                                 // 62: yb.tablet.TruncatePB
	(*tablet.TabletStatusPB)(nil),                             // 63: yb.tablet.TabletStatusPB
	(*common.SchemaPB)(nil),                                   // 64: yb.SchemaPB
	(*docdb.ObjectLockPB)(nil),                                // 65: yb.docdb.ObjectLockPB
	(*common.AppStatusPB)(nil),                                // 66: yb.AppStatusPB
	(*common.PartitionSchemaPB)(nil),                          // 67: yb.PartitionSchemaPB
	(common.PeerRole)(0),                                      // 68: yb.PeerRole
}
var file_yb_tserver_tserver_proto_depIdxs = []int32{
	45, // 0: yb.tserver.TabletConsensusInfoPB.consensus_state:type_name -> yb.consensus.ConsensusStatePB
	46, // 1: yb.tserver.WriteRequestPB.write_batch:type_name -> yb.docdb.KeyValueWriteBatchPB
	47, // 2: yb.tserver.WriteRequestPB.redis_write_batch:type_name -> yb.RedisWriteRequestPB
	48, // 3: yb.tserver.WriteRequestPB.ql_write_batch:type_name -> yb.QLWriteRequestPB
	49, // 4: yb.tserver.WriteRequestPB.pgsql_write_batch:type_name -> yb.PgsqlWriteRequestPB
	50, // 5: yb.tserver.WriteRequestPB.read_time:type_name -> yb.ReadHybridTimePB
	51, // 6: yb.tserver.WriteRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	52, // 7: yb.tserver.WriteResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	40, // 8: yb.tserver.WriteResponsePB.per_row_errors:type_name -> yb.tserver.WriteResponsePB.PerRowErrorPB
	53, // 9: yb.tserver.WriteResponsePB.redis_response_batch:type_name -> yb.RedisResponsePB
	54, // 10: yb.tserver.WriteResponsePB.ql_response_batch:type_name -> yb.QLResponsePB
	55, // 11: yb.tserver.WriteResponsePB.pgsql_response_batch:type_name -> yb.PgsqlResponsePB
	50, // 12: yb.tserver.WriteResponsePB.restart_read_time:type_name -> yb.ReadHybridTimePB
	50, // 13: yb.tserver.WriteResponsePB.used_read_time:type_name -> yb.ReadHybridTimePB
	0,  // 14: yb.tserver.WriteResponsePB.tablet_consensus_info:type_name -> yb.tserver.TabletConsensusInfoPB
	52, // 15: yb.tserver.ListTabletsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	41, // 16: yb.tserver.ListTabletsResponsePB.status_and_schema:type_name -> yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB
	52, // 17: yb.tserver.NoOpResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	52, // 18: yb.tserver.VerifyTableRowRangeResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	42, // 19: yb.tserver.VerifyTableRowRangeResponsePB.consistency_stats:type_name -> yb.tserver.VerifyTableRowRangeResponsePB.ConsistencyStatsEntry
	56, // 20: yb.tserver.ReadRequestPB.redis_batch:type_name -> yb.RedisReadRequestPB
	57, // 21: yb.tserver.ReadRequestPB.ql_batch:type_name -> yb.QLReadRequestPB
	58, // 22: yb.tserver.ReadRequestPB.pgsql_batch:type_name -> yb.PgsqlReadRequestPB
	59, // 23: yb.tserver.ReadRequestPB.consistency_level:type_name -> yb.YBConsistencyLevel
	60, // 24: yb.tserver.ReadRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	61, // 25: yb.tserver.ReadRequestPB.subtransaction:type_name -> yb.SubTransactionMetadataPB
	50, // 26: yb.tserver.ReadRequestPB.read_time:type_name -> yb.ReadHybridTimePB
	51, // 27: yb.tserver.ReadRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	53, // 28: yb.tserver.ReadResponsePB.redis_batch:type_name -> yb.RedisResponsePB
	54, // 29: yb.tserver.ReadResponsePB.ql_batch:type_name -> yb.QLResponsePB
	55, // 30: yb.tserver.ReadResponsePB.pgsql_batch:type_name -> yb.PgsqlResponsePB
	52, // 31: yb.tserver.ReadResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	50, // 32: yb.tserver.ReadResponsePB.restart_read_time:type_name -> yb.ReadHybridTimePB
	50, // 33: yb.tserver.ReadResponsePB.used_read_time:type_name -> yb.ReadHybridTimePB
	0,  // 34: yb.tserver.ReadResponsePB.tablet_consensus_info:type_name -> yb.tserver.TabletConsensusInfoPB
	52, // 35: yb.tserver.GetTabletKeyRangesResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	62, // 36: yb.tserver.TruncateRequestPB.truncate:type_name -> yb.tablet.TruncatePB
	52, // 37: yb.tserver.TruncateResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	52, // 38: yb.tserver.GetTabletStatusResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	63, // 39: yb.tserver.GetTabletStatusResponsePB.tablet_status:type_name -> yb.tablet.TabletStatusPB
	52, // 40: yb.tserver.GetMasterAddressesResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	52, // 41: yb.tserver.IsTabletServerReadyResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	52, // 42: yb.tserver.ListMasterServersResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	43, // 43: yb.tserver.ListMasterServersResponsePB.master_server_and_type:type_name -> yb.tserver.ListMasterServersResponsePB.MasterServerAndTypePB
	64, // 44: yb.tserver.GetCompatibleSchemaVersionRequestPB.schema:type_name -> yb.SchemaPB
	52, // 45: yb.tserver.GetCompatibleSchemaVersionResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	52, // 46: yb.tserver.CheckTserverTabletHealthResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	44, // 47: yb.tserver.CheckTserverTabletHealthResponsePB.tablet_healths:type_name -> yb.tserver.CheckTserverTabletHealthResponsePB.TabletHealthPB
	52, // 48: yb.tserver.ClearMetacacheResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	52, // 49: yb.tserver.ClearUniverseUuidResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	65, // 50: yb.tserver.AcquireObjectLockRequestPB.object_locks:type_name -> yb.docdb.ObjectLockPB
	52, // 51: yb.tserver.AcquireObjectLockResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	65, // 52: yb.tserver.ReleaseObjectLockRequestPB.object_locks:type_name -> yb.docdb.ObjectLockPB
	52, // 53: yb.tserver.ReleaseObjectLockResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	35, // 54: yb.tserver.DdlLockEntriesPB.lock_entries:type_name -> yb.tserver.AcquireObjectLockRequestPB
	66, // 55: yb.tserver.WriteResponsePB.PerRowErrorPB.error:type_name -> yb.AppStatusPB
	63, // 56: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB.tablet_status:type_name -> yb.tablet.TabletStatusPB
	64, // 57: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB.schema:type_name -> yb.SchemaPB
	67, // 58: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB.partition_schema:type_name -> yb.PartitionSchemaPB
	68, // 59: yb.tserver.CheckTserverTabletHealthResponsePB.TabletHealthPB.role:type_name -> yb.PeerRole
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_yb_tserver_tserver_proto_init() }
func file_yb_tserver_tserver_proto_init() {
	if File_yb_tserver_tserver_proto != nil {
		return
	}
	file_yb_tserver_tserver_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_tserver_tserver_proto_rawDesc), len(file_yb_tserver_tserver_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_tserver_tserver_proto_goTypes,
		DependencyIndexes: file_yb_tserver_tserver_proto_depIdxs,
		MessageInfos:      file_yb_tserver_tserver_proto_msgTypes,
	}.Build()
	File_yb_tserver_tserver_proto = out.File
	file_yb_tserver_tserver_proto_goTypes = nil
	file_yb_tserver_tserver_proto_depIdxs = nil
}
