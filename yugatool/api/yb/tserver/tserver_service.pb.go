// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/tserver/tserver_service.proto

package tserver

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Note: Either among transactions_by_tablet or transaction_ids should be set. Both the fields
// shouldn't be set together nor should be left empty together.
type GetLockStatusRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tablets to scan. Limit per tablet results to the specified transaction_ids in
	// TabletTransactionInfoPB when non-empty. If empty and 'max_single_shard_waiter_start_time_us'
	// is left at default, include lock info of all transactions at that tablet.
	TransactionsByTablet map[string]*GetLockStatusRequestPB_TabletTransactionInfoPB `protobuf:"bytes,1,rep,name=transactions_by_tablet,json=transactionsByTablet" json:"transactions_by_tablet,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IncludeTrace         *bool                                                      `protobuf:"varint,2,opt,name=include_trace,json=includeTrace,def=0" json:"include_trace,omitempty"`
	PropagatedHybridTime *uint64                                                    `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Limit results to the specified transaction_ids when transactions_by_tablet is empty.
	TransactionIds [][]byte `protobuf:"bytes,4,rep,name=transaction_ids,json=transactionIds" json:"transaction_ids,omitempty"`
	// Sets the maximum start time of single shard waiters that should be returned, i.e, all
	// single shard waiters with start time before the specified value will be returned. All
	// tablets listed in 'transactions_by_tablet' would be scanned.
	MaxSingleShardWaiterStartTimeUs *uint64 `protobuf:"fixed64,5,opt,name=max_single_shard_waiter_start_time_us,json=maxSingleShardWaiterStartTimeUs,def=0" json:"max_single_shard_waiter_start_time_us,omitempty"`
	// Limit number of locks returned per transaction at each tablet.
	// If the field is set to 0, the result set isn't limited and all locks are returned.
	MaxTxnLocksPerTablet *uint32 `protobuf:"varint,6,opt,name=max_txn_locks_per_tablet,json=maxTxnLocksPerTablet,def=0" json:"max_txn_locks_per_tablet,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for GetLockStatusRequestPB fields.
const (
	Default_GetLockStatusRequestPB_IncludeTrace                    = bool(false)
	Default_GetLockStatusRequestPB_MaxSingleShardWaiterStartTimeUs = uint64(0)
	Default_GetLockStatusRequestPB_MaxTxnLocksPerTablet            = uint32(0)
)

func (x *GetLockStatusRequestPB) Reset() {
	*x = GetLockStatusRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLockStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockStatusRequestPB) ProtoMessage() {}

func (x *GetLockStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockStatusRequestPB.ProtoReflect.Descriptor instead.
func (*GetLockStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetLockStatusRequestPB) GetTransactionsByTablet() map[string]*GetLockStatusRequestPB_TabletTransactionInfoPB {
	if x != nil {
		return x.TransactionsByTablet
	}
	return nil
}

func (x *GetLockStatusRequestPB) GetIncludeTrace() bool {
	if x != nil && x.IncludeTrace != nil {
		return *x.IncludeTrace
	}
	return Default_GetLockStatusRequestPB_IncludeTrace
}

func (x *GetLockStatusRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetLockStatusRequestPB) GetTransactionIds() [][]byte {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

func (x *GetLockStatusRequestPB) GetMaxSingleShardWaiterStartTimeUs() uint64 {
	if x != nil && x.MaxSingleShardWaiterStartTimeUs != nil {
		return *x.MaxSingleShardWaiterStartTimeUs
	}
	return Default_GetLockStatusRequestPB_MaxSingleShardWaiterStartTimeUs
}

func (x *GetLockStatusRequestPB) GetMaxTxnLocksPerTablet() uint32 {
	if x != nil && x.MaxTxnLocksPerTablet != nil {
		return *x.MaxTxnLocksPerTablet
	}
	return Default_GetLockStatusRequestPB_MaxTxnLocksPerTablet
}

type GetLockStatusResponsePB struct {
	state                protoimpl.MessageState     `protogen:"open.v1"`
	Error                *TabletServerErrorPB       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TraceBuffer          *string                    `protobuf:"bytes,2,opt,name=trace_buffer,json=traceBuffer" json:"trace_buffer,omitempty"`
	PropagatedHybridTime *uint64                    `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TabletLockInfos      []*common.TabletLockInfoPB `protobuf:"bytes,4,rep,name=tablet_lock_infos,json=tabletLockInfos" json:"tablet_lock_infos,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetLockStatusResponsePB) Reset() {
	*x = GetLockStatusResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLockStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockStatusResponsePB) ProtoMessage() {}

func (x *GetLockStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockStatusResponsePB.ProtoReflect.Descriptor instead.
func (*GetLockStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetLockStatusResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLockStatusResponsePB) GetTraceBuffer() string {
	if x != nil && x.TraceBuffer != nil {
		return *x.TraceBuffer
	}
	return ""
}

func (x *GetLockStatusResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetLockStatusResponsePB) GetTabletLockInfos() []*common.TabletLockInfoPB {
	if x != nil {
		return x.TabletLockInfos
	}
	return nil
}

type GetMetricsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMetricsRequestPB) Reset() {
	*x = GetMetricsRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequestPB) ProtoMessage() {}

func (x *GetMetricsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequestPB.ProtoReflect.Descriptor instead.
func (*GetMetricsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{2}
}

type GetMetricsResponsePB struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Metrics       []*common.TserverMetricsInfoPB `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	Error         *TabletServerErrorPB           `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMetricsResponsePB) Reset() {
	*x = GetMetricsResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetricsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsResponsePB) ProtoMessage() {}

func (x *GetMetricsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsResponsePB.ProtoReflect.Descriptor instead.
func (*GetMetricsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetMetricsResponsePB) GetMetrics() []*common.TserverMetricsInfoPB {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GetMetricsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetLogLocationRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogLocationRequestPB) Reset() {
	*x = GetLogLocationRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogLocationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogLocationRequestPB) ProtoMessage() {}

func (x *GetLogLocationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogLocationRequestPB.ProtoReflect.Descriptor instead.
func (*GetLogLocationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{4}
}

type GetLogLocationResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogLocation   *string                `protobuf:"bytes,1,opt,name=log_location,json=logLocation" json:"log_location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLogLocationResponsePB) Reset() {
	*x = GetLogLocationResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLogLocationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogLocationResponsePB) ProtoMessage() {}

func (x *GetLogLocationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogLocationResponsePB.ProtoReflect.Descriptor instead.
func (*GetLogLocationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetLogLocationResponsePB) GetLogLocation() string {
	if x != nil && x.LogLocation != nil {
		return *x.LogLocation
	}
	return ""
}

type ChecksumRequestPB struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	TabletId         []byte                     `protobuf:"bytes,6,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	ConsistencyLevel *common.YBConsistencyLevel `protobuf:"varint,7,opt,name=consistency_level,json=consistencyLevel,enum=yb.YBConsistencyLevel" json:"consistency_level,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ChecksumRequestPB) Reset() {
	*x = ChecksumRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChecksumRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecksumRequestPB) ProtoMessage() {}

func (x *ChecksumRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecksumRequestPB.ProtoReflect.Descriptor instead.
func (*ChecksumRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{6}
}

func (x *ChecksumRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ChecksumRequestPB) GetConsistencyLevel() common.YBConsistencyLevel {
	if x != nil && x.ConsistencyLevel != nil {
		return *x.ConsistencyLevel
	}
	return common.YBConsistencyLevel(1)
}

type ChecksumResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// The (possibly partial) checksum of the tablet data.
	// This checksum is only complete if 'has_more_results' is false.
	Checksum      *uint64 `protobuf:"varint,2,opt,name=checksum" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChecksumResponsePB) Reset() {
	*x = ChecksumResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChecksumResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecksumResponsePB) ProtoMessage() {}

func (x *ChecksumResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecksumResponsePB.ProtoReflect.Descriptor instead.
func (*ChecksumResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{7}
}

func (x *ChecksumResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ChecksumResponsePB) GetChecksum() uint64 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

type ListTabletsForTabletServerRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTabletsForTabletServerRequestPB) Reset() {
	*x = ListTabletsForTabletServerRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsForTabletServerRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsForTabletServerRequestPB) ProtoMessage() {}

func (x *ListTabletsForTabletServerRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsForTabletServerRequestPB.ProtoReflect.Descriptor instead.
func (*ListTabletsForTabletServerRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{8}
}

type ListTabletsForTabletServerResponsePB struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Entries       []*ListTabletsForTabletServerResponsePB_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTabletsForTabletServerResponsePB) Reset() {
	*x = ListTabletsForTabletServerResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsForTabletServerResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsForTabletServerResponsePB) ProtoMessage() {}

func (x *ListTabletsForTabletServerResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsForTabletServerResponsePB.ProtoReflect.Descriptor instead.
func (*ListTabletsForTabletServerResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListTabletsForTabletServerResponsePB) GetEntries() []*ListTabletsForTabletServerResponsePB_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ImportDataRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TabletId      *string                `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SourceDir     *string                `protobuf:"bytes,2,opt,name=source_dir,json=sourceDir" json:"source_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportDataRequestPB) Reset() {
	*x = ImportDataRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDataRequestPB) ProtoMessage() {}

func (x *ImportDataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDataRequestPB.ProtoReflect.Descriptor instead.
func (*ImportDataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{10}
}

func (x *ImportDataRequestPB) GetTabletId() string {
	if x != nil && x.TabletId != nil {
		return *x.TabletId
	}
	return ""
}

func (x *ImportDataRequestPB) GetSourceDir() string {
	if x != nil && x.SourceDir != nil {
		return *x.SourceDir
	}
	return ""
}

type ImportDataResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error         *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportDataResponsePB) Reset() {
	*x = ImportDataResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportDataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDataResponsePB) ProtoMessage() {}

func (x *ImportDataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDataResponsePB.ProtoReflect.Descriptor instead.
func (*ImportDataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{11}
}

func (x *ImportDataResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type UpdateTransactionRequestPB struct {
	state                protoimpl.MessageState     `protogen:"open.v1"`
	TabletId             []byte                     `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	State                *tablet.TransactionStatePB `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	PropagatedHybridTime *uint64                    `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	StartTime            *uint64                    `protobuf:"fixed64,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateTransactionRequestPB) Reset() {
	*x = UpdateTransactionRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionRequestPB) ProtoMessage() {}

func (x *UpdateTransactionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateTransactionRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *UpdateTransactionRequestPB) GetState() *tablet.TransactionStatePB {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UpdateTransactionRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *UpdateTransactionRequestPB) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type UpdateTransactionResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateTransactionResponsePB) Reset() {
	*x = UpdateTransactionResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionResponsePB) ProtoMessage() {}

func (x *UpdateTransactionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateTransactionResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *UpdateTransactionResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type GetTransactionStatusRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TabletId             []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TransactionId        [][]byte               `protobuf:"bytes,2,rep,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	RaftConfigOpidIndex  *int64                 `protobuf:"varint,5,opt,name=raft_config_opid_index,json=raftConfigOpidIndex" json:"raft_config_opid_index,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetTransactionStatusRequestPB) Reset() {
	*x = GetTransactionStatusRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusRequestPB) ProtoMessage() {}

func (x *GetTransactionStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusRequestPB.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTransactionStatusRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetTransactionStatusRequestPB) GetTransactionId() [][]byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *GetTransactionStatusRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetTransactionStatusRequestPB) GetRaftConfigOpidIndex() int64 {
	if x != nil && x.RaftConfigOpidIndex != nil {
		return *x.RaftConfigOpidIndex
	}
	return 0
}

type GetTransactionStatusResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// For backward compatibility we use multiple repeated fields instead of one field
	// with custom message.
	Status []common.TransactionStatus `protobuf:"varint,2,rep,name=status,enum=yb.TransactionStatus" json:"status,omitempty"`
	// For description of status_hybrid_time see comment in TransactionStatusResult.
	StatusHybridTime     []uint64 `protobuf:"fixed64,3,rep,name=status_hybrid_time,json=statusHybridTime" json:"status_hybrid_time,omitempty"`
	PropagatedHybridTime *uint64  `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	NumReplicatedBatches []int64  `protobuf:"varint,5,rep,name=num_replicated_batches,json=numReplicatedBatches" json:"num_replicated_batches,omitempty"`
	// Size could be less than status size. In this case appropriates values should be interpreted
	// as invalid hybrid time.
	CoordinatorSafeTime []uint64              `protobuf:"fixed64,6,rep,name=coordinator_safe_time,json=coordinatorSafeTime" json:"coordinator_safe_time,omitempty"`
	AbortedSubtxnSet    []*common.SubtxnSetPB `protobuf:"bytes,7,rep,name=aborted_subtxn_set,json=abortedSubtxnSet" json:"aborted_subtxn_set,omitempty"`
	// Status containing deadlock info if the transaction was aborted due to deadlock. Else, it is
	// set to Status::OK().
	//
	// Note: The field might not be present on older versions of YB and hence its existence
	// should be checked before usage by the reader.
	DeadlockReason      []*common.AppStatusPB  `protobuf:"bytes,8,rep,name=deadlock_reason,json=deadlockReason" json:"deadlock_reason,omitempty"`
	TabletConsensusInfo *TabletConsensusInfoPB `protobuf:"bytes,9,opt,name=tablet_consensus_info,json=tabletConsensusInfo" json:"tablet_consensus_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetTransactionStatusResponsePB) Reset() {
	*x = GetTransactionStatusResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusResponsePB) ProtoMessage() {}

func (x *GetTransactionStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusResponsePB.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetTransactionStatusResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTransactionStatusResponsePB) GetStatus() []common.TransactionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetTransactionStatusResponsePB) GetStatusHybridTime() []uint64 {
	if x != nil {
		return x.StatusHybridTime
	}
	return nil
}

func (x *GetTransactionStatusResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetTransactionStatusResponsePB) GetNumReplicatedBatches() []int64 {
	if x != nil {
		return x.NumReplicatedBatches
	}
	return nil
}

func (x *GetTransactionStatusResponsePB) GetCoordinatorSafeTime() []uint64 {
	if x != nil {
		return x.CoordinatorSafeTime
	}
	return nil
}

func (x *GetTransactionStatusResponsePB) GetAbortedSubtxnSet() []*common.SubtxnSetPB {
	if x != nil {
		return x.AbortedSubtxnSet
	}
	return nil
}

func (x *GetTransactionStatusResponsePB) GetDeadlockReason() []*common.AppStatusPB {
	if x != nil {
		return x.DeadlockReason
	}
	return nil
}

func (x *GetTransactionStatusResponsePB) GetTabletConsensusInfo() *TabletConsensusInfoPB {
	if x != nil {
		return x.TabletConsensusInfo
	}
	return nil
}

type GetOldTransactionsRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TabletId             []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	MinTxnAgeMs          *uint32                `protobuf:"varint,2,opt,name=min_txn_age_ms,json=minTxnAgeMs" json:"min_txn_age_ms,omitempty"`
	MaxNumTxns           *uint32                `protobuf:"varint,3,opt,name=max_num_txns,json=maxNumTxns" json:"max_num_txns,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOldTransactionsRequestPB) Reset() {
	*x = GetOldTransactionsRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldTransactionsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldTransactionsRequestPB) ProtoMessage() {}

func (x *GetOldTransactionsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldTransactionsRequestPB.ProtoReflect.Descriptor instead.
func (*GetOldTransactionsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{16}
}

func (x *GetOldTransactionsRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetOldTransactionsRequestPB) GetMinTxnAgeMs() uint32 {
	if x != nil && x.MinTxnAgeMs != nil {
		return *x.MinTxnAgeMs
	}
	return 0
}

func (x *GetOldTransactionsRequestPB) GetMaxNumTxns() uint32 {
	if x != nil && x.MaxNumTxns != nil {
		return *x.MaxNumTxns
	}
	return 0
}

func (x *GetOldTransactionsRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

// TODO(pglocks): Add term field to the response so that we can filter out responses from stale
// status tablet leader peers.
//
// Refer https://github.com/yugabyte/yugabyte-db/issues/18140 for details.
type GetOldTransactionsResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error                *TabletServerErrorPB                                     `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Txn                  []*GetOldTransactionsResponsePB_OldTransactionMetadataPB `protobuf:"bytes,2,rep,name=txn" json:"txn,omitempty"`
	PropagatedHybridTime *uint64                                                  `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOldTransactionsResponsePB) Reset() {
	*x = GetOldTransactionsResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldTransactionsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldTransactionsResponsePB) ProtoMessage() {}

func (x *GetOldTransactionsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldTransactionsResponsePB.ProtoReflect.Descriptor instead.
func (*GetOldTransactionsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetOldTransactionsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetOldTransactionsResponsePB) GetTxn() []*GetOldTransactionsResponsePB_OldTransactionMetadataPB {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *GetOldTransactionsResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type GetOldSingleShardWaitersRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MinTxnAgeMs          *uint32                `protobuf:"varint,1,opt,name=min_txn_age_ms,json=minTxnAgeMs" json:"min_txn_age_ms,omitempty"`
	MaxNumTxns           *uint32                `protobuf:"varint,2,opt,name=max_num_txns,json=maxNumTxns" json:"max_num_txns,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOldSingleShardWaitersRequestPB) Reset() {
	*x = GetOldSingleShardWaitersRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldSingleShardWaitersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldSingleShardWaitersRequestPB) ProtoMessage() {}

func (x *GetOldSingleShardWaitersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldSingleShardWaitersRequestPB.ProtoReflect.Descriptor instead.
func (*GetOldSingleShardWaitersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetOldSingleShardWaitersRequestPB) GetMinTxnAgeMs() uint32 {
	if x != nil && x.MinTxnAgeMs != nil {
		return *x.MinTxnAgeMs
	}
	return 0
}

func (x *GetOldSingleShardWaitersRequestPB) GetMaxNumTxns() uint32 {
	if x != nil && x.MaxNumTxns != nil {
		return *x.MaxNumTxns
	}
	return 0
}

func (x *GetOldSingleShardWaitersRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type GetOldSingleShardWaitersResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error                *TabletServerErrorPB                                                 `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Txn                  []*GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB `protobuf:"bytes,2,rep,name=txn" json:"txn,omitempty"`
	PropagatedHybridTime *uint64                                                              `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetOldSingleShardWaitersResponsePB) Reset() {
	*x = GetOldSingleShardWaitersResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldSingleShardWaitersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldSingleShardWaitersResponsePB) ProtoMessage() {}

func (x *GetOldSingleShardWaitersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldSingleShardWaitersResponsePB.ProtoReflect.Descriptor instead.
func (*GetOldSingleShardWaitersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetOldSingleShardWaitersResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetOldSingleShardWaitersResponsePB) GetTxn() []*GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB {
	if x != nil {
		return x.Txn
	}
	return nil
}

func (x *GetOldSingleShardWaitersResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type UpdateTransactionWaitingForStatusRequestPB struct {
	state                protoimpl.MessageState                                           `protogen:"open.v1"`
	PropagatedHybridTime *uint64                                                          `protobuf:"fixed64,1,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TabletId             []byte                                                           `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	WaitingTransactions  []*UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction `protobuf:"bytes,3,rep,name=waiting_transactions,json=waitingTransactions" json:"waiting_transactions,omitempty"`
	TserverUuid          []byte                                                           `protobuf:"bytes,4,opt,name=tserver_uuid,json=tserverUuid" json:"tserver_uuid,omitempty"`
	IsFullUpdate         *bool                                                            `protobuf:"varint,5,opt,name=is_full_update,json=isFullUpdate,def=0" json:"is_full_update,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for UpdateTransactionWaitingForStatusRequestPB fields.
const (
	Default_UpdateTransactionWaitingForStatusRequestPB_IsFullUpdate = bool(false)
)

func (x *UpdateTransactionWaitingForStatusRequestPB) Reset() {
	*x = UpdateTransactionWaitingForStatusRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionWaitingForStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionWaitingForStatusRequestPB) ProtoMessage() {}

func (x *UpdateTransactionWaitingForStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionWaitingForStatusRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionWaitingForStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateTransactionWaitingForStatusRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *UpdateTransactionWaitingForStatusRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *UpdateTransactionWaitingForStatusRequestPB) GetWaitingTransactions() []*UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction {
	if x != nil {
		return x.WaitingTransactions
	}
	return nil
}

func (x *UpdateTransactionWaitingForStatusRequestPB) GetTserverUuid() []byte {
	if x != nil {
		return x.TserverUuid
	}
	return nil
}

func (x *UpdateTransactionWaitingForStatusRequestPB) GetIsFullUpdate() bool {
	if x != nil && x.IsFullUpdate != nil {
		return *x.IsFullUpdate
	}
	return Default_UpdateTransactionWaitingForStatusRequestPB_IsFullUpdate
}

type UpdateTransactionWaitingForStatusResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,1,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateTransactionWaitingForStatusResponsePB) Reset() {
	*x = UpdateTransactionWaitingForStatusResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionWaitingForStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionWaitingForStatusResponsePB) ProtoMessage() {}

func (x *UpdateTransactionWaitingForStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionWaitingForStatusResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionWaitingForStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateTransactionWaitingForStatusResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *UpdateTransactionWaitingForStatusResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ProbeTransactionDeadlockRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,1,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TabletId             []byte                 `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	ProbeOriginTxnId     []byte                 `protobuf:"bytes,3,opt,name=probe_origin_txn_id,json=probeOriginTxnId" json:"probe_origin_txn_id,omitempty"`
	BlockingTxnId        []byte                 `protobuf:"bytes,4,opt,name=blocking_txn_id,json=blockingTxnId" json:"blocking_txn_id,omitempty"`
	DetectorId           []byte                 `protobuf:"bytes,5,opt,name=detector_id,json=detectorId" json:"detector_id,omitempty"`
	ProbeNum             *uint32                `protobuf:"fixed32,6,opt,name=probe_num,json=probeNum" json:"probe_num,omitempty"`
	MinProbeNum          *uint32                `protobuf:"fixed32,7,opt,name=min_probe_num,json=minProbeNum" json:"min_probe_num,omitempty"`
	BlockingSubtxnSet    *common.SubtxnSetPB    `protobuf:"bytes,8,opt,name=blocking_subtxn_set,json=blockingSubtxnSet" json:"blocking_subtxn_set,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProbeTransactionDeadlockRequestPB) Reset() {
	*x = ProbeTransactionDeadlockRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeTransactionDeadlockRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeTransactionDeadlockRequestPB) ProtoMessage() {}

func (x *ProbeTransactionDeadlockRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeTransactionDeadlockRequestPB.ProtoReflect.Descriptor instead.
func (*ProbeTransactionDeadlockRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{22}
}

func (x *ProbeTransactionDeadlockRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ProbeTransactionDeadlockRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ProbeTransactionDeadlockRequestPB) GetProbeOriginTxnId() []byte {
	if x != nil {
		return x.ProbeOriginTxnId
	}
	return nil
}

func (x *ProbeTransactionDeadlockRequestPB) GetBlockingTxnId() []byte {
	if x != nil {
		return x.BlockingTxnId
	}
	return nil
}

func (x *ProbeTransactionDeadlockRequestPB) GetDetectorId() []byte {
	if x != nil {
		return x.DetectorId
	}
	return nil
}

func (x *ProbeTransactionDeadlockRequestPB) GetProbeNum() uint32 {
	if x != nil && x.ProbeNum != nil {
		return *x.ProbeNum
	}
	return 0
}

func (x *ProbeTransactionDeadlockRequestPB) GetMinProbeNum() uint32 {
	if x != nil && x.MinProbeNum != nil {
		return *x.MinProbeNum
	}
	return 0
}

func (x *ProbeTransactionDeadlockRequestPB) GetBlockingSubtxnSet() *common.SubtxnSetPB {
	if x != nil {
		return x.BlockingSubtxnSet
	}
	return nil
}

type ProbeTransactionDeadlockResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,1,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// If empty, no deadlock was detected. Otherwise, includes reverse ordered list of the deadlock
	// participants detected by the probe recipient. The probe sender should append its own txn to
	// this list before responding to its own probe sender.
	DeadlockedTxnIds [][]byte                                                `protobuf:"bytes,3,rep,name=deadlocked_txn_ids,json=deadlockedTxnIds" json:"deadlocked_txn_ids,omitempty"` // deprecated in favor of deadlock field below
	Deadlock         []*ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo `protobuf:"bytes,4,rep,name=deadlock" json:"deadlock,omitempty"`
	// If set, it indicates that the blocking transaction/sub-transaction(s) info sent in
	// ProbeTransactionDeadlockRequestPB has been resolved.
	ShouldEraseProbe *bool `protobuf:"varint,5,opt,name=should_erase_probe,json=shouldEraseProbe" json:"should_erase_probe,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProbeTransactionDeadlockResponsePB) Reset() {
	*x = ProbeTransactionDeadlockResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeTransactionDeadlockResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeTransactionDeadlockResponsePB) ProtoMessage() {}

func (x *ProbeTransactionDeadlockResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeTransactionDeadlockResponsePB.ProtoReflect.Descriptor instead.
func (*ProbeTransactionDeadlockResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{23}
}

func (x *ProbeTransactionDeadlockResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ProbeTransactionDeadlockResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProbeTransactionDeadlockResponsePB) GetDeadlockedTxnIds() [][]byte {
	if x != nil {
		return x.DeadlockedTxnIds
	}
	return nil
}

func (x *ProbeTransactionDeadlockResponsePB) GetDeadlock() []*ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo {
	if x != nil {
		return x.Deadlock
	}
	return nil
}

func (x *ProbeTransactionDeadlockResponsePB) GetShouldEraseProbe() bool {
	if x != nil && x.ShouldEraseProbe != nil {
		return *x.ShouldEraseProbe
	}
	return false
}

type GetTransactionStatusAtParticipantRequestPB struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	TabletId                     []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TransactionId                []byte                 `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	PropagatedHybridTime         *uint64                `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	RequiredNumReplicatedBatches *int64                 `protobuf:"varint,4,opt,name=required_num_replicated_batches,json=requiredNumReplicatedBatches" json:"required_num_replicated_batches,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GetTransactionStatusAtParticipantRequestPB) Reset() {
	*x = GetTransactionStatusAtParticipantRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusAtParticipantRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusAtParticipantRequestPB) ProtoMessage() {}

func (x *GetTransactionStatusAtParticipantRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusAtParticipantRequestPB.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusAtParticipantRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetTransactionStatusAtParticipantRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetTransactionStatusAtParticipantRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *GetTransactionStatusAtParticipantRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetTransactionStatusAtParticipantRequestPB) GetRequiredNumReplicatedBatches() int64 {
	if x != nil && x.RequiredNumReplicatedBatches != nil {
		return *x.RequiredNumReplicatedBatches
	}
	return 0
}

type GetTransactionStatusAtParticipantResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	NumReplicatedBatches *int64               `protobuf:"varint,3,opt,name=num_replicated_batches,json=numReplicatedBatches" json:"num_replicated_batches,omitempty"`
	StatusHybridTime     *uint64              `protobuf:"fixed64,4,opt,name=status_hybrid_time,json=statusHybridTime" json:"status_hybrid_time,omitempty"`
	Aborted              *bool                `protobuf:"varint,5,opt,name=aborted" json:"aborted,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetTransactionStatusAtParticipantResponsePB) Reset() {
	*x = GetTransactionStatusAtParticipantResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusAtParticipantResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusAtParticipantResponsePB) ProtoMessage() {}

func (x *GetTransactionStatusAtParticipantResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusAtParticipantResponsePB.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusAtParticipantResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetTransactionStatusAtParticipantResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTransactionStatusAtParticipantResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetTransactionStatusAtParticipantResponsePB) GetNumReplicatedBatches() int64 {
	if x != nil && x.NumReplicatedBatches != nil {
		return *x.NumReplicatedBatches
	}
	return 0
}

func (x *GetTransactionStatusAtParticipantResponsePB) GetStatusHybridTime() uint64 {
	if x != nil && x.StatusHybridTime != nil {
		return *x.StatusHybridTime
	}
	return 0
}

func (x *GetTransactionStatusAtParticipantResponsePB) GetAborted() bool {
	if x != nil && x.Aborted != nil {
		return *x.Aborted
	}
	return false
}

type AbortTransactionRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TabletId             []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TransactionId        []byte                 `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Status containing deadlock info if the transaction is being aborted due to deadlock.
	DeadlockReason *common.AppStatusPB `protobuf:"bytes,4,opt,name=deadlock_reason,json=deadlockReason" json:"deadlock_reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AbortTransactionRequestPB) Reset() {
	*x = AbortTransactionRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortTransactionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortTransactionRequestPB) ProtoMessage() {}

func (x *AbortTransactionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortTransactionRequestPB.ProtoReflect.Descriptor instead.
func (*AbortTransactionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{26}
}

func (x *AbortTransactionRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *AbortTransactionRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *AbortTransactionRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *AbortTransactionRequestPB) GetDeadlockReason() *common.AppStatusPB {
	if x != nil {
		return x.DeadlockReason
	}
	return nil
}

type AbortTransactionResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error  *TabletServerErrorPB      `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Status *common.TransactionStatus `protobuf:"varint,2,opt,name=status,enum=yb.TransactionStatus" json:"status,omitempty"`
	// For description of status_hybrid_time see comment in TransactionStatusResult.
	StatusHybridTime     *uint64 `protobuf:"fixed64,3,opt,name=status_hybrid_time,json=statusHybridTime" json:"status_hybrid_time,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	CoordinatorSafeTime  *uint64 `protobuf:"fixed64,5,opt,name=coordinator_safe_time,json=coordinatorSafeTime" json:"coordinator_safe_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AbortTransactionResponsePB) Reset() {
	*x = AbortTransactionResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortTransactionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortTransactionResponsePB) ProtoMessage() {}

func (x *AbortTransactionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortTransactionResponsePB.ProtoReflect.Descriptor instead.
func (*AbortTransactionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{27}
}

func (x *AbortTransactionResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AbortTransactionResponsePB) GetStatus() common.TransactionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return common.TransactionStatus(1)
}

func (x *AbortTransactionResponsePB) GetStatusHybridTime() uint64 {
	if x != nil && x.StatusHybridTime != nil {
		return *x.StatusHybridTime
	}
	return 0
}

func (x *AbortTransactionResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *AbortTransactionResponsePB) GetCoordinatorSafeTime() uint64 {
	if x != nil && x.CoordinatorSafeTime != nil {
		return *x.CoordinatorSafeTime
	}
	return 0
}

type UpdateTransactionStatusLocationRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TabletId             []byte                 `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TransactionId        []byte                 `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// ID of new status tablet that the transaction will be using.
	NewStatusTabletId []byte `protobuf:"bytes,4,opt,name=new_status_tablet_id,json=newStatusTabletId" json:"new_status_tablet_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateTransactionStatusLocationRequestPB) Reset() {
	*x = UpdateTransactionStatusLocationRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionStatusLocationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionStatusLocationRequestPB) ProtoMessage() {}

func (x *UpdateTransactionStatusLocationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionStatusLocationRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionStatusLocationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateTransactionStatusLocationRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *UpdateTransactionStatusLocationRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *UpdateTransactionStatusLocationRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *UpdateTransactionStatusLocationRequestPB) GetNewStatusTabletId() []byte {
	if x != nil {
		return x.NewStatusTabletId
	}
	return nil
}

type UpdateTransactionStatusLocationResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error         *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTransactionStatusLocationResponsePB) Reset() {
	*x = UpdateTransactionStatusLocationResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionStatusLocationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionStatusLocationResponsePB) ProtoMessage() {}

func (x *UpdateTransactionStatusLocationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionStatusLocationResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateTransactionStatusLocationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateTransactionStatusLocationResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetSplitKeyRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TabletId             []byte                 `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	IsManualSplit        *bool                  `protobuf:"varint,3,opt,name=is_manual_split,json=isManualSplit" json:"is_manual_split,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetSplitKeyRequestPB) Reset() {
	*x = GetSplitKeyRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSplitKeyRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSplitKeyRequestPB) ProtoMessage() {}

func (x *GetSplitKeyRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSplitKeyRequestPB.ProtoReflect.Descriptor instead.
func (*GetSplitKeyRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetSplitKeyRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetSplitKeyRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetSplitKeyRequestPB) GetIsManualSplit() bool {
	if x != nil && x.IsManualSplit != nil {
		return *x.IsManualSplit
	}
	return false
}

type GetSplitKeyResponsePB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Error                *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	SplitPartitionKey    []byte                 `protobuf:"bytes,2,opt,name=split_partition_key,json=splitPartitionKey" json:"split_partition_key,omitempty"`
	SplitEncodedKey      []byte                 `protobuf:"bytes,3,opt,name=split_encoded_key,json=splitEncodedKey" json:"split_encoded_key,omitempty"`
	PropagatedHybridTime *uint64                `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetSplitKeyResponsePB) Reset() {
	*x = GetSplitKeyResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSplitKeyResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSplitKeyResponsePB) ProtoMessage() {}

func (x *GetSplitKeyResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSplitKeyResponsePB.ProtoReflect.Descriptor instead.
func (*GetSplitKeyResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{31}
}

func (x *GetSplitKeyResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetSplitKeyResponsePB) GetSplitPartitionKey() []byte {
	if x != nil {
		return x.SplitPartitionKey
	}
	return nil
}

func (x *GetSplitKeyResponsePB) GetSplitEncodedKey() []byte {
	if x != nil {
		return x.SplitEncodedKey
	}
	return nil
}

func (x *GetSplitKeyResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type GetSharedDataRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSharedDataRequestPB) Reset() {
	*x = GetSharedDataRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSharedDataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedDataRequestPB) ProtoMessage() {}

func (x *GetSharedDataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedDataRequestPB.ProtoReflect.Descriptor instead.
func (*GetSharedDataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{32}
}

type GetSharedDataResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSharedDataResponsePB) Reset() {
	*x = GetSharedDataResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSharedDataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSharedDataResponsePB) ProtoMessage() {}

func (x *GetSharedDataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSharedDataResponsePB.ProtoReflect.Descriptor instead.
func (*GetSharedDataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetSharedDataResponsePB) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTserverCatalogVersionInfoRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, we only ask for the size of the catalog version map in tserver. Otherwise,
	// we ask for database catalog version info from the tserver.
	SizeOnly *bool `protobuf:"varint,1,opt,name=size_only,json=sizeOnly" json:"size_only,omitempty"`
	// If set we ask for the catalog version of the given database from the tserver.
	// If not set or has value 0, we ask for the catalog version map of all databases
	// from the tserver.
	DbOid         *uint32 `protobuf:"varint,2,opt,name=db_oid,json=dbOid,def=0" json:"db_oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GetTserverCatalogVersionInfoRequestPB fields.
const (
	Default_GetTserverCatalogVersionInfoRequestPB_DbOid = uint32(0)
)

func (x *GetTserverCatalogVersionInfoRequestPB) Reset() {
	*x = GetTserverCatalogVersionInfoRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTserverCatalogVersionInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTserverCatalogVersionInfoRequestPB) ProtoMessage() {}

func (x *GetTserverCatalogVersionInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTserverCatalogVersionInfoRequestPB.ProtoReflect.Descriptor instead.
func (*GetTserverCatalogVersionInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetTserverCatalogVersionInfoRequestPB) GetSizeOnly() bool {
	if x != nil && x.SizeOnly != nil {
		return *x.SizeOnly
	}
	return false
}

func (x *GetTserverCatalogVersionInfoRequestPB) GetDbOid() uint32 {
	if x != nil && x.DbOid != nil {
		return *x.DbOid
	}
	return Default_GetTserverCatalogVersionInfoRequestPB_DbOid
}

type GetTserverCatalogVersionInfoResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error         *TabletServerErrorPB                  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Entries       []*common.TServerDBCatalogVersionInfo `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	NumEntries    *uint32                               `protobuf:"varint,3,opt,name=num_entries,json=numEntries" json:"num_entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTserverCatalogVersionInfoResponsePB) Reset() {
	*x = GetTserverCatalogVersionInfoResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTserverCatalogVersionInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTserverCatalogVersionInfoResponsePB) ProtoMessage() {}

func (x *GetTserverCatalogVersionInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTserverCatalogVersionInfoResponsePB.ProtoReflect.Descriptor instead.
func (*GetTserverCatalogVersionInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{35}
}

func (x *GetTserverCatalogVersionInfoResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTserverCatalogVersionInfoResponsePB) GetEntries() []*common.TServerDBCatalogVersionInfo {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *GetTserverCatalogVersionInfoResponsePB) GetNumEntries() uint32 {
	if x != nil && x.NumEntries != nil {
		return *x.NumEntries
	}
	return 0
}

type CancelTransactionRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId []byte                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	// When the field is not populated, the cancel request is broadcast to all the status tablets
	// hosted by the TabletServer.
	StatusTabletId []byte `protobuf:"bytes,2,opt,name=status_tablet_id,json=statusTabletId" json:"status_tablet_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CancelTransactionRequestPB) Reset() {
	*x = CancelTransactionRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTransactionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransactionRequestPB) ProtoMessage() {}

func (x *CancelTransactionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransactionRequestPB.ProtoReflect.Descriptor instead.
func (*CancelTransactionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{36}
}

func (x *CancelTransactionRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *CancelTransactionRequestPB) GetStatusTabletId() []byte {
	if x != nil {
		return x.StatusTabletId
	}
	return nil
}

type CancelTransactionResponsePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error message, if any.
	Error         *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTransactionResponsePB) Reset() {
	*x = CancelTransactionResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTransactionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransactionResponsePB) ProtoMessage() {}

func (x *CancelTransactionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransactionResponsePB.ProtoReflect.Descriptor instead.
func (*CancelTransactionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{37}
}

func (x *CancelTransactionResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type StartRemoteSnapshotTransferRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of server this request is addressed to.
	DestUuid   []byte `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId   []byte `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SnapshotId []byte `protobuf:"bytes,3,req,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	// Identification for the host we are bootstrapping from.
	SourcePeerUuid      []byte               `protobuf:"bytes,4,req,name=source_peer_uuid,json=sourcePeerUuid" json:"source_peer_uuid,omitempty"`
	SourcePrivateAddr   []*common.HostPortPB `protobuf:"bytes,5,rep,name=source_private_addr,json=sourcePrivateAddr" json:"source_private_addr,omitempty"`
	SourceBroadcastAddr []*common.HostPortPB `protobuf:"bytes,6,rep,name=source_broadcast_addr,json=sourceBroadcastAddr" json:"source_broadcast_addr,omitempty"`
	SourceCloudInfo     *common.CloudInfoPB  `protobuf:"bytes,7,opt,name=source_cloud_info,json=sourceCloudInfo" json:"source_cloud_info,omitempty"`
	// When importing a snapshot from producer to consumer, the consumer universe
	// actually creates a new snapshot with a separate ID. Thus, when downloading
	// files from producer to consumer, we want to account for the new_snapshot_id
	// generated on the consumer universe.
	NewSnapshotId []byte `protobuf:"bytes,8,opt,name=new_snapshot_id,json=newSnapshotId" json:"new_snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRemoteSnapshotTransferRequestPB) Reset() {
	*x = StartRemoteSnapshotTransferRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRemoteSnapshotTransferRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRemoteSnapshotTransferRequestPB) ProtoMessage() {}

func (x *StartRemoteSnapshotTransferRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRemoteSnapshotTransferRequestPB.ProtoReflect.Descriptor instead.
func (*StartRemoteSnapshotTransferRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{38}
}

func (x *StartRemoteSnapshotTransferRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *StartRemoteSnapshotTransferRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *StartRemoteSnapshotTransferRequestPB) GetSnapshotId() []byte {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

func (x *StartRemoteSnapshotTransferRequestPB) GetSourcePeerUuid() []byte {
	if x != nil {
		return x.SourcePeerUuid
	}
	return nil
}

func (x *StartRemoteSnapshotTransferRequestPB) GetSourcePrivateAddr() []*common.HostPortPB {
	if x != nil {
		return x.SourcePrivateAddr
	}
	return nil
}

func (x *StartRemoteSnapshotTransferRequestPB) GetSourceBroadcastAddr() []*common.HostPortPB {
	if x != nil {
		return x.SourceBroadcastAddr
	}
	return nil
}

func (x *StartRemoteSnapshotTransferRequestPB) GetSourceCloudInfo() *common.CloudInfoPB {
	if x != nil {
		return x.SourceCloudInfo
	}
	return nil
}

func (x *StartRemoteSnapshotTransferRequestPB) GetNewSnapshotId() []byte {
	if x != nil {
		return x.NewSnapshotId
	}
	return nil
}

type StartRemoteSnapshotTransferResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRemoteSnapshotTransferResponsePB) Reset() {
	*x = StartRemoteSnapshotTransferResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRemoteSnapshotTransferResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRemoteSnapshotTransferResponsePB) ProtoMessage() {}

func (x *StartRemoteSnapshotTransferResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRemoteSnapshotTransferResponsePB.ProtoReflect.Descriptor instead.
func (*StartRemoteSnapshotTransferResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{39}
}

func (x *StartRemoteSnapshotTransferResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AdminExecutePgsqlRequestPB struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	DatabaseName *string                `protobuf:"bytes,1,req,name=database_name,json=databaseName" json:"database_name,omitempty"`
	// The list of SQL statements to execute. Execution will stop at the first error.
	PgsqlStatements []string `protobuf:"bytes,2,rep,name=pgsql_statements,json=pgsqlStatements" json:"pgsql_statements,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdminExecutePgsqlRequestPB) Reset() {
	*x = AdminExecutePgsqlRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminExecutePgsqlRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminExecutePgsqlRequestPB) ProtoMessage() {}

func (x *AdminExecutePgsqlRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminExecutePgsqlRequestPB.ProtoReflect.Descriptor instead.
func (*AdminExecutePgsqlRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{40}
}

func (x *AdminExecutePgsqlRequestPB) GetDatabaseName() string {
	if x != nil && x.DatabaseName != nil {
		return *x.DatabaseName
	}
	return ""
}

func (x *AdminExecutePgsqlRequestPB) GetPgsqlStatements() []string {
	if x != nil {
		return x.PgsqlStatements
	}
	return nil
}

type AdminExecutePgsqlResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *TabletServerErrorPB   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminExecutePgsqlResponsePB) Reset() {
	*x = AdminExecutePgsqlResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminExecutePgsqlResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminExecutePgsqlResponsePB) ProtoMessage() {}

func (x *AdminExecutePgsqlResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminExecutePgsqlResponsePB.ProtoReflect.Descriptor instead.
func (*AdminExecutePgsqlResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{41}
}

func (x *AdminExecutePgsqlResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetLocalPgTxnSnapshotRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SnapshotId    []byte                 `protobuf:"bytes,1,req,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLocalPgTxnSnapshotRequestPB) Reset() {
	*x = GetLocalPgTxnSnapshotRequestPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLocalPgTxnSnapshotRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalPgTxnSnapshotRequestPB) ProtoMessage() {}

func (x *GetLocalPgTxnSnapshotRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalPgTxnSnapshotRequestPB.ProtoReflect.Descriptor instead.
func (*GetLocalPgTxnSnapshotRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{42}
}

func (x *GetLocalPgTxnSnapshotRequestPB) GetSnapshotId() []byte {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

type GetLocalPgTxnSnapshotResponsePB struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	Error            *TabletServerErrorPB     `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Snapshot         *common.PgTxnSnapshotPB  `protobuf:"bytes,2,opt,name=snapshot" json:"snapshot,omitempty"`
	SnapshotReadTime *common.ReadHybridTimePB `protobuf:"bytes,3,opt,name=snapshot_read_time,json=snapshotReadTime" json:"snapshot_read_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetLocalPgTxnSnapshotResponsePB) Reset() {
	*x = GetLocalPgTxnSnapshotResponsePB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLocalPgTxnSnapshotResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalPgTxnSnapshotResponsePB) ProtoMessage() {}

func (x *GetLocalPgTxnSnapshotResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalPgTxnSnapshotResponsePB.ProtoReflect.Descriptor instead.
func (*GetLocalPgTxnSnapshotResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{43}
}

func (x *GetLocalPgTxnSnapshotResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLocalPgTxnSnapshotResponsePB) GetSnapshot() *common.PgTxnSnapshotPB {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *GetLocalPgTxnSnapshotResponsePB) GetSnapshotReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.SnapshotReadTime
	}
	return nil
}

type GetLockStatusRequestPB_TransactionInfoPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Aborted       *common.SubtxnSetPB    `protobuf:"bytes,2,opt,name=aborted" json:"aborted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLockStatusRequestPB_TransactionInfoPB) Reset() {
	*x = GetLockStatusRequestPB_TransactionInfoPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLockStatusRequestPB_TransactionInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockStatusRequestPB_TransactionInfoPB) ProtoMessage() {}

func (x *GetLockStatusRequestPB_TransactionInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockStatusRequestPB_TransactionInfoPB.ProtoReflect.Descriptor instead.
func (*GetLockStatusRequestPB_TransactionInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetLockStatusRequestPB_TransactionInfoPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetLockStatusRequestPB_TransactionInfoPB) GetAborted() *common.SubtxnSetPB {
	if x != nil {
		return x.Aborted
	}
	return nil
}

type GetLockStatusRequestPB_TabletTransactionInfoPB struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Transactions  []*GetLockStatusRequestPB_TransactionInfoPB `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLockStatusRequestPB_TabletTransactionInfoPB) Reset() {
	*x = GetLockStatusRequestPB_TabletTransactionInfoPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLockStatusRequestPB_TabletTransactionInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockStatusRequestPB_TabletTransactionInfoPB) ProtoMessage() {}

func (x *GetLockStatusRequestPB_TabletTransactionInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockStatusRequestPB_TabletTransactionInfoPB.ProtoReflect.Descriptor instead.
func (*GetLockStatusRequestPB_TabletTransactionInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GetLockStatusRequestPB_TabletTransactionInfoPB) GetTransactions() []*GetLockStatusRequestPB_TransactionInfoPB {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// An entry for each tablet.
type ListTabletsForTabletServerResponsePB_Entry struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	TableName           *string                  `protobuf:"bytes,1,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TabletId            []byte                   `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	IsLeader            *bool                    `protobuf:"varint,3,opt,name=is_leader,json=isLeader" json:"is_leader,omitempty"`
	State               *tablet.RaftGroupStatePB `protobuf:"varint,4,opt,name=state,enum=yb.tablet.RaftGroupStatePB" json:"state,omitempty"`
	NumSstFiles         *uint64                  `protobuf:"varint,5,opt,name=num_sst_files,json=numSstFiles" json:"num_sst_files,omitempty"`
	NumLogSegments      *uint64                  `protobuf:"varint,6,opt,name=num_log_segments,json=numLogSegments" json:"num_log_segments,omitempty"`
	NumMemtablesIntents *uint64                  `protobuf:"varint,7,opt,name=num_memtables_intents,json=numMemtablesIntents" json:"num_memtables_intents,omitempty"`
	NumMemtablesRegular *uint64                  `protobuf:"varint,8,opt,name=num_memtables_regular,json=numMemtablesRegular" json:"num_memtables_regular,omitempty"`
	HasLeaderLease      *bool                    `protobuf:"varint,9,opt,name=has_leader_lease,json=hasLeaderLease" json:"has_leader_lease,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListTabletsForTabletServerResponsePB_Entry) Reset() {
	*x = ListTabletsForTabletServerResponsePB_Entry{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTabletsForTabletServerResponsePB_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsForTabletServerResponsePB_Entry) ProtoMessage() {}

func (x *ListTabletsForTabletServerResponsePB_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsForTabletServerResponsePB_Entry.ProtoReflect.Descriptor instead.
func (*ListTabletsForTabletServerResponsePB_Entry) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetIsLeader() bool {
	if x != nil && x.IsLeader != nil {
		return *x.IsLeader
	}
	return false
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetState() tablet.RaftGroupStatePB {
	if x != nil && x.State != nil {
		return *x.State
	}
	return tablet.RaftGroupStatePB(999)
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetNumSstFiles() uint64 {
	if x != nil && x.NumSstFiles != nil {
		return *x.NumSstFiles
	}
	return 0
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetNumLogSegments() uint64 {
	if x != nil && x.NumLogSegments != nil {
		return *x.NumLogSegments
	}
	return 0
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetNumMemtablesIntents() uint64 {
	if x != nil && x.NumMemtablesIntents != nil {
		return *x.NumMemtablesIntents
	}
	return 0
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetNumMemtablesRegular() uint64 {
	if x != nil && x.NumMemtablesRegular != nil {
		return *x.NumMemtablesRegular
	}
	return 0
}

func (x *ListTabletsForTabletServerResponsePB_Entry) GetHasLeaderLease() bool {
	if x != nil && x.HasLeaderLease != nil {
		return *x.HasLeaderLease
	}
	return false
}

type GetOldTransactionsResponsePB_OldTransactionMetadataPB struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TransactionId    []byte                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Tablets          [][]byte               `protobuf:"bytes,2,rep,name=tablets" json:"tablets,omitempty"`
	AbortedSubtxnSet *common.SubtxnSetPB    `protobuf:"bytes,3,opt,name=aborted_subtxn_set,json=abortedSubtxnSet" json:"aborted_subtxn_set,omitempty"`
	StartTime        *uint64                `protobuf:"fixed64,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	HostNodeUuid     *string                `protobuf:"bytes,5,opt,name=host_node_uuid,json=hostNodeUuid" json:"host_node_uuid,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) Reset() {
	*x = GetOldTransactionsResponsePB_OldTransactionMetadataPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldTransactionsResponsePB_OldTransactionMetadataPB) ProtoMessage() {}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldTransactionsResponsePB_OldTransactionMetadataPB.ProtoReflect.Descriptor instead.
func (*GetOldTransactionsResponsePB_OldTransactionMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) GetTablets() [][]byte {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) GetAbortedSubtxnSet() *common.SubtxnSetPB {
	if x != nil {
		return x.AbortedSubtxnSet
	}
	return nil
}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetOldTransactionsResponsePB_OldTransactionMetadataPB) GetHostNodeUuid() string {
	if x != nil && x.HostNodeUuid != nil {
		return *x.HostNodeUuid
	}
	return ""
}

type GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tablet        []byte                 `protobuf:"bytes,1,opt,name=tablet" json:"tablet,omitempty"`
	StartTime     *uint64                `protobuf:"fixed64,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	HostNodeUuid  *string                `protobuf:"bytes,3,opt,name=host_node_uuid,json=hostNodeUuid" json:"host_node_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) Reset() {
	*x = GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) ProtoMessage() {}

func (x *GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB.ProtoReflect.Descriptor instead.
func (*GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) GetTablet() []byte {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB) GetHostNodeUuid() string {
	if x != nil && x.HostNodeUuid != nil {
		return *x.HostNodeUuid
	}
	return ""
}

type UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TransactionId  []byte                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	StatusTabletId []byte                 `protobuf:"bytes,2,opt,name=status_tablet_id,json=statusTabletId" json:"status_tablet_id,omitempty"`
	SubtxnSet      *common.SubtxnSetPB    `protobuf:"bytes,3,opt,name=subtxn_set,json=subtxnSet" json:"subtxn_set,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) Reset() {
	*x = UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) ProtoMessage() {}

func (x *UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction.ProtoReflect.Descriptor instead.
func (*UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{20, 0}
}

func (x *UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) GetStatusTabletId() []byte {
	if x != nil {
		return x.StatusTabletId
	}
	return nil
}

func (x *UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction) GetSubtxnSet() *common.SubtxnSetPB {
	if x != nil {
		return x.SubtxnSet
	}
	return nil
}

type UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction struct {
	state               protoimpl.MessageState                                            `protogen:"open.v1"`
	TransactionId       []byte                                                            `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	BlockingTransaction []*UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction `protobuf:"bytes,2,rep,name=blocking_transaction,json=blockingTransaction" json:"blocking_transaction,omitempty"`
	WaitStartTime       *uint64                                                           `protobuf:"fixed64,3,opt,name=wait_start_time,json=waitStartTime" json:"wait_start_time,omitempty"`
	RequestId           *int64                                                            `protobuf:"varint,4,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) Reset() {
	*x = UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) ProtoMessage() {}

func (x *UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction.ProtoReflect.Descriptor instead.
func (*UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{20, 1}
}

func (x *UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) GetBlockingTransaction() []*UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction {
	if x != nil {
		return x.BlockingTransaction
	}
	return nil
}

func (x *UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) GetWaitStartTime() uint64 {
	if x != nil && x.WaitStartTime != nil {
		return *x.WaitStartTime
	}
	return 0
}

func (x *UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction) GetRequestId() int64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

type ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TabletId      []byte                 `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	DetectorId    []byte                 `protobuf:"bytes,3,opt,name=detector_id,json=detectorId" json:"detector_id,omitempty"`
	TxnStartUs    *uint64                `protobuf:"fixed64,4,opt,name=txn_start_us,json=txnStartUs" json:"txn_start_us,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) Reset() {
	*x = ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo{}
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) ProtoMessage() {}

func (x *ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo.ProtoReflect.Descriptor instead.
func (*ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_service_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) GetDetectorId() []byte {
	if x != nil {
		return x.DetectorId
	}
	return nil
}

func (x *ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo) GetTxnStartUs() uint64 {
	if x != nil && x.TxnStartUs != nil {
		return *x.TxnStartUs
	}
	return 0
}

var File_yb_tserver_tserver_service_proto protoreflect.FileDescriptor

var file_yb_tserver_tserver_service_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x16,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x67, 0x73, 0x71,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79,
	0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x79, 0x62,
	0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x72, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x51, 0x0a, 0x25, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x3a,
	0x01, 0x30, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x1a, 0x4e,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e,
	0x53, 0x65, 0x74, 0x50, 0x42, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x73,
	0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x83, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x81,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x3d, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a,
	0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x59, 0x42, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x22, 0x79, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x25, 0x0a,
	0x23, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x22, 0xee, 0x03, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0xf3, 0x02, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x61,
	0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x65, 0x6d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x68,
	0x61, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x72, 0x22, 0x4d, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc9, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x42, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xd4, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x70, 0x69, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x61,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x69, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xa4, 0x04, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x06, 0x52, 0x13, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x12, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x78, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x42, 0x52, 0x10, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a,
	0x0f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb7,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x41, 0x67, 0x65, 0x4d, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x54, 0x78,
	0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x53, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6c,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x03, 0x74, 0x78, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xdf, 0x01, 0x0a, 0x18,
	0x4f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78,
	0x6e, 0x53, 0x65, 0x74, 0x50, 0x42, 0x52, 0x10, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x54, 0x78, 0x6e, 0x41, 0x67, 0x65, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xf1, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5f,
	0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4f, 0x6c, 0x64, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x03, 0x74, 0x78, 0x6e, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x7d, 0x0a, 0x1e, 0x4f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xea, 0x05, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x14, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x74,
	0x50, 0x42, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x74, 0x1a, 0x81, 0x02,
	0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x14, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x9a, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf0,
	0x02, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x3f, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x78, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x42, 0x52, 0x11,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x74, 0x78, 0x6e, 0x53, 0x65,
	0x74, 0x22, 0xd1, 0x03, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x10, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x78, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x54, 0x78, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x65, 0x72, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x45, 0x72, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x1a,
	0x83, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x78,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x74, 0x78, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x22, 0xcf, 0x01, 0x0a, 0x19, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x42, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x1a, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x13, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xd5, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22,
	0xe0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x2d, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x42, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x1a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x94,
	0x03, 0x0a, 0x24, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x13,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x42, 0x0a, 0x15,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x13, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x3b, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x25, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x67, 0x73, 0x71,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x41, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x50,
	0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x42, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xae, 0x21, 0x0a,
	0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x3d, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x19,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6a, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x3d, 0x0a, 0x04, 0x4e, 0x6f, 0x4f, 0x70, 0x12, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x52, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12,
	0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x49, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1d, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1e, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7f, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4f, 0x0a,
	0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x64,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x79, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x57, 0x61, 0x69, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x41, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x36, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x61,
	0x0a, 0x10, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x8e, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x35, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x79, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x49, 0x0a, 0x08, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x46, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x6a, 0x0a, 0x13, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x32,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x64, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x64, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x31, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x67,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x79, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x7f, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73,
	0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x5b, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x64, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x12, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a,
	0x12, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x64, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x67, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4f, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x42, 0x10, 0x0a,
	0x0e, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
})

var (
	file_yb_tserver_tserver_service_proto_rawDescOnce sync.Once
	file_yb_tserver_tserver_service_proto_rawDescData []byte
)

func file_yb_tserver_tserver_service_proto_rawDescGZIP() []byte {
	file_yb_tserver_tserver_service_proto_rawDescOnce.Do(func() {
		file_yb_tserver_tserver_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_tserver_tserver_service_proto_rawDesc), len(file_yb_tserver_tserver_service_proto_rawDesc)))
	})
	return file_yb_tserver_tserver_service_proto_rawDescData
}

var file_yb_tserver_tserver_service_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_yb_tserver_tserver_service_proto_goTypes = []any{
	(*GetLockStatusRequestPB)(nil),                         // 0: yb.tserver.GetLockStatusRequestPB
	(*GetLockStatusResponsePB)(nil),                        // 1: yb.tserver.GetLockStatusResponsePB
	(*GetMetricsRequestPB)(nil),                            // 2: yb.tserver.GetMetricsRequestPB
	(*GetMetricsResponsePB)(nil),                           // 3: yb.tserver.GetMetricsResponsePB
	(*GetLogLocationRequestPB)(nil),                        // 4: yb.tserver.GetLogLocationRequestPB
	(*GetLogLocationResponsePB)(nil),                       // 5: yb.tserver.GetLogLocationResponsePB
	(*ChecksumRequestPB)(nil),                              // 6: yb.tserver.ChecksumRequestPB
	(*ChecksumResponsePB)(nil),                             // 7: yb.tserver.ChecksumResponsePB
	(*ListTabletsForTabletServerRequestPB)(nil),            // 8: yb.tserver.ListTabletsForTabletServerRequestPB
	(*ListTabletsForTabletServerResponsePB)(nil),           // 9: yb.tserver.ListTabletsForTabletServerResponsePB
	(*ImportDataRequestPB)(nil),                            // 10: yb.tserver.ImportDataRequestPB
	(*ImportDataResponsePB)(nil),                           // 11: yb.tserver.ImportDataResponsePB
	(*UpdateTransactionRequestPB)(nil),                     // 12: yb.tserver.UpdateTransactionRequestPB
	(*UpdateTransactionResponsePB)(nil),                    // 13: yb.tserver.UpdateTransactionResponsePB
	(*GetTransactionStatusRequestPB)(nil),                  // 14: yb.tserver.GetTransactionStatusRequestPB
	(*GetTransactionStatusResponsePB)(nil),                 // 15: yb.tserver.GetTransactionStatusResponsePB
	(*GetOldTransactionsRequestPB)(nil),                    // 16: yb.tserver.GetOldTransactionsRequestPB
	(*GetOldTransactionsResponsePB)(nil),                   // 17: yb.tserver.GetOldTransactionsResponsePB
	(*GetOldSingleShardWaitersRequestPB)(nil),              // 18: yb.tserver.GetOldSingleShardWaitersRequestPB
	(*GetOldSingleShardWaitersResponsePB)(nil),             // 19: yb.tserver.GetOldSingleShardWaitersResponsePB
	(*UpdateTransactionWaitingForStatusRequestPB)(nil),     // 20: yb.tserver.UpdateTransactionWaitingForStatusRequestPB
	(*UpdateTransactionWaitingForStatusResponsePB)(nil),    // 21: yb.tserver.UpdateTransactionWaitingForStatusResponsePB
	(*ProbeTransactionDeadlockRequestPB)(nil),              // 22: yb.tserver.ProbeTransactionDeadlockRequestPB
	(*ProbeTransactionDeadlockResponsePB)(nil),             // 23: yb.tserver.ProbeTransactionDeadlockResponsePB
	(*GetTransactionStatusAtParticipantRequestPB)(nil),     // 24: yb.tserver.GetTransactionStatusAtParticipantRequestPB
	(*GetTransactionStatusAtParticipantResponsePB)(nil),    // 25: yb.tserver.GetTransactionStatusAtParticipantResponsePB
	(*AbortTransactionRequestPB)(nil),                      // 26: yb.tserver.AbortTransactionRequestPB
	(*AbortTransactionResponsePB)(nil),                     // 27: yb.tserver.AbortTransactionResponsePB
	(*UpdateTransactionStatusLocationRequestPB)(nil),       // 28: yb.tserver.UpdateTransactionStatusLocationRequestPB
	(*UpdateTransactionStatusLocationResponsePB)(nil),      // 29: yb.tserver.UpdateTransactionStatusLocationResponsePB
	(*GetSplitKeyRequestPB)(nil),                           // 30: yb.tserver.GetSplitKeyRequestPB
	(*GetSplitKeyResponsePB)(nil),                          // 31: yb.tserver.GetSplitKeyResponsePB
	(*GetSharedDataRequestPB)(nil),                         // 32: yb.tserver.GetSharedDataRequestPB
	(*GetSharedDataResponsePB)(nil),                        // 33: yb.tserver.GetSharedDataResponsePB
	(*GetTserverCatalogVersionInfoRequestPB)(nil),          // 34: yb.tserver.GetTserverCatalogVersionInfoRequestPB
	(*GetTserverCatalogVersionInfoResponsePB)(nil),         // 35: yb.tserver.GetTserverCatalogVersionInfoResponsePB
	(*CancelTransactionRequestPB)(nil),                     // 36: yb.tserver.CancelTransactionRequestPB
	(*CancelTransactionResponsePB)(nil),                    // 37: yb.tserver.CancelTransactionResponsePB
	(*StartRemoteSnapshotTransferRequestPB)(nil),           // 38: yb.tserver.StartRemoteSnapshotTransferRequestPB
	(*StartRemoteSnapshotTransferResponsePB)(nil),          // 39: yb.tserver.StartRemoteSnapshotTransferResponsePB
	(*AdminExecutePgsqlRequestPB)(nil),                     // 40: yb.tserver.AdminExecutePgsqlRequestPB
	(*AdminExecutePgsqlResponsePB)(nil),                    // 41: yb.tserver.AdminExecutePgsqlResponsePB
	(*GetLocalPgTxnSnapshotRequestPB)(nil),                 // 42: yb.tserver.GetLocalPgTxnSnapshotRequestPB
	(*GetLocalPgTxnSnapshotResponsePB)(nil),                // 43: yb.tserver.GetLocalPgTxnSnapshotResponsePB
	(*GetLockStatusRequestPB_TransactionInfoPB)(nil),       // 44: yb.tserver.GetLockStatusRequestPB.TransactionInfoPB
	(*GetLockStatusRequestPB_TabletTransactionInfoPB)(nil), // 45: yb.tserver.GetLockStatusRequestPB.TabletTransactionInfoPB
	nil, // 46: yb.tserver.GetLockStatusRequestPB.TransactionsByTabletEntry
	(*ListTabletsForTabletServerResponsePB_Entry)(nil),                        // 47: yb.tserver.ListTabletsForTabletServerResponsePB.Entry
	(*GetOldTransactionsResponsePB_OldTransactionMetadataPB)(nil),             // 48: yb.tserver.GetOldTransactionsResponsePB.OldTransactionMetadataPB
	(*GetOldSingleShardWaitersResponsePB_OldSingleShardWaiterMetadataPB)(nil), // 49: yb.tserver.GetOldSingleShardWaitersResponsePB.OldSingleShardWaiterMetadataPB
	(*UpdateTransactionWaitingForStatusRequestPB_BlockingTransaction)(nil),    // 50: yb.tserver.UpdateTransactionWaitingForStatusRequestPB.BlockingTransaction
	(*UpdateTransactionWaitingForStatusRequestPB_WaitingTransaction)(nil),     // 51: yb.tserver.UpdateTransactionWaitingForStatusRequestPB.WaitingTransaction
	(*ProbeTransactionDeadlockResponsePB_DeadlockedTxnInfo)(nil),              // 52: yb.tserver.ProbeTransactionDeadlockResponsePB.DeadlockedTxnInfo
	(*TabletServerErrorPB)(nil),                                               // 53: yb.tserver.TabletServerErrorPB
	(*common.TabletLockInfoPB)(nil),                                           // 54: yb.TabletLockInfoPB
	(*common.TserverMetricsInfoPB)(nil),                                       // 55: yb.TserverMetricsInfoPB
	(common.YBConsistencyLevel)(0),                                            // 56: yb.YBConsistencyLevel
	(*tablet.TransactionStatePB)(nil),                                         // 57: yb.tablet.TransactionStatePB
	(common.TransactionStatus)(0),                                             // 58: yb.TransactionStatus
	(*common.SubtxnSetPB)(nil),                                                // 59: yb.SubtxnSetPB
	(*common.AppStatusPB)(nil),                                                // 60: yb.AppStatusPB
	(*TabletConsensusInfoPB)(nil),                                             // 61: yb.tserver.TabletConsensusInfoPB
	(*common.TServerDBCatalogVersionInfo)(nil),                                // 62: yb.TServerDBCatalogVersionInfo
	(*common.HostPortPB)(nil),                                                 // 63: yb.HostPortPB
	(*common.CloudInfoPB)(nil),                                                // 64: yb.CloudInfoPB
	(*common.PgTxnSnapshotPB)(nil),                                            // 65: yb.PgTxnSnapshotPB
	(*common.ReadHybridTimePB)(nil),                                           // 66: yb.ReadHybridTimePB
	(tablet.RaftGroupStatePB)(0),                                              // 67: yb.tablet.RaftGroupStatePB
	(*WriteRequestPB)(nil),                                                    // 68: yb.tserver.WriteRequestPB
	(*ReadRequestPB)(nil),                                                     // 69: yb.tserver.ReadRequestPB
	(*VerifyTableRowRangeRequestPB)(nil),                                      // 70: yb.tserver.VerifyTableRowRangeRequestPB
	(*NoOpRequestPB)(nil),                                                     // 71: yb.tserver.NoOpRequestPB
	(*ListTabletsRequestPB)(nil),                                              // 72: yb.tserver.ListTabletsRequestPB
	(*TruncateRequestPB)(nil),                                                 // 73: yb.tserver.TruncateRequestPB
	(*GetTabletStatusRequestPB)(nil),                                          // 74: yb.tserver.GetTabletStatusRequestPB
	(*GetMasterAddressesRequestPB)(nil),                                       // 75: yb.tserver.GetMasterAddressesRequestPB
	(*PublishRequestPB)(nil),                                                  // 76: yb.tserver.PublishRequestPB
	(*IsTabletServerReadyRequestPB)(nil),                                      // 77: yb.tserver.IsTabletServerReadyRequestPB
	(*ListMasterServersRequestPB)(nil),                                        // 78: yb.tserver.ListMasterServersRequestPB
	(*GetCompatibleSchemaVersionRequestPB)(nil),                               // 79: yb.tserver.GetCompatibleSchemaVersionRequestPB
	(*GetTabletKeyRangesRequestPB)(nil),                                       // 80: yb.tserver.GetTabletKeyRangesRequestPB
	(*CheckTserverTabletHealthRequestPB)(nil),                                 // 81: yb.tserver.CheckTserverTabletHealthRequestPB
	(*ClearAllMetaCachesOnServerRequestPB)(nil),                               // 82: yb.tserver.ClearAllMetaCachesOnServerRequestPB
	(*ClearMetacacheRequestPB)(nil),                                           // 83: yb.tserver.ClearMetacacheRequestPB
	(*ClearUniverseUuidRequestPB)(nil),                                        // 84: yb.tserver.ClearUniverseUuidRequestPB
	(*AcquireObjectLockRequestPB)(nil),                                        // 85: yb.tserver.AcquireObjectLockRequestPB
	(*ReleaseObjectLockRequestPB)(nil),                                        // 86: yb.tserver.ReleaseObjectLockRequestPB
	(*WriteResponsePB)(nil),                                                   // 87: yb.tserver.WriteResponsePB
	(*ReadResponsePB)(nil),                                                    // 88: yb.tserver.ReadResponsePB
	(*VerifyTableRowRangeResponsePB)(nil),                                     // 89: yb.tserver.VerifyTableRowRangeResponsePB
	(*NoOpResponsePB)(nil),                                                    // 90: yb.tserver.NoOpResponsePB
	(*ListTabletsResponsePB)(nil),                                             // 91: yb.tserver.ListTabletsResponsePB
	(*TruncateResponsePB)(nil),                                                // 92: yb.tserver.TruncateResponsePB
	(*GetTabletStatusResponsePB)(nil),                                         // 93: yb.tserver.GetTabletStatusResponsePB
	(*GetMasterAddressesResponsePB)(nil),                                      // 94: yb.tserver.GetMasterAddressesResponsePB
	(*PublishResponsePB)(nil),                                                 // 95: yb.tserver.PublishResponsePB
	(*IsTabletServerReadyResponsePB)(nil),                                     // 96: yb.tserver.IsTabletServerReadyResponsePB
	(*ListMasterServersResponsePB)(nil),                                       // 97: yb.tserver.ListMasterServersResponsePB
	(*GetCompatibleSchemaVersionResponsePB)(nil),                              // 98: yb.tserver.GetCompatibleSchemaVersionResponsePB
	(*GetTabletKeyRangesResponsePB)(nil),                                      // 99: yb.tserver.GetTabletKeyRangesResponsePB
	(*CheckTserverTabletHealthResponsePB)(nil),                                // 100: yb.tserver.CheckTserverTabletHealthResponsePB
	(*ClearAllMetaCachesOnServerResponsePB)(nil),                              // 101: yb.tserver.ClearAllMetaCachesOnServerResponsePB
	(*ClearMetacacheResponsePB)(nil),                                          // 102: yb.tserver.ClearMetacacheResponsePB
	(*ClearUniverseUuidResponsePB)(nil),                                       // 103: yb.tserver.ClearUniverseUuidResponsePB
	(*AcquireObjectLockResponsePB)(nil),                                       // 104: yb.tserver.AcquireObjectLockResponsePB
	(*ReleaseObjectLockResponsePB)(nil),                                       // 105: yb.tserver.ReleaseObjectLockResponsePB
}
var file_yb_tserver_tserver_service_proto_depIdxs = []int32{
	46,  // 0: yb.tserver.GetLockStatusRequestPB.transactions_by_tablet:type_name -> yb.tserver.GetLockStatusRequestPB.TransactionsByTabletEntry
	53,  // 1: yb.tserver.GetLockStatusResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	54,  // 2: yb.tserver.GetLockStatusResponsePB.tablet_lock_infos:type_name -> yb.TabletLockInfoPB
	55,  // 3: yb.tserver.GetMetricsResponsePB.metrics:type_name -> yb.TserverMetricsInfoPB
	53,  // 4: yb.tserver.GetMetricsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	56,  // 5: yb.tserver.ChecksumRequestPB.consistency_level:type_name -> yb.YBConsistencyLevel
	53,  // 6: yb.tserver.ChecksumResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	47,  // 7: yb.tserver.ListTabletsForTabletServerResponsePB.entries:type_name -> yb.tserver.ListTabletsForTabletServerResponsePB.Entry
	53,  // 8: yb.tserver.ImportDataResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	57,  // 9: yb.tserver.UpdateTransactionRequestPB.state:type_name -> yb.tablet.TransactionStatePB
	53,  // 10: yb.tserver.UpdateTransactionResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	53,  // 11: yb.tserver.GetTransactionStatusResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	58,  // 12: yb.tserver.GetTransactionStatusResponsePB.status:type_name -> yb.TransactionStatus
	59,  // 13: yb.tserver.GetTransactionStatusResponsePB.aborted_subtxn_set:type_name -> yb.SubtxnSetPB
	60,  // 14: yb.tserver.GetTransactionStatusResponsePB.deadlock_reason:type_name -> yb.AppStatusPB
	61,  // 15: yb.tserver.GetTransactionStatusResponsePB.tablet_consensus_info:type_name -> yb.tserver.TabletConsensusInfoPB
	53,  // 16: yb.tserver.GetOldTransactionsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	48,  // 17: yb.tserver.GetOldTransactionsResponsePB.txn:type_name -> yb.tserver.GetOldTransactionsResponsePB.OldTransactionMetadataPB
	53,  // 18: yb.tserver.GetOldSingleShardWaitersResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	49,  // 19: yb.tserver.GetOldSingleShardWaitersResponsePB.txn:type_name -> yb.tserver.GetOldSingleShardWaitersResponsePB.OldSingleShardWaiterMetadataPB
	51,  // 20: yb.tserver.UpdateTransactionWaitingForStatusRequestPB.waiting_transactions:type_name -> yb.tserver.UpdateTransactionWaitingForStatusRequestPB.WaitingTransaction
	53,  // 21: yb.tserver.UpdateTransactionWaitingForStatusResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	59,  // 22: yb.tserver.ProbeTransactionDeadlockRequestPB.blocking_subtxn_set:type_name -> yb.SubtxnSetPB
	53,  // 23: yb.tserver.ProbeTransactionDeadlockResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	52,  // 24: yb.tserver.ProbeTransactionDeadlockResponsePB.deadlock:type_name -> yb.tserver.ProbeTransactionDeadlockResponsePB.DeadlockedTxnInfo
	53,  // 25: yb.tserver.GetTransactionStatusAtParticipantResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	60,  // 26: yb.tserver.AbortTransactionRequestPB.deadlock_reason:type_name -> yb.AppStatusPB
	53,  // 27: yb.tserver.AbortTransactionResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	58,  // 28: yb.tserver.AbortTransactionResponsePB.status:type_name -> yb.TransactionStatus
	53,  // 29: yb.tserver.UpdateTransactionStatusLocationResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	53,  // 30: yb.tserver.GetSplitKeyResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	53,  // 31: yb.tserver.GetTserverCatalogVersionInfoResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	62,  // 32: yb.tserver.GetTserverCatalogVersionInfoResponsePB.entries:type_name -> yb.TServerDBCatalogVersionInfo
	53,  // 33: yb.tserver.CancelTransactionResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	63,  // 34: yb.tserver.StartRemoteSnapshotTransferRequestPB.source_private_addr:type_name -> yb.HostPortPB
	63,  // 35: yb.tserver.StartRemoteSnapshotTransferRequestPB.source_broadcast_addr:type_name -> yb.HostPortPB
	64,  // 36: yb.tserver.StartRemoteSnapshotTransferRequestPB.source_cloud_info:type_name -> yb.CloudInfoPB
	53,  // 37: yb.tserver.StartRemoteSnapshotTransferResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	53,  // 38: yb.tserver.AdminExecutePgsqlResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	53,  // 39: yb.tserver.GetLocalPgTxnSnapshotResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	65,  // 40: yb.tserver.GetLocalPgTxnSnapshotResponsePB.snapshot:type_name -> yb.PgTxnSnapshotPB
	66,  // 41: yb.tserver.GetLocalPgTxnSnapshotResponsePB.snapshot_read_time:type_name -> yb.ReadHybridTimePB
	59,  // 42: yb.tserver.GetLockStatusRequestPB.TransactionInfoPB.aborted:type_name -> yb.SubtxnSetPB
	44,  // 43: yb.tserver.GetLockStatusRequestPB.TabletTransactionInfoPB.transactions:type_name -> yb.tserver.GetLockStatusRequestPB.TransactionInfoPB
	45,  // 44: yb.tserver.GetLockStatusRequestPB.TransactionsByTabletEntry.value:type_name -> yb.tserver.GetLockStatusRequestPB.TabletTransactionInfoPB
	67,  // 45: yb.tserver.ListTabletsForTabletServerResponsePB.Entry.state:type_name -> yb.tablet.RaftGroupStatePB
	59,  // 46: yb.tserver.GetOldTransactionsResponsePB.OldTransactionMetadataPB.aborted_subtxn_set:type_name -> yb.SubtxnSetPB
	59,  // 47: yb.tserver.UpdateTransactionWaitingForStatusRequestPB.BlockingTransaction.subtxn_set:type_name -> yb.SubtxnSetPB
	50,  // 48: yb.tserver.UpdateTransactionWaitingForStatusRequestPB.WaitingTransaction.blocking_transaction:type_name -> yb.tserver.UpdateTransactionWaitingForStatusRequestPB.BlockingTransaction
	68,  // 49: yb.tserver.TabletServerService.Write:input_type -> yb.tserver.WriteRequestPB
	69,  // 50: yb.tserver.TabletServerService.Read:input_type -> yb.tserver.ReadRequestPB
	70,  // 51: yb.tserver.TabletServerService.VerifyTableRowRange:input_type -> yb.tserver.VerifyTableRowRangeRequestPB
	71,  // 52: yb.tserver.TabletServerService.NoOp:input_type -> yb.tserver.NoOpRequestPB
	72,  // 53: yb.tserver.TabletServerService.ListTablets:input_type -> yb.tserver.ListTabletsRequestPB
	4,   // 54: yb.tserver.TabletServerService.GetLogLocation:input_type -> yb.tserver.GetLogLocationRequestPB
	6,   // 55: yb.tserver.TabletServerService.Checksum:input_type -> yb.tserver.ChecksumRequestPB
	8,   // 56: yb.tserver.TabletServerService.ListTabletsForTabletServer:input_type -> yb.tserver.ListTabletsForTabletServerRequestPB
	10,  // 57: yb.tserver.TabletServerService.ImportData:input_type -> yb.tserver.ImportDataRequestPB
	12,  // 58: yb.tserver.TabletServerService.UpdateTransaction:input_type -> yb.tserver.UpdateTransactionRequestPB
	14,  // 59: yb.tserver.TabletServerService.GetTransactionStatus:input_type -> yb.tserver.GetTransactionStatusRequestPB
	16,  // 60: yb.tserver.TabletServerService.GetOldTransactions:input_type -> yb.tserver.GetOldTransactionsRequestPB
	18,  // 61: yb.tserver.TabletServerService.GetOldSingleShardWaiters:input_type -> yb.tserver.GetOldSingleShardWaitersRequestPB
	24,  // 62: yb.tserver.TabletServerService.GetTransactionStatusAtParticipant:input_type -> yb.tserver.GetTransactionStatusAtParticipantRequestPB
	26,  // 63: yb.tserver.TabletServerService.AbortTransaction:input_type -> yb.tserver.AbortTransactionRequestPB
	28,  // 64: yb.tserver.TabletServerService.UpdateTransactionStatusLocation:input_type -> yb.tserver.UpdateTransactionStatusLocationRequestPB
	20,  // 65: yb.tserver.TabletServerService.UpdateTransactionWaitingForStatus:input_type -> yb.tserver.UpdateTransactionWaitingForStatusRequestPB
	22,  // 66: yb.tserver.TabletServerService.ProbeTransactionDeadlock:input_type -> yb.tserver.ProbeTransactionDeadlockRequestPB
	73,  // 67: yb.tserver.TabletServerService.Truncate:input_type -> yb.tserver.TruncateRequestPB
	74,  // 68: yb.tserver.TabletServerService.GetTabletStatus:input_type -> yb.tserver.GetTabletStatusRequestPB
	75,  // 69: yb.tserver.TabletServerService.GetMasterAddresses:input_type -> yb.tserver.GetMasterAddressesRequestPB
	76,  // 70: yb.tserver.TabletServerService.Publish:input_type -> yb.tserver.PublishRequestPB
	77,  // 71: yb.tserver.TabletServerService.IsTabletServerReady:input_type -> yb.tserver.IsTabletServerReadyRequestPB
	30,  // 72: yb.tserver.TabletServerService.GetSplitKey:input_type -> yb.tserver.GetSplitKeyRequestPB
	32,  // 73: yb.tserver.TabletServerService.GetSharedData:input_type -> yb.tserver.GetSharedDataRequestPB
	34,  // 74: yb.tserver.TabletServerService.GetTserverCatalogVersionInfo:input_type -> yb.tserver.GetTserverCatalogVersionInfoRequestPB
	78,  // 75: yb.tserver.TabletServerService.ListMasterServers:input_type -> yb.tserver.ListMasterServersRequestPB
	0,   // 76: yb.tserver.TabletServerService.GetLockStatus:input_type -> yb.tserver.GetLockStatusRequestPB
	36,  // 77: yb.tserver.TabletServerService.CancelTransaction:input_type -> yb.tserver.CancelTransactionRequestPB
	79,  // 78: yb.tserver.TabletServerService.GetCompatibleSchemaVersion:input_type -> yb.tserver.GetCompatibleSchemaVersionRequestPB
	38,  // 79: yb.tserver.TabletServerService.StartRemoteSnapshotTransfer:input_type -> yb.tserver.StartRemoteSnapshotTransferRequestPB
	80,  // 80: yb.tserver.TabletServerService.GetTabletKeyRanges:input_type -> yb.tserver.GetTabletKeyRangesRequestPB
	81,  // 81: yb.tserver.TabletServerService.CheckTserverTabletHealth:input_type -> yb.tserver.CheckTserverTabletHealthRequestPB
	82,  // 82: yb.tserver.TabletServerService.ClearAllMetaCachesOnServer:input_type -> yb.tserver.ClearAllMetaCachesOnServerRequestPB
	83,  // 83: yb.tserver.TabletServerService.ClearMetacache:input_type -> yb.tserver.ClearMetacacheRequestPB
	84,  // 84: yb.tserver.TabletServerService.ClearUniverseUuid:input_type -> yb.tserver.ClearUniverseUuidRequestPB
	85,  // 85: yb.tserver.TabletServerService.AcquireObjectLocks:input_type -> yb.tserver.AcquireObjectLockRequestPB
	86,  // 86: yb.tserver.TabletServerService.ReleaseObjectLocks:input_type -> yb.tserver.ReleaseObjectLockRequestPB
	40,  // 87: yb.tserver.TabletServerService.AdminExecutePgsql:input_type -> yb.tserver.AdminExecutePgsqlRequestPB
	42,  // 88: yb.tserver.TabletServerService.GetLocalPgTxnSnapshot:input_type -> yb.tserver.GetLocalPgTxnSnapshotRequestPB
	2,   // 89: yb.tserver.TabletServerService.GetMetrics:input_type -> yb.tserver.GetMetricsRequestPB
	87,  // 90: yb.tserver.TabletServerService.Write:output_type -> yb.tserver.WriteResponsePB
	88,  // 91: yb.tserver.TabletServerService.Read:output_type -> yb.tserver.ReadResponsePB
	89,  // 92: yb.tserver.TabletServerService.VerifyTableRowRange:output_type -> yb.tserver.VerifyTableRowRangeResponsePB
	90,  // 93: yb.tserver.TabletServerService.NoOp:output_type -> yb.tserver.NoOpResponsePB
	91,  // 94: yb.tserver.TabletServerService.ListTablets:output_type -> yb.tserver.ListTabletsResponsePB
	5,   // 95: yb.tserver.TabletServerService.GetLogLocation:output_type -> yb.tserver.GetLogLocationResponsePB
	7,   // 96: yb.tserver.TabletServerService.Checksum:output_type -> yb.tserver.ChecksumResponsePB
	9,   // 97: yb.tserver.TabletServerService.ListTabletsForTabletServer:output_type -> yb.tserver.ListTabletsForTabletServerResponsePB
	11,  // 98: yb.tserver.TabletServerService.ImportData:output_type -> yb.tserver.ImportDataResponsePB
	13,  // 99: yb.tserver.TabletServerService.UpdateTransaction:output_type -> yb.tserver.UpdateTransactionResponsePB
	15,  // 100: yb.tserver.TabletServerService.GetTransactionStatus:output_type -> yb.tserver.GetTransactionStatusResponsePB
	17,  // 101: yb.tserver.TabletServerService.GetOldTransactions:output_type -> yb.tserver.GetOldTransactionsResponsePB
	19,  // 102: yb.tserver.TabletServerService.GetOldSingleShardWaiters:output_type -> yb.tserver.GetOldSingleShardWaitersResponsePB
	25,  // 103: yb.tserver.TabletServerService.GetTransactionStatusAtParticipant:output_type -> yb.tserver.GetTransactionStatusAtParticipantResponsePB
	27,  // 104: yb.tserver.TabletServerService.AbortTransaction:output_type -> yb.tserver.AbortTransactionResponsePB
	29,  // 105: yb.tserver.TabletServerService.UpdateTransactionStatusLocation:output_type -> yb.tserver.UpdateTransactionStatusLocationResponsePB
	21,  // 106: yb.tserver.TabletServerService.UpdateTransactionWaitingForStatus:output_type -> yb.tserver.UpdateTransactionWaitingForStatusResponsePB
	23,  // 107: yb.tserver.TabletServerService.ProbeTransactionDeadlock:output_type -> yb.tserver.ProbeTransactionDeadlockResponsePB
	92,  // 108: yb.tserver.TabletServerService.Truncate:output_type -> yb.tserver.TruncateResponsePB
	93,  // 109: yb.tserver.TabletServerService.GetTabletStatus:output_type -> yb.tserver.GetTabletStatusResponsePB
	94,  // 110: yb.tserver.TabletServerService.GetMasterAddresses:output_type -> yb.tserver.GetMasterAddressesResponsePB
	95,  // 111: yb.tserver.TabletServerService.Publish:output_type -> yb.tserver.PublishResponsePB
	96,  // 112: yb.tserver.TabletServerService.IsTabletServerReady:output_type -> yb.tserver.IsTabletServerReadyResponsePB
	31,  // 113: yb.tserver.TabletServerService.GetSplitKey:output_type -> yb.tserver.GetSplitKeyResponsePB
	33,  // 114: yb.tserver.TabletServerService.GetSharedData:output_type -> yb.tserver.GetSharedDataResponsePB
	35,  // 115: yb.tserver.TabletServerService.GetTserverCatalogVersionInfo:output_type -> yb.tserver.GetTserverCatalogVersionInfoResponsePB
	97,  // 116: yb.tserver.TabletServerService.ListMasterServers:output_type -> yb.tserver.ListMasterServersResponsePB
	1,   // 117: yb.tserver.TabletServerService.GetLockStatus:output_type -> yb.tserver.GetLockStatusResponsePB
	37,  // 118: yb.tserver.TabletServerService.CancelTransaction:output_type -> yb.tserver.CancelTransactionResponsePB
	98,  // 119: yb.tserver.TabletServerService.GetCompatibleSchemaVersion:output_type -> yb.tserver.GetCompatibleSchemaVersionResponsePB
	39,  // 120: yb.tserver.TabletServerService.StartRemoteSnapshotTransfer:output_type -> yb.tserver.StartRemoteSnapshotTransferResponsePB
	99,  // 121: yb.tserver.TabletServerService.GetTabletKeyRanges:output_type -> yb.tserver.GetTabletKeyRangesResponsePB
	100, // 122: yb.tserver.TabletServerService.CheckTserverTabletHealth:output_type -> yb.tserver.CheckTserverTabletHealthResponsePB
	101, // 123: yb.tserver.TabletServerService.ClearAllMetaCachesOnServer:output_type -> yb.tserver.ClearAllMetaCachesOnServerResponsePB
	102, // 124: yb.tserver.TabletServerService.ClearMetacache:output_type -> yb.tserver.ClearMetacacheResponsePB
	103, // 125: yb.tserver.TabletServerService.ClearUniverseUuid:output_type -> yb.tserver.ClearUniverseUuidResponsePB
	104, // 126: yb.tserver.TabletServerService.AcquireObjectLocks:output_type -> yb.tserver.AcquireObjectLockResponsePB
	105, // 127: yb.tserver.TabletServerService.ReleaseObjectLocks:output_type -> yb.tserver.ReleaseObjectLockResponsePB
	41,  // 128: yb.tserver.TabletServerService.AdminExecutePgsql:output_type -> yb.tserver.AdminExecutePgsqlResponsePB
	43,  // 129: yb.tserver.TabletServerService.GetLocalPgTxnSnapshot:output_type -> yb.tserver.GetLocalPgTxnSnapshotResponsePB
	3,   // 130: yb.tserver.TabletServerService.GetMetrics:output_type -> yb.tserver.GetMetricsResponsePB
	90,  // [90:131] is the sub-list for method output_type
	49,  // [49:90] is the sub-list for method input_type
	49,  // [49:49] is the sub-list for extension type_name
	49,  // [49:49] is the sub-list for extension extendee
	0,   // [0:49] is the sub-list for field type_name
}

func init() { file_yb_tserver_tserver_service_proto_init() }
func file_yb_tserver_tserver_service_proto_init() {
	if File_yb_tserver_tserver_service_proto != nil {
		return
	}
	file_yb_tserver_tserver_proto_init()
	file_yb_tserver_tserver_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_tserver_tserver_service_proto_rawDesc), len(file_yb_tserver_tserver_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_tserver_tserver_service_proto_goTypes,
		DependencyIndexes: file_yb_tserver_tserver_service_proto_depIdxs,
		MessageInfos:      file_yb_tserver_tserver_service_proto_msgTypes,
	}.Build()
	File_yb_tserver_tserver_service_proto = out.File
	file_yb_tserver_tserver_service_proto_goTypes = nil
	file_yb_tserver_tserver_service_proto_depIdxs = nil
}
