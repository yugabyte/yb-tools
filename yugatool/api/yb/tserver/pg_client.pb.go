// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.12.4
// source: yb/tserver/pg_client.proto

package tserver

import (
	common "github.com/yugabyte/yb-tools/yugatool/api/yb/common"
	master "github.com/yugabyte/yb-tools/yugatool/api/yb/master"
	_ "github.com/yugabyte/yb-tools/yugatool/api/yb/rpc"
	tablet "github.com/yugabyte/yb-tools/yugatool/api/yb/tablet"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Available replica identity modes for use in CDC
type PgReplicaIdentityType int32

const (
	// Entire updated row as new image, only key as old image for DELETE
	// The name DEFAULT is taken from PG, however it is not the default replica identity mode
	PgReplicaIdentityType_DEFAULT PgReplicaIdentityType = 0
	// Both old and new images of the entire row
	PgReplicaIdentityType_FULL PgReplicaIdentityType = 1
	// No old image for any operation
	PgReplicaIdentityType_NOTHING PgReplicaIdentityType = 2
	// Only the changed columns as new image, no old image except DELETE
	// This is the default replica identity mode in YSQL
	PgReplicaIdentityType_CHANGE PgReplicaIdentityType = 3
)

// Enum value maps for PgReplicaIdentityType.
var (
	PgReplicaIdentityType_name = map[int32]string{
		0: "DEFAULT",
		1: "FULL",
		2: "NOTHING",
		3: "CHANGE",
	}
	PgReplicaIdentityType_value = map[string]int32{
		"DEFAULT": 0,
		"FULL":    1,
		"NOTHING": 2,
		"CHANGE":  3,
	}
)

func (x PgReplicaIdentityType) Enum() *PgReplicaIdentityType {
	p := new(PgReplicaIdentityType)
	*p = x
	return p
}

func (x PgReplicaIdentityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PgReplicaIdentityType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_pg_client_proto_enumTypes[0].Descriptor()
}

func (PgReplicaIdentityType) Type() protoreflect.EnumType {
	return &file_yb_tserver_pg_client_proto_enumTypes[0]
}

func (x PgReplicaIdentityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PgReplicaIdentityType.Descriptor instead.
func (PgReplicaIdentityType) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{0}
}

// proto2 version of the CDCSDKSnapshotOption enum from yb/common/common_types.proto
type PgReplicationSlotSnapshotActionPB int32

const (
	// Invalid, should not be used. This is only present here to keep the same enum tags between the
	// proto2 (this) and the proto3 versions.
	PgReplicationSlotSnapshotActionPB_REPLICATION_SLOT_UNKNOWN_SNAPSHOT PgReplicationSlotSnapshotActionPB = 0
	// Client does not wish to consume snapshot.
	PgReplicationSlotSnapshotActionPB_REPLICATION_SLOT_NOEXPORT_SNAPSHOT PgReplicationSlotSnapshotActionPB = 1
	// Client wishes to consume snapshot from the source universe.
	PgReplicationSlotSnapshotActionPB_REPLICATION_SLOT_USE_SNAPSHOT PgReplicationSlotSnapshotActionPB = 2
	// Client wishes to export snapshot to be used in other session
	PgReplicationSlotSnapshotActionPB_REPLICATION_SLOT_EXPORT_SNAPSHOT PgReplicationSlotSnapshotActionPB = 3
)

// Enum value maps for PgReplicationSlotSnapshotActionPB.
var (
	PgReplicationSlotSnapshotActionPB_name = map[int32]string{
		0: "REPLICATION_SLOT_UNKNOWN_SNAPSHOT",
		1: "REPLICATION_SLOT_NOEXPORT_SNAPSHOT",
		2: "REPLICATION_SLOT_USE_SNAPSHOT",
		3: "REPLICATION_SLOT_EXPORT_SNAPSHOT",
	}
	PgReplicationSlotSnapshotActionPB_value = map[string]int32{
		"REPLICATION_SLOT_UNKNOWN_SNAPSHOT":  0,
		"REPLICATION_SLOT_NOEXPORT_SNAPSHOT": 1,
		"REPLICATION_SLOT_USE_SNAPSHOT":      2,
		"REPLICATION_SLOT_EXPORT_SNAPSHOT":   3,
	}
)

func (x PgReplicationSlotSnapshotActionPB) Enum() *PgReplicationSlotSnapshotActionPB {
	p := new(PgReplicationSlotSnapshotActionPB)
	*p = x
	return p
}

func (x PgReplicationSlotSnapshotActionPB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PgReplicationSlotSnapshotActionPB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_pg_client_proto_enumTypes[1].Descriptor()
}

func (PgReplicationSlotSnapshotActionPB) Type() protoreflect.EnumType {
	return &file_yb_tserver_pg_client_proto_enumTypes[1]
}

func (x PgReplicationSlotSnapshotActionPB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PgReplicationSlotSnapshotActionPB.Descriptor instead.
func (PgReplicationSlotSnapshotActionPB) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{1}
}

// proto2 version of the ReplicationSlotLsnType enum from yb/common/common_types.proto
type PGReplicationSlotLsnType int32

const (
	PGReplicationSlotLsnType_ReplicationSlotLsnTypePg_UNDEFINED   PGReplicationSlotLsnType = 0
	PGReplicationSlotLsnType_ReplicationSlotLsnTypePg_SEQUENCE    PGReplicationSlotLsnType = 1
	PGReplicationSlotLsnType_ReplicationSlotLsnTypePg_HYBRID_TIME PGReplicationSlotLsnType = 2
)

// Enum value maps for PGReplicationSlotLsnType.
var (
	PGReplicationSlotLsnType_name = map[int32]string{
		0: "ReplicationSlotLsnTypePg_UNDEFINED",
		1: "ReplicationSlotLsnTypePg_SEQUENCE",
		2: "ReplicationSlotLsnTypePg_HYBRID_TIME",
	}
	PGReplicationSlotLsnType_value = map[string]int32{
		"ReplicationSlotLsnTypePg_UNDEFINED":   0,
		"ReplicationSlotLsnTypePg_SEQUENCE":    1,
		"ReplicationSlotLsnTypePg_HYBRID_TIME": 2,
	}
)

func (x PGReplicationSlotLsnType) Enum() *PGReplicationSlotLsnType {
	p := new(PGReplicationSlotLsnType)
	*p = x
	return p
}

func (x PGReplicationSlotLsnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PGReplicationSlotLsnType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_pg_client_proto_enumTypes[2].Descriptor()
}

func (PGReplicationSlotLsnType) Type() protoreflect.EnumType {
	return &file_yb_tserver_pg_client_proto_enumTypes[2]
}

func (x PGReplicationSlotLsnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PGReplicationSlotLsnType.Descriptor instead.
func (PGReplicationSlotLsnType) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{2}
}

type ReplicationSlotStatus int32

const (
	ReplicationSlotStatus_ACTIVE   ReplicationSlotStatus = 0
	ReplicationSlotStatus_INACTIVE ReplicationSlotStatus = 1
)

// Enum value maps for ReplicationSlotStatus.
var (
	ReplicationSlotStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	ReplicationSlotStatus_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x ReplicationSlotStatus) Enum() *ReplicationSlotStatus {
	p := new(ReplicationSlotStatus)
	*p = x
	return p
}

func (x ReplicationSlotStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationSlotStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_pg_client_proto_enumTypes[3].Descriptor()
}

func (ReplicationSlotStatus) Type() protoreflect.EnumType {
	return &file_yb_tserver_pg_client_proto_enumTypes[3]
}

func (x ReplicationSlotStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicationSlotStatus.Descriptor instead.
func (ReplicationSlotStatus) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{3}
}

type ReadTimeManipulation int32

const (
	ReadTimeManipulation_NONE                    ReadTimeManipulation = 0
	ReadTimeManipulation_RESTART                 ReadTimeManipulation = 1
	ReadTimeManipulation_ENSURE_READ_TIME_IS_SET ReadTimeManipulation = 2
)

// Enum value maps for ReadTimeManipulation.
var (
	ReadTimeManipulation_name = map[int32]string{
		0: "NONE",
		1: "RESTART",
		2: "ENSURE_READ_TIME_IS_SET",
	}
	ReadTimeManipulation_value = map[string]int32{
		"NONE":                    0,
		"RESTART":                 1,
		"ENSURE_READ_TIME_IS_SET": 2,
	}
)

func (x ReadTimeManipulation) Enum() *ReadTimeManipulation {
	p := new(ReadTimeManipulation)
	*p = x
	return p
}

func (x ReadTimeManipulation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadTimeManipulation) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_pg_client_proto_enumTypes[4].Descriptor()
}

func (ReadTimeManipulation) Type() protoreflect.EnumType {
	return &file_yb_tserver_pg_client_proto_enumTypes[4]
}

func (x ReadTimeManipulation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadTimeManipulation.Descriptor instead.
func (ReadTimeManipulation) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{4}
}

type PgMetricsInfoStatus int32

const (
	PgMetricsInfoStatus_OK    PgMetricsInfoStatus = 0
	PgMetricsInfoStatus_ERROR PgMetricsInfoStatus = 1
)

// Enum value maps for PgMetricsInfoStatus.
var (
	PgMetricsInfoStatus_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	PgMetricsInfoStatus_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x PgMetricsInfoStatus) Enum() *PgMetricsInfoStatus {
	p := new(PgMetricsInfoStatus)
	*p = x
	return p
}

func (x PgMetricsInfoStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PgMetricsInfoStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_pg_client_proto_enumTypes[5].Descriptor()
}

func (PgMetricsInfoStatus) Type() protoreflect.EnumType {
	return &file_yb_tserver_pg_client_proto_enumTypes[5]
}

func (x PgMetricsInfoStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PgMetricsInfoStatus.Descriptor instead.
func (PgMetricsInfoStatus) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{5}
}

// TODO: Remove the OptionalUint32PB helper message after updating protobuf generator to allow
// 'optional' in proto3
type OptionalFixed64PB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         uint64                 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionalFixed64PB) Reset() {
	*x = OptionalFixed64PB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalFixed64PB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalFixed64PB) ProtoMessage() {}

func (x *OptionalFixed64PB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalFixed64PB.ProtoReflect.Descriptor instead.
func (*OptionalFixed64PB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{0}
}

func (x *OptionalFixed64PB) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type OptionalUint32PB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         uint32                 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionalUint32PB) Reset() {
	*x = OptionalUint32PB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalUint32PB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalUint32PB) ProtoMessage() {}

func (x *OptionalUint32PB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalUint32PB.ProtoReflect.Descriptor instead.
func (*OptionalUint32PB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{1}
}

func (x *OptionalUint32PB) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type OptionalUint64PB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         uint64                 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionalUint64PB) Reset() {
	*x = OptionalUint64PB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalUint64PB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalUint64PB) ProtoMessage() {}

func (x *OptionalUint64PB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalUint64PB.ProtoReflect.Descriptor instead.
func (*OptionalUint64PB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{2}
}

func (x *OptionalUint64PB) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PgHeartbeatRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Pid           uint32                 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgHeartbeatRequestPB) Reset() {
	*x = PgHeartbeatRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgHeartbeatRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgHeartbeatRequestPB) ProtoMessage() {}

func (x *PgHeartbeatRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgHeartbeatRequestPB.ProtoReflect.Descriptor instead.
func (*PgHeartbeatRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{3}
}

func (x *PgHeartbeatRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgHeartbeatRequestPB) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type PgHeartbeatResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SessionId     uint64                 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	InstanceId    []byte                 `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgHeartbeatResponsePB) Reset() {
	*x = PgHeartbeatResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgHeartbeatResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgHeartbeatResponsePB) ProtoMessage() {}

func (x *PgHeartbeatResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgHeartbeatResponsePB.ProtoReflect.Descriptor instead.
func (*PgHeartbeatResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{4}
}

func (x *PgHeartbeatResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgHeartbeatResponsePB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgHeartbeatResponsePB) GetInstanceId() []byte {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

type PgObjectIdPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatabaseOid   uint32                 `protobuf:"varint,1,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	ObjectOid     uint32                 `protobuf:"varint,2,opt,name=object_oid,json=objectOid,proto3" json:"object_oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgObjectIdPB) Reset() {
	*x = PgObjectIdPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgObjectIdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgObjectIdPB) ProtoMessage() {}

func (x *PgObjectIdPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgObjectIdPB.ProtoReflect.Descriptor instead.
func (*PgObjectIdPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{5}
}

func (x *PgObjectIdPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgObjectIdPB) GetObjectOid() uint32 {
	if x != nil {
		return x.ObjectOid
	}
	return 0
}

type PgAlterDatabaseRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DatabaseName  string                 `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseOid   uint32                 `protobuf:"varint,3,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	NewName       string                 `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,5,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgAlterDatabaseRequestPB) Reset() {
	*x = PgAlterDatabaseRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgAlterDatabaseRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgAlterDatabaseRequestPB) ProtoMessage() {}

func (x *PgAlterDatabaseRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgAlterDatabaseRequestPB.ProtoReflect.Descriptor instead.
func (*PgAlterDatabaseRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{6}
}

func (x *PgAlterDatabaseRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgAlterDatabaseRequestPB) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PgAlterDatabaseRequestPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgAlterDatabaseRequestPB) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *PgAlterDatabaseRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgAlterDatabaseResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgAlterDatabaseResponsePB) Reset() {
	*x = PgAlterDatabaseResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgAlterDatabaseResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgAlterDatabaseResponsePB) ProtoMessage() {}

func (x *PgAlterDatabaseResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgAlterDatabaseResponsePB.ProtoReflect.Descriptor instead.
func (*PgAlterDatabaseResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{7}
}

func (x *PgAlterDatabaseResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgBackfillIndexRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TableId       *PgObjectIdPB          `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgBackfillIndexRequestPB) Reset() {
	*x = PgBackfillIndexRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgBackfillIndexRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgBackfillIndexRequestPB) ProtoMessage() {}

func (x *PgBackfillIndexRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgBackfillIndexRequestPB.ProtoReflect.Descriptor instead.
func (*PgBackfillIndexRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{8}
}

func (x *PgBackfillIndexRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgBackfillIndexRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgBackfillIndexRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgBackfillIndexResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgBackfillIndexResponsePB) Reset() {
	*x = PgBackfillIndexResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgBackfillIndexResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgBackfillIndexResponsePB) ProtoMessage() {}

func (x *PgBackfillIndexResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgBackfillIndexResponsePB.ProtoReflect.Descriptor instead.
func (*PgBackfillIndexResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{9}
}

func (x *PgBackfillIndexResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgRenameColumnPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldName       string                 `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	NewName       string                 `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgRenameColumnPB) Reset() {
	*x = PgRenameColumnPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgRenameColumnPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgRenameColumnPB) ProtoMessage() {}

func (x *PgRenameColumnPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgRenameColumnPB.ProtoReflect.Descriptor instead.
func (*PgRenameColumnPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{10}
}

func (x *PgRenameColumnPB) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *PgRenameColumnPB) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type PgRenameTablePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatabaseName  string                 `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName     string                 `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SchemaName    string                 `protobuf:"bytes,3,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgRenameTablePB) Reset() {
	*x = PgRenameTablePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgRenameTablePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgRenameTablePB) ProtoMessage() {}

func (x *PgRenameTablePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgRenameTablePB.ProtoReflect.Descriptor instead.
func (*PgRenameTablePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{11}
}

func (x *PgRenameTablePB) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PgRenameTablePB) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PgRenameTablePB) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

type PgReplicaIdentityPB struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReplicaIdentity PgReplicaIdentityType  `protobuf:"varint,1,opt,name=replica_identity,json=replicaIdentity,proto3,enum=yb.tserver.PgReplicaIdentityType" json:"replica_identity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PgReplicaIdentityPB) Reset() {
	*x = PgReplicaIdentityPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgReplicaIdentityPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgReplicaIdentityPB) ProtoMessage() {}

func (x *PgReplicaIdentityPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgReplicaIdentityPB.ProtoReflect.Descriptor instead.
func (*PgReplicaIdentityPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{12}
}

func (x *PgReplicaIdentityPB) GetReplicaIdentity() PgReplicaIdentityType {
	if x != nil {
		return x.ReplicaIdentity
	}
	return PgReplicaIdentityType_DEFAULT
}

type PgAlterTableRequestPB struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SessionId              uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UseTransaction         bool                   `protobuf:"varint,2,opt,name=use_transaction,json=useTransaction,proto3" json:"use_transaction,omitempty"`
	TableId                *PgObjectIdPB          `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	AddColumns             []*PgCreateColumnPB    `protobuf:"bytes,4,rep,name=add_columns,json=addColumns,proto3" json:"add_columns,omitempty"`
	RenameColumns          []*PgRenameColumnPB    `protobuf:"bytes,5,rep,name=rename_columns,json=renameColumns,proto3" json:"rename_columns,omitempty"`
	DropColumns            []string               `protobuf:"bytes,6,rep,name=drop_columns,json=dropColumns,proto3" json:"drop_columns,omitempty"`
	RenameTable            *PgRenameTablePB       `protobuf:"bytes,7,opt,name=rename_table,json=renameTable,proto3" json:"rename_table,omitempty"`
	IncrementSchemaVersion bool                   `protobuf:"varint,8,opt,name=increment_schema_version,json=incrementSchemaVersion,proto3" json:"increment_schema_version,omitempty"`
	ReplicaIdentity        *PgReplicaIdentityPB   `protobuf:"bytes,9,opt,name=replica_identity,json=replicaIdentity,proto3" json:"replica_identity,omitempty"`
	AshMetadata            *common.AshMetadataPB  `protobuf:"bytes,10,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PgAlterTableRequestPB) Reset() {
	*x = PgAlterTableRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgAlterTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgAlterTableRequestPB) ProtoMessage() {}

func (x *PgAlterTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgAlterTableRequestPB.ProtoReflect.Descriptor instead.
func (*PgAlterTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{13}
}

func (x *PgAlterTableRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgAlterTableRequestPB) GetUseTransaction() bool {
	if x != nil {
		return x.UseTransaction
	}
	return false
}

func (x *PgAlterTableRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgAlterTableRequestPB) GetAddColumns() []*PgCreateColumnPB {
	if x != nil {
		return x.AddColumns
	}
	return nil
}

func (x *PgAlterTableRequestPB) GetRenameColumns() []*PgRenameColumnPB {
	if x != nil {
		return x.RenameColumns
	}
	return nil
}

func (x *PgAlterTableRequestPB) GetDropColumns() []string {
	if x != nil {
		return x.DropColumns
	}
	return nil
}

func (x *PgAlterTableRequestPB) GetRenameTable() *PgRenameTablePB {
	if x != nil {
		return x.RenameTable
	}
	return nil
}

func (x *PgAlterTableRequestPB) GetIncrementSchemaVersion() bool {
	if x != nil {
		return x.IncrementSchemaVersion
	}
	return false
}

func (x *PgAlterTableRequestPB) GetReplicaIdentity() *PgReplicaIdentityPB {
	if x != nil {
		return x.ReplicaIdentity
	}
	return nil
}

func (x *PgAlterTableRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgAlterTableResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgAlterTableResponsePB) Reset() {
	*x = PgAlterTableResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgAlterTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgAlterTableResponsePB) ProtoMessage() {}

func (x *PgAlterTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgAlterTableResponsePB.ProtoReflect.Descriptor instead.
func (*PgAlterTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{14}
}

func (x *PgAlterTableResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgCreateDatabaseRequestPB struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SessionId          uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UseTransaction     bool                   `protobuf:"varint,2,opt,name=use_transaction,json=useTransaction,proto3" json:"use_transaction,omitempty"`
	DatabaseName       string                 `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseOid        uint32                 `protobuf:"varint,4,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	SourceDatabaseOid  uint32                 `protobuf:"varint,5,opt,name=source_database_oid,json=sourceDatabaseOid,proto3" json:"source_database_oid,omitempty"`
	NextOid            uint32                 `protobuf:"varint,6,opt,name=next_oid,json=nextOid,proto3" json:"next_oid,omitempty"`
	Colocated          bool                   `protobuf:"varint,7,opt,name=colocated,proto3" json:"colocated,omitempty"`
	CloneTime          uint64                 `protobuf:"fixed64,8,opt,name=clone_time,json=cloneTime,proto3" json:"clone_time,omitempty"`
	SourceDatabaseName string                 `protobuf:"bytes,9,opt,name=source_database_name,json=sourceDatabaseName,proto3" json:"source_database_name,omitempty"`
	SourceOwner        string                 `protobuf:"bytes,10,opt,name=source_owner,json=sourceOwner,proto3" json:"source_owner,omitempty"`
	TargetOwner        string                 `protobuf:"bytes,11,opt,name=target_owner,json=targetOwner,proto3" json:"target_owner,omitempty"`
	AshMetadata        *common.AshMetadataPB  `protobuf:"bytes,12,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PgCreateDatabaseRequestPB) Reset() {
	*x = PgCreateDatabaseRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateDatabaseRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateDatabaseRequestPB) ProtoMessage() {}

func (x *PgCreateDatabaseRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateDatabaseRequestPB.ProtoReflect.Descriptor instead.
func (*PgCreateDatabaseRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{15}
}

func (x *PgCreateDatabaseRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgCreateDatabaseRequestPB) GetUseTransaction() bool {
	if x != nil {
		return x.UseTransaction
	}
	return false
}

func (x *PgCreateDatabaseRequestPB) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PgCreateDatabaseRequestPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgCreateDatabaseRequestPB) GetSourceDatabaseOid() uint32 {
	if x != nil {
		return x.SourceDatabaseOid
	}
	return 0
}

func (x *PgCreateDatabaseRequestPB) GetNextOid() uint32 {
	if x != nil {
		return x.NextOid
	}
	return 0
}

func (x *PgCreateDatabaseRequestPB) GetColocated() bool {
	if x != nil {
		return x.Colocated
	}
	return false
}

func (x *PgCreateDatabaseRequestPB) GetCloneTime() uint64 {
	if x != nil {
		return x.CloneTime
	}
	return 0
}

func (x *PgCreateDatabaseRequestPB) GetSourceDatabaseName() string {
	if x != nil {
		return x.SourceDatabaseName
	}
	return ""
}

func (x *PgCreateDatabaseRequestPB) GetSourceOwner() string {
	if x != nil {
		return x.SourceOwner
	}
	return ""
}

func (x *PgCreateDatabaseRequestPB) GetTargetOwner() string {
	if x != nil {
		return x.TargetOwner
	}
	return ""
}

func (x *PgCreateDatabaseRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgCreateDatabaseResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCreateDatabaseResponsePB) Reset() {
	*x = PgCreateDatabaseResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateDatabaseResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateDatabaseResponsePB) ProtoMessage() {}

func (x *PgCreateDatabaseResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateDatabaseResponsePB.ProtoReflect.Descriptor instead.
func (*PgCreateDatabaseResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{16}
}

func (x *PgCreateDatabaseResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgCreateSequencesDataTableRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCreateSequencesDataTableRequestPB) Reset() {
	*x = PgCreateSequencesDataTableRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateSequencesDataTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateSequencesDataTableRequestPB) ProtoMessage() {}

func (x *PgCreateSequencesDataTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateSequencesDataTableRequestPB.ProtoReflect.Descriptor instead.
func (*PgCreateSequencesDataTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{17}
}

type PgCreateReplicationSlotRequestPB struct {
	state               protoimpl.MessageState            `protogen:"open.v1"`
	SessionId           uint64                            `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DatabaseOid         uint32                            `protobuf:"varint,2,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	ReplicationSlotName string                            `protobuf:"bytes,3,opt,name=replication_slot_name,json=replicationSlotName,proto3" json:"replication_slot_name,omitempty"`
	SnapshotAction      PgReplicationSlotSnapshotActionPB `protobuf:"varint,4,opt,name=snapshot_action,json=snapshotAction,proto3,enum=yb.tserver.PgReplicationSlotSnapshotActionPB" json:"snapshot_action,omitempty"`
	OutputPluginName    string                            `protobuf:"bytes,5,opt,name=output_plugin_name,json=outputPluginName,proto3" json:"output_plugin_name,omitempty"`
	AshMetadata         *common.AshMetadataPB             `protobuf:"bytes,6,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	LsnType             PGReplicationSlotLsnType          `protobuf:"varint,7,opt,name=lsn_type,json=lsnType,proto3,enum=yb.tserver.PGReplicationSlotLsnType" json:"lsn_type,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PgCreateReplicationSlotRequestPB) Reset() {
	*x = PgCreateReplicationSlotRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateReplicationSlotRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateReplicationSlotRequestPB) ProtoMessage() {}

func (x *PgCreateReplicationSlotRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateReplicationSlotRequestPB.ProtoReflect.Descriptor instead.
func (*PgCreateReplicationSlotRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{18}
}

func (x *PgCreateReplicationSlotRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgCreateReplicationSlotRequestPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgCreateReplicationSlotRequestPB) GetReplicationSlotName() string {
	if x != nil {
		return x.ReplicationSlotName
	}
	return ""
}

func (x *PgCreateReplicationSlotRequestPB) GetSnapshotAction() PgReplicationSlotSnapshotActionPB {
	if x != nil {
		return x.SnapshotAction
	}
	return PgReplicationSlotSnapshotActionPB_REPLICATION_SLOT_UNKNOWN_SNAPSHOT
}

func (x *PgCreateReplicationSlotRequestPB) GetOutputPluginName() string {
	if x != nil {
		return x.OutputPluginName
	}
	return ""
}

func (x *PgCreateReplicationSlotRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

func (x *PgCreateReplicationSlotRequestPB) GetLsnType() PGReplicationSlotLsnType {
	if x != nil {
		return x.LsnType
	}
	return PGReplicationSlotLsnType_ReplicationSlotLsnTypePg_UNDEFINED
}

type PgCreateReplicationSlotResponsePB struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Status                       *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StreamId                     []byte                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	CdcsdkConsistentSnapshotTime uint64                 `protobuf:"varint,3,opt,name=cdcsdk_consistent_snapshot_time,json=cdcsdkConsistentSnapshotTime,proto3" json:"cdcsdk_consistent_snapshot_time,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *PgCreateReplicationSlotResponsePB) Reset() {
	*x = PgCreateReplicationSlotResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateReplicationSlotResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateReplicationSlotResponsePB) ProtoMessage() {}

func (x *PgCreateReplicationSlotResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateReplicationSlotResponsePB.ProtoReflect.Descriptor instead.
func (*PgCreateReplicationSlotResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{19}
}

func (x *PgCreateReplicationSlotResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgCreateReplicationSlotResponsePB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *PgCreateReplicationSlotResponsePB) GetCdcsdkConsistentSnapshotTime() uint64 {
	if x != nil {
		return x.CdcsdkConsistentSnapshotTime
	}
	return 0
}

type PgCreateSequencesDataTableResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCreateSequencesDataTableResponsePB) Reset() {
	*x = PgCreateSequencesDataTableResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateSequencesDataTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateSequencesDataTableResponsePB) ProtoMessage() {}

func (x *PgCreateSequencesDataTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateSequencesDataTableResponsePB.ProtoReflect.Descriptor instead.
func (*PgCreateSequencesDataTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{20}
}

func (x *PgCreateSequencesDataTableResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgCreateColumnPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AttrName       string                 `protobuf:"bytes,1,opt,name=attr_name,json=attrName,proto3" json:"attr_name,omitempty"`
	AttrNum        int32                  `protobuf:"varint,2,opt,name=attr_num,json=attrNum,proto3" json:"attr_num,omitempty"`
	AttrYbtype     int32                  `protobuf:"varint,3,opt,name=attr_ybtype,json=attrYbtype,proto3" json:"attr_ybtype,omitempty"`
	IsHash         bool                   `protobuf:"varint,4,opt,name=is_hash,json=isHash,proto3" json:"is_hash,omitempty"`
	IsRange        bool                   `protobuf:"varint,5,opt,name=is_range,json=isRange,proto3" json:"is_range,omitempty"`
	SortingType    int32                  `protobuf:"varint,6,opt,name=sorting_type,json=sortingType,proto3" json:"sorting_type,omitempty"`
	AttrPgoid      int32                  `protobuf:"varint,7,opt,name=attr_pgoid,json=attrPgoid,proto3" json:"attr_pgoid,omitempty"`
	AttrMissingVal *common.QLValuePB      `protobuf:"bytes,8,opt,name=attr_missing_val,json=attrMissingVal,proto3" json:"attr_missing_val,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgCreateColumnPB) Reset() {
	*x = PgCreateColumnPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateColumnPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateColumnPB) ProtoMessage() {}

func (x *PgCreateColumnPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateColumnPB.ProtoReflect.Descriptor instead.
func (*PgCreateColumnPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{21}
}

func (x *PgCreateColumnPB) GetAttrName() string {
	if x != nil {
		return x.AttrName
	}
	return ""
}

func (x *PgCreateColumnPB) GetAttrNum() int32 {
	if x != nil {
		return x.AttrNum
	}
	return 0
}

func (x *PgCreateColumnPB) GetAttrYbtype() int32 {
	if x != nil {
		return x.AttrYbtype
	}
	return 0
}

func (x *PgCreateColumnPB) GetIsHash() bool {
	if x != nil {
		return x.IsHash
	}
	return false
}

func (x *PgCreateColumnPB) GetIsRange() bool {
	if x != nil {
		return x.IsRange
	}
	return false
}

func (x *PgCreateColumnPB) GetSortingType() int32 {
	if x != nil {
		return x.SortingType
	}
	return 0
}

func (x *PgCreateColumnPB) GetAttrPgoid() int32 {
	if x != nil {
		return x.AttrPgoid
	}
	return 0
}

func (x *PgCreateColumnPB) GetAttrMissingVal() *common.QLValuePB {
	if x != nil {
		return x.AttrMissingVal
	}
	return nil
}

type PgCreateSplitBoundaryPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*common.QLValuePB    `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCreateSplitBoundaryPB) Reset() {
	*x = PgCreateSplitBoundaryPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateSplitBoundaryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateSplitBoundaryPB) ProtoMessage() {}

func (x *PgCreateSplitBoundaryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateSplitBoundaryPB.ProtoReflect.Descriptor instead.
func (*PgCreateSplitBoundaryPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{22}
}

func (x *PgCreateSplitBoundaryPB) GetValues() []*common.QLValuePB {
	if x != nil {
		return x.Values
	}
	return nil
}

type PgCreateTableRequestPB struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SessionId              uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UseTransaction         bool                   `protobuf:"varint,2,opt,name=use_transaction,json=useTransaction,proto3" json:"use_transaction,omitempty"`
	TableId                *PgObjectIdPB          `protobuf:"bytes,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	DatabaseName           string                 `protobuf:"bytes,4,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName              string                 `protobuf:"bytes,5,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	NumTablets             int32                  `protobuf:"varint,6,opt,name=num_tablets,json=numTablets,proto3" json:"num_tablets,omitempty"`
	IsPgCatalogTable       bool                   `protobuf:"varint,7,opt,name=is_pg_catalog_table,json=isPgCatalogTable,proto3" json:"is_pg_catalog_table,omitempty"`
	IsSharedTable          bool                   `protobuf:"varint,8,opt,name=is_shared_table,json=isSharedTable,proto3" json:"is_shared_table,omitempty"`
	IfNotExist             bool                   `protobuf:"varint,9,opt,name=if_not_exist,json=ifNotExist,proto3" json:"if_not_exist,omitempty"`
	IsColocatedViaDatabase bool                   `protobuf:"varint,10,opt,name=is_colocated_via_database,json=isColocatedViaDatabase,proto3" json:"is_colocated_via_database,omitempty"`
	TablegroupOid          *PgObjectIdPB          `protobuf:"bytes,11,opt,name=tablegroup_oid,json=tablegroupOid,proto3" json:"tablegroup_oid,omitempty"`
	// Auto-generated by catalog manager if not specified.
	// Only makes sense for colocated tables.
	// Note: proto3 v3.15 includes an "optional" keyword as a syntactic sugar for this oneof wrapper.
	//
	// Types that are valid to be assigned to OptionalColocationId:
	//
	//	*PgCreateTableRequestPB_ColocationId
	OptionalColocationId isPgCreateTableRequestPB_OptionalColocationId `protobuf_oneof:"optional_colocation_id"`
	TablespaceOid        *PgObjectIdPB                                 `protobuf:"bytes,12,opt,name=tablespace_oid,json=tablespaceOid,proto3" json:"tablespace_oid,omitempty"`
	CreateColumns        []*PgCreateColumnPB                           `protobuf:"bytes,13,rep,name=create_columns,json=createColumns,proto3" json:"create_columns,omitempty"`
	SplitBounds          []*PgCreateSplitBoundaryPB                    `protobuf:"bytes,14,rep,name=split_bounds,json=splitBounds,proto3" json:"split_bounds,omitempty"`
	// Actual for index only.
	BaseTableId       *PgObjectIdPB `protobuf:"bytes,15,opt,name=base_table_id,json=baseTableId,proto3" json:"base_table_id,omitempty"`
	IsUniqueIndex     bool          `protobuf:"varint,16,opt,name=is_unique_index,json=isUniqueIndex,proto3" json:"is_unique_index,omitempty"`
	SkipIndexBackfill bool          `protobuf:"varint,17,opt,name=skip_index_backfill,json=skipIndexBackfill,proto3" json:"skip_index_backfill,omitempty"`
	IsMatview         bool          `protobuf:"varint,21,opt,name=is_matview,json=isMatview,proto3" json:"is_matview,omitempty"`
	// Used during a table rewrite operation to explicitly store the PG table oid.
	PgTableOid *PgObjectIdPB `protobuf:"bytes,18,opt,name=pg_table_oid,json=pgTableOid,proto3" json:"pg_table_oid,omitempty"`
	SchemaName string        `protobuf:"bytes,19,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	// Used during a table rewrite operation to store the relfilenode OID that maps to the old
	// DocDB table.
	OldRelfilenodeOid *PgObjectIdPB `protobuf:"bytes,22,opt,name=old_relfilenode_oid,json=oldRelfilenodeOid,proto3" json:"old_relfilenode_oid,omitempty"`
	// Set to true when the table is being re-written as part of a TRUNCATE operation.
	IsTruncate       bool                         `protobuf:"varint,23,opt,name=is_truncate,json=isTruncate,proto3" json:"is_truncate,omitempty"`
	VectorIdxOptions *common.PgVectorIdxOptionsPB `protobuf:"bytes,24,opt,name=vector_idx_options,json=vectorIdxOptions,proto3" json:"vector_idx_options,omitempty"`
	AshMetadata      *common.AshMetadataPB        `protobuf:"bytes,25,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PgCreateTableRequestPB) Reset() {
	*x = PgCreateTableRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateTableRequestPB) ProtoMessage() {}

func (x *PgCreateTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateTableRequestPB.ProtoReflect.Descriptor instead.
func (*PgCreateTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{23}
}

func (x *PgCreateTableRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgCreateTableRequestPB) GetUseTransaction() bool {
	if x != nil {
		return x.UseTransaction
	}
	return false
}

func (x *PgCreateTableRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PgCreateTableRequestPB) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PgCreateTableRequestPB) GetNumTablets() int32 {
	if x != nil {
		return x.NumTablets
	}
	return 0
}

func (x *PgCreateTableRequestPB) GetIsPgCatalogTable() bool {
	if x != nil {
		return x.IsPgCatalogTable
	}
	return false
}

func (x *PgCreateTableRequestPB) GetIsSharedTable() bool {
	if x != nil {
		return x.IsSharedTable
	}
	return false
}

func (x *PgCreateTableRequestPB) GetIfNotExist() bool {
	if x != nil {
		return x.IfNotExist
	}
	return false
}

func (x *PgCreateTableRequestPB) GetIsColocatedViaDatabase() bool {
	if x != nil {
		return x.IsColocatedViaDatabase
	}
	return false
}

func (x *PgCreateTableRequestPB) GetTablegroupOid() *PgObjectIdPB {
	if x != nil {
		return x.TablegroupOid
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetOptionalColocationId() isPgCreateTableRequestPB_OptionalColocationId {
	if x != nil {
		return x.OptionalColocationId
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetColocationId() uint32 {
	if x != nil {
		if x, ok := x.OptionalColocationId.(*PgCreateTableRequestPB_ColocationId); ok {
			return x.ColocationId
		}
	}
	return 0
}

func (x *PgCreateTableRequestPB) GetTablespaceOid() *PgObjectIdPB {
	if x != nil {
		return x.TablespaceOid
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetCreateColumns() []*PgCreateColumnPB {
	if x != nil {
		return x.CreateColumns
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetSplitBounds() []*PgCreateSplitBoundaryPB {
	if x != nil {
		return x.SplitBounds
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetBaseTableId() *PgObjectIdPB {
	if x != nil {
		return x.BaseTableId
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetIsUniqueIndex() bool {
	if x != nil {
		return x.IsUniqueIndex
	}
	return false
}

func (x *PgCreateTableRequestPB) GetSkipIndexBackfill() bool {
	if x != nil {
		return x.SkipIndexBackfill
	}
	return false
}

func (x *PgCreateTableRequestPB) GetIsMatview() bool {
	if x != nil {
		return x.IsMatview
	}
	return false
}

func (x *PgCreateTableRequestPB) GetPgTableOid() *PgObjectIdPB {
	if x != nil {
		return x.PgTableOid
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *PgCreateTableRequestPB) GetOldRelfilenodeOid() *PgObjectIdPB {
	if x != nil {
		return x.OldRelfilenodeOid
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetIsTruncate() bool {
	if x != nil {
		return x.IsTruncate
	}
	return false
}

func (x *PgCreateTableRequestPB) GetVectorIdxOptions() *common.PgVectorIdxOptionsPB {
	if x != nil {
		return x.VectorIdxOptions
	}
	return nil
}

func (x *PgCreateTableRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type isPgCreateTableRequestPB_OptionalColocationId interface {
	isPgCreateTableRequestPB_OptionalColocationId()
}

type PgCreateTableRequestPB_ColocationId struct {
	ColocationId uint32 `protobuf:"varint,20,opt,name=colocation_id,json=colocationId,proto3,oneof"`
}

func (*PgCreateTableRequestPB_ColocationId) isPgCreateTableRequestPB_OptionalColocationId() {}

type PgCreateTableResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCreateTableResponsePB) Reset() {
	*x = PgCreateTableResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateTableResponsePB) ProtoMessage() {}

func (x *PgCreateTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateTableResponsePB.ProtoReflect.Descriptor instead.
func (*PgCreateTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{24}
}

func (x *PgCreateTableResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgCreateTablegroupRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DatabaseName  string                 `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TablegroupId  *PgObjectIdPB          `protobuf:"bytes,3,opt,name=tablegroup_id,json=tablegroupId,proto3" json:"tablegroup_id,omitempty"`
	TablespaceId  *PgObjectIdPB          `protobuf:"bytes,4,opt,name=tablespace_id,json=tablespaceId,proto3" json:"tablespace_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,5,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCreateTablegroupRequestPB) Reset() {
	*x = PgCreateTablegroupRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateTablegroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateTablegroupRequestPB) ProtoMessage() {}

func (x *PgCreateTablegroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateTablegroupRequestPB.ProtoReflect.Descriptor instead.
func (*PgCreateTablegroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{25}
}

func (x *PgCreateTablegroupRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgCreateTablegroupRequestPB) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PgCreateTablegroupRequestPB) GetTablegroupId() *PgObjectIdPB {
	if x != nil {
		return x.TablegroupId
	}
	return nil
}

func (x *PgCreateTablegroupRequestPB) GetTablespaceId() *PgObjectIdPB {
	if x != nil {
		return x.TablespaceId
	}
	return nil
}

func (x *PgCreateTablegroupRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgCreateTablegroupResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCreateTablegroupResponsePB) Reset() {
	*x = PgCreateTablegroupResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCreateTablegroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCreateTablegroupResponsePB) ProtoMessage() {}

func (x *PgCreateTablegroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCreateTablegroupResponsePB.ProtoReflect.Descriptor instead.
func (*PgCreateTablegroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{26}
}

func (x *PgCreateTablegroupResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgDropDatabaseRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DatabaseName  string                 `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	DatabaseOid   uint32                 `protobuf:"varint,4,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,5,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDropDatabaseRequestPB) Reset() {
	*x = PgDropDatabaseRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropDatabaseRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropDatabaseRequestPB) ProtoMessage() {}

func (x *PgDropDatabaseRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropDatabaseRequestPB.ProtoReflect.Descriptor instead.
func (*PgDropDatabaseRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{27}
}

func (x *PgDropDatabaseRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgDropDatabaseRequestPB) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *PgDropDatabaseRequestPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgDropDatabaseRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgDropDatabaseResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDropDatabaseResponsePB) Reset() {
	*x = PgDropDatabaseResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropDatabaseResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropDatabaseResponsePB) ProtoMessage() {}

func (x *PgDropDatabaseResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropDatabaseResponsePB.ProtoReflect.Descriptor instead.
func (*PgDropDatabaseResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{28}
}

func (x *PgDropDatabaseResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgDropReplicationSlotRequestPB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SessionId           uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ReplicationSlotName string                 `protobuf:"bytes,2,opt,name=replication_slot_name,json=replicationSlotName,proto3" json:"replication_slot_name,omitempty"`
	AshMetadata         *common.AshMetadataPB  `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PgDropReplicationSlotRequestPB) Reset() {
	*x = PgDropReplicationSlotRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropReplicationSlotRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropReplicationSlotRequestPB) ProtoMessage() {}

func (x *PgDropReplicationSlotRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropReplicationSlotRequestPB.ProtoReflect.Descriptor instead.
func (*PgDropReplicationSlotRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{29}
}

func (x *PgDropReplicationSlotRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgDropReplicationSlotRequestPB) GetReplicationSlotName() string {
	if x != nil {
		return x.ReplicationSlotName
	}
	return ""
}

func (x *PgDropReplicationSlotRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgDropReplicationSlotResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDropReplicationSlotResponsePB) Reset() {
	*x = PgDropReplicationSlotResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropReplicationSlotResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropReplicationSlotResponsePB) ProtoMessage() {}

func (x *PgDropReplicationSlotResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropReplicationSlotResponsePB.ProtoReflect.Descriptor instead.
func (*PgDropReplicationSlotResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{30}
}

func (x *PgDropReplicationSlotResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgDropTableRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TableId       *PgObjectIdPB          `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Index         bool                   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDropTableRequestPB) Reset() {
	*x = PgDropTableRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropTableRequestPB) ProtoMessage() {}

func (x *PgDropTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropTableRequestPB.ProtoReflect.Descriptor instead.
func (*PgDropTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{31}
}

func (x *PgDropTableRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgDropTableRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgDropTableRequestPB) GetIndex() bool {
	if x != nil {
		return x.Index
	}
	return false
}

func (x *PgDropTableRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgDropTableResponsePB struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Status        *common.AppStatusPB       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IndexedTable  *master.TableIdentifierPB `protobuf:"bytes,2,opt,name=indexed_table,json=indexedTable,proto3" json:"indexed_table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDropTableResponsePB) Reset() {
	*x = PgDropTableResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropTableResponsePB) ProtoMessage() {}

func (x *PgDropTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropTableResponsePB.ProtoReflect.Descriptor instead.
func (*PgDropTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{32}
}

func (x *PgDropTableResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgDropTableResponsePB) GetIndexedTable() *master.TableIdentifierPB {
	if x != nil {
		return x.IndexedTable
	}
	return nil
}

type PgDropTablegroupRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TablegroupId  *PgObjectIdPB          `protobuf:"bytes,2,opt,name=tablegroup_id,json=tablegroupId,proto3" json:"tablegroup_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDropTablegroupRequestPB) Reset() {
	*x = PgDropTablegroupRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropTablegroupRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropTablegroupRequestPB) ProtoMessage() {}

func (x *PgDropTablegroupRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropTablegroupRequestPB.ProtoReflect.Descriptor instead.
func (*PgDropTablegroupRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{33}
}

func (x *PgDropTablegroupRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgDropTablegroupRequestPB) GetTablegroupId() *PgObjectIdPB {
	if x != nil {
		return x.TablegroupId
	}
	return nil
}

func (x *PgDropTablegroupRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgDropTablegroupResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDropTablegroupResponsePB) Reset() {
	*x = PgDropTablegroupResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDropTablegroupResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDropTablegroupResponsePB) ProtoMessage() {}

func (x *PgDropTablegroupResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDropTablegroupResponsePB.ProtoReflect.Descriptor instead.
func (*PgDropTablegroupResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{34}
}

func (x *PgDropTablegroupResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgGetCatalogMasterVersionRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetCatalogMasterVersionRequestPB) Reset() {
	*x = PgGetCatalogMasterVersionRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetCatalogMasterVersionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetCatalogMasterVersionRequestPB) ProtoMessage() {}

func (x *PgGetCatalogMasterVersionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetCatalogMasterVersionRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetCatalogMasterVersionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{35}
}

type PgFinishTransactionRequestPB struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	SessionId     uint64                                  `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Commit        bool                                    `protobuf:"varint,2,opt,name=commit,proto3" json:"commit,omitempty"`
	DdlMode       *PgFinishTransactionRequestPB_DdlModePB `protobuf:"bytes,3,opt,name=ddl_mode,json=ddlMode,proto3" json:"ddl_mode,omitempty"`
	AshMetadata   *common.AshMetadataPB                   `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgFinishTransactionRequestPB) Reset() {
	*x = PgFinishTransactionRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgFinishTransactionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgFinishTransactionRequestPB) ProtoMessage() {}

func (x *PgFinishTransactionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgFinishTransactionRequestPB.ProtoReflect.Descriptor instead.
func (*PgFinishTransactionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{36}
}

func (x *PgFinishTransactionRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgFinishTransactionRequestPB) GetCommit() bool {
	if x != nil {
		return x.Commit
	}
	return false
}

func (x *PgFinishTransactionRequestPB) GetDdlMode() *PgFinishTransactionRequestPB_DdlModePB {
	if x != nil {
		return x.DdlMode
	}
	return nil
}

func (x *PgFinishTransactionRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgFinishTransactionResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgFinishTransactionResponsePB) Reset() {
	*x = PgFinishTransactionResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgFinishTransactionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgFinishTransactionResponsePB) ProtoMessage() {}

func (x *PgFinishTransactionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgFinishTransactionResponsePB.ProtoReflect.Descriptor instead.
func (*PgFinishTransactionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{37}
}

func (x *PgFinishTransactionResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgGetCatalogMasterVersionResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version       uint64                 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetCatalogMasterVersionResponsePB) Reset() {
	*x = PgGetCatalogMasterVersionResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetCatalogMasterVersionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetCatalogMasterVersionResponsePB) ProtoMessage() {}

func (x *PgGetCatalogMasterVersionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetCatalogMasterVersionResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetCatalogMasterVersionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{38}
}

func (x *PgGetCatalogMasterVersionResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetCatalogMasterVersionResponsePB) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type PgGetDatabaseInfoRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint32                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetDatabaseInfoRequestPB) Reset() {
	*x = PgGetDatabaseInfoRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetDatabaseInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetDatabaseInfoRequestPB) ProtoMessage() {}

func (x *PgGetDatabaseInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetDatabaseInfoRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetDatabaseInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{39}
}

func (x *PgGetDatabaseInfoRequestPB) GetOid() uint32 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type PgGetDatabaseInfoResponsePB struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Status        *common.AppStatusPB                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Info          *master.GetNamespaceInfoResponsePB `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetDatabaseInfoResponsePB) Reset() {
	*x = PgGetDatabaseInfoResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetDatabaseInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetDatabaseInfoResponsePB) ProtoMessage() {}

func (x *PgGetDatabaseInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetDatabaseInfoResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetDatabaseInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{40}
}

func (x *PgGetDatabaseInfoResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetDatabaseInfoResponsePB) GetInfo() *master.GetNamespaceInfoResponsePB {
	if x != nil {
		return x.Info
	}
	return nil
}

type PgIsInitDbDoneRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgIsInitDbDoneRequestPB) Reset() {
	*x = PgIsInitDbDoneRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgIsInitDbDoneRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgIsInitDbDoneRequestPB) ProtoMessage() {}

func (x *PgIsInitDbDoneRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgIsInitDbDoneRequestPB.ProtoReflect.Descriptor instead.
func (*PgIsInitDbDoneRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{41}
}

type PgIsInitDbDoneResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Done          bool                   `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgIsInitDbDoneResponsePB) Reset() {
	*x = PgIsInitDbDoneResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgIsInitDbDoneResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgIsInitDbDoneResponsePB) ProtoMessage() {}

func (x *PgIsInitDbDoneResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgIsInitDbDoneResponsePB.ProtoReflect.Descriptor instead.
func (*PgIsInitDbDoneResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{42}
}

func (x *PgIsInitDbDoneResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgIsInitDbDoneResponsePB) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

type PgGetLockStatusRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The table to scan. If unset, scan all tables
	TableId []byte `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	// If set, only read the locks associated with this txn_id and ignore the fields
	// min_txn_age_ms and max_num_txns.
	TransactionId []byte `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Return lock statuses of transactions with age >= 'min_txn_age_ms'
	MinTxnAgeMs uint32 `protobuf:"varint,3,opt,name=min_txn_age_ms,json=minTxnAgeMs,proto3" json:"min_txn_age_ms,omitempty"`
	// Limit number of old transactions whose lock info is retrieved.
	MaxNumTxns uint32 `protobuf:"varint,4,opt,name=max_num_txns,json=maxNumTxns,proto3" json:"max_num_txns,omitempty"`
	// Limit number of locks returned per transaction at each tablet
	MaxTxnLocksPerTablet uint32                `protobuf:"varint,5,opt,name=max_txn_locks_per_tablet,json=maxTxnLocksPerTablet,proto3" json:"max_txn_locks_per_tablet,omitempty"`
	AshMetadata          *common.AshMetadataPB `protobuf:"bytes,6,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PgGetLockStatusRequestPB) Reset() {
	*x = PgGetLockStatusRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetLockStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetLockStatusRequestPB) ProtoMessage() {}

func (x *PgGetLockStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetLockStatusRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetLockStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{43}
}

func (x *PgGetLockStatusRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgGetLockStatusRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *PgGetLockStatusRequestPB) GetMinTxnAgeMs() uint32 {
	if x != nil {
		return x.MinTxnAgeMs
	}
	return 0
}

func (x *PgGetLockStatusRequestPB) GetMaxNumTxns() uint32 {
	if x != nil {
		return x.MaxNumTxns
	}
	return 0
}

func (x *PgGetLockStatusRequestPB) GetMaxTxnLocksPerTablet() uint32 {
	if x != nil {
		return x.MaxTxnLocksPerTablet
	}
	return 0
}

func (x *PgGetLockStatusRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetLockStatusResponsePB struct {
	state     protoimpl.MessageState                                `protogen:"open.v1"`
	Status    *common.AppStatusPB                                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NodeLocks []*PgGetLockStatusResponsePB_NodeLockStatusResponsePB `protobuf:"bytes,2,rep,name=node_locks,json=nodeLocks,proto3" json:"node_locks,omitempty"`
	// Map of transactions keyed by the host node uuid.
	TransactionsByNode map[string]*PgGetLockStatusResponsePB_TransactionList `protobuf:"bytes,3,rep,name=transactions_by_node,json=transactionsByNode,proto3" json:"transactions_by_node,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PgGetLockStatusResponsePB) Reset() {
	*x = PgGetLockStatusResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetLockStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetLockStatusResponsePB) ProtoMessage() {}

func (x *PgGetLockStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetLockStatusResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetLockStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{44}
}

func (x *PgGetLockStatusResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetLockStatusResponsePB) GetNodeLocks() []*PgGetLockStatusResponsePB_NodeLockStatusResponsePB {
	if x != nil {
		return x.NodeLocks
	}
	return nil
}

func (x *PgGetLockStatusResponsePB) GetTransactionsByNode() map[string]*PgGetLockStatusResponsePB_TransactionList {
	if x != nil {
		return x.TransactionsByNode
	}
	return nil
}

type PgGetReplicationSlotRequestPB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ReplicationSlotName string                 `protobuf:"bytes,1,opt,name=replication_slot_name,json=replicationSlotName,proto3" json:"replication_slot_name,omitempty"`
	AshMetadata         *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PgGetReplicationSlotRequestPB) Reset() {
	*x = PgGetReplicationSlotRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetReplicationSlotRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetReplicationSlotRequestPB) ProtoMessage() {}

func (x *PgGetReplicationSlotRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetReplicationSlotRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetReplicationSlotRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{45}
}

func (x *PgGetReplicationSlotRequestPB) GetReplicationSlotName() string {
	if x != nil {
		return x.ReplicationSlotName
	}
	return ""
}

func (x *PgGetReplicationSlotRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetReplicationSlotResponsePB struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	Status              *common.AppStatusPB      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ReplicationSlotInfo *PgReplicationSlotInfoPB `protobuf:"bytes,2,opt,name=replication_slot_info,json=replicationSlotInfo,proto3" json:"replication_slot_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PgGetReplicationSlotResponsePB) Reset() {
	*x = PgGetReplicationSlotResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetReplicationSlotResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetReplicationSlotResponsePB) ProtoMessage() {}

func (x *PgGetReplicationSlotResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetReplicationSlotResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetReplicationSlotResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{46}
}

func (x *PgGetReplicationSlotResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetReplicationSlotResponsePB) GetReplicationSlotInfo() *PgReplicationSlotInfoPB {
	if x != nil {
		return x.ReplicationSlotInfo
	}
	return nil
}

type PgGetReplicationSlotStatusRequestPB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ReplicationSlotName string                 `protobuf:"bytes,1,opt,name=replication_slot_name,json=replicationSlotName,proto3" json:"replication_slot_name,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PgGetReplicationSlotStatusRequestPB) Reset() {
	*x = PgGetReplicationSlotStatusRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetReplicationSlotStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetReplicationSlotStatusRequestPB) ProtoMessage() {}

func (x *PgGetReplicationSlotStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetReplicationSlotStatusRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetReplicationSlotStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{47}
}

func (x *PgGetReplicationSlotStatusRequestPB) GetReplicationSlotName() string {
	if x != nil {
		return x.ReplicationSlotName
	}
	return ""
}

type PgGetReplicationSlotStatusResponsePB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Status                *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ReplicationSlotStatus ReplicationSlotStatus  `protobuf:"varint,2,opt,name=replication_slot_status,json=replicationSlotStatus,proto3,enum=yb.tserver.ReplicationSlotStatus" json:"replication_slot_status,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PgGetReplicationSlotStatusResponsePB) Reset() {
	*x = PgGetReplicationSlotStatusResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetReplicationSlotStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetReplicationSlotStatusResponsePB) ProtoMessage() {}

func (x *PgGetReplicationSlotStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetReplicationSlotStatusResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetReplicationSlotStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{48}
}

func (x *PgGetReplicationSlotStatusResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetReplicationSlotStatusResponsePB) GetReplicationSlotStatus() ReplicationSlotStatus {
	if x != nil {
		return x.ReplicationSlotStatus
	}
	return ReplicationSlotStatus_ACTIVE
}

type PgListLiveTabletServersRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrimaryOnly   bool                   `protobuf:"varint,1,opt,name=primary_only,json=primaryOnly,proto3" json:"primary_only,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgListLiveTabletServersRequestPB) Reset() {
	*x = PgListLiveTabletServersRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgListLiveTabletServersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgListLiveTabletServersRequestPB) ProtoMessage() {}

func (x *PgListLiveTabletServersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgListLiveTabletServersRequestPB.ProtoReflect.Descriptor instead.
func (*PgListLiveTabletServersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{49}
}

func (x *PgListLiveTabletServersRequestPB) GetPrimaryOnly() bool {
	if x != nil {
		return x.PrimaryOnly
	}
	return false
}

func (x *PgListLiveTabletServersRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgLiveTabletServerPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Hostname      string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	PlacementUuid string                 `protobuf:"bytes,3,opt,name=placement_uuid,json=placementUuid,proto3" json:"placement_uuid,omitempty"`
	Cloud         string                 `protobuf:"bytes,4,opt,name=cloud,proto3" json:"cloud,omitempty"`
	Region        string                 `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Zone          string                 `protobuf:"bytes,6,opt,name=zone,proto3" json:"zone,omitempty"`
	IsPrimary     bool                   `protobuf:"varint,7,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	PublicIp      string                 `protobuf:"bytes,8,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	PgPort        uint32                 `protobuf:"varint,9,opt,name=pg_port,json=pgPort,proto3" json:"pg_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgLiveTabletServerPB) Reset() {
	*x = PgLiveTabletServerPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgLiveTabletServerPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgLiveTabletServerPB) ProtoMessage() {}

func (x *PgLiveTabletServerPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgLiveTabletServerPB.ProtoReflect.Descriptor instead.
func (*PgLiveTabletServerPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{50}
}

func (x *PgLiveTabletServerPB) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PgLiveTabletServerPB) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PgLiveTabletServerPB) GetPlacementUuid() string {
	if x != nil {
		return x.PlacementUuid
	}
	return ""
}

func (x *PgLiveTabletServerPB) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *PgLiveTabletServerPB) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PgLiveTabletServerPB) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *PgLiveTabletServerPB) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *PgLiveTabletServerPB) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *PgLiveTabletServerPB) GetPgPort() uint32 {
	if x != nil {
		return x.PgPort
	}
	return 0
}

type PgGetIndexBackfillProgressRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexIds      []*PgObjectIdPB        `protobuf:"bytes,1,rep,name=index_ids,json=indexIds,proto3" json:"index_ids,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetIndexBackfillProgressRequestPB) Reset() {
	*x = PgGetIndexBackfillProgressRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetIndexBackfillProgressRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetIndexBackfillProgressRequestPB) ProtoMessage() {}

func (x *PgGetIndexBackfillProgressRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetIndexBackfillProgressRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetIndexBackfillProgressRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{51}
}

func (x *PgGetIndexBackfillProgressRequestPB) GetIndexIds() []*PgObjectIdPB {
	if x != nil {
		return x.IndexIds
	}
	return nil
}

func (x *PgGetIndexBackfillProgressRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetIndexBackfillProgressResponsePB struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The ordering of the indexes' results here is expected to be the same as the ordering in the
	// corresponding request PB (PgGetIndexBackfillProgressRequestPB).
	RowsProcessedEntries []uint64 `protobuf:"varint,2,rep,packed,name=rows_processed_entries,json=rowsProcessedEntries,proto3" json:"rows_processed_entries,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PgGetIndexBackfillProgressResponsePB) Reset() {
	*x = PgGetIndexBackfillProgressResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetIndexBackfillProgressResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetIndexBackfillProgressResponsePB) ProtoMessage() {}

func (x *PgGetIndexBackfillProgressResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetIndexBackfillProgressResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetIndexBackfillProgressResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{52}
}

func (x *PgGetIndexBackfillProgressResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetIndexBackfillProgressResponsePB) GetRowsProcessedEntries() []uint64 {
	if x != nil {
		return x.RowsProcessedEntries
	}
	return nil
}

type PgListLiveTabletServersResponsePB struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        *common.AppStatusPB     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Servers       []*PgLiveTabletServerPB `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgListLiveTabletServersResponsePB) Reset() {
	*x = PgListLiveTabletServersResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgListLiveTabletServersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgListLiveTabletServersResponsePB) ProtoMessage() {}

func (x *PgListLiveTabletServersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgListLiveTabletServersResponsePB.ProtoReflect.Descriptor instead.
func (*PgListLiveTabletServersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{53}
}

func (x *PgListLiveTabletServersResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgListLiveTabletServersResponsePB) GetServers() []*PgLiveTabletServerPB {
	if x != nil {
		return x.Servers
	}
	return nil
}

type PgListReplicationSlotsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,1,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgListReplicationSlotsRequestPB) Reset() {
	*x = PgListReplicationSlotsRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgListReplicationSlotsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgListReplicationSlotsRequestPB) ProtoMessage() {}

func (x *PgListReplicationSlotsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgListReplicationSlotsRequestPB.ProtoReflect.Descriptor instead.
func (*PgListReplicationSlotsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{54}
}

func (x *PgListReplicationSlotsRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgReplicationSlotInfoPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SlotName              string                 `protobuf:"bytes,1,opt,name=slot_name,json=slotName,proto3" json:"slot_name,omitempty"`
	StreamId              []byte                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	DatabaseOid           uint32                 `protobuf:"varint,3,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	ReplicationSlotStatus ReplicationSlotStatus  `protobuf:"varint,4,opt,name=replication_slot_status,json=replicationSlotStatus,proto3,enum=yb.tserver.ReplicationSlotStatus" json:"replication_slot_status,omitempty"`
	ConfirmedFlushLsn     uint64                 `protobuf:"varint,5,opt,name=confirmed_flush_lsn,json=confirmedFlushLsn,proto3" json:"confirmed_flush_lsn,omitempty"`
	RestartLsn            uint64                 `protobuf:"varint,6,opt,name=restart_lsn,json=restartLsn,proto3" json:"restart_lsn,omitempty"`
	Xmin                  uint32                 `protobuf:"varint,7,opt,name=xmin,proto3" json:"xmin,omitempty"`
	// This map stores the replica identity for each table in the stream at the time of stream
	// creation. The key for this map is table_oid and the value is replica identity for that table.
	ReplicaIdentityMap   map[uint32]*PgReplicaIdentityPB `protobuf:"bytes,8,rep,name=replica_identity_map,json=replicaIdentityMap,proto3" json:"replica_identity_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RecordIdCommitTimeHt uint64                          `protobuf:"varint,9,opt,name=record_id_commit_time_ht,json=recordIdCommitTimeHt,proto3" json:"record_id_commit_time_ht,omitempty"`
	LastPubRefreshTime   uint64                          `protobuf:"varint,10,opt,name=last_pub_refresh_time,json=lastPubRefreshTime,proto3" json:"last_pub_refresh_time,omitempty"`
	OutputPluginName     string                          `protobuf:"bytes,11,opt,name=output_plugin_name,json=outputPluginName,proto3" json:"output_plugin_name,omitempty"`
	YbLsnType            PGReplicationSlotLsnType        `protobuf:"varint,12,opt,name=yb_lsn_type,json=ybLsnType,proto3,enum=yb.tserver.PGReplicationSlotLsnType" json:"yb_lsn_type,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PgReplicationSlotInfoPB) Reset() {
	*x = PgReplicationSlotInfoPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgReplicationSlotInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgReplicationSlotInfoPB) ProtoMessage() {}

func (x *PgReplicationSlotInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgReplicationSlotInfoPB.ProtoReflect.Descriptor instead.
func (*PgReplicationSlotInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{55}
}

func (x *PgReplicationSlotInfoPB) GetSlotName() string {
	if x != nil {
		return x.SlotName
	}
	return ""
}

func (x *PgReplicationSlotInfoPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *PgReplicationSlotInfoPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgReplicationSlotInfoPB) GetReplicationSlotStatus() ReplicationSlotStatus {
	if x != nil {
		return x.ReplicationSlotStatus
	}
	return ReplicationSlotStatus_ACTIVE
}

func (x *PgReplicationSlotInfoPB) GetConfirmedFlushLsn() uint64 {
	if x != nil {
		return x.ConfirmedFlushLsn
	}
	return 0
}

func (x *PgReplicationSlotInfoPB) GetRestartLsn() uint64 {
	if x != nil {
		return x.RestartLsn
	}
	return 0
}

func (x *PgReplicationSlotInfoPB) GetXmin() uint32 {
	if x != nil {
		return x.Xmin
	}
	return 0
}

func (x *PgReplicationSlotInfoPB) GetReplicaIdentityMap() map[uint32]*PgReplicaIdentityPB {
	if x != nil {
		return x.ReplicaIdentityMap
	}
	return nil
}

func (x *PgReplicationSlotInfoPB) GetRecordIdCommitTimeHt() uint64 {
	if x != nil {
		return x.RecordIdCommitTimeHt
	}
	return 0
}

func (x *PgReplicationSlotInfoPB) GetLastPubRefreshTime() uint64 {
	if x != nil {
		return x.LastPubRefreshTime
	}
	return 0
}

func (x *PgReplicationSlotInfoPB) GetOutputPluginName() string {
	if x != nil {
		return x.OutputPluginName
	}
	return ""
}

func (x *PgReplicationSlotInfoPB) GetYbLsnType() PGReplicationSlotLsnType {
	if x != nil {
		return x.YbLsnType
	}
	return PGReplicationSlotLsnType_ReplicationSlotLsnTypePg_UNDEFINED
}

type PgListReplicationSlotsResponsePB struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	Status           *common.AppStatusPB        `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ReplicationSlots []*PgReplicationSlotInfoPB `protobuf:"bytes,2,rep,name=replication_slots,json=replicationSlots,proto3" json:"replication_slots,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PgListReplicationSlotsResponsePB) Reset() {
	*x = PgListReplicationSlotsResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgListReplicationSlotsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgListReplicationSlotsResponsePB) ProtoMessage() {}

func (x *PgListReplicationSlotsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgListReplicationSlotsResponsePB.ProtoReflect.Descriptor instead.
func (*PgListReplicationSlotsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{56}
}

func (x *PgListReplicationSlotsResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgListReplicationSlotsResponsePB) GetReplicationSlots() []*PgReplicationSlotInfoPB {
	if x != nil {
		return x.ReplicationSlots
	}
	return nil
}

type PgOpenTableRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TableId               string                 `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Reopen                bool                   `protobuf:"varint,2,opt,name=reopen,proto3" json:"reopen,omitempty"`
	InvalidateCacheTimeUs uint64                 `protobuf:"fixed64,3,opt,name=invalidate_cache_time_us,json=invalidateCacheTimeUs,proto3" json:"invalidate_cache_time_us,omitempty"`
	// Allows a hidden table to be opened.
	// Hidden table is a dropped table retained in DocDB for PITR, CLONE, AS-OF.
	IncludeHidden bool                  `protobuf:"varint,4,opt,name=include_hidden,json=includeHidden,proto3" json:"include_hidden,omitempty"`
	AshMetadata   *common.AshMetadataPB `protobuf:"bytes,5,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgOpenTableRequestPB) Reset() {
	*x = PgOpenTableRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgOpenTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgOpenTableRequestPB) ProtoMessage() {}

func (x *PgOpenTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgOpenTableRequestPB.ProtoReflect.Descriptor instead.
func (*PgOpenTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{57}
}

func (x *PgOpenTableRequestPB) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *PgOpenTableRequestPB) GetReopen() bool {
	if x != nil {
		return x.Reopen
	}
	return false
}

func (x *PgOpenTableRequestPB) GetInvalidateCacheTimeUs() uint64 {
	if x != nil {
		return x.InvalidateCacheTimeUs
	}
	return 0
}

func (x *PgOpenTableRequestPB) GetIncludeHidden() bool {
	if x != nil {
		return x.IncludeHidden
	}
	return false
}

func (x *PgOpenTableRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgTablePartitionsPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       uint32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Keys          [][]byte               `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgTablePartitionsPB) Reset() {
	*x = PgTablePartitionsPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTablePartitionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTablePartitionsPB) ProtoMessage() {}

func (x *PgTablePartitionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTablePartitionsPB.ProtoReflect.Descriptor instead.
func (*PgTablePartitionsPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{58}
}

func (x *PgTablePartitionsPB) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PgTablePartitionsPB) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PgOpenTableResponsePB struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Status        *common.AppStatusPB              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Info          *master.GetTableSchemaResponsePB `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Partitions    *PgTablePartitionsPB             `protobuf:"bytes,3,opt,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgOpenTableResponsePB) Reset() {
	*x = PgOpenTableResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgOpenTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgOpenTableResponsePB) ProtoMessage() {}

func (x *PgOpenTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgOpenTableResponsePB.ProtoReflect.Descriptor instead.
func (*PgOpenTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{59}
}

func (x *PgOpenTableResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgOpenTableResponsePB) GetInfo() *master.GetTableSchemaResponsePB {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *PgOpenTableResponsePB) GetPartitions() *PgTablePartitionsPB {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type PgGetTablePartitionListRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       string                 `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetTablePartitionListRequestPB) Reset() {
	*x = PgGetTablePartitionListRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTablePartitionListRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTablePartitionListRequestPB) ProtoMessage() {}

func (x *PgGetTablePartitionListRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTablePartitionListRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetTablePartitionListRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{60}
}

func (x *PgGetTablePartitionListRequestPB) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *PgGetTablePartitionListRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetTablePartitionListResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Partitions    *PgTablePartitionsPB   `protobuf:"bytes,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetTablePartitionListResponsePB) Reset() {
	*x = PgGetTablePartitionListResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTablePartitionListResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTablePartitionListResponsePB) ProtoMessage() {}

func (x *PgGetTablePartitionListResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTablePartitionListResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetTablePartitionListResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{61}
}

func (x *PgGetTablePartitionListResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetTablePartitionListResponsePB) GetPartitions() *PgTablePartitionsPB {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type PgPerformOpPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Op:
	//
	//	*PgPerformOpPB_Write
	//	*PgPerformOpPB_Read
	Op                isPgPerformOpPB_Op `protobuf_oneof:"op"`
	ReadFromFollowers bool               `protobuf:"varint,3,opt,name=read_from_followers,json=readFromFollowers,proto3" json:"read_from_followers,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PgPerformOpPB) Reset() {
	*x = PgPerformOpPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgPerformOpPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgPerformOpPB) ProtoMessage() {}

func (x *PgPerformOpPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgPerformOpPB.ProtoReflect.Descriptor instead.
func (*PgPerformOpPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{62}
}

func (x *PgPerformOpPB) GetOp() isPgPerformOpPB_Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *PgPerformOpPB) GetWrite() *common.PgsqlWriteRequestPB {
	if x != nil {
		if x, ok := x.Op.(*PgPerformOpPB_Write); ok {
			return x.Write
		}
	}
	return nil
}

func (x *PgPerformOpPB) GetRead() *common.PgsqlReadRequestPB {
	if x != nil {
		if x, ok := x.Op.(*PgPerformOpPB_Read); ok {
			return x.Read
		}
	}
	return nil
}

func (x *PgPerformOpPB) GetReadFromFollowers() bool {
	if x != nil {
		return x.ReadFromFollowers
	}
	return false
}

type isPgPerformOpPB_Op interface {
	isPgPerformOpPB_Op()
}

type PgPerformOpPB_Write struct {
	Write *common.PgsqlWriteRequestPB `protobuf:"bytes,1,opt,name=write,proto3,oneof"`
}

type PgPerformOpPB_Read struct {
	Read *common.PgsqlReadRequestPB `protobuf:"bytes,2,opt,name=read,proto3,oneof"`
}

func (*PgPerformOpPB_Write) isPgPerformOpPB_Op() {}

func (*PgPerformOpPB_Read) isPgPerformOpPB_Op() {}

type PgPerformOptionsPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cannot use IsolationLevel enum, since we cannot use proto2 enum in proto3 messages.
	// Replace with IsolationLevel after migration to proto3.
	Isolation        uint32 `protobuf:"varint,2,opt,name=isolation,proto3" json:"isolation,omitempty"`
	DdlMode          bool   `protobuf:"varint,3,opt,name=ddl_mode,json=ddlMode,proto3" json:"ddl_mode,omitempty"`
	TxnSerialNo      uint64 `protobuf:"varint,4,opt,name=txn_serial_no,json=txnSerialNo,proto3" json:"txn_serial_no,omitempty"`
	ReadTimeSerialNo uint64 `protobuf:"varint,20,opt,name=read_time_serial_no,json=readTimeSerialNo,proto3" json:"read_time_serial_no,omitempty"`
	// See ReadHybridTimePB for information about in_txn_limit_ht.
	InTxnLimitHt                   *OptionalFixed64PB                `protobuf:"bytes,5,opt,name=in_txn_limit_ht,json=inTxnLimitHt,proto3" json:"in_txn_limit_ht,omitempty"`
	UseExistingPriority            bool                              `protobuf:"varint,6,opt,name=use_existing_priority,json=useExistingPriority,proto3" json:"use_existing_priority,omitempty"`
	Priority                       uint64                            `protobuf:"fixed64,7,opt,name=priority,proto3" json:"priority,omitempty"`
	RestartTransaction             bool                              `protobuf:"varint,8,opt,name=restart_transaction,json=restartTransaction,proto3" json:"restart_transaction,omitempty"`
	DeferReadPoint                 bool                              `protobuf:"varint,9,opt,name=defer_read_point,json=deferReadPoint,proto3" json:"defer_read_point,omitempty"`
	ReadTimeManipulation           ReadTimeManipulation              `protobuf:"varint,10,opt,name=read_time_manipulation,json=readTimeManipulation,proto3,enum=yb.tserver.ReadTimeManipulation" json:"read_time_manipulation,omitempty"`
	ReadTime                       *common.ReadHybridTimePB          `protobuf:"bytes,11,opt,name=read_time,json=readTime,proto3" json:"read_time,omitempty"`
	UseCatalogSession              bool                              `protobuf:"varint,12,opt,name=use_catalog_session,json=useCatalogSession,proto3" json:"use_catalog_session,omitempty"`
	ForceGlobalTransaction         bool                              `protobuf:"varint,13,opt,name=force_global_transaction,json=forceGlobalTransaction,proto3" json:"force_global_transaction,omitempty"`
	NamespaceId                    string                            `protobuf:"bytes,14,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	UseXclusterDatabaseConsistency bool                              `protobuf:"varint,15,opt,name=use_xcluster_database_consistency,json=useXclusterDatabaseConsistency,proto3" json:"use_xcluster_database_consistency,omitempty"`
	ActiveSubTransactionId         uint32                            `protobuf:"varint,16,opt,name=active_sub_transaction_id,json=activeSubTransactionId,proto3" json:"active_sub_transaction_id,omitempty"`
	CachingInfo                    *PgPerformOptionsPB_CachingInfoPB `protobuf:"bytes,17,opt,name=caching_info,json=cachingInfo,proto3" json:"caching_info,omitempty"`
	ReadFromFollowers              bool                              `protobuf:"varint,18,opt,name=read_from_followers,json=readFromFollowers,proto3" json:"read_from_followers,omitempty"`
	TraceRequested                 bool                              `protobuf:"varint,19,opt,name=trace_requested,json=traceRequested,proto3" json:"trace_requested,omitempty"`
	YbNonDdlTxnForSysTablesAllowed bool                              `protobuf:"varint,21,opt,name=yb_non_ddl_txn_for_sys_tables_allowed,json=ybNonDdlTxnForSysTablesAllowed,proto3" json:"yb_non_ddl_txn_for_sys_tables_allowed,omitempty"`
	PgTxnStartUs                   int64                             `protobuf:"varint,22,opt,name=pg_txn_start_us,json=pgTxnStartUs,proto3" json:"pg_txn_start_us,omitempty"`
	AshMetadata                    *common.AshMetadataPB             `protobuf:"bytes,23,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	// When set,
	// - Sets the read time locally.
	// - Clamps the read uncertainty window.
	// See the commit desc for more info.
	ClampUncertaintyWindow bool `protobuf:"varint,24,opt,name=clamp_uncertainty_window,json=clampUncertaintyWindow,proto3" json:"clamp_uncertainty_window,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PgPerformOptionsPB) Reset() {
	*x = PgPerformOptionsPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgPerformOptionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgPerformOptionsPB) ProtoMessage() {}

func (x *PgPerformOptionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgPerformOptionsPB.ProtoReflect.Descriptor instead.
func (*PgPerformOptionsPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{63}
}

func (x *PgPerformOptionsPB) GetIsolation() uint32 {
	if x != nil {
		return x.Isolation
	}
	return 0
}

func (x *PgPerformOptionsPB) GetDdlMode() bool {
	if x != nil {
		return x.DdlMode
	}
	return false
}

func (x *PgPerformOptionsPB) GetTxnSerialNo() uint64 {
	if x != nil {
		return x.TxnSerialNo
	}
	return 0
}

func (x *PgPerformOptionsPB) GetReadTimeSerialNo() uint64 {
	if x != nil {
		return x.ReadTimeSerialNo
	}
	return 0
}

func (x *PgPerformOptionsPB) GetInTxnLimitHt() *OptionalFixed64PB {
	if x != nil {
		return x.InTxnLimitHt
	}
	return nil
}

func (x *PgPerformOptionsPB) GetUseExistingPriority() bool {
	if x != nil {
		return x.UseExistingPriority
	}
	return false
}

func (x *PgPerformOptionsPB) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PgPerformOptionsPB) GetRestartTransaction() bool {
	if x != nil {
		return x.RestartTransaction
	}
	return false
}

func (x *PgPerformOptionsPB) GetDeferReadPoint() bool {
	if x != nil {
		return x.DeferReadPoint
	}
	return false
}

func (x *PgPerformOptionsPB) GetReadTimeManipulation() ReadTimeManipulation {
	if x != nil {
		return x.ReadTimeManipulation
	}
	return ReadTimeManipulation_NONE
}

func (x *PgPerformOptionsPB) GetReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

func (x *PgPerformOptionsPB) GetUseCatalogSession() bool {
	if x != nil {
		return x.UseCatalogSession
	}
	return false
}

func (x *PgPerformOptionsPB) GetForceGlobalTransaction() bool {
	if x != nil {
		return x.ForceGlobalTransaction
	}
	return false
}

func (x *PgPerformOptionsPB) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *PgPerformOptionsPB) GetUseXclusterDatabaseConsistency() bool {
	if x != nil {
		return x.UseXclusterDatabaseConsistency
	}
	return false
}

func (x *PgPerformOptionsPB) GetActiveSubTransactionId() uint32 {
	if x != nil {
		return x.ActiveSubTransactionId
	}
	return 0
}

func (x *PgPerformOptionsPB) GetCachingInfo() *PgPerformOptionsPB_CachingInfoPB {
	if x != nil {
		return x.CachingInfo
	}
	return nil
}

func (x *PgPerformOptionsPB) GetReadFromFollowers() bool {
	if x != nil {
		return x.ReadFromFollowers
	}
	return false
}

func (x *PgPerformOptionsPB) GetTraceRequested() bool {
	if x != nil {
		return x.TraceRequested
	}
	return false
}

func (x *PgPerformOptionsPB) GetYbNonDdlTxnForSysTablesAllowed() bool {
	if x != nil {
		return x.YbNonDdlTxnForSysTablesAllowed
	}
	return false
}

func (x *PgPerformOptionsPB) GetPgTxnStartUs() int64 {
	if x != nil {
		return x.PgTxnStartUs
	}
	return 0
}

func (x *PgPerformOptionsPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

func (x *PgPerformOptionsPB) GetClampUncertaintyWindow() bool {
	if x != nil {
		return x.ClampUncertaintyWindow
	}
	return false
}

type PgPerformRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Options       *PgPerformOptionsPB    `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	Ops           []*PgPerformOpPB       `protobuf:"bytes,3,rep,name=ops,proto3" json:"ops,omitempty"`
	WriteTime     uint64                 `protobuf:"fixed64,4,opt,name=write_time,json=writeTime,proto3" json:"write_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgPerformRequestPB) Reset() {
	*x = PgPerformRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgPerformRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgPerformRequestPB) ProtoMessage() {}

func (x *PgPerformRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgPerformRequestPB.ProtoReflect.Descriptor instead.
func (*PgPerformRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{64}
}

func (x *PgPerformRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgPerformRequestPB) GetOptions() *PgPerformOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PgPerformRequestPB) GetOps() []*PgPerformOpPB {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *PgPerformRequestPB) GetWriteTime() uint64 {
	if x != nil {
		return x.WriteTime
	}
	return 0
}

type PgPerformResponsePB struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Status           *common.AppStatusPB       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Responses        []*common.PgsqlResponsePB `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	CatalogReadTime  *common.ReadHybridTimePB  `protobuf:"bytes,3,opt,name=catalog_read_time,json=catalogReadTime,proto3" json:"catalog_read_time,omitempty"`
	UsedInTxnLimitHt uint64                    `protobuf:"fixed64,4,opt,name=used_in_txn_limit_ht,json=usedInTxnLimitHt,proto3" json:"used_in_txn_limit_ht,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PgPerformResponsePB) Reset() {
	*x = PgPerformResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgPerformResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgPerformResponsePB) ProtoMessage() {}

func (x *PgPerformResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgPerformResponsePB.ProtoReflect.Descriptor instead.
func (*PgPerformResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{65}
}

func (x *PgPerformResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgPerformResponsePB) GetResponses() []*common.PgsqlResponsePB {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *PgPerformResponsePB) GetCatalogReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.CatalogReadTime
	}
	return nil
}

func (x *PgPerformResponsePB) GetUsedInTxnLimitHt() uint64 {
	if x != nil {
		return x.UsedInTxnLimitHt
	}
	return 0
}

type PgReserveOidsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatabaseOid   uint32                 `protobuf:"varint,1,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	NextOid       uint32                 `protobuf:"varint,2,opt,name=next_oid,json=nextOid,proto3" json:"next_oid,omitempty"`
	Count         uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgReserveOidsRequestPB) Reset() {
	*x = PgReserveOidsRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgReserveOidsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgReserveOidsRequestPB) ProtoMessage() {}

func (x *PgReserveOidsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgReserveOidsRequestPB.ProtoReflect.Descriptor instead.
func (*PgReserveOidsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{66}
}

func (x *PgReserveOidsRequestPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgReserveOidsRequestPB) GetNextOid() uint32 {
	if x != nil {
		return x.NextOid
	}
	return 0
}

func (x *PgReserveOidsRequestPB) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PgReserveOidsRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgReserveOidsResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BeginOid      uint32                 `protobuf:"varint,2,opt,name=begin_oid,json=beginOid,proto3" json:"begin_oid,omitempty"`
	EndOid        uint32                 `protobuf:"varint,3,opt,name=end_oid,json=endOid,proto3" json:"end_oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgReserveOidsResponsePB) Reset() {
	*x = PgReserveOidsResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgReserveOidsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgReserveOidsResponsePB) ProtoMessage() {}

func (x *PgReserveOidsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgReserveOidsResponsePB.ProtoReflect.Descriptor instead.
func (*PgReserveOidsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{67}
}

func (x *PgReserveOidsResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgReserveOidsResponsePB) GetBeginOid() uint32 {
	if x != nil {
		return x.BeginOid
	}
	return 0
}

func (x *PgReserveOidsResponsePB) GetEndOid() uint32 {
	if x != nil {
		return x.EndOid
	}
	return 0
}

type PgRollbackToSubTransactionRequestPB struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SubTransactionId uint32                 `protobuf:"varint,2,opt,name=sub_transaction_id,json=subTransactionId,proto3" json:"sub_transaction_id,omitempty"`
	Options          *PgPerformOptionsPB    `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	AshMetadata      *common.AshMetadataPB  `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PgRollbackToSubTransactionRequestPB) Reset() {
	*x = PgRollbackToSubTransactionRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgRollbackToSubTransactionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgRollbackToSubTransactionRequestPB) ProtoMessage() {}

func (x *PgRollbackToSubTransactionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgRollbackToSubTransactionRequestPB.ProtoReflect.Descriptor instead.
func (*PgRollbackToSubTransactionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{68}
}

func (x *PgRollbackToSubTransactionRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgRollbackToSubTransactionRequestPB) GetSubTransactionId() uint32 {
	if x != nil {
		return x.SubTransactionId
	}
	return 0
}

func (x *PgRollbackToSubTransactionRequestPB) GetOptions() *PgPerformOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PgRollbackToSubTransactionRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgRollbackToSubTransactionResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgRollbackToSubTransactionResponsePB) Reset() {
	*x = PgRollbackToSubTransactionResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgRollbackToSubTransactionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgRollbackToSubTransactionResponsePB) ProtoMessage() {}

func (x *PgRollbackToSubTransactionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgRollbackToSubTransactionResponsePB.ProtoReflect.Descriptor instead.
func (*PgRollbackToSubTransactionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{69}
}

func (x *PgRollbackToSubTransactionResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

// DEPRECATED
type PgSetActiveSubTransactionRequestPB struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SubTransactionId uint32                 `protobuf:"varint,2,opt,name=sub_transaction_id,json=subTransactionId,proto3" json:"sub_transaction_id,omitempty"`
	// Used to create transaction when we did not have one yet.
	Options       *PgPerformOptionsPB `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgSetActiveSubTransactionRequestPB) Reset() {
	*x = PgSetActiveSubTransactionRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgSetActiveSubTransactionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgSetActiveSubTransactionRequestPB) ProtoMessage() {}

func (x *PgSetActiveSubTransactionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgSetActiveSubTransactionRequestPB.ProtoReflect.Descriptor instead.
func (*PgSetActiveSubTransactionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{70}
}

func (x *PgSetActiveSubTransactionRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgSetActiveSubTransactionRequestPB) GetSubTransactionId() uint32 {
	if x != nil {
		return x.SubTransactionId
	}
	return 0
}

func (x *PgSetActiveSubTransactionRequestPB) GetOptions() *PgPerformOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

// DEPRECATED
type PgSetActiveSubTransactionResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgSetActiveSubTransactionResponsePB) Reset() {
	*x = PgSetActiveSubTransactionResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgSetActiveSubTransactionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgSetActiveSubTransactionResponsePB) ProtoMessage() {}

func (x *PgSetActiveSubTransactionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgSetActiveSubTransactionResponsePB.ProtoReflect.Descriptor instead.
func (*PgSetActiveSubTransactionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{71}
}

func (x *PgSetActiveSubTransactionResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgTabletServerCountRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PrimaryOnly   bool                   `protobuf:"varint,1,opt,name=primary_only,json=primaryOnly,proto3" json:"primary_only,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgTabletServerCountRequestPB) Reset() {
	*x = PgTabletServerCountRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTabletServerCountRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTabletServerCountRequestPB) ProtoMessage() {}

func (x *PgTabletServerCountRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTabletServerCountRequestPB.ProtoReflect.Descriptor instead.
func (*PgTabletServerCountRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{72}
}

func (x *PgTabletServerCountRequestPB) GetPrimaryOnly() bool {
	if x != nil {
		return x.PrimaryOnly
	}
	return false
}

func (x *PgTabletServerCountRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgTabletServerCountResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgTabletServerCountResponsePB) Reset() {
	*x = PgTabletServerCountResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTabletServerCountResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTabletServerCountResponsePB) ProtoMessage() {}

func (x *PgTabletServerCountResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTabletServerCountResponsePB.ProtoReflect.Descriptor instead.
func (*PgTabletServerCountResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{73}
}

func (x *PgTabletServerCountResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgTabletServerCountResponsePB) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PgTruncateTableRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TableId       *PgObjectIdPB          `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgTruncateTableRequestPB) Reset() {
	*x = PgTruncateTableRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTruncateTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTruncateTableRequestPB) ProtoMessage() {}

func (x *PgTruncateTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTruncateTableRequestPB.ProtoReflect.Descriptor instead.
func (*PgTruncateTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{74}
}

func (x *PgTruncateTableRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgTruncateTableRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgTruncateTableRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgTruncateTableResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgTruncateTableResponsePB) Reset() {
	*x = PgTruncateTableResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTruncateTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTruncateTableResponsePB) ProtoMessage() {}

func (x *PgTruncateTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTruncateTableResponsePB.ProtoReflect.Descriptor instead.
func (*PgTruncateTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{75}
}

func (x *PgTruncateTableResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgPlacementInfoPB struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Cloud            string                 `protobuf:"bytes,1,opt,name=cloud,proto3" json:"cloud,omitempty"`
	Region           string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Zone             string                 `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	MinNumReplicas   int32                  `protobuf:"varint,4,opt,name=min_num_replicas,json=minNumReplicas,proto3" json:"min_num_replicas,omitempty"`
	LeaderPreference int32                  `protobuf:"varint,5,opt,name=leader_preference,json=leaderPreference,proto3" json:"leader_preference,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PgPlacementInfoPB) Reset() {
	*x = PgPlacementInfoPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgPlacementInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgPlacementInfoPB) ProtoMessage() {}

func (x *PgPlacementInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgPlacementInfoPB.ProtoReflect.Descriptor instead.
func (*PgPlacementInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{76}
}

func (x *PgPlacementInfoPB) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *PgPlacementInfoPB) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PgPlacementInfoPB) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *PgPlacementInfoPB) GetMinNumReplicas() int32 {
	if x != nil {
		return x.MinNumReplicas
	}
	return 0
}

func (x *PgPlacementInfoPB) GetLeaderPreference() int32 {
	if x != nil {
		return x.LeaderPreference
	}
	return 0
}

type PgValidatePlacementRequestPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SessionId      uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	NumReplicas    int32                  `protobuf:"varint,2,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	PlacementInfos []*PgPlacementInfoPB   `protobuf:"bytes,3,rep,name=placement_infos,json=placementInfos,proto3" json:"placement_infos,omitempty"`
	AshMetadata    *common.AshMetadataPB  `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgValidatePlacementRequestPB) Reset() {
	*x = PgValidatePlacementRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgValidatePlacementRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgValidatePlacementRequestPB) ProtoMessage() {}

func (x *PgValidatePlacementRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgValidatePlacementRequestPB.ProtoReflect.Descriptor instead.
func (*PgValidatePlacementRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{77}
}

func (x *PgValidatePlacementRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgValidatePlacementRequestPB) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *PgValidatePlacementRequestPB) GetPlacementInfos() []*PgPlacementInfoPB {
	if x != nil {
		return x.PlacementInfos
	}
	return nil
}

func (x *PgValidatePlacementRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgValidatePlacementResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgValidatePlacementResponsePB) Reset() {
	*x = PgValidatePlacementResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgValidatePlacementResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgValidatePlacementResponsePB) ProtoMessage() {}

func (x *PgValidatePlacementResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgValidatePlacementResponsePB.ProtoReflect.Descriptor instead.
func (*PgValidatePlacementResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{78}
}

func (x *PgValidatePlacementResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgInsertSequenceTupleRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SessionId            uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DbOid                int64                  `protobuf:"varint,2,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	SeqOid               int64                  `protobuf:"varint,3,opt,name=seq_oid,json=seqOid,proto3" json:"seq_oid,omitempty"`
	YsqlCatalogVersion   uint64                 `protobuf:"varint,4,opt,name=ysql_catalog_version,json=ysqlCatalogVersion,proto3" json:"ysql_catalog_version,omitempty"`
	YsqlDbCatalogVersion uint64                 `protobuf:"varint,7,opt,name=ysql_db_catalog_version,json=ysqlDbCatalogVersion,proto3" json:"ysql_db_catalog_version,omitempty"`
	LastVal              int64                  `protobuf:"varint,5,opt,name=last_val,json=lastVal,proto3" json:"last_val,omitempty"`
	IsCalled             bool                   `protobuf:"varint,6,opt,name=is_called,json=isCalled,proto3" json:"is_called,omitempty"`
	AshMetadata          *common.AshMetadataPB  `protobuf:"bytes,8,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PgInsertSequenceTupleRequestPB) Reset() {
	*x = PgInsertSequenceTupleRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgInsertSequenceTupleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgInsertSequenceTupleRequestPB) ProtoMessage() {}

func (x *PgInsertSequenceTupleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgInsertSequenceTupleRequestPB.ProtoReflect.Descriptor instead.
func (*PgInsertSequenceTupleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{79}
}

func (x *PgInsertSequenceTupleRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgInsertSequenceTupleRequestPB) GetDbOid() int64 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgInsertSequenceTupleRequestPB) GetSeqOid() int64 {
	if x != nil {
		return x.SeqOid
	}
	return 0
}

func (x *PgInsertSequenceTupleRequestPB) GetYsqlCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlCatalogVersion
	}
	return 0
}

func (x *PgInsertSequenceTupleRequestPB) GetYsqlDbCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlDbCatalogVersion
	}
	return 0
}

func (x *PgInsertSequenceTupleRequestPB) GetLastVal() int64 {
	if x != nil {
		return x.LastVal
	}
	return 0
}

func (x *PgInsertSequenceTupleRequestPB) GetIsCalled() bool {
	if x != nil {
		return x.IsCalled
	}
	return false
}

func (x *PgInsertSequenceTupleRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgInsertSequenceTupleResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgInsertSequenceTupleResponsePB) Reset() {
	*x = PgInsertSequenceTupleResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgInsertSequenceTupleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgInsertSequenceTupleResponsePB) ProtoMessage() {}

func (x *PgInsertSequenceTupleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgInsertSequenceTupleResponsePB.ProtoReflect.Descriptor instead.
func (*PgInsertSequenceTupleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{80}
}

func (x *PgInsertSequenceTupleResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgUpdateSequenceTupleRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SessionId            uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DbOid                int64                  `protobuf:"varint,2,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	SeqOid               int64                  `protobuf:"varint,3,opt,name=seq_oid,json=seqOid,proto3" json:"seq_oid,omitempty"`
	YsqlCatalogVersion   uint64                 `protobuf:"varint,4,opt,name=ysql_catalog_version,json=ysqlCatalogVersion,proto3" json:"ysql_catalog_version,omitempty"`
	YsqlDbCatalogVersion uint64                 `protobuf:"varint,10,opt,name=ysql_db_catalog_version,json=ysqlDbCatalogVersion,proto3" json:"ysql_db_catalog_version,omitempty"`
	LastVal              int64                  `protobuf:"varint,5,opt,name=last_val,json=lastVal,proto3" json:"last_val,omitempty"`
	IsCalled             bool                   `protobuf:"varint,6,opt,name=is_called,json=isCalled,proto3" json:"is_called,omitempty"`
	HasExpected          bool                   `protobuf:"varint,7,opt,name=has_expected,json=hasExpected,proto3" json:"has_expected,omitempty"`
	ExpectedLastVal      int64                  `protobuf:"varint,8,opt,name=expected_last_val,json=expectedLastVal,proto3" json:"expected_last_val,omitempty"`
	ExpectedIsCalled     bool                   `protobuf:"varint,9,opt,name=expected_is_called,json=expectedIsCalled,proto3" json:"expected_is_called,omitempty"`
	AshMetadata          *common.AshMetadataPB  `protobuf:"bytes,11,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PgUpdateSequenceTupleRequestPB) Reset() {
	*x = PgUpdateSequenceTupleRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgUpdateSequenceTupleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgUpdateSequenceTupleRequestPB) ProtoMessage() {}

func (x *PgUpdateSequenceTupleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgUpdateSequenceTupleRequestPB.ProtoReflect.Descriptor instead.
func (*PgUpdateSequenceTupleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{81}
}

func (x *PgUpdateSequenceTupleRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgUpdateSequenceTupleRequestPB) GetDbOid() int64 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgUpdateSequenceTupleRequestPB) GetSeqOid() int64 {
	if x != nil {
		return x.SeqOid
	}
	return 0
}

func (x *PgUpdateSequenceTupleRequestPB) GetYsqlCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlCatalogVersion
	}
	return 0
}

func (x *PgUpdateSequenceTupleRequestPB) GetYsqlDbCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlDbCatalogVersion
	}
	return 0
}

func (x *PgUpdateSequenceTupleRequestPB) GetLastVal() int64 {
	if x != nil {
		return x.LastVal
	}
	return 0
}

func (x *PgUpdateSequenceTupleRequestPB) GetIsCalled() bool {
	if x != nil {
		return x.IsCalled
	}
	return false
}

func (x *PgUpdateSequenceTupleRequestPB) GetHasExpected() bool {
	if x != nil {
		return x.HasExpected
	}
	return false
}

func (x *PgUpdateSequenceTupleRequestPB) GetExpectedLastVal() int64 {
	if x != nil {
		return x.ExpectedLastVal
	}
	return 0
}

func (x *PgUpdateSequenceTupleRequestPB) GetExpectedIsCalled() bool {
	if x != nil {
		return x.ExpectedIsCalled
	}
	return false
}

func (x *PgUpdateSequenceTupleRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgUpdateSequenceTupleResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Skipped       bool                   `protobuf:"varint,2,opt,name=skipped,proto3" json:"skipped,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgUpdateSequenceTupleResponsePB) Reset() {
	*x = PgUpdateSequenceTupleResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgUpdateSequenceTupleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgUpdateSequenceTupleResponsePB) ProtoMessage() {}

func (x *PgUpdateSequenceTupleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgUpdateSequenceTupleResponsePB.ProtoReflect.Descriptor instead.
func (*PgUpdateSequenceTupleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{82}
}

func (x *PgUpdateSequenceTupleResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgUpdateSequenceTupleResponsePB) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

type PgFetchSequenceTupleRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SessionId            uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DbOid                int64                  `protobuf:"varint,2,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	SeqOid               int64                  `protobuf:"varint,3,opt,name=seq_oid,json=seqOid,proto3" json:"seq_oid,omitempty"`
	YsqlCatalogVersion   uint64                 `protobuf:"varint,4,opt,name=ysql_catalog_version,json=ysqlCatalogVersion,proto3" json:"ysql_catalog_version,omitempty"`
	YsqlDbCatalogVersion uint64                 `protobuf:"varint,10,opt,name=ysql_db_catalog_version,json=ysqlDbCatalogVersion,proto3" json:"ysql_db_catalog_version,omitempty"`
	// The number of values to fetch. If the cache method is connection, this quantity
	// of values will be returned to the connection. If the cache method is server,
	// this quantity will be retrieved from the master server when it is exhausted, and
	// only one value will be returned to the connection.
	FetchCount    uint32                `protobuf:"varint,5,opt,name=fetch_count,json=fetchCount,proto3" json:"fetch_count,omitempty"`
	IncBy         int64                 `protobuf:"varint,6,opt,name=inc_by,json=incBy,proto3" json:"inc_by,omitempty"`
	MinValue      int64                 `protobuf:"varint,7,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue      int64                 `protobuf:"varint,8,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	Cycle         bool                  `protobuf:"varint,9,opt,name=cycle,proto3" json:"cycle,omitempty"`
	AshMetadata   *common.AshMetadataPB `protobuf:"bytes,11,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgFetchSequenceTupleRequestPB) Reset() {
	*x = PgFetchSequenceTupleRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgFetchSequenceTupleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgFetchSequenceTupleRequestPB) ProtoMessage() {}

func (x *PgFetchSequenceTupleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgFetchSequenceTupleRequestPB.ProtoReflect.Descriptor instead.
func (*PgFetchSequenceTupleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{83}
}

func (x *PgFetchSequenceTupleRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetDbOid() int64 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetSeqOid() int64 {
	if x != nil {
		return x.SeqOid
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetYsqlCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlCatalogVersion
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetYsqlDbCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlDbCatalogVersion
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetFetchCount() uint32 {
	if x != nil {
		return x.FetchCount
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetIncBy() int64 {
	if x != nil {
		return x.IncBy
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetMinValue() int64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetMaxValue() int64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *PgFetchSequenceTupleRequestPB) GetCycle() bool {
	if x != nil {
		return x.Cycle
	}
	return false
}

func (x *PgFetchSequenceTupleRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgFetchSequenceTupleResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	FirstValue    int64                  `protobuf:"varint,2,opt,name=first_value,json=firstValue,proto3" json:"first_value,omitempty"`
	LastValue     int64                  `protobuf:"varint,3,opt,name=last_value,json=lastValue,proto3" json:"last_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgFetchSequenceTupleResponsePB) Reset() {
	*x = PgFetchSequenceTupleResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgFetchSequenceTupleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgFetchSequenceTupleResponsePB) ProtoMessage() {}

func (x *PgFetchSequenceTupleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgFetchSequenceTupleResponsePB.ProtoReflect.Descriptor instead.
func (*PgFetchSequenceTupleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{84}
}

func (x *PgFetchSequenceTupleResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgFetchSequenceTupleResponsePB) GetFirstValue() int64 {
	if x != nil {
		return x.FirstValue
	}
	return 0
}

func (x *PgFetchSequenceTupleResponsePB) GetLastValue() int64 {
	if x != nil {
		return x.LastValue
	}
	return 0
}

type PgReadSequenceTupleRequestPB struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SessionId            uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DbOid                int64                  `protobuf:"varint,2,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	SeqOid               int64                  `protobuf:"varint,3,opt,name=seq_oid,json=seqOid,proto3" json:"seq_oid,omitempty"`
	YsqlCatalogVersion   uint64                 `protobuf:"varint,4,opt,name=ysql_catalog_version,json=ysqlCatalogVersion,proto3" json:"ysql_catalog_version,omitempty"`
	YsqlDbCatalogVersion uint64                 `protobuf:"varint,5,opt,name=ysql_db_catalog_version,json=ysqlDbCatalogVersion,proto3" json:"ysql_db_catalog_version,omitempty"`
	ReadTime             uint64                 `protobuf:"varint,6,opt,name=read_time,json=readTime,proto3" json:"read_time,omitempty"`
	AshMetadata          *common.AshMetadataPB  `protobuf:"bytes,7,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PgReadSequenceTupleRequestPB) Reset() {
	*x = PgReadSequenceTupleRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgReadSequenceTupleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgReadSequenceTupleRequestPB) ProtoMessage() {}

func (x *PgReadSequenceTupleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgReadSequenceTupleRequestPB.ProtoReflect.Descriptor instead.
func (*PgReadSequenceTupleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{85}
}

func (x *PgReadSequenceTupleRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgReadSequenceTupleRequestPB) GetDbOid() int64 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgReadSequenceTupleRequestPB) GetSeqOid() int64 {
	if x != nil {
		return x.SeqOid
	}
	return 0
}

func (x *PgReadSequenceTupleRequestPB) GetYsqlCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlCatalogVersion
	}
	return 0
}

func (x *PgReadSequenceTupleRequestPB) GetYsqlDbCatalogVersion() uint64 {
	if x != nil {
		return x.YsqlDbCatalogVersion
	}
	return 0
}

func (x *PgReadSequenceTupleRequestPB) GetReadTime() uint64 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

func (x *PgReadSequenceTupleRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgReadSequenceTupleResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LastVal       int64                  `protobuf:"varint,2,opt,name=last_val,json=lastVal,proto3" json:"last_val,omitempty"`
	IsCalled      bool                   `protobuf:"varint,3,opt,name=is_called,json=isCalled,proto3" json:"is_called,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgReadSequenceTupleResponsePB) Reset() {
	*x = PgReadSequenceTupleResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgReadSequenceTupleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgReadSequenceTupleResponsePB) ProtoMessage() {}

func (x *PgReadSequenceTupleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgReadSequenceTupleResponsePB.ProtoReflect.Descriptor instead.
func (*PgReadSequenceTupleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{86}
}

func (x *PgReadSequenceTupleResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgReadSequenceTupleResponsePB) GetLastVal() int64 {
	if x != nil {
		return x.LastVal
	}
	return 0
}

func (x *PgReadSequenceTupleResponsePB) GetIsCalled() bool {
	if x != nil {
		return x.IsCalled
	}
	return false
}

type PgDeleteSequenceTupleRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DbOid         int64                  `protobuf:"varint,2,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	SeqOid        int64                  `protobuf:"varint,3,opt,name=seq_oid,json=seqOid,proto3" json:"seq_oid,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDeleteSequenceTupleRequestPB) Reset() {
	*x = PgDeleteSequenceTupleRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDeleteSequenceTupleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDeleteSequenceTupleRequestPB) ProtoMessage() {}

func (x *PgDeleteSequenceTupleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDeleteSequenceTupleRequestPB.ProtoReflect.Descriptor instead.
func (*PgDeleteSequenceTupleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{87}
}

func (x *PgDeleteSequenceTupleRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgDeleteSequenceTupleRequestPB) GetDbOid() int64 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgDeleteSequenceTupleRequestPB) GetSeqOid() int64 {
	if x != nil {
		return x.SeqOid
	}
	return 0
}

func (x *PgDeleteSequenceTupleRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgDeleteSequenceTupleResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDeleteSequenceTupleResponsePB) Reset() {
	*x = PgDeleteSequenceTupleResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDeleteSequenceTupleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDeleteSequenceTupleResponsePB) ProtoMessage() {}

func (x *PgDeleteSequenceTupleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDeleteSequenceTupleResponsePB.ProtoReflect.Descriptor instead.
func (*PgDeleteSequenceTupleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{88}
}

func (x *PgDeleteSequenceTupleResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgDeleteDBSequencesRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DbOid         int64                  `protobuf:"varint,2,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDeleteDBSequencesRequestPB) Reset() {
	*x = PgDeleteDBSequencesRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDeleteDBSequencesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDeleteDBSequencesRequestPB) ProtoMessage() {}

func (x *PgDeleteDBSequencesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDeleteDBSequencesRequestPB.ProtoReflect.Descriptor instead.
func (*PgDeleteDBSequencesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{89}
}

func (x *PgDeleteDBSequencesRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgDeleteDBSequencesRequestPB) GetDbOid() int64 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgDeleteDBSequencesRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgDeleteDBSequencesResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDeleteDBSequencesResponsePB) Reset() {
	*x = PgDeleteDBSequencesResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDeleteDBSequencesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDeleteDBSequencesResponsePB) ProtoMessage() {}

func (x *PgDeleteDBSequencesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDeleteDBSequencesResponsePB.ProtoReflect.Descriptor instead.
func (*PgDeleteDBSequencesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{90}
}

func (x *PgDeleteDBSequencesResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgGetTableDiskSizeRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       *PgObjectIdPB          `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetTableDiskSizeRequestPB) Reset() {
	*x = PgGetTableDiskSizeRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTableDiskSizeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTableDiskSizeRequestPB) ProtoMessage() {}

func (x *PgGetTableDiskSizeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTableDiskSizeRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetTableDiskSizeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{91}
}

func (x *PgGetTableDiskSizeRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgGetTableDiskSizeRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetTableDiskSizeResponsePB struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// size is 0 for colocated tables
	Size              int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	NumMissingTablets int32 `protobuf:"varint,3,opt,name=num_missing_tablets,json=numMissingTablets,proto3" json:"num_missing_tablets,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PgGetTableDiskSizeResponsePB) Reset() {
	*x = PgGetTableDiskSizeResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTableDiskSizeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTableDiskSizeResponsePB) ProtoMessage() {}

func (x *PgGetTableDiskSizeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTableDiskSizeResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetTableDiskSizeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{92}
}

func (x *PgGetTableDiskSizeResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetTableDiskSizeResponsePB) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PgGetTableDiskSizeResponsePB) GetNumMissingTablets() int32 {
	if x != nil {
		return x.NumMissingTablets
	}
	return 0
}

type PgCheckIfPitrActiveRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,1,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCheckIfPitrActiveRequestPB) Reset() {
	*x = PgCheckIfPitrActiveRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCheckIfPitrActiveRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCheckIfPitrActiveRequestPB) ProtoMessage() {}

func (x *PgCheckIfPitrActiveRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCheckIfPitrActiveRequestPB.ProtoReflect.Descriptor instead.
func (*PgCheckIfPitrActiveRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{93}
}

func (x *PgCheckIfPitrActiveRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgCheckIfPitrActiveResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsPitrActive  bool                   `protobuf:"varint,1,opt,name=is_pitr_active,json=isPitrActive,proto3" json:"is_pitr_active,omitempty"`
	Status        *common.AppStatusPB    `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCheckIfPitrActiveResponsePB) Reset() {
	*x = PgCheckIfPitrActiveResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCheckIfPitrActiveResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCheckIfPitrActiveResponsePB) ProtoMessage() {}

func (x *PgCheckIfPitrActiveResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCheckIfPitrActiveResponsePB.ProtoReflect.Descriptor instead.
func (*PgCheckIfPitrActiveResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{94}
}

func (x *PgCheckIfPitrActiveResponsePB) GetIsPitrActive() bool {
	if x != nil {
		return x.IsPitrActive
	}
	return false
}

func (x *PgCheckIfPitrActiveResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgIsObjectPartOfXReplRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableId       *PgObjectIdPB          `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgIsObjectPartOfXReplRequestPB) Reset() {
	*x = PgIsObjectPartOfXReplRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgIsObjectPartOfXReplRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgIsObjectPartOfXReplRequestPB) ProtoMessage() {}

func (x *PgIsObjectPartOfXReplRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgIsObjectPartOfXReplRequestPB.ProtoReflect.Descriptor instead.
func (*PgIsObjectPartOfXReplRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{95}
}

func (x *PgIsObjectPartOfXReplRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgIsObjectPartOfXReplRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgIsObjectPartOfXReplResponsePB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Status              *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IsObjectPartOfXrepl bool                   `protobuf:"varint,2,opt,name=is_object_part_of_xrepl,json=isObjectPartOfXrepl,proto3" json:"is_object_part_of_xrepl,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PgIsObjectPartOfXReplResponsePB) Reset() {
	*x = PgIsObjectPartOfXReplResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgIsObjectPartOfXReplResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgIsObjectPartOfXReplResponsePB) ProtoMessage() {}

func (x *PgIsObjectPartOfXReplResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgIsObjectPartOfXReplResponsePB.ProtoReflect.Descriptor instead.
func (*PgIsObjectPartOfXReplResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{96}
}

func (x *PgIsObjectPartOfXReplResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgIsObjectPartOfXReplResponsePB) GetIsObjectPartOfXrepl() bool {
	if x != nil {
		return x.IsObjectPartOfXrepl
	}
	return false
}

type PgGetTserverCatalogVersionInfoRequestPB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// True if we only want to return the size of the catalog version map from tserver.
	SizeOnly bool `protobuf:"varint,1,opt,name=size_only,json=sizeOnly,proto3" json:"size_only,omitempty"`
	// If > 0, we ask for the catalog version of the given database from the tserver.
	// If == 0, we ask for the catalog version map of all databases from the tserver.
	DbOid         uint32                `protobuf:"varint,2,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	AshMetadata   *common.AshMetadataPB `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetTserverCatalogVersionInfoRequestPB) Reset() {
	*x = PgGetTserverCatalogVersionInfoRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTserverCatalogVersionInfoRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTserverCatalogVersionInfoRequestPB) ProtoMessage() {}

func (x *PgGetTserverCatalogVersionInfoRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTserverCatalogVersionInfoRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetTserverCatalogVersionInfoRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{97}
}

func (x *PgGetTserverCatalogVersionInfoRequestPB) GetSizeOnly() bool {
	if x != nil {
		return x.SizeOnly
	}
	return false
}

func (x *PgGetTserverCatalogVersionInfoRequestPB) GetDbOid() uint32 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgGetTserverCatalogVersionInfoRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetTserverCatalogVersionInfoResponsePB struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Status        *common.AppStatusPB                   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entries       []*common.TServerDBCatalogVersionInfo `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	NumEntries    uint32                                `protobuf:"varint,3,opt,name=num_entries,json=numEntries,proto3" json:"num_entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetTserverCatalogVersionInfoResponsePB) Reset() {
	*x = PgGetTserverCatalogVersionInfoResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTserverCatalogVersionInfoResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTserverCatalogVersionInfoResponsePB) ProtoMessage() {}

func (x *PgGetTserverCatalogVersionInfoResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTserverCatalogVersionInfoResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetTserverCatalogVersionInfoResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{98}
}

func (x *PgGetTserverCatalogVersionInfoResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetTserverCatalogVersionInfoResponsePB) GetEntries() []*common.TServerDBCatalogVersionInfo {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *PgGetTserverCatalogVersionInfoResponsePB) GetNumEntries() uint32 {
	if x != nil {
		return x.NumEntries
	}
	return 0
}

type PgWaitForBackendsCatalogVersionRequestPB struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SessionId             uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DatabaseOid           uint32                 `protobuf:"varint,2,opt,name=database_oid,json=databaseOid,proto3" json:"database_oid,omitempty"`
	CatalogVersion        uint64                 `protobuf:"varint,3,opt,name=catalog_version,json=catalogVersion,proto3" json:"catalog_version,omitempty"`
	AshMetadata           *common.AshMetadataPB  `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	RequestorPgBackendPid int32                  `protobuf:"varint,5,opt,name=requestor_pg_backend_pid,json=requestorPgBackendPid,proto3" json:"requestor_pg_backend_pid,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PgWaitForBackendsCatalogVersionRequestPB) Reset() {
	*x = PgWaitForBackendsCatalogVersionRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgWaitForBackendsCatalogVersionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgWaitForBackendsCatalogVersionRequestPB) ProtoMessage() {}

func (x *PgWaitForBackendsCatalogVersionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgWaitForBackendsCatalogVersionRequestPB.ProtoReflect.Descriptor instead.
func (*PgWaitForBackendsCatalogVersionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{99}
}

func (x *PgWaitForBackendsCatalogVersionRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgWaitForBackendsCatalogVersionRequestPB) GetDatabaseOid() uint32 {
	if x != nil {
		return x.DatabaseOid
	}
	return 0
}

func (x *PgWaitForBackendsCatalogVersionRequestPB) GetCatalogVersion() uint64 {
	if x != nil {
		return x.CatalogVersion
	}
	return 0
}

func (x *PgWaitForBackendsCatalogVersionRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

func (x *PgWaitForBackendsCatalogVersionRequestPB) GetRequestorPgBackendPid() int32 {
	if x != nil {
		return x.RequestorPgBackendPid
	}
	return 0
}

type PgWaitForBackendsCatalogVersionResponsePB struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Status *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Number of YSQL backends (across all tservers) that have not reached the requested catalog
	// version.  If the field is -1, the counting is in-progress.
	NumLaggingBackends int32 `protobuf:"varint,2,opt,name=num_lagging_backends,json=numLaggingBackends,proto3" json:"num_lagging_backends,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PgWaitForBackendsCatalogVersionResponsePB) Reset() {
	*x = PgWaitForBackendsCatalogVersionResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgWaitForBackendsCatalogVersionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgWaitForBackendsCatalogVersionResponsePB) ProtoMessage() {}

func (x *PgWaitForBackendsCatalogVersionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgWaitForBackendsCatalogVersionResponsePB.ProtoReflect.Descriptor instead.
func (*PgWaitForBackendsCatalogVersionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{100}
}

func (x *PgWaitForBackendsCatalogVersionResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgWaitForBackendsCatalogVersionResponsePB) GetNumLaggingBackends() int32 {
	if x != nil {
		return x.NumLaggingBackends
	}
	return 0
}

type PgCancelTransactionRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId []byte                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Populating the field is optional. When populated, the cancel request is sent to the specified
	// status tablet alone. If not, the request is forwarded to all tablet servers and is thereafter
	// broadcast to all status tablets hosted by the tablet server.
	StatusTabletId []byte                `protobuf:"bytes,2,opt,name=status_tablet_id,json=statusTabletId,proto3" json:"status_tablet_id,omitempty"`
	AshMetadata    *common.AshMetadataPB `protobuf:"bytes,3,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgCancelTransactionRequestPB) Reset() {
	*x = PgCancelTransactionRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCancelTransactionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCancelTransactionRequestPB) ProtoMessage() {}

func (x *PgCancelTransactionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCancelTransactionRequestPB.ProtoReflect.Descriptor instead.
func (*PgCancelTransactionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{101}
}

func (x *PgCancelTransactionRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *PgCancelTransactionRequestPB) GetStatusTabletId() []byte {
	if x != nil {
		return x.StatusTabletId
	}
	return nil
}

func (x *PgCancelTransactionRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgCancelTransactionResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCancelTransactionResponsePB) Reset() {
	*x = PgCancelTransactionResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCancelTransactionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCancelTransactionResponsePB) ProtoMessage() {}

func (x *PgCancelTransactionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCancelTransactionResponsePB.ProtoReflect.Descriptor instead.
func (*PgCancelTransactionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{102}
}

func (x *PgCancelTransactionResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgActiveSessionHistoryRequestPB struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	SampleSize                    uint32                 `protobuf:"varint,7,opt,name=sample_size,json=sampleSize,proto3" json:"sample_size,omitempty"`
	FetchTserverStates            bool                   `protobuf:"varint,1,opt,name=fetch_tserver_states,json=fetchTserverStates,proto3" json:"fetch_tserver_states,omitempty"`
	FetchFlushAndCompactionStates bool                   `protobuf:"varint,2,opt,name=fetch_flush_and_compaction_states,json=fetchFlushAndCompactionStates,proto3" json:"fetch_flush_and_compaction_states,omitempty"`
	FetchCqlStates                bool                   `protobuf:"varint,3,opt,name=fetch_cql_states,json=fetchCqlStates,proto3" json:"fetch_cql_states,omitempty"`
	IgnoreAshAndPerformCalls      bool                   `protobuf:"varint,4,opt,name=ignore_ash_and_perform_calls,json=ignoreAshAndPerformCalls,proto3" json:"ignore_ash_and_perform_calls,omitempty"`
	FetchRaftLogAppenderStates    bool                   `protobuf:"varint,5,opt,name=fetch_raft_log_appender_states,json=fetchRaftLogAppenderStates,proto3" json:"fetch_raft_log_appender_states,omitempty"`
	ExportWaitStateCodeAsString   bool                   `protobuf:"varint,6,opt,name=export_wait_state_code_as_string,json=exportWaitStateCodeAsString,proto3" json:"export_wait_state_code_as_string,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *PgActiveSessionHistoryRequestPB) Reset() {
	*x = PgActiveSessionHistoryRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgActiveSessionHistoryRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgActiveSessionHistoryRequestPB) ProtoMessage() {}

func (x *PgActiveSessionHistoryRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgActiveSessionHistoryRequestPB.ProtoReflect.Descriptor instead.
func (*PgActiveSessionHistoryRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{103}
}

func (x *PgActiveSessionHistoryRequestPB) GetSampleSize() uint32 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

func (x *PgActiveSessionHistoryRequestPB) GetFetchTserverStates() bool {
	if x != nil {
		return x.FetchTserverStates
	}
	return false
}

func (x *PgActiveSessionHistoryRequestPB) GetFetchFlushAndCompactionStates() bool {
	if x != nil {
		return x.FetchFlushAndCompactionStates
	}
	return false
}

func (x *PgActiveSessionHistoryRequestPB) GetFetchCqlStates() bool {
	if x != nil {
		return x.FetchCqlStates
	}
	return false
}

func (x *PgActiveSessionHistoryRequestPB) GetIgnoreAshAndPerformCalls() bool {
	if x != nil {
		return x.IgnoreAshAndPerformCalls
	}
	return false
}

func (x *PgActiveSessionHistoryRequestPB) GetFetchRaftLogAppenderStates() bool {
	if x != nil {
		return x.FetchRaftLogAppenderStates
	}
	return false
}

func (x *PgActiveSessionHistoryRequestPB) GetExportWaitStateCodeAsString() bool {
	if x != nil {
		return x.ExportWaitStateCodeAsString
	}
	return false
}

type WaitStatesPB struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	WaitStates    []*common.WaitStateInfoPB `protobuf:"bytes,1,rep,name=wait_states,json=waitStates,proto3" json:"wait_states,omitempty"`
	Component     uint32                    `protobuf:"varint,2,opt,name=component,proto3" json:"component,omitempty"`
	SampleWeight  float32                   `protobuf:"fixed32,3,opt,name=sample_weight,json=sampleWeight,proto3" json:"sample_weight,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitStatesPB) Reset() {
	*x = WaitStatesPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitStatesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitStatesPB) ProtoMessage() {}

func (x *WaitStatesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitStatesPB.ProtoReflect.Descriptor instead.
func (*WaitStatesPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{104}
}

func (x *WaitStatesPB) GetWaitStates() []*common.WaitStateInfoPB {
	if x != nil {
		return x.WaitStates
	}
	return nil
}

func (x *WaitStatesPB) GetComponent() uint32 {
	if x != nil {
		return x.Component
	}
	return 0
}

func (x *WaitStatesPB) GetSampleWeight() float32 {
	if x != nil {
		return x.SampleWeight
	}
	return 0
}

type PgActiveSessionHistoryResponsePB struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TserverWaitStates *WaitStatesPB          `protobuf:"bytes,2,opt,name=tserver_wait_states,json=tserverWaitStates,proto3" json:"tserver_wait_states,omitempty"`
	// flush_and_compaction_wait_states and raft_log_appender_wait_states
	// are included in tserver_wait_states
	DEPRECATEDFlushAndCompactionWaitStates *WaitStatesPB `protobuf:"bytes,3,opt,name=DEPRECATED_flush_and_compaction_wait_states,json=DEPRECATEDFlushAndCompactionWaitStates,proto3" json:"DEPRECATED_flush_and_compaction_wait_states,omitempty"`
	DEPRECATEDRaftLogAppenderWaitStates    *WaitStatesPB `protobuf:"bytes,4,opt,name=DEPRECATED_raft_log_appender_wait_states,json=DEPRECATEDRaftLogAppenderWaitStates,proto3" json:"DEPRECATED_raft_log_appender_wait_states,omitempty"`
	CqlWaitStates                          *WaitStatesPB `protobuf:"bytes,5,opt,name=cql_wait_states,json=cqlWaitStates,proto3" json:"cql_wait_states,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *PgActiveSessionHistoryResponsePB) Reset() {
	*x = PgActiveSessionHistoryResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgActiveSessionHistoryResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgActiveSessionHistoryResponsePB) ProtoMessage() {}

func (x *PgActiveSessionHistoryResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgActiveSessionHistoryResponsePB.ProtoReflect.Descriptor instead.
func (*PgActiveSessionHistoryResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{105}
}

func (x *PgActiveSessionHistoryResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgActiveSessionHistoryResponsePB) GetTserverWaitStates() *WaitStatesPB {
	if x != nil {
		return x.TserverWaitStates
	}
	return nil
}

func (x *PgActiveSessionHistoryResponsePB) GetDEPRECATEDFlushAndCompactionWaitStates() *WaitStatesPB {
	if x != nil {
		return x.DEPRECATEDFlushAndCompactionWaitStates
	}
	return nil
}

func (x *PgActiveSessionHistoryResponsePB) GetDEPRECATEDRaftLogAppenderWaitStates() *WaitStatesPB {
	if x != nil {
		return x.DEPRECATEDRaftLogAppenderWaitStates
	}
	return nil
}

func (x *PgActiveSessionHistoryResponsePB) GetCqlWaitStates() *WaitStatesPB {
	if x != nil {
		return x.CqlWaitStates
	}
	return nil
}

type PgGetActiveTransactionListRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *OptionalUint64PB      `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetActiveTransactionListRequestPB) Reset() {
	*x = PgGetActiveTransactionListRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetActiveTransactionListRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetActiveTransactionListRequestPB) ProtoMessage() {}

func (x *PgGetActiveTransactionListRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetActiveTransactionListRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetActiveTransactionListRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{106}
}

func (x *PgGetActiveTransactionListRequestPB) GetSessionId() *OptionalUint64PB {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *PgGetActiveTransactionListRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetActiveTransactionListResponsePB struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Status        *common.AppStatusPB                             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entries       []*PgGetActiveTransactionListResponsePB_EntryPB `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetActiveTransactionListResponsePB) Reset() {
	*x = PgGetActiveTransactionListResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetActiveTransactionListResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetActiveTransactionListResponsePB) ProtoMessage() {}

func (x *PgGetActiveTransactionListResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetActiveTransactionListResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetActiveTransactionListResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{107}
}

func (x *PgGetActiveTransactionListResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetActiveTransactionListResponsePB) GetEntries() []*PgGetActiveTransactionListResponsePB_EntryPB {
	if x != nil {
		return x.Entries
	}
	return nil
}

type PgGetTableKeyRangesRequestPB struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SessionId      uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TableId        *PgObjectIdPB          `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	LowerBoundKey  []byte                 `protobuf:"bytes,3,opt,name=lower_bound_key,json=lowerBoundKey,proto3" json:"lower_bound_key,omitempty"`
	UpperBoundKey  []byte                 `protobuf:"bytes,4,opt,name=upper_bound_key,json=upperBoundKey,proto3" json:"upper_bound_key,omitempty"`
	MaxNumRanges   uint64                 `protobuf:"varint,5,opt,name=max_num_ranges,json=maxNumRanges,proto3" json:"max_num_ranges,omitempty"`
	RangeSizeBytes uint64                 `protobuf:"varint,6,opt,name=range_size_bytes,json=rangeSizeBytes,proto3" json:"range_size_bytes,omitempty"`
	IsForward      bool                   `protobuf:"varint,7,opt,name=is_forward,json=isForward,proto3" json:"is_forward,omitempty"`
	MaxKeyLength   uint32                 `protobuf:"varint,8,opt,name=max_key_length,json=maxKeyLength,proto3" json:"max_key_length,omitempty"`
	AshMetadata    *common.AshMetadataPB  `protobuf:"bytes,9,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgGetTableKeyRangesRequestPB) Reset() {
	*x = PgGetTableKeyRangesRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTableKeyRangesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTableKeyRangesRequestPB) ProtoMessage() {}

func (x *PgGetTableKeyRangesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTableKeyRangesRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetTableKeyRangesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{108}
}

func (x *PgGetTableKeyRangesRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgGetTableKeyRangesRequestPB) GetTableId() *PgObjectIdPB {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *PgGetTableKeyRangesRequestPB) GetLowerBoundKey() []byte {
	if x != nil {
		return x.LowerBoundKey
	}
	return nil
}

func (x *PgGetTableKeyRangesRequestPB) GetUpperBoundKey() []byte {
	if x != nil {
		return x.UpperBoundKey
	}
	return nil
}

func (x *PgGetTableKeyRangesRequestPB) GetMaxNumRanges() uint64 {
	if x != nil {
		return x.MaxNumRanges
	}
	return 0
}

func (x *PgGetTableKeyRangesRequestPB) GetRangeSizeBytes() uint64 {
	if x != nil {
		return x.RangeSizeBytes
	}
	return 0
}

func (x *PgGetTableKeyRangesRequestPB) GetIsForward() bool {
	if x != nil {
		return x.IsForward
	}
	return false
}

func (x *PgGetTableKeyRangesRequestPB) GetMaxKeyLength() uint32 {
	if x != nil {
		return x.MaxKeyLength
	}
	return 0
}

func (x *PgGetTableKeyRangesRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetTableKeyRangesResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CurrentHt     uint64                 `protobuf:"fixed64,2,opt,name=current_ht,json=currentHt,proto3" json:"current_ht,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetTableKeyRangesResponsePB) Reset() {
	*x = PgGetTableKeyRangesResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetTableKeyRangesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetTableKeyRangesResponsePB) ProtoMessage() {}

func (x *PgGetTableKeyRangesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetTableKeyRangesResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetTableKeyRangesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{109}
}

func (x *PgGetTableKeyRangesResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetTableKeyRangesResponsePB) GetCurrentHt() uint64 {
	if x != nil {
		return x.CurrentHt
	}
	return 0
}

type PgGetNewObjectIdRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbOid         uint32                 `protobuf:"varint,1,opt,name=db_oid,json=dbOid,proto3" json:"db_oid,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetNewObjectIdRequestPB) Reset() {
	*x = PgGetNewObjectIdRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetNewObjectIdRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetNewObjectIdRequestPB) ProtoMessage() {}

func (x *PgGetNewObjectIdRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetNewObjectIdRequestPB.ProtoReflect.Descriptor instead.
func (*PgGetNewObjectIdRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{110}
}

func (x *PgGetNewObjectIdRequestPB) GetDbOid() uint32 {
	if x != nil {
		return x.DbOid
	}
	return 0
}

func (x *PgGetNewObjectIdRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgGetNewObjectIdResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NewOid        uint32                 `protobuf:"varint,2,opt,name=new_oid,json=newOid,proto3" json:"new_oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetNewObjectIdResponsePB) Reset() {
	*x = PgGetNewObjectIdResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetNewObjectIdResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetNewObjectIdResponsePB) ProtoMessage() {}

func (x *PgGetNewObjectIdResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetNewObjectIdResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetNewObjectIdResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{111}
}

func (x *PgGetNewObjectIdResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgGetNewObjectIdResponsePB) GetNewOid() uint32 {
	if x != nil {
		return x.NewOid
	}
	return 0
}

type PgFetchDataRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	DataId        uint64                 `protobuf:"varint,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgFetchDataRequestPB) Reset() {
	*x = PgFetchDataRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgFetchDataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgFetchDataRequestPB) ProtoMessage() {}

func (x *PgFetchDataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgFetchDataRequestPB.ProtoReflect.Descriptor instead.
func (*PgFetchDataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{112}
}

func (x *PgFetchDataRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgFetchDataRequestPB) GetDataId() uint64 {
	if x != nil {
		return x.DataId
	}
	return 0
}

type PgFetchDataResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Sidecar       uint32                 `protobuf:"varint,2,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgFetchDataResponsePB) Reset() {
	*x = PgFetchDataResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgFetchDataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgFetchDataResponsePB) ProtoMessage() {}

func (x *PgFetchDataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgFetchDataResponsePB.ProtoReflect.Descriptor instead.
func (*PgFetchDataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{113}
}

func (x *PgFetchDataResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgFetchDataResponsePB) GetSidecar() uint32 {
	if x != nil {
		return x.Sidecar
	}
	return 0
}

type PgYCQLStatementStatsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,1,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgYCQLStatementStatsRequestPB) Reset() {
	*x = PgYCQLStatementStatsRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgYCQLStatementStatsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgYCQLStatementStatsRequestPB) ProtoMessage() {}

func (x *PgYCQLStatementStatsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgYCQLStatementStatsRequestPB.ProtoReflect.Descriptor instead.
func (*PgYCQLStatementStatsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{114}
}

func (x *PgYCQLStatementStatsRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgYCQLStatementStatsResponsePB struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        *common.AppStatusPB     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Statements    []*YCQLStatementStatsPB `protobuf:"bytes,2,rep,name=statements,proto3" json:"statements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgYCQLStatementStatsResponsePB) Reset() {
	*x = PgYCQLStatementStatsResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgYCQLStatementStatsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgYCQLStatementStatsResponsePB) ProtoMessage() {}

func (x *PgYCQLStatementStatsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgYCQLStatementStatsResponsePB.ProtoReflect.Descriptor instead.
func (*PgYCQLStatementStatsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{115}
}

func (x *PgYCQLStatementStatsResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgYCQLStatementStatsResponsePB) GetStatements() []*YCQLStatementStatsPB {
	if x != nil {
		return x.Statements
	}
	return nil
}

type YCQLStatementStatsPB struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Queryid    int64                  `protobuf:"varint,1,opt,name=queryid,proto3" json:"queryid,omitempty"`
	Query      string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	IsPrepared bool                   `protobuf:"varint,3,opt,name=is_prepared,json=isPrepared,proto3" json:"is_prepared,omitempty"`
	Calls      int64                  `protobuf:"varint,4,opt,name=calls,proto3" json:"calls,omitempty"`
	// Time in ms
	TotalTime     float64 `protobuf:"fixed64,5,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	MinTime       float64 `protobuf:"fixed64,6,opt,name=min_time,json=minTime,proto3" json:"min_time,omitempty"`
	MaxTime       float64 `protobuf:"fixed64,7,opt,name=max_time,json=maxTime,proto3" json:"max_time,omitempty"`
	MeanTime      float64 `protobuf:"fixed64,8,opt,name=mean_time,json=meanTime,proto3" json:"mean_time,omitempty"`
	StddevTime    float64 `protobuf:"fixed64,9,opt,name=stddev_time,json=stddevTime,proto3" json:"stddev_time,omitempty"`
	Keyspace      string  `protobuf:"bytes,10,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YCQLStatementStatsPB) Reset() {
	*x = YCQLStatementStatsPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YCQLStatementStatsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YCQLStatementStatsPB) ProtoMessage() {}

func (x *YCQLStatementStatsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YCQLStatementStatsPB.ProtoReflect.Descriptor instead.
func (*YCQLStatementStatsPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{116}
}

func (x *YCQLStatementStatsPB) GetQueryid() int64 {
	if x != nil {
		return x.Queryid
	}
	return 0
}

func (x *YCQLStatementStatsPB) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *YCQLStatementStatsPB) GetIsPrepared() bool {
	if x != nil {
		return x.IsPrepared
	}
	return false
}

func (x *YCQLStatementStatsPB) GetCalls() int64 {
	if x != nil {
		return x.Calls
	}
	return 0
}

func (x *YCQLStatementStatsPB) GetTotalTime() float64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *YCQLStatementStatsPB) GetMinTime() float64 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *YCQLStatementStatsPB) GetMaxTime() float64 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *YCQLStatementStatsPB) GetMeanTime() float64 {
	if x != nil {
		return x.MeanTime
	}
	return 0
}

func (x *YCQLStatementStatsPB) GetStddevTime() float64 {
	if x != nil {
		return x.StddevTime
	}
	return 0
}

func (x *YCQLStatementStatsPB) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

type PgTabletsMetadataRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,1,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgTabletsMetadataRequestPB) Reset() {
	*x = PgTabletsMetadataRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTabletsMetadataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTabletsMetadataRequestPB) ProtoMessage() {}

func (x *PgTabletsMetadataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTabletsMetadataRequestPB.ProtoReflect.Descriptor instead.
func (*PgTabletsMetadataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{117}
}

func (x *PgTabletsMetadataRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgTabletsMetadataResponsePB struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Status        *common.AppStatusPB      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Tablets       []*tablet.TabletStatusPB `protobuf:"bytes,2,rep,name=tablets,proto3" json:"tablets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgTabletsMetadataResponsePB) Reset() {
	*x = PgTabletsMetadataResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgTabletsMetadataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgTabletsMetadataResponsePB) ProtoMessage() {}

func (x *PgTabletsMetadataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgTabletsMetadataResponsePB.ProtoReflect.Descriptor instead.
func (*PgTabletsMetadataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{118}
}

func (x *PgTabletsMetadataResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgTabletsMetadataResponsePB) GetTablets() []*tablet.TabletStatusPB {
	if x != nil {
		return x.Tablets
	}
	return nil
}

type PgServersMetricsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,1,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgServersMetricsRequestPB) Reset() {
	*x = PgServersMetricsRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgServersMetricsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgServersMetricsRequestPB) ProtoMessage() {}

func (x *PgServersMetricsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgServersMetricsRequestPB.ProtoReflect.Descriptor instead.
func (*PgServersMetricsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{119}
}

func (x *PgServersMetricsRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgServerMetricsInfoPB struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Uuid          string                         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Metrics       []*common.TserverMetricsInfoPB `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Status        PgMetricsInfoStatus            `protobuf:"varint,3,opt,name=status,proto3,enum=yb.tserver.PgMetricsInfoStatus" json:"status,omitempty"`
	Error         string                         `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgServerMetricsInfoPB) Reset() {
	*x = PgServerMetricsInfoPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgServerMetricsInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgServerMetricsInfoPB) ProtoMessage() {}

func (x *PgServerMetricsInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgServerMetricsInfoPB.ProtoReflect.Descriptor instead.
func (*PgServerMetricsInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{120}
}

func (x *PgServerMetricsInfoPB) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PgServerMetricsInfoPB) GetMetrics() []*common.TserverMetricsInfoPB {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *PgServerMetricsInfoPB) GetStatus() PgMetricsInfoStatus {
	if x != nil {
		return x.Status
	}
	return PgMetricsInfoStatus_OK
}

func (x *PgServerMetricsInfoPB) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type PgServersMetricsResponsePB struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	Status         *common.AppStatusPB      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ServersMetrics []*PgServerMetricsInfoPB `protobuf:"bytes,2,rep,name=servers_metrics,json=serversMetrics,proto3" json:"servers_metrics,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgServersMetricsResponsePB) Reset() {
	*x = PgServersMetricsResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgServersMetricsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgServersMetricsResponsePB) ProtoMessage() {}

func (x *PgServersMetricsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgServersMetricsResponsePB.ProtoReflect.Descriptor instead.
func (*PgServersMetricsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{121}
}

func (x *PgServersMetricsResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgServersMetricsResponsePB) GetServersMetrics() []*PgServerMetricsInfoPB {
	if x != nil {
		return x.ServersMetrics
	}
	return nil
}

type PgCronSetLastMinuteRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastMinute    int64                  `protobuf:"varint,1,opt,name=last_minute,json=lastMinute,proto3" json:"last_minute,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCronSetLastMinuteRequestPB) Reset() {
	*x = PgCronSetLastMinuteRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCronSetLastMinuteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCronSetLastMinuteRequestPB) ProtoMessage() {}

func (x *PgCronSetLastMinuteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCronSetLastMinuteRequestPB.ProtoReflect.Descriptor instead.
func (*PgCronSetLastMinuteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{122}
}

func (x *PgCronSetLastMinuteRequestPB) GetLastMinute() int64 {
	if x != nil {
		return x.LastMinute
	}
	return 0
}

func (x *PgCronSetLastMinuteRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgCronSetLastMinuteResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCronSetLastMinuteResponsePB) Reset() {
	*x = PgCronSetLastMinuteResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCronSetLastMinuteResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCronSetLastMinuteResponsePB) ProtoMessage() {}

func (x *PgCronSetLastMinuteResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCronSetLastMinuteResponsePB.ProtoReflect.Descriptor instead.
func (*PgCronSetLastMinuteResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{123}
}

func (x *PgCronSetLastMinuteResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgCronGetLastMinuteRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,1,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCronGetLastMinuteRequestPB) Reset() {
	*x = PgCronGetLastMinuteRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCronGetLastMinuteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCronGetLastMinuteRequestPB) ProtoMessage() {}

func (x *PgCronGetLastMinuteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCronGetLastMinuteRequestPB.ProtoReflect.Descriptor instead.
func (*PgCronGetLastMinuteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{124}
}

func (x *PgCronGetLastMinuteRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgCronGetLastMinuteResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastMinute    int64                  `protobuf:"varint,1,opt,name=last_minute,json=lastMinute,proto3" json:"last_minute,omitempty"`
	Status        *common.AppStatusPB    `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgCronGetLastMinuteResponsePB) Reset() {
	*x = PgCronGetLastMinuteResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgCronGetLastMinuteResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgCronGetLastMinuteResponsePB) ProtoMessage() {}

func (x *PgCronGetLastMinuteResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgCronGetLastMinuteResponsePB.ProtoReflect.Descriptor instead.
func (*PgCronGetLastMinuteResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{125}
}

func (x *PgCronGetLastMinuteResponsePB) GetLastMinute() int64 {
	if x != nil {
		return x.LastMinute
	}
	return 0
}

func (x *PgCronGetLastMinuteResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgListClonesRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,1,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgListClonesRequestPB) Reset() {
	*x = PgListClonesRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgListClonesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgListClonesRequestPB) ProtoMessage() {}

func (x *PgListClonesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgListClonesRequestPB.ProtoReflect.Descriptor instead.
func (*PgListClonesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{126}
}

func (x *PgListClonesRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgListClonesResponsePB struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	Status         *common.AppStatusPB      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	DatabaseClones []*PgDatabaseCloneInfoPB `protobuf:"bytes,2,rep,name=database_clones,json=databaseClones,proto3" json:"database_clones,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgListClonesResponsePB) Reset() {
	*x = PgListClonesResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgListClonesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgListClonesResponsePB) ProtoMessage() {}

func (x *PgListClonesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgListClonesResponsePB.ProtoReflect.Descriptor instead.
func (*PgListClonesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{127}
}

func (x *PgListClonesResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgListClonesResponsePB) GetDatabaseClones() []*PgDatabaseCloneInfoPB {
	if x != nil {
		return x.DatabaseClones
	}
	return nil
}

type PgDatabaseCloneInfoPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DbId          uint32                 `protobuf:"varint,1,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	DbName        string                 `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	ParentDbId    uint32                 `protobuf:"varint,3,opt,name=parent_db_id,json=parentDbId,proto3" json:"parent_db_id,omitempty"`
	ParentDbName  string                 `protobuf:"bytes,4,opt,name=parent_db_name,json=parentDbName,proto3" json:"parent_db_name,omitempty"`
	State         string                 `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	AsOfTime      uint64                 `protobuf:"fixed64,6,opt,name=as_of_time,json=asOfTime,proto3" json:"as_of_time,omitempty"`
	FailureReason string                 `protobuf:"bytes,7,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgDatabaseCloneInfoPB) Reset() {
	*x = PgDatabaseCloneInfoPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgDatabaseCloneInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgDatabaseCloneInfoPB) ProtoMessage() {}

func (x *PgDatabaseCloneInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgDatabaseCloneInfoPB.ProtoReflect.Descriptor instead.
func (*PgDatabaseCloneInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{128}
}

func (x *PgDatabaseCloneInfoPB) GetDbId() uint32 {
	if x != nil {
		return x.DbId
	}
	return 0
}

func (x *PgDatabaseCloneInfoPB) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *PgDatabaseCloneInfoPB) GetParentDbId() uint32 {
	if x != nil {
		return x.ParentDbId
	}
	return 0
}

func (x *PgDatabaseCloneInfoPB) GetParentDbName() string {
	if x != nil {
		return x.ParentDbName
	}
	return ""
}

func (x *PgDatabaseCloneInfoPB) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PgDatabaseCloneInfoPB) GetAsOfTime() uint64 {
	if x != nil {
		return x.AsOfTime
	}
	return 0
}

func (x *PgDatabaseCloneInfoPB) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type PgExportTxnSnapshotRequestPB struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	SessionId        uint64                   `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Snapshot         *common.PgTxnSnapshotPB  `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Options          *PgPerformOptionsPB      `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	ExplicitReadTime *common.ReadHybridTimePB `protobuf:"bytes,5,opt,name=explicit_read_time,json=explicitReadTime,proto3" json:"explicit_read_time,omitempty"`
	AshMetadata      *common.AshMetadataPB    `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PgExportTxnSnapshotRequestPB) Reset() {
	*x = PgExportTxnSnapshotRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgExportTxnSnapshotRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgExportTxnSnapshotRequestPB) ProtoMessage() {}

func (x *PgExportTxnSnapshotRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgExportTxnSnapshotRequestPB.ProtoReflect.Descriptor instead.
func (*PgExportTxnSnapshotRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{129}
}

func (x *PgExportTxnSnapshotRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgExportTxnSnapshotRequestPB) GetSnapshot() *common.PgTxnSnapshotPB {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *PgExportTxnSnapshotRequestPB) GetOptions() *PgPerformOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PgExportTxnSnapshotRequestPB) GetExplicitReadTime() *common.ReadHybridTimePB {
	if x != nil {
		return x.ExplicitReadTime
	}
	return nil
}

func (x *PgExportTxnSnapshotRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgExportTxnSnapshotResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SnapshotId    string                 `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgExportTxnSnapshotResponsePB) Reset() {
	*x = PgExportTxnSnapshotResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgExportTxnSnapshotResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgExportTxnSnapshotResponsePB) ProtoMessage() {}

func (x *PgExportTxnSnapshotResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgExportTxnSnapshotResponsePB.ProtoReflect.Descriptor instead.
func (*PgExportTxnSnapshotResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{130}
}

func (x *PgExportTxnSnapshotResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgExportTxnSnapshotResponsePB) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type PgSetTxnSnapshotRequestPB struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	SessionId uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*PgSetTxnSnapshotRequestPB_SnapshotId
	//	*PgSetTxnSnapshotRequestPB_ExplicitReadTime
	Source        isPgSetTxnSnapshotRequestPB_Source `protobuf_oneof:"source"`
	Options       *PgPerformOptionsPB                `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	AshMetadata   *common.AshMetadataPB              `protobuf:"bytes,4,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgSetTxnSnapshotRequestPB) Reset() {
	*x = PgSetTxnSnapshotRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgSetTxnSnapshotRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgSetTxnSnapshotRequestPB) ProtoMessage() {}

func (x *PgSetTxnSnapshotRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgSetTxnSnapshotRequestPB.ProtoReflect.Descriptor instead.
func (*PgSetTxnSnapshotRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{131}
}

func (x *PgSetTxnSnapshotRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgSetTxnSnapshotRequestPB) GetSource() isPgSetTxnSnapshotRequestPB_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PgSetTxnSnapshotRequestPB) GetSnapshotId() string {
	if x != nil {
		if x, ok := x.Source.(*PgSetTxnSnapshotRequestPB_SnapshotId); ok {
			return x.SnapshotId
		}
	}
	return ""
}

func (x *PgSetTxnSnapshotRequestPB) GetExplicitReadTime() *common.ReadHybridTimePB {
	if x != nil {
		if x, ok := x.Source.(*PgSetTxnSnapshotRequestPB_ExplicitReadTime); ok {
			return x.ExplicitReadTime
		}
	}
	return nil
}

func (x *PgSetTxnSnapshotRequestPB) GetOptions() *PgPerformOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PgSetTxnSnapshotRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type isPgSetTxnSnapshotRequestPB_Source interface {
	isPgSetTxnSnapshotRequestPB_Source()
}

type PgSetTxnSnapshotRequestPB_SnapshotId struct {
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3,oneof"`
}

type PgSetTxnSnapshotRequestPB_ExplicitReadTime struct {
	ExplicitReadTime *common.ReadHybridTimePB `protobuf:"bytes,5,opt,name=explicit_read_time,json=explicitReadTime,proto3,oneof"`
}

func (*PgSetTxnSnapshotRequestPB_SnapshotId) isPgSetTxnSnapshotRequestPB_Source() {}

func (*PgSetTxnSnapshotRequestPB_ExplicitReadTime) isPgSetTxnSnapshotRequestPB_Source() {}

type PgSetTxnSnapshotResponsePB struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Status        *common.AppStatusPB     `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Snapshot      *common.PgTxnSnapshotPB `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgSetTxnSnapshotResponsePB) Reset() {
	*x = PgSetTxnSnapshotResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgSetTxnSnapshotResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgSetTxnSnapshotResponsePB) ProtoMessage() {}

func (x *PgSetTxnSnapshotResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgSetTxnSnapshotResponsePB.ProtoReflect.Descriptor instead.
func (*PgSetTxnSnapshotResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{132}
}

func (x *PgSetTxnSnapshotResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PgSetTxnSnapshotResponsePB) GetSnapshot() *common.PgTxnSnapshotPB {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type PgClearExportedTxnSnapshotsRequestPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AshMetadata   *common.AshMetadataPB  `protobuf:"bytes,2,opt,name=ash_metadata,json=ashMetadata,proto3" json:"ash_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgClearExportedTxnSnapshotsRequestPB) Reset() {
	*x = PgClearExportedTxnSnapshotsRequestPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgClearExportedTxnSnapshotsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgClearExportedTxnSnapshotsRequestPB) ProtoMessage() {}

func (x *PgClearExportedTxnSnapshotsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgClearExportedTxnSnapshotsRequestPB.ProtoReflect.Descriptor instead.
func (*PgClearExportedTxnSnapshotsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{133}
}

func (x *PgClearExportedTxnSnapshotsRequestPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgClearExportedTxnSnapshotsRequestPB) GetAshMetadata() *common.AshMetadataPB {
	if x != nil {
		return x.AshMetadata
	}
	return nil
}

type PgClearExportedTxnSnapshotsResponsePB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *common.AppStatusPB    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgClearExportedTxnSnapshotsResponsePB) Reset() {
	*x = PgClearExportedTxnSnapshotsResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgClearExportedTxnSnapshotsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgClearExportedTxnSnapshotsResponsePB) ProtoMessage() {}

func (x *PgClearExportedTxnSnapshotsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgClearExportedTxnSnapshotsResponsePB.ProtoReflect.Descriptor instead.
func (*PgClearExportedTxnSnapshotsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{134}
}

func (x *PgClearExportedTxnSnapshotsResponsePB) GetStatus() *common.AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type PgFinishTransactionRequestPB_DdlModePB struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This transaction contains changes to the DocDB schema protobufs.
	HasDocdbSchemaChanges bool              `protobuf:"varint,1,opt,name=has_docdb_schema_changes,json=hasDocdbSchemaChanges,proto3" json:"has_docdb_schema_changes,omitempty"`
	SilentlyAlteredDb     *OptionalUint32PB `protobuf:"bytes,2,opt,name=silently_altered_db,json=silentlyAlteredDb,proto3" json:"silently_altered_db,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PgFinishTransactionRequestPB_DdlModePB) Reset() {
	*x = PgFinishTransactionRequestPB_DdlModePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgFinishTransactionRequestPB_DdlModePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgFinishTransactionRequestPB_DdlModePB) ProtoMessage() {}

func (x *PgFinishTransactionRequestPB_DdlModePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgFinishTransactionRequestPB_DdlModePB.ProtoReflect.Descriptor instead.
func (*PgFinishTransactionRequestPB_DdlModePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{36, 0}
}

func (x *PgFinishTransactionRequestPB_DdlModePB) GetHasDocdbSchemaChanges() bool {
	if x != nil {
		return x.HasDocdbSchemaChanges
	}
	return false
}

func (x *PgFinishTransactionRequestPB_DdlModePB) GetSilentlyAlteredDb() *OptionalUint32PB {
	if x != nil {
		return x.SilentlyAlteredDb
	}
	return nil
}

type PgGetLockStatusResponsePB_NodeLockStatusResponsePB struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	PermanentUuid   []byte                     `protobuf:"bytes,1,opt,name=permanent_uuid,json=permanentUuid,proto3" json:"permanent_uuid,omitempty"`
	TabletLockInfos []*common.TabletLockInfoPB `protobuf:"bytes,2,rep,name=tablet_lock_infos,json=tabletLockInfos,proto3" json:"tablet_lock_infos,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PgGetLockStatusResponsePB_NodeLockStatusResponsePB) Reset() {
	*x = PgGetLockStatusResponsePB_NodeLockStatusResponsePB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetLockStatusResponsePB_NodeLockStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetLockStatusResponsePB_NodeLockStatusResponsePB) ProtoMessage() {}

func (x *PgGetLockStatusResponsePB_NodeLockStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetLockStatusResponsePB_NodeLockStatusResponsePB.ProtoReflect.Descriptor instead.
func (*PgGetLockStatusResponsePB_NodeLockStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{44, 0}
}

func (x *PgGetLockStatusResponsePB_NodeLockStatusResponsePB) GetPermanentUuid() []byte {
	if x != nil {
		return x.PermanentUuid
	}
	return nil
}

func (x *PgGetLockStatusResponsePB_NodeLockStatusResponsePB) GetTabletLockInfos() []*common.TabletLockInfoPB {
	if x != nil {
		return x.TabletLockInfos
	}
	return nil
}

type PgGetLockStatusResponsePB_TransactionList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TransactionIds [][]byte               `protobuf:"bytes,1,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PgGetLockStatusResponsePB_TransactionList) Reset() {
	*x = PgGetLockStatusResponsePB_TransactionList{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetLockStatusResponsePB_TransactionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetLockStatusResponsePB_TransactionList) ProtoMessage() {}

func (x *PgGetLockStatusResponsePB_TransactionList) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetLockStatusResponsePB_TransactionList.ProtoReflect.Descriptor instead.
func (*PgGetLockStatusResponsePB_TransactionList) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{44, 1}
}

func (x *PgGetLockStatusResponsePB_TransactionList) GetTransactionIds() [][]byte {
	if x != nil {
		return x.TransactionIds
	}
	return nil
}

type PgPerformOptionsPB_CachingInfoPB struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	KeyGroup            uint32                 `protobuf:"varint,1,opt,name=key_group,json=keyGroup,proto3" json:"key_group,omitempty"`
	KeyValue            []byte                 `protobuf:"bytes,2,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	LifetimeThresholdMs *OptionalUint32PB      `protobuf:"bytes,3,opt,name=lifetime_threshold_ms,json=lifetimeThresholdMs,proto3" json:"lifetime_threshold_ms,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PgPerformOptionsPB_CachingInfoPB) Reset() {
	*x = PgPerformOptionsPB_CachingInfoPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgPerformOptionsPB_CachingInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgPerformOptionsPB_CachingInfoPB) ProtoMessage() {}

func (x *PgPerformOptionsPB_CachingInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgPerformOptionsPB_CachingInfoPB.ProtoReflect.Descriptor instead.
func (*PgPerformOptionsPB_CachingInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{63, 0}
}

func (x *PgPerformOptionsPB_CachingInfoPB) GetKeyGroup() uint32 {
	if x != nil {
		return x.KeyGroup
	}
	return 0
}

func (x *PgPerformOptionsPB_CachingInfoPB) GetKeyValue() []byte {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *PgPerformOptionsPB_CachingInfoPB) GetLifetimeThresholdMs() *OptionalUint32PB {
	if x != nil {
		return x.LifetimeThresholdMs
	}
	return nil
}

type PgGetActiveTransactionListResponsePB_EntryPB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     uint64                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TxnId         []byte                 `protobuf:"bytes,2,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PgGetActiveTransactionListResponsePB_EntryPB) Reset() {
	*x = PgGetActiveTransactionListResponsePB_EntryPB{}
	mi := &file_yb_tserver_pg_client_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PgGetActiveTransactionListResponsePB_EntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgGetActiveTransactionListResponsePB_EntryPB) ProtoMessage() {}

func (x *PgGetActiveTransactionListResponsePB_EntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_pg_client_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgGetActiveTransactionListResponsePB_EntryPB.ProtoReflect.Descriptor instead.
func (*PgGetActiveTransactionListResponsePB_EntryPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_pg_client_proto_rawDescGZIP(), []int{107, 0}
}

func (x *PgGetActiveTransactionListResponsePB_EntryPB) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PgGetActiveTransactionListResponsePB_EntryPB) GetTxnId() []byte {
	if x != nil {
		return x.TxnId
	}
	return nil
}

var File_yb_tserver_pg_client_proto protoreflect.FileDescriptor

var file_yb_tserver_pg_client_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x67, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x67, 0x73, 0x71,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x79,
	0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x64, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79,
	0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x50, 0x42, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x50, 0x42, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x10,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x42,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x47, 0x0a, 0x14, 0x50, 0x67, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x15, 0x50, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x50, 0x0a, 0x0c, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x69, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x50, 0x67, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x19, 0x50, 0x67, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xa4, 0x01, 0x0a, 0x18, 0x50, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x19, 0x50, 0x67, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x10,
	0x50, 0x67, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x42,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x0f, 0x50, 0x67, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x63,
	0x0a, 0x13, 0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x42, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0xb7, 0x04, 0x0a, 0x15, 0x50, 0x67, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50,
	0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x64,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x42, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x42, 0x52,
	0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x42, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a,
	0x16, 0x50, 0x67, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe1, 0x03, 0x0a, 0x19, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x4f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x1a, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x50,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x22, 0x95, 0x03, 0x0a, 0x20, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a,
	0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x73, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x47, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x21, 0x50,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1c, 0x63, 0x64, 0x63, 0x73, 0x64, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a,
	0x24, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a,
	0x02, 0x0a, 0x10, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x79, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x59, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x70, 0x67, 0x6f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x50, 0x67, 0x6f,
	0x69, 0x64, 0x12, 0x37, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79,
	0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x72, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x22, 0x40, 0x0a, 0x17, 0x50,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf9, 0x09,
	0x0a, 0x16, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x70, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x67, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x69, 0x61, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42,
	0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x42, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0c,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x42, 0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x74, 0x76, 0x69, 0x65, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4d, 0x61, 0x74, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x67, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x0a, 0x70, 0x67, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65,
	0x6c, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x11, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x12, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x78, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x79, 0x62, 0x2e, 0x50, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x78, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x18, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x17, 0x50, 0x67, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x02,
	0x0a, 0x1b, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x50, 0x42, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50,
	0x42, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x1c, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb6,
	0x01, 0x0a, 0x17, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69,
	0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x18, 0x50, 0x67, 0x44, 0x72, 0x6f,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x01, 0x0a,
	0x1e, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x1f, 0x50, 0x67, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x01,
	0x0a, 0x15, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50,
	0x42, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x1a, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x22,
	0x50, 0x67, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x22, 0xef, 0x02, 0x0a, 0x1c, 0x50, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x08, 0x64, 0x64,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e, 0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x42,
	0x52, 0x07, 0x64, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x92, 0x01, 0x0a, 0x09, 0x44, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x42, 0x12, 0x37, 0x0a,
	0x18, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x68, 0x61, 0x73, 0x44, 0x6f, 0x63, 0x64, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50,
	0x42, 0x52, 0x11, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x44, 0x62, 0x22, 0x48, 0x0a, 0x1d, 0x50, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x68,
	0x0a, 0x23, 0x50, 0x67, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x1a, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x50, 0x67, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x19, 0x0a, 0x17,
	0x50, 0x67, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x57, 0x0a, 0x18, 0x50, 0x67, 0x49, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x22, 0x91, 0x02, 0x0a, 0x18, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x41,
	0x67, 0x65, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x74, 0x78, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x54, 0x78, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x78,
	0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x34,
	0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x04, 0x0a, 0x19, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x6f, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x83, 0x01, 0x0a, 0x18,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x1a, 0x3a, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x7c, 0x0a,
	0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x1d,
	0x50, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x23,
	0x50, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x24, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x17, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x20, 0x50, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x61,
	0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x84, 0x02, 0x0a, 0x14, 0x50, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x23, 0x50, 0x67, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x08, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85, 0x01,
	0x0a, 0x24, 0x50, 0x67, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x14, 0x72, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x21, 0x50, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x42, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x22, 0x57, 0x0a, 0x1f, 0x50, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xec, 0x05, 0x0a, 0x17, 0x50, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f,
	0x69, 0x64, 0x12, 0x59, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x5f, 0x6c, 0x73, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4c, 0x73, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x73, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x78, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x78, 0x6d,
	0x69, 0x6e, 0x12, 0x6d, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x70, 0x12, 0x36, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75,
	0x62, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x79, 0x62,
	0x5f, 0x6c, 0x73, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x47, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x79, 0x62, 0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x66, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x42, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x50, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x14, 0x50, 0x67, 0x4f,
	0x70, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x13, 0x50, 0x67,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x42, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0xba, 0x01, 0x0a, 0x15, 0x50, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73, 0x0a, 0x20,
	0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61,
	0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f,
	0x70, 0x50, 0x42, 0x12, 0x2f, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x05, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x72, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22, 0xdd, 0x0a, 0x0a, 0x12, 0x50, 0x67, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x64, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x64, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x78, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x74, 0x78, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x2d, 0x0a, 0x13,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x69,
	0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x50, 0x42, 0x52, 0x0c, 0x69, 0x6e, 0x54, 0x78, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x16,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x73, 0x65, 0x5f, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x75, 0x73, 0x65, 0x58, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x39, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x63, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0b,
	0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x25, 0x79, 0x62, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64,
	0x64, 0x6c, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x79, 0x62, 0x4e, 0x6f, 0x6e, 0x44, 0x64, 0x6c, 0x54, 0x78, 0x6e,
	0x46, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0f, 0x70, 0x67, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x67,
	0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x18, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x74, 0x79, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x9b, 0x01, 0x0a, 0x0d, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x50, 0x42, 0x52, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x50, 0x67, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x50, 0x42,
	0x52, 0x03, 0x6f, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67,
	0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e,
	0x54, 0x78, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x50,
	0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x4f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x78, 0x0a, 0x17, 0x50, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x69, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4f, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4f, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x23, 0x50, 0x67,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4f,
	0x0a, 0x24, 0x50, 0x67, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x75,
	0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xab, 0x01, 0x0a, 0x22, 0x50, 0x67, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x73, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4e, 0x0a,
	0x23, 0x50, 0x67, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a,
	0x1c, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a, 0x1d, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x50, 0x67, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a,
	0x19, 0x50, 0x67, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x50, 0x67, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x50, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x34, 0x0a,
	0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x1d, 0x50, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc6, 0x02,
	0x0a, 0x1e, 0x50, 0x67, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4f, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x79,
	0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x1f, 0x50, 0x67, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc3, 0x03, 0x0a, 0x1e, 0x50, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x71, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65,
	0x71, 0x4f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64,
	0x62, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x1f, 0x50, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x95,
	0x03, 0x0a, 0x1d, 0x50, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4f, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x79,
	0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x63,
	0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x63, 0x42, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x1e, 0x50, 0x67, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x1c, 0x50, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71,
	0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4f,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x62, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x44, 0x62, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
	0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80,
	0x01, 0x0a, 0x1d, 0x50, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x22, 0xa5, 0x01, 0x0a, 0x1e, 0x50, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x71, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x71,
	0x4f, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x1f, 0x50, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x42, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c,
	0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x48, 0x0a, 0x1d, 0x50, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a,
	0x1b, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x33, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x1c, 0x50, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b,
	0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x1d, 0x50,
	0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x70, 0x69, 0x74, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1e,
	0x50, 0x67, 0x49, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x58, 0x52, 0x65, 0x70, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x33,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x50, 0x67,
	0x49, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52,
	0x65, 0x70, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x78, 0x72, 0x65, 0x70,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x72, 0x65, 0x70, 0x6c, 0x22, 0x93, 0x01, 0x0a,
	0x27, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x69, 0x7a,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c,
	0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xaf, 0x01, 0x0a, 0x28, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x54,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x42, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x28, 0x50, 0x67, 0x57, 0x61, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c,
	0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50,
	0x67, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x29,
	0x50, 0x67, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x4c, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x1c, 0x50, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79,
	0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52,
	0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x1d,
	0x50, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x1f, 0x50, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x21, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x71, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x43, 0x71, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x68, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41,
	0x73, 0x68, 0x41, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x42, 0x0a, 0x1e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x61, 0x66, 0x74, 0x4c, 0x6f, 0x67, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x87, 0x01, 0x0a,
	0x0c, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x12, 0x34, 0x0a,
	0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x20, 0x50, 0x67, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x52, 0x11, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x75,
	0x0a, 0x2b, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x52, 0x26, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x28, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x50,
	0x42, 0x52, 0x23, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x52, 0x61, 0x66,
	0x74, 0x4c, 0x6f, 0x67, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x57, 0x61, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x71, 0x6c, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x71, 0x6c, 0x57, 0x61,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x23, 0x50, 0x67, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x50, 0x42, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe4, 0x01, 0x0a, 0x24, 0x50, 0x67, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x07, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x78, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x03, 0x0a, 0x1c, 0x50,
	0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61,
	0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x1d, 0x50, 0x67,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x48, 0x74, 0x22, 0x68, 0x0a, 0x19, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x62, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x64, 0x62, 0x4f, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e, 0x0a,
	0x1a, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4f, 0x69, 0x64, 0x22, 0x4e, 0x0a,
	0x14, 0x50, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0x5a, 0x0a,
	0x15, 0x50, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x22, 0x55, 0x0a, 0x1d, 0x50, 0x67, 0x59,
	0x43, 0x51, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x50, 0x67, 0x59, 0x43, 0x51, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x59, 0x43,
	0x51, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x50, 0x42, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xac,
	0x02, 0x0a, 0x14, 0x59, 0x43, 0x51, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x0a,
	0x1a, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0c, 0x61,
	0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x7b, 0x0a, 0x1b, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x51,
	0x0a, 0x19, 0x50, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0c, 0x61,
	0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x50, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x50, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x75, 0x0a, 0x1c, 0x50, 0x67, 0x43, 0x72, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a,
	0x1d, 0x50, 0x67, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54, 0x0a, 0x1c, 0x50, 0x67, 0x43, 0x72, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a,
	0x1d, 0x50, 0x67, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x15, 0x50, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x50, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x15, 0x50, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x62, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x62, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x0a, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0xa2, 0x02, 0x0a, 0x1c, 0x50, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x42, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a,
	0x12, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x1d, 0x50, 0x67, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x19, 0x50, 0x67, 0x53, 0x65, 0x74, 0x54, 0x78, 0x6e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x76, 0x0a, 0x1a, 0x50, 0x67, 0x53, 0x65, 0x74, 0x54, 0x78, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62,
	0x2e, 0x50, 0x67, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x42,
	0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x7b, 0x0a, 0x24, 0x50, 0x67,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x78, 0x6e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x73, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0b, 0x61, 0x73, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x25, 0x50, 0x67, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x47, 0x0a, 0x15, 0x50, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54,
	0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x03, 0x2a, 0xbb, 0x01, 0x0a, 0x21, 0x50, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4c, 0x4f, 0x54, 0x5f, 0x4e, 0x4f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x03,
	0x2a, 0x93, 0x01, 0x0a, 0x18, 0x50, 0x47, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x22, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x67, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x67, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x4c,
	0x73, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x67, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x14, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x53, 0x55,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x13, 0x50, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x32,
	0x96, 0x30, 0x0a, 0x0f, 0x50, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x53, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x74, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2d,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7d, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0c, 0x44,
	0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x44, 0x72, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x2a, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59,
	0x0a, 0x0c, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x23,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x49, 0x73,
	0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x49, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x74, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x71, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x7d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x30, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x50, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x74, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2d, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x07, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x22, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x02, 0x12, 0x56, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x69, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x69, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7d, 0x0a, 0x18, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x75, 0x62, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c,
	0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x8c, 0x01,
	0x0a, 0x1d, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x57,
	0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x35, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6b, 0x0a, 0x12,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x28,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a,
	0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x66, 0x50, 0x69, 0x74, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x13, 0x49, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52, 0x65, 0x70, 0x6c, 0x12, 0x2a,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x49, 0x73,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52, 0x65, 0x70,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x49, 0x73, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x58, 0x52, 0x65, 0x70, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x34, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74,
	0x54, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a,
	0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x7d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x30, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x68, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x50, 0x67, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x0f, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x53, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x7d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x53, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x58, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x22, 0x06, 0x82, 0xb5, 0x18, 0x02, 0x08, 0x02, 0x12, 0x6b, 0x0a, 0x12, 0x59, 0x43, 0x51,
	0x4c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x59,
	0x43, 0x51, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x59, 0x43, 0x51, 0x4c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x68, 0x0a, 0x11, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x43,
	0x72, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x11, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x28, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x54, 0x78, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x53, 0x65, 0x74, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x67, 0x53, 0x65, 0x74,
	0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x54, 0x78, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_yb_tserver_pg_client_proto_rawDescOnce sync.Once
	file_yb_tserver_pg_client_proto_rawDescData []byte
)

func file_yb_tserver_pg_client_proto_rawDescGZIP() []byte {
	file_yb_tserver_pg_client_proto_rawDescOnce.Do(func() {
		file_yb_tserver_pg_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yb_tserver_pg_client_proto_rawDesc), len(file_yb_tserver_pg_client_proto_rawDesc)))
	})
	return file_yb_tserver_pg_client_proto_rawDescData
}

var file_yb_tserver_pg_client_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_yb_tserver_pg_client_proto_msgTypes = make([]protoimpl.MessageInfo, 142)
var file_yb_tserver_pg_client_proto_goTypes = []any{
	(PgReplicaIdentityType)(0),                                 // 0: yb.tserver.PgReplicaIdentityType
	(PgReplicationSlotSnapshotActionPB)(0),                     // 1: yb.tserver.PgReplicationSlotSnapshotActionPB
	(PGReplicationSlotLsnType)(0),                              // 2: yb.tserver.PGReplicationSlotLsnType
	(ReplicationSlotStatus)(0),                                 // 3: yb.tserver.ReplicationSlotStatus
	(ReadTimeManipulation)(0),                                  // 4: yb.tserver.ReadTimeManipulation
	(PgMetricsInfoStatus)(0),                                   // 5: yb.tserver.PgMetricsInfoStatus
	(*OptionalFixed64PB)(nil),                                  // 6: yb.tserver.OptionalFixed64PB
	(*OptionalUint32PB)(nil),                                   // 7: yb.tserver.OptionalUint32PB
	(*OptionalUint64PB)(nil),                                   // 8: yb.tserver.OptionalUint64PB
	(*PgHeartbeatRequestPB)(nil),                               // 9: yb.tserver.PgHeartbeatRequestPB
	(*PgHeartbeatResponsePB)(nil),                              // 10: yb.tserver.PgHeartbeatResponsePB
	(*PgObjectIdPB)(nil),                                       // 11: yb.tserver.PgObjectIdPB
	(*PgAlterDatabaseRequestPB)(nil),                           // 12: yb.tserver.PgAlterDatabaseRequestPB
	(*PgAlterDatabaseResponsePB)(nil),                          // 13: yb.tserver.PgAlterDatabaseResponsePB
	(*PgBackfillIndexRequestPB)(nil),                           // 14: yb.tserver.PgBackfillIndexRequestPB
	(*PgBackfillIndexResponsePB)(nil),                          // 15: yb.tserver.PgBackfillIndexResponsePB
	(*PgRenameColumnPB)(nil),                                   // 16: yb.tserver.PgRenameColumnPB
	(*PgRenameTablePB)(nil),                                    // 17: yb.tserver.PgRenameTablePB
	(*PgReplicaIdentityPB)(nil),                                // 18: yb.tserver.PgReplicaIdentityPB
	(*PgAlterTableRequestPB)(nil),                              // 19: yb.tserver.PgAlterTableRequestPB
	(*PgAlterTableResponsePB)(nil),                             // 20: yb.tserver.PgAlterTableResponsePB
	(*PgCreateDatabaseRequestPB)(nil),                          // 21: yb.tserver.PgCreateDatabaseRequestPB
	(*PgCreateDatabaseResponsePB)(nil),                         // 22: yb.tserver.PgCreateDatabaseResponsePB
	(*PgCreateSequencesDataTableRequestPB)(nil),                // 23: yb.tserver.PgCreateSequencesDataTableRequestPB
	(*PgCreateReplicationSlotRequestPB)(nil),                   // 24: yb.tserver.PgCreateReplicationSlotRequestPB
	(*PgCreateReplicationSlotResponsePB)(nil),                  // 25: yb.tserver.PgCreateReplicationSlotResponsePB
	(*PgCreateSequencesDataTableResponsePB)(nil),               // 26: yb.tserver.PgCreateSequencesDataTableResponsePB
	(*PgCreateColumnPB)(nil),                                   // 27: yb.tserver.PgCreateColumnPB
	(*PgCreateSplitBoundaryPB)(nil),                            // 28: yb.tserver.PgCreateSplitBoundaryPB
	(*PgCreateTableRequestPB)(nil),                             // 29: yb.tserver.PgCreateTableRequestPB
	(*PgCreateTableResponsePB)(nil),                            // 30: yb.tserver.PgCreateTableResponsePB
	(*PgCreateTablegroupRequestPB)(nil),                        // 31: yb.tserver.PgCreateTablegroupRequestPB
	(*PgCreateTablegroupResponsePB)(nil),                       // 32: yb.tserver.PgCreateTablegroupResponsePB
	(*PgDropDatabaseRequestPB)(nil),                            // 33: yb.tserver.PgDropDatabaseRequestPB
	(*PgDropDatabaseResponsePB)(nil),                           // 34: yb.tserver.PgDropDatabaseResponsePB
	(*PgDropReplicationSlotRequestPB)(nil),                     // 35: yb.tserver.PgDropReplicationSlotRequestPB
	(*PgDropReplicationSlotResponsePB)(nil),                    // 36: yb.tserver.PgDropReplicationSlotResponsePB
	(*PgDropTableRequestPB)(nil),                               // 37: yb.tserver.PgDropTableRequestPB
	(*PgDropTableResponsePB)(nil),                              // 38: yb.tserver.PgDropTableResponsePB
	(*PgDropTablegroupRequestPB)(nil),                          // 39: yb.tserver.PgDropTablegroupRequestPB
	(*PgDropTablegroupResponsePB)(nil),                         // 40: yb.tserver.PgDropTablegroupResponsePB
	(*PgGetCatalogMasterVersionRequestPB)(nil),                 // 41: yb.tserver.PgGetCatalogMasterVersionRequestPB
	(*PgFinishTransactionRequestPB)(nil),                       // 42: yb.tserver.PgFinishTransactionRequestPB
	(*PgFinishTransactionResponsePB)(nil),                      // 43: yb.tserver.PgFinishTransactionResponsePB
	(*PgGetCatalogMasterVersionResponsePB)(nil),                // 44: yb.tserver.PgGetCatalogMasterVersionResponsePB
	(*PgGetDatabaseInfoRequestPB)(nil),                         // 45: yb.tserver.PgGetDatabaseInfoRequestPB
	(*PgGetDatabaseInfoResponsePB)(nil),                        // 46: yb.tserver.PgGetDatabaseInfoResponsePB
	(*PgIsInitDbDoneRequestPB)(nil),                            // 47: yb.tserver.PgIsInitDbDoneRequestPB
	(*PgIsInitDbDoneResponsePB)(nil),                           // 48: yb.tserver.PgIsInitDbDoneResponsePB
	(*PgGetLockStatusRequestPB)(nil),                           // 49: yb.tserver.PgGetLockStatusRequestPB
	(*PgGetLockStatusResponsePB)(nil),                          // 50: yb.tserver.PgGetLockStatusResponsePB
	(*PgGetReplicationSlotRequestPB)(nil),                      // 51: yb.tserver.PgGetReplicationSlotRequestPB
	(*PgGetReplicationSlotResponsePB)(nil),                     // 52: yb.tserver.PgGetReplicationSlotResponsePB
	(*PgGetReplicationSlotStatusRequestPB)(nil),                // 53: yb.tserver.PgGetReplicationSlotStatusRequestPB
	(*PgGetReplicationSlotStatusResponsePB)(nil),               // 54: yb.tserver.PgGetReplicationSlotStatusResponsePB
	(*PgListLiveTabletServersRequestPB)(nil),                   // 55: yb.tserver.PgListLiveTabletServersRequestPB
	(*PgLiveTabletServerPB)(nil),                               // 56: yb.tserver.PgLiveTabletServerPB
	(*PgGetIndexBackfillProgressRequestPB)(nil),                // 57: yb.tserver.PgGetIndexBackfillProgressRequestPB
	(*PgGetIndexBackfillProgressResponsePB)(nil),               // 58: yb.tserver.PgGetIndexBackfillProgressResponsePB
	(*PgListLiveTabletServersResponsePB)(nil),                  // 59: yb.tserver.PgListLiveTabletServersResponsePB
	(*PgListReplicationSlotsRequestPB)(nil),                    // 60: yb.tserver.PgListReplicationSlotsRequestPB
	(*PgReplicationSlotInfoPB)(nil),                            // 61: yb.tserver.PgReplicationSlotInfoPB
	(*PgListReplicationSlotsResponsePB)(nil),                   // 62: yb.tserver.PgListReplicationSlotsResponsePB
	(*PgOpenTableRequestPB)(nil),                               // 63: yb.tserver.PgOpenTableRequestPB
	(*PgTablePartitionsPB)(nil),                                // 64: yb.tserver.PgTablePartitionsPB
	(*PgOpenTableResponsePB)(nil),                              // 65: yb.tserver.PgOpenTableResponsePB
	(*PgGetTablePartitionListRequestPB)(nil),                   // 66: yb.tserver.PgGetTablePartitionListRequestPB
	(*PgGetTablePartitionListResponsePB)(nil),                  // 67: yb.tserver.PgGetTablePartitionListResponsePB
	(*PgPerformOpPB)(nil),                                      // 68: yb.tserver.PgPerformOpPB
	(*PgPerformOptionsPB)(nil),                                 // 69: yb.tserver.PgPerformOptionsPB
	(*PgPerformRequestPB)(nil),                                 // 70: yb.tserver.PgPerformRequestPB
	(*PgPerformResponsePB)(nil),                                // 71: yb.tserver.PgPerformResponsePB
	(*PgReserveOidsRequestPB)(nil),                             // 72: yb.tserver.PgReserveOidsRequestPB
	(*PgReserveOidsResponsePB)(nil),                            // 73: yb.tserver.PgReserveOidsResponsePB
	(*PgRollbackToSubTransactionRequestPB)(nil),                // 74: yb.tserver.PgRollbackToSubTransactionRequestPB
	(*PgRollbackToSubTransactionResponsePB)(nil),               // 75: yb.tserver.PgRollbackToSubTransactionResponsePB
	(*PgSetActiveSubTransactionRequestPB)(nil),                 // 76: yb.tserver.PgSetActiveSubTransactionRequestPB
	(*PgSetActiveSubTransactionResponsePB)(nil),                // 77: yb.tserver.PgSetActiveSubTransactionResponsePB
	(*PgTabletServerCountRequestPB)(nil),                       // 78: yb.tserver.PgTabletServerCountRequestPB
	(*PgTabletServerCountResponsePB)(nil),                      // 79: yb.tserver.PgTabletServerCountResponsePB
	(*PgTruncateTableRequestPB)(nil),                           // 80: yb.tserver.PgTruncateTableRequestPB
	(*PgTruncateTableResponsePB)(nil),                          // 81: yb.tserver.PgTruncateTableResponsePB
	(*PgPlacementInfoPB)(nil),                                  // 82: yb.tserver.PgPlacementInfoPB
	(*PgValidatePlacementRequestPB)(nil),                       // 83: yb.tserver.PgValidatePlacementRequestPB
	(*PgValidatePlacementResponsePB)(nil),                      // 84: yb.tserver.PgValidatePlacementResponsePB
	(*PgInsertSequenceTupleRequestPB)(nil),                     // 85: yb.tserver.PgInsertSequenceTupleRequestPB
	(*PgInsertSequenceTupleResponsePB)(nil),                    // 86: yb.tserver.PgInsertSequenceTupleResponsePB
	(*PgUpdateSequenceTupleRequestPB)(nil),                     // 87: yb.tserver.PgUpdateSequenceTupleRequestPB
	(*PgUpdateSequenceTupleResponsePB)(nil),                    // 88: yb.tserver.PgUpdateSequenceTupleResponsePB
	(*PgFetchSequenceTupleRequestPB)(nil),                      // 89: yb.tserver.PgFetchSequenceTupleRequestPB
	(*PgFetchSequenceTupleResponsePB)(nil),                     // 90: yb.tserver.PgFetchSequenceTupleResponsePB
	(*PgReadSequenceTupleRequestPB)(nil),                       // 91: yb.tserver.PgReadSequenceTupleRequestPB
	(*PgReadSequenceTupleResponsePB)(nil),                      // 92: yb.tserver.PgReadSequenceTupleResponsePB
	(*PgDeleteSequenceTupleRequestPB)(nil),                     // 93: yb.tserver.PgDeleteSequenceTupleRequestPB
	(*PgDeleteSequenceTupleResponsePB)(nil),                    // 94: yb.tserver.PgDeleteSequenceTupleResponsePB
	(*PgDeleteDBSequencesRequestPB)(nil),                       // 95: yb.tserver.PgDeleteDBSequencesRequestPB
	(*PgDeleteDBSequencesResponsePB)(nil),                      // 96: yb.tserver.PgDeleteDBSequencesResponsePB
	(*PgGetTableDiskSizeRequestPB)(nil),                        // 97: yb.tserver.PgGetTableDiskSizeRequestPB
	(*PgGetTableDiskSizeResponsePB)(nil),                       // 98: yb.tserver.PgGetTableDiskSizeResponsePB
	(*PgCheckIfPitrActiveRequestPB)(nil),                       // 99: yb.tserver.PgCheckIfPitrActiveRequestPB
	(*PgCheckIfPitrActiveResponsePB)(nil),                      // 100: yb.tserver.PgCheckIfPitrActiveResponsePB
	(*PgIsObjectPartOfXReplRequestPB)(nil),                     // 101: yb.tserver.PgIsObjectPartOfXReplRequestPB
	(*PgIsObjectPartOfXReplResponsePB)(nil),                    // 102: yb.tserver.PgIsObjectPartOfXReplResponsePB
	(*PgGetTserverCatalogVersionInfoRequestPB)(nil),            // 103: yb.tserver.PgGetTserverCatalogVersionInfoRequestPB
	(*PgGetTserverCatalogVersionInfoResponsePB)(nil),           // 104: yb.tserver.PgGetTserverCatalogVersionInfoResponsePB
	(*PgWaitForBackendsCatalogVersionRequestPB)(nil),           // 105: yb.tserver.PgWaitForBackendsCatalogVersionRequestPB
	(*PgWaitForBackendsCatalogVersionResponsePB)(nil),          // 106: yb.tserver.PgWaitForBackendsCatalogVersionResponsePB
	(*PgCancelTransactionRequestPB)(nil),                       // 107: yb.tserver.PgCancelTransactionRequestPB
	(*PgCancelTransactionResponsePB)(nil),                      // 108: yb.tserver.PgCancelTransactionResponsePB
	(*PgActiveSessionHistoryRequestPB)(nil),                    // 109: yb.tserver.PgActiveSessionHistoryRequestPB
	(*WaitStatesPB)(nil),                                       // 110: yb.tserver.WaitStatesPB
	(*PgActiveSessionHistoryResponsePB)(nil),                   // 111: yb.tserver.PgActiveSessionHistoryResponsePB
	(*PgGetActiveTransactionListRequestPB)(nil),                // 112: yb.tserver.PgGetActiveTransactionListRequestPB
	(*PgGetActiveTransactionListResponsePB)(nil),               // 113: yb.tserver.PgGetActiveTransactionListResponsePB
	(*PgGetTableKeyRangesRequestPB)(nil),                       // 114: yb.tserver.PgGetTableKeyRangesRequestPB
	(*PgGetTableKeyRangesResponsePB)(nil),                      // 115: yb.tserver.PgGetTableKeyRangesResponsePB
	(*PgGetNewObjectIdRequestPB)(nil),                          // 116: yb.tserver.PgGetNewObjectIdRequestPB
	(*PgGetNewObjectIdResponsePB)(nil),                         // 117: yb.tserver.PgGetNewObjectIdResponsePB
	(*PgFetchDataRequestPB)(nil),                               // 118: yb.tserver.PgFetchDataRequestPB
	(*PgFetchDataResponsePB)(nil),                              // 119: yb.tserver.PgFetchDataResponsePB
	(*PgYCQLStatementStatsRequestPB)(nil),                      // 120: yb.tserver.PgYCQLStatementStatsRequestPB
	(*PgYCQLStatementStatsResponsePB)(nil),                     // 121: yb.tserver.PgYCQLStatementStatsResponsePB
	(*YCQLStatementStatsPB)(nil),                               // 122: yb.tserver.YCQLStatementStatsPB
	(*PgTabletsMetadataRequestPB)(nil),                         // 123: yb.tserver.PgTabletsMetadataRequestPB
	(*PgTabletsMetadataResponsePB)(nil),                        // 124: yb.tserver.PgTabletsMetadataResponsePB
	(*PgServersMetricsRequestPB)(nil),                          // 125: yb.tserver.PgServersMetricsRequestPB
	(*PgServerMetricsInfoPB)(nil),                              // 126: yb.tserver.PgServerMetricsInfoPB
	(*PgServersMetricsResponsePB)(nil),                         // 127: yb.tserver.PgServersMetricsResponsePB
	(*PgCronSetLastMinuteRequestPB)(nil),                       // 128: yb.tserver.PgCronSetLastMinuteRequestPB
	(*PgCronSetLastMinuteResponsePB)(nil),                      // 129: yb.tserver.PgCronSetLastMinuteResponsePB
	(*PgCronGetLastMinuteRequestPB)(nil),                       // 130: yb.tserver.PgCronGetLastMinuteRequestPB
	(*PgCronGetLastMinuteResponsePB)(nil),                      // 131: yb.tserver.PgCronGetLastMinuteResponsePB
	(*PgListClonesRequestPB)(nil),                              // 132: yb.tserver.PgListClonesRequestPB
	(*PgListClonesResponsePB)(nil),                             // 133: yb.tserver.PgListClonesResponsePB
	(*PgDatabaseCloneInfoPB)(nil),                              // 134: yb.tserver.PgDatabaseCloneInfoPB
	(*PgExportTxnSnapshotRequestPB)(nil),                       // 135: yb.tserver.PgExportTxnSnapshotRequestPB
	(*PgExportTxnSnapshotResponsePB)(nil),                      // 136: yb.tserver.PgExportTxnSnapshotResponsePB
	(*PgSetTxnSnapshotRequestPB)(nil),                          // 137: yb.tserver.PgSetTxnSnapshotRequestPB
	(*PgSetTxnSnapshotResponsePB)(nil),                         // 138: yb.tserver.PgSetTxnSnapshotResponsePB
	(*PgClearExportedTxnSnapshotsRequestPB)(nil),               // 139: yb.tserver.PgClearExportedTxnSnapshotsRequestPB
	(*PgClearExportedTxnSnapshotsResponsePB)(nil),              // 140: yb.tserver.PgClearExportedTxnSnapshotsResponsePB
	(*PgFinishTransactionRequestPB_DdlModePB)(nil),             // 141: yb.tserver.PgFinishTransactionRequestPB.DdlModePB
	(*PgGetLockStatusResponsePB_NodeLockStatusResponsePB)(nil), // 142: yb.tserver.PgGetLockStatusResponsePB.NodeLockStatusResponsePB
	(*PgGetLockStatusResponsePB_TransactionList)(nil),          // 143: yb.tserver.PgGetLockStatusResponsePB.TransactionList
	nil,                                      // 144: yb.tserver.PgGetLockStatusResponsePB.TransactionsByNodeEntry
	nil,                                      // 145: yb.tserver.PgReplicationSlotInfoPB.ReplicaIdentityMapEntry
	(*PgPerformOptionsPB_CachingInfoPB)(nil), // 146: yb.tserver.PgPerformOptionsPB.CachingInfoPB
	(*PgGetActiveTransactionListResponsePB_EntryPB)(nil), // 147: yb.tserver.PgGetActiveTransactionListResponsePB.EntryPB
	(*common.AppStatusPB)(nil),                           // 148: yb.AppStatusPB
	(*common.AshMetadataPB)(nil),                         // 149: yb.AshMetadataPB
	(*common.QLValuePB)(nil),                             // 150: yb.QLValuePB
	(*common.PgVectorIdxOptionsPB)(nil),                  // 151: yb.PgVectorIdxOptionsPB
	(*master.TableIdentifierPB)(nil),                     // 152: yb.master.TableIdentifierPB
	(*master.GetNamespaceInfoResponsePB)(nil),            // 153: yb.master.GetNamespaceInfoResponsePB
	(*master.GetTableSchemaResponsePB)(nil),              // 154: yb.master.GetTableSchemaResponsePB
	(*common.PgsqlWriteRequestPB)(nil),                   // 155: yb.PgsqlWriteRequestPB
	(*common.PgsqlReadRequestPB)(nil),                    // 156: yb.PgsqlReadRequestPB
	(*common.ReadHybridTimePB)(nil),                      // 157: yb.ReadHybridTimePB
	(*common.PgsqlResponsePB)(nil),                       // 158: yb.PgsqlResponsePB
	(*common.TServerDBCatalogVersionInfo)(nil),           // 159: yb.TServerDBCatalogVersionInfo
	(*common.WaitStateInfoPB)(nil),                       // 160: yb.WaitStateInfoPB
	(*tablet.TabletStatusPB)(nil),                        // 161: yb.tablet.TabletStatusPB
	(*common.TserverMetricsInfoPB)(nil),                  // 162: yb.TserverMetricsInfoPB
	(*common.PgTxnSnapshotPB)(nil),                       // 163: yb.PgTxnSnapshotPB
	(*common.TabletLockInfoPB)(nil),                      // 164: yb.TabletLockInfoPB
}
var file_yb_tserver_pg_client_proto_depIdxs = []int32{
	148, // 0: yb.tserver.PgHeartbeatResponsePB.status:type_name -> yb.AppStatusPB
	149, // 1: yb.tserver.PgAlterDatabaseRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 2: yb.tserver.PgAlterDatabaseResponsePB.status:type_name -> yb.AppStatusPB
	11,  // 3: yb.tserver.PgBackfillIndexRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 4: yb.tserver.PgBackfillIndexRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 5: yb.tserver.PgBackfillIndexResponsePB.status:type_name -> yb.AppStatusPB
	0,   // 6: yb.tserver.PgReplicaIdentityPB.replica_identity:type_name -> yb.tserver.PgReplicaIdentityType
	11,  // 7: yb.tserver.PgAlterTableRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	27,  // 8: yb.tserver.PgAlterTableRequestPB.add_columns:type_name -> yb.tserver.PgCreateColumnPB
	16,  // 9: yb.tserver.PgAlterTableRequestPB.rename_columns:type_name -> yb.tserver.PgRenameColumnPB
	17,  // 10: yb.tserver.PgAlterTableRequestPB.rename_table:type_name -> yb.tserver.PgRenameTablePB
	18,  // 11: yb.tserver.PgAlterTableRequestPB.replica_identity:type_name -> yb.tserver.PgReplicaIdentityPB
	149, // 12: yb.tserver.PgAlterTableRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 13: yb.tserver.PgAlterTableResponsePB.status:type_name -> yb.AppStatusPB
	149, // 14: yb.tserver.PgCreateDatabaseRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 15: yb.tserver.PgCreateDatabaseResponsePB.status:type_name -> yb.AppStatusPB
	1,   // 16: yb.tserver.PgCreateReplicationSlotRequestPB.snapshot_action:type_name -> yb.tserver.PgReplicationSlotSnapshotActionPB
	149, // 17: yb.tserver.PgCreateReplicationSlotRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	2,   // 18: yb.tserver.PgCreateReplicationSlotRequestPB.lsn_type:type_name -> yb.tserver.PGReplicationSlotLsnType
	148, // 19: yb.tserver.PgCreateReplicationSlotResponsePB.status:type_name -> yb.AppStatusPB
	148, // 20: yb.tserver.PgCreateSequencesDataTableResponsePB.status:type_name -> yb.AppStatusPB
	150, // 21: yb.tserver.PgCreateColumnPB.attr_missing_val:type_name -> yb.QLValuePB
	150, // 22: yb.tserver.PgCreateSplitBoundaryPB.values:type_name -> yb.QLValuePB
	11,  // 23: yb.tserver.PgCreateTableRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	11,  // 24: yb.tserver.PgCreateTableRequestPB.tablegroup_oid:type_name -> yb.tserver.PgObjectIdPB
	11,  // 25: yb.tserver.PgCreateTableRequestPB.tablespace_oid:type_name -> yb.tserver.PgObjectIdPB
	27,  // 26: yb.tserver.PgCreateTableRequestPB.create_columns:type_name -> yb.tserver.PgCreateColumnPB
	28,  // 27: yb.tserver.PgCreateTableRequestPB.split_bounds:type_name -> yb.tserver.PgCreateSplitBoundaryPB
	11,  // 28: yb.tserver.PgCreateTableRequestPB.base_table_id:type_name -> yb.tserver.PgObjectIdPB
	11,  // 29: yb.tserver.PgCreateTableRequestPB.pg_table_oid:type_name -> yb.tserver.PgObjectIdPB
	11,  // 30: yb.tserver.PgCreateTableRequestPB.old_relfilenode_oid:type_name -> yb.tserver.PgObjectIdPB
	151, // 31: yb.tserver.PgCreateTableRequestPB.vector_idx_options:type_name -> yb.PgVectorIdxOptionsPB
	149, // 32: yb.tserver.PgCreateTableRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 33: yb.tserver.PgCreateTableResponsePB.status:type_name -> yb.AppStatusPB
	11,  // 34: yb.tserver.PgCreateTablegroupRequestPB.tablegroup_id:type_name -> yb.tserver.PgObjectIdPB
	11,  // 35: yb.tserver.PgCreateTablegroupRequestPB.tablespace_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 36: yb.tserver.PgCreateTablegroupRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 37: yb.tserver.PgCreateTablegroupResponsePB.status:type_name -> yb.AppStatusPB
	149, // 38: yb.tserver.PgDropDatabaseRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 39: yb.tserver.PgDropDatabaseResponsePB.status:type_name -> yb.AppStatusPB
	149, // 40: yb.tserver.PgDropReplicationSlotRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 41: yb.tserver.PgDropReplicationSlotResponsePB.status:type_name -> yb.AppStatusPB
	11,  // 42: yb.tserver.PgDropTableRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 43: yb.tserver.PgDropTableRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 44: yb.tserver.PgDropTableResponsePB.status:type_name -> yb.AppStatusPB
	152, // 45: yb.tserver.PgDropTableResponsePB.indexed_table:type_name -> yb.master.TableIdentifierPB
	11,  // 46: yb.tserver.PgDropTablegroupRequestPB.tablegroup_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 47: yb.tserver.PgDropTablegroupRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 48: yb.tserver.PgDropTablegroupResponsePB.status:type_name -> yb.AppStatusPB
	141, // 49: yb.tserver.PgFinishTransactionRequestPB.ddl_mode:type_name -> yb.tserver.PgFinishTransactionRequestPB.DdlModePB
	149, // 50: yb.tserver.PgFinishTransactionRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 51: yb.tserver.PgFinishTransactionResponsePB.status:type_name -> yb.AppStatusPB
	148, // 52: yb.tserver.PgGetCatalogMasterVersionResponsePB.status:type_name -> yb.AppStatusPB
	148, // 53: yb.tserver.PgGetDatabaseInfoResponsePB.status:type_name -> yb.AppStatusPB
	153, // 54: yb.tserver.PgGetDatabaseInfoResponsePB.info:type_name -> yb.master.GetNamespaceInfoResponsePB
	148, // 55: yb.tserver.PgIsInitDbDoneResponsePB.status:type_name -> yb.AppStatusPB
	149, // 56: yb.tserver.PgGetLockStatusRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 57: yb.tserver.PgGetLockStatusResponsePB.status:type_name -> yb.AppStatusPB
	142, // 58: yb.tserver.PgGetLockStatusResponsePB.node_locks:type_name -> yb.tserver.PgGetLockStatusResponsePB.NodeLockStatusResponsePB
	144, // 59: yb.tserver.PgGetLockStatusResponsePB.transactions_by_node:type_name -> yb.tserver.PgGetLockStatusResponsePB.TransactionsByNodeEntry
	149, // 60: yb.tserver.PgGetReplicationSlotRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 61: yb.tserver.PgGetReplicationSlotResponsePB.status:type_name -> yb.AppStatusPB
	61,  // 62: yb.tserver.PgGetReplicationSlotResponsePB.replication_slot_info:type_name -> yb.tserver.PgReplicationSlotInfoPB
	148, // 63: yb.tserver.PgGetReplicationSlotStatusResponsePB.status:type_name -> yb.AppStatusPB
	3,   // 64: yb.tserver.PgGetReplicationSlotStatusResponsePB.replication_slot_status:type_name -> yb.tserver.ReplicationSlotStatus
	149, // 65: yb.tserver.PgListLiveTabletServersRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	11,  // 66: yb.tserver.PgGetIndexBackfillProgressRequestPB.index_ids:type_name -> yb.tserver.PgObjectIdPB
	149, // 67: yb.tserver.PgGetIndexBackfillProgressRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 68: yb.tserver.PgGetIndexBackfillProgressResponsePB.status:type_name -> yb.AppStatusPB
	148, // 69: yb.tserver.PgListLiveTabletServersResponsePB.status:type_name -> yb.AppStatusPB
	56,  // 70: yb.tserver.PgListLiveTabletServersResponsePB.servers:type_name -> yb.tserver.PgLiveTabletServerPB
	149, // 71: yb.tserver.PgListReplicationSlotsRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	3,   // 72: yb.tserver.PgReplicationSlotInfoPB.replication_slot_status:type_name -> yb.tserver.ReplicationSlotStatus
	145, // 73: yb.tserver.PgReplicationSlotInfoPB.replica_identity_map:type_name -> yb.tserver.PgReplicationSlotInfoPB.ReplicaIdentityMapEntry
	2,   // 74: yb.tserver.PgReplicationSlotInfoPB.yb_lsn_type:type_name -> yb.tserver.PGReplicationSlotLsnType
	148, // 75: yb.tserver.PgListReplicationSlotsResponsePB.status:type_name -> yb.AppStatusPB
	61,  // 76: yb.tserver.PgListReplicationSlotsResponsePB.replication_slots:type_name -> yb.tserver.PgReplicationSlotInfoPB
	149, // 77: yb.tserver.PgOpenTableRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 78: yb.tserver.PgOpenTableResponsePB.status:type_name -> yb.AppStatusPB
	154, // 79: yb.tserver.PgOpenTableResponsePB.info:type_name -> yb.master.GetTableSchemaResponsePB
	64,  // 80: yb.tserver.PgOpenTableResponsePB.partitions:type_name -> yb.tserver.PgTablePartitionsPB
	149, // 81: yb.tserver.PgGetTablePartitionListRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 82: yb.tserver.PgGetTablePartitionListResponsePB.status:type_name -> yb.AppStatusPB
	64,  // 83: yb.tserver.PgGetTablePartitionListResponsePB.partitions:type_name -> yb.tserver.PgTablePartitionsPB
	155, // 84: yb.tserver.PgPerformOpPB.write:type_name -> yb.PgsqlWriteRequestPB
	156, // 85: yb.tserver.PgPerformOpPB.read:type_name -> yb.PgsqlReadRequestPB
	6,   // 86: yb.tserver.PgPerformOptionsPB.in_txn_limit_ht:type_name -> yb.tserver.OptionalFixed64PB
	4,   // 87: yb.tserver.PgPerformOptionsPB.read_time_manipulation:type_name -> yb.tserver.ReadTimeManipulation
	157, // 88: yb.tserver.PgPerformOptionsPB.read_time:type_name -> yb.ReadHybridTimePB
	146, // 89: yb.tserver.PgPerformOptionsPB.caching_info:type_name -> yb.tserver.PgPerformOptionsPB.CachingInfoPB
	149, // 90: yb.tserver.PgPerformOptionsPB.ash_metadata:type_name -> yb.AshMetadataPB
	69,  // 91: yb.tserver.PgPerformRequestPB.options:type_name -> yb.tserver.PgPerformOptionsPB
	68,  // 92: yb.tserver.PgPerformRequestPB.ops:type_name -> yb.tserver.PgPerformOpPB
	148, // 93: yb.tserver.PgPerformResponsePB.status:type_name -> yb.AppStatusPB
	158, // 94: yb.tserver.PgPerformResponsePB.responses:type_name -> yb.PgsqlResponsePB
	157, // 95: yb.tserver.PgPerformResponsePB.catalog_read_time:type_name -> yb.ReadHybridTimePB
	149, // 96: yb.tserver.PgReserveOidsRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 97: yb.tserver.PgReserveOidsResponsePB.status:type_name -> yb.AppStatusPB
	69,  // 98: yb.tserver.PgRollbackToSubTransactionRequestPB.options:type_name -> yb.tserver.PgPerformOptionsPB
	149, // 99: yb.tserver.PgRollbackToSubTransactionRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 100: yb.tserver.PgRollbackToSubTransactionResponsePB.status:type_name -> yb.AppStatusPB
	69,  // 101: yb.tserver.PgSetActiveSubTransactionRequestPB.options:type_name -> yb.tserver.PgPerformOptionsPB
	148, // 102: yb.tserver.PgSetActiveSubTransactionResponsePB.status:type_name -> yb.AppStatusPB
	149, // 103: yb.tserver.PgTabletServerCountRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 104: yb.tserver.PgTabletServerCountResponsePB.status:type_name -> yb.AppStatusPB
	11,  // 105: yb.tserver.PgTruncateTableRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 106: yb.tserver.PgTruncateTableRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 107: yb.tserver.PgTruncateTableResponsePB.status:type_name -> yb.AppStatusPB
	82,  // 108: yb.tserver.PgValidatePlacementRequestPB.placement_infos:type_name -> yb.tserver.PgPlacementInfoPB
	149, // 109: yb.tserver.PgValidatePlacementRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 110: yb.tserver.PgValidatePlacementResponsePB.status:type_name -> yb.AppStatusPB
	149, // 111: yb.tserver.PgInsertSequenceTupleRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 112: yb.tserver.PgInsertSequenceTupleResponsePB.status:type_name -> yb.AppStatusPB
	149, // 113: yb.tserver.PgUpdateSequenceTupleRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 114: yb.tserver.PgUpdateSequenceTupleResponsePB.status:type_name -> yb.AppStatusPB
	149, // 115: yb.tserver.PgFetchSequenceTupleRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 116: yb.tserver.PgFetchSequenceTupleResponsePB.status:type_name -> yb.AppStatusPB
	149, // 117: yb.tserver.PgReadSequenceTupleRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 118: yb.tserver.PgReadSequenceTupleResponsePB.status:type_name -> yb.AppStatusPB
	149, // 119: yb.tserver.PgDeleteSequenceTupleRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 120: yb.tserver.PgDeleteSequenceTupleResponsePB.status:type_name -> yb.AppStatusPB
	149, // 121: yb.tserver.PgDeleteDBSequencesRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 122: yb.tserver.PgDeleteDBSequencesResponsePB.status:type_name -> yb.AppStatusPB
	11,  // 123: yb.tserver.PgGetTableDiskSizeRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 124: yb.tserver.PgGetTableDiskSizeRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 125: yb.tserver.PgGetTableDiskSizeResponsePB.status:type_name -> yb.AppStatusPB
	149, // 126: yb.tserver.PgCheckIfPitrActiveRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 127: yb.tserver.PgCheckIfPitrActiveResponsePB.status:type_name -> yb.AppStatusPB
	11,  // 128: yb.tserver.PgIsObjectPartOfXReplRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 129: yb.tserver.PgIsObjectPartOfXReplRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 130: yb.tserver.PgIsObjectPartOfXReplResponsePB.status:type_name -> yb.AppStatusPB
	149, // 131: yb.tserver.PgGetTserverCatalogVersionInfoRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 132: yb.tserver.PgGetTserverCatalogVersionInfoResponsePB.status:type_name -> yb.AppStatusPB
	159, // 133: yb.tserver.PgGetTserverCatalogVersionInfoResponsePB.entries:type_name -> yb.TServerDBCatalogVersionInfo
	149, // 134: yb.tserver.PgWaitForBackendsCatalogVersionRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 135: yb.tserver.PgWaitForBackendsCatalogVersionResponsePB.status:type_name -> yb.AppStatusPB
	149, // 136: yb.tserver.PgCancelTransactionRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 137: yb.tserver.PgCancelTransactionResponsePB.status:type_name -> yb.AppStatusPB
	160, // 138: yb.tserver.WaitStatesPB.wait_states:type_name -> yb.WaitStateInfoPB
	148, // 139: yb.tserver.PgActiveSessionHistoryResponsePB.status:type_name -> yb.AppStatusPB
	110, // 140: yb.tserver.PgActiveSessionHistoryResponsePB.tserver_wait_states:type_name -> yb.tserver.WaitStatesPB
	110, // 141: yb.tserver.PgActiveSessionHistoryResponsePB.DEPRECATED_flush_and_compaction_wait_states:type_name -> yb.tserver.WaitStatesPB
	110, // 142: yb.tserver.PgActiveSessionHistoryResponsePB.DEPRECATED_raft_log_appender_wait_states:type_name -> yb.tserver.WaitStatesPB
	110, // 143: yb.tserver.PgActiveSessionHistoryResponsePB.cql_wait_states:type_name -> yb.tserver.WaitStatesPB
	8,   // 144: yb.tserver.PgGetActiveTransactionListRequestPB.session_id:type_name -> yb.tserver.OptionalUint64PB
	149, // 145: yb.tserver.PgGetActiveTransactionListRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 146: yb.tserver.PgGetActiveTransactionListResponsePB.status:type_name -> yb.AppStatusPB
	147, // 147: yb.tserver.PgGetActiveTransactionListResponsePB.entries:type_name -> yb.tserver.PgGetActiveTransactionListResponsePB.EntryPB
	11,  // 148: yb.tserver.PgGetTableKeyRangesRequestPB.table_id:type_name -> yb.tserver.PgObjectIdPB
	149, // 149: yb.tserver.PgGetTableKeyRangesRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 150: yb.tserver.PgGetTableKeyRangesResponsePB.status:type_name -> yb.AppStatusPB
	149, // 151: yb.tserver.PgGetNewObjectIdRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 152: yb.tserver.PgGetNewObjectIdResponsePB.status:type_name -> yb.AppStatusPB
	148, // 153: yb.tserver.PgFetchDataResponsePB.status:type_name -> yb.AppStatusPB
	149, // 154: yb.tserver.PgYCQLStatementStatsRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 155: yb.tserver.PgYCQLStatementStatsResponsePB.status:type_name -> yb.AppStatusPB
	122, // 156: yb.tserver.PgYCQLStatementStatsResponsePB.statements:type_name -> yb.tserver.YCQLStatementStatsPB
	149, // 157: yb.tserver.PgTabletsMetadataRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 158: yb.tserver.PgTabletsMetadataResponsePB.status:type_name -> yb.AppStatusPB
	161, // 159: yb.tserver.PgTabletsMetadataResponsePB.tablets:type_name -> yb.tablet.TabletStatusPB
	149, // 160: yb.tserver.PgServersMetricsRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	162, // 161: yb.tserver.PgServerMetricsInfoPB.metrics:type_name -> yb.TserverMetricsInfoPB
	5,   // 162: yb.tserver.PgServerMetricsInfoPB.status:type_name -> yb.tserver.PgMetricsInfoStatus
	148, // 163: yb.tserver.PgServersMetricsResponsePB.status:type_name -> yb.AppStatusPB
	126, // 164: yb.tserver.PgServersMetricsResponsePB.servers_metrics:type_name -> yb.tserver.PgServerMetricsInfoPB
	149, // 165: yb.tserver.PgCronSetLastMinuteRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 166: yb.tserver.PgCronSetLastMinuteResponsePB.status:type_name -> yb.AppStatusPB
	149, // 167: yb.tserver.PgCronGetLastMinuteRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 168: yb.tserver.PgCronGetLastMinuteResponsePB.status:type_name -> yb.AppStatusPB
	149, // 169: yb.tserver.PgListClonesRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 170: yb.tserver.PgListClonesResponsePB.status:type_name -> yb.AppStatusPB
	134, // 171: yb.tserver.PgListClonesResponsePB.database_clones:type_name -> yb.tserver.PgDatabaseCloneInfoPB
	163, // 172: yb.tserver.PgExportTxnSnapshotRequestPB.snapshot:type_name -> yb.PgTxnSnapshotPB
	69,  // 173: yb.tserver.PgExportTxnSnapshotRequestPB.options:type_name -> yb.tserver.PgPerformOptionsPB
	157, // 174: yb.tserver.PgExportTxnSnapshotRequestPB.explicit_read_time:type_name -> yb.ReadHybridTimePB
	149, // 175: yb.tserver.PgExportTxnSnapshotRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 176: yb.tserver.PgExportTxnSnapshotResponsePB.status:type_name -> yb.AppStatusPB
	157, // 177: yb.tserver.PgSetTxnSnapshotRequestPB.explicit_read_time:type_name -> yb.ReadHybridTimePB
	69,  // 178: yb.tserver.PgSetTxnSnapshotRequestPB.options:type_name -> yb.tserver.PgPerformOptionsPB
	149, // 179: yb.tserver.PgSetTxnSnapshotRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 180: yb.tserver.PgSetTxnSnapshotResponsePB.status:type_name -> yb.AppStatusPB
	163, // 181: yb.tserver.PgSetTxnSnapshotResponsePB.snapshot:type_name -> yb.PgTxnSnapshotPB
	149, // 182: yb.tserver.PgClearExportedTxnSnapshotsRequestPB.ash_metadata:type_name -> yb.AshMetadataPB
	148, // 183: yb.tserver.PgClearExportedTxnSnapshotsResponsePB.status:type_name -> yb.AppStatusPB
	7,   // 184: yb.tserver.PgFinishTransactionRequestPB.DdlModePB.silently_altered_db:type_name -> yb.tserver.OptionalUint32PB
	164, // 185: yb.tserver.PgGetLockStatusResponsePB.NodeLockStatusResponsePB.tablet_lock_infos:type_name -> yb.TabletLockInfoPB
	143, // 186: yb.tserver.PgGetLockStatusResponsePB.TransactionsByNodeEntry.value:type_name -> yb.tserver.PgGetLockStatusResponsePB.TransactionList
	18,  // 187: yb.tserver.PgReplicationSlotInfoPB.ReplicaIdentityMapEntry.value:type_name -> yb.tserver.PgReplicaIdentityPB
	7,   // 188: yb.tserver.PgPerformOptionsPB.CachingInfoPB.lifetime_threshold_ms:type_name -> yb.tserver.OptionalUint32PB
	9,   // 189: yb.tserver.PgClientService.Heartbeat:input_type -> yb.tserver.PgHeartbeatRequestPB
	12,  // 190: yb.tserver.PgClientService.AlterDatabase:input_type -> yb.tserver.PgAlterDatabaseRequestPB
	19,  // 191: yb.tserver.PgClientService.AlterTable:input_type -> yb.tserver.PgAlterTableRequestPB
	14,  // 192: yb.tserver.PgClientService.BackfillIndex:input_type -> yb.tserver.PgBackfillIndexRequestPB
	21,  // 193: yb.tserver.PgClientService.CreateDatabase:input_type -> yb.tserver.PgCreateDatabaseRequestPB
	24,  // 194: yb.tserver.PgClientService.CreateReplicationSlot:input_type -> yb.tserver.PgCreateReplicationSlotRequestPB
	23,  // 195: yb.tserver.PgClientService.CreateSequencesDataTable:input_type -> yb.tserver.PgCreateSequencesDataTableRequestPB
	29,  // 196: yb.tserver.PgClientService.CreateTable:input_type -> yb.tserver.PgCreateTableRequestPB
	31,  // 197: yb.tserver.PgClientService.CreateTablegroup:input_type -> yb.tserver.PgCreateTablegroupRequestPB
	33,  // 198: yb.tserver.PgClientService.DropDatabase:input_type -> yb.tserver.PgDropDatabaseRequestPB
	35,  // 199: yb.tserver.PgClientService.DropReplicationSlot:input_type -> yb.tserver.PgDropReplicationSlotRequestPB
	37,  // 200: yb.tserver.PgClientService.DropTable:input_type -> yb.tserver.PgDropTableRequestPB
	39,  // 201: yb.tserver.PgClientService.DropTablegroup:input_type -> yb.tserver.PgDropTablegroupRequestPB
	42,  // 202: yb.tserver.PgClientService.FinishTransaction:input_type -> yb.tserver.PgFinishTransactionRequestPB
	41,  // 203: yb.tserver.PgClientService.GetCatalogMasterVersion:input_type -> yb.tserver.PgGetCatalogMasterVersionRequestPB
	45,  // 204: yb.tserver.PgClientService.GetDatabaseInfo:input_type -> yb.tserver.PgGetDatabaseInfoRequestPB
	49,  // 205: yb.tserver.PgClientService.GetLockStatus:input_type -> yb.tserver.PgGetLockStatusRequestPB
	51,  // 206: yb.tserver.PgClientService.GetReplicationSlot:input_type -> yb.tserver.PgGetReplicationSlotRequestPB
	47,  // 207: yb.tserver.PgClientService.IsInitDbDone:input_type -> yb.tserver.PgIsInitDbDoneRequestPB
	55,  // 208: yb.tserver.PgClientService.ListLiveTabletServers:input_type -> yb.tserver.PgListLiveTabletServersRequestPB
	60,  // 209: yb.tserver.PgClientService.ListReplicationSlots:input_type -> yb.tserver.PgListReplicationSlotsRequestPB
	57,  // 210: yb.tserver.PgClientService.GetIndexBackfillProgress:input_type -> yb.tserver.PgGetIndexBackfillProgressRequestPB
	63,  // 211: yb.tserver.PgClientService.OpenTable:input_type -> yb.tserver.PgOpenTableRequestPB
	66,  // 212: yb.tserver.PgClientService.GetTablePartitionList:input_type -> yb.tserver.PgGetTablePartitionListRequestPB
	70,  // 213: yb.tserver.PgClientService.Perform:input_type -> yb.tserver.PgPerformRequestPB
	72,  // 214: yb.tserver.PgClientService.ReserveOids:input_type -> yb.tserver.PgReserveOidsRequestPB
	74,  // 215: yb.tserver.PgClientService.RollbackToSubTransaction:input_type -> yb.tserver.PgRollbackToSubTransactionRequestPB
	78,  // 216: yb.tserver.PgClientService.TabletServerCount:input_type -> yb.tserver.PgTabletServerCountRequestPB
	80,  // 217: yb.tserver.PgClientService.TruncateTable:input_type -> yb.tserver.PgTruncateTableRequestPB
	83,  // 218: yb.tserver.PgClientService.ValidatePlacement:input_type -> yb.tserver.PgValidatePlacementRequestPB
	97,  // 219: yb.tserver.PgClientService.GetTableDiskSize:input_type -> yb.tserver.PgGetTableDiskSizeRequestPB
	105, // 220: yb.tserver.PgClientService.WaitForBackendsCatalogVersion:input_type -> yb.tserver.PgWaitForBackendsCatalogVersionRequestPB
	85,  // 221: yb.tserver.PgClientService.InsertSequenceTuple:input_type -> yb.tserver.PgInsertSequenceTupleRequestPB
	87,  // 222: yb.tserver.PgClientService.UpdateSequenceTuple:input_type -> yb.tserver.PgUpdateSequenceTupleRequestPB
	89,  // 223: yb.tserver.PgClientService.FetchSequenceTuple:input_type -> yb.tserver.PgFetchSequenceTupleRequestPB
	91,  // 224: yb.tserver.PgClientService.ReadSequenceTuple:input_type -> yb.tserver.PgReadSequenceTupleRequestPB
	93,  // 225: yb.tserver.PgClientService.DeleteSequenceTuple:input_type -> yb.tserver.PgDeleteSequenceTupleRequestPB
	95,  // 226: yb.tserver.PgClientService.DeleteDBSequences:input_type -> yb.tserver.PgDeleteDBSequencesRequestPB
	99,  // 227: yb.tserver.PgClientService.CheckIfPitrActive:input_type -> yb.tserver.PgCheckIfPitrActiveRequestPB
	101, // 228: yb.tserver.PgClientService.IsObjectPartOfXRepl:input_type -> yb.tserver.PgIsObjectPartOfXReplRequestPB
	103, // 229: yb.tserver.PgClientService.GetTserverCatalogVersionInfo:input_type -> yb.tserver.PgGetTserverCatalogVersionInfoRequestPB
	107, // 230: yb.tserver.PgClientService.CancelTransaction:input_type -> yb.tserver.PgCancelTransactionRequestPB
	109, // 231: yb.tserver.PgClientService.ActiveSessionHistory:input_type -> yb.tserver.PgActiveSessionHistoryRequestPB
	112, // 232: yb.tserver.PgClientService.GetActiveTransactionList:input_type -> yb.tserver.PgGetActiveTransactionListRequestPB
	114, // 233: yb.tserver.PgClientService.GetTableKeyRanges:input_type -> yb.tserver.PgGetTableKeyRangesRequestPB
	116, // 234: yb.tserver.PgClientService.GetNewObjectId:input_type -> yb.tserver.PgGetNewObjectIdRequestPB
	123, // 235: yb.tserver.PgClientService.TabletsMetadata:input_type -> yb.tserver.PgTabletsMetadataRequestPB
	125, // 236: yb.tserver.PgClientService.ServersMetrics:input_type -> yb.tserver.PgServersMetricsRequestPB
	132, // 237: yb.tserver.PgClientService.ListClones:input_type -> yb.tserver.PgListClonesRequestPB
	53,  // 238: yb.tserver.PgClientService.GetReplicationSlotStatus:input_type -> yb.tserver.PgGetReplicationSlotStatusRequestPB
	76,  // 239: yb.tserver.PgClientService.SetActiveSubTransaction:input_type -> yb.tserver.PgSetActiveSubTransactionRequestPB
	118, // 240: yb.tserver.PgClientService.FetchData:input_type -> yb.tserver.PgFetchDataRequestPB
	120, // 241: yb.tserver.PgClientService.YCQLStatementStats:input_type -> yb.tserver.PgYCQLStatementStatsRequestPB
	128, // 242: yb.tserver.PgClientService.CronSetLastMinute:input_type -> yb.tserver.PgCronSetLastMinuteRequestPB
	130, // 243: yb.tserver.PgClientService.CronGetLastMinute:input_type -> yb.tserver.PgCronGetLastMinuteRequestPB
	135, // 244: yb.tserver.PgClientService.ExportTxnSnapshot:input_type -> yb.tserver.PgExportTxnSnapshotRequestPB
	137, // 245: yb.tserver.PgClientService.SetTxnSnapshot:input_type -> yb.tserver.PgSetTxnSnapshotRequestPB
	139, // 246: yb.tserver.PgClientService.ClearExportedTxnSnapshots:input_type -> yb.tserver.PgClearExportedTxnSnapshotsRequestPB
	10,  // 247: yb.tserver.PgClientService.Heartbeat:output_type -> yb.tserver.PgHeartbeatResponsePB
	13,  // 248: yb.tserver.PgClientService.AlterDatabase:output_type -> yb.tserver.PgAlterDatabaseResponsePB
	20,  // 249: yb.tserver.PgClientService.AlterTable:output_type -> yb.tserver.PgAlterTableResponsePB
	15,  // 250: yb.tserver.PgClientService.BackfillIndex:output_type -> yb.tserver.PgBackfillIndexResponsePB
	22,  // 251: yb.tserver.PgClientService.CreateDatabase:output_type -> yb.tserver.PgCreateDatabaseResponsePB
	25,  // 252: yb.tserver.PgClientService.CreateReplicationSlot:output_type -> yb.tserver.PgCreateReplicationSlotResponsePB
	26,  // 253: yb.tserver.PgClientService.CreateSequencesDataTable:output_type -> yb.tserver.PgCreateSequencesDataTableResponsePB
	30,  // 254: yb.tserver.PgClientService.CreateTable:output_type -> yb.tserver.PgCreateTableResponsePB
	32,  // 255: yb.tserver.PgClientService.CreateTablegroup:output_type -> yb.tserver.PgCreateTablegroupResponsePB
	34,  // 256: yb.tserver.PgClientService.DropDatabase:output_type -> yb.tserver.PgDropDatabaseResponsePB
	36,  // 257: yb.tserver.PgClientService.DropReplicationSlot:output_type -> yb.tserver.PgDropReplicationSlotResponsePB
	38,  // 258: yb.tserver.PgClientService.DropTable:output_type -> yb.tserver.PgDropTableResponsePB
	40,  // 259: yb.tserver.PgClientService.DropTablegroup:output_type -> yb.tserver.PgDropTablegroupResponsePB
	43,  // 260: yb.tserver.PgClientService.FinishTransaction:output_type -> yb.tserver.PgFinishTransactionResponsePB
	44,  // 261: yb.tserver.PgClientService.GetCatalogMasterVersion:output_type -> yb.tserver.PgGetCatalogMasterVersionResponsePB
	46,  // 262: yb.tserver.PgClientService.GetDatabaseInfo:output_type -> yb.tserver.PgGetDatabaseInfoResponsePB
	50,  // 263: yb.tserver.PgClientService.GetLockStatus:output_type -> yb.tserver.PgGetLockStatusResponsePB
	52,  // 264: yb.tserver.PgClientService.GetReplicationSlot:output_type -> yb.tserver.PgGetReplicationSlotResponsePB
	48,  // 265: yb.tserver.PgClientService.IsInitDbDone:output_type -> yb.tserver.PgIsInitDbDoneResponsePB
	59,  // 266: yb.tserver.PgClientService.ListLiveTabletServers:output_type -> yb.tserver.PgListLiveTabletServersResponsePB
	62,  // 267: yb.tserver.PgClientService.ListReplicationSlots:output_type -> yb.tserver.PgListReplicationSlotsResponsePB
	58,  // 268: yb.tserver.PgClientService.GetIndexBackfillProgress:output_type -> yb.tserver.PgGetIndexBackfillProgressResponsePB
	65,  // 269: yb.tserver.PgClientService.OpenTable:output_type -> yb.tserver.PgOpenTableResponsePB
	67,  // 270: yb.tserver.PgClientService.GetTablePartitionList:output_type -> yb.tserver.PgGetTablePartitionListResponsePB
	71,  // 271: yb.tserver.PgClientService.Perform:output_type -> yb.tserver.PgPerformResponsePB
	73,  // 272: yb.tserver.PgClientService.ReserveOids:output_type -> yb.tserver.PgReserveOidsResponsePB
	75,  // 273: yb.tserver.PgClientService.RollbackToSubTransaction:output_type -> yb.tserver.PgRollbackToSubTransactionResponsePB
	79,  // 274: yb.tserver.PgClientService.TabletServerCount:output_type -> yb.tserver.PgTabletServerCountResponsePB
	81,  // 275: yb.tserver.PgClientService.TruncateTable:output_type -> yb.tserver.PgTruncateTableResponsePB
	84,  // 276: yb.tserver.PgClientService.ValidatePlacement:output_type -> yb.tserver.PgValidatePlacementResponsePB
	98,  // 277: yb.tserver.PgClientService.GetTableDiskSize:output_type -> yb.tserver.PgGetTableDiskSizeResponsePB
	106, // 278: yb.tserver.PgClientService.WaitForBackendsCatalogVersion:output_type -> yb.tserver.PgWaitForBackendsCatalogVersionResponsePB
	86,  // 279: yb.tserver.PgClientService.InsertSequenceTuple:output_type -> yb.tserver.PgInsertSequenceTupleResponsePB
	88,  // 280: yb.tserver.PgClientService.UpdateSequenceTuple:output_type -> yb.tserver.PgUpdateSequenceTupleResponsePB
	90,  // 281: yb.tserver.PgClientService.FetchSequenceTuple:output_type -> yb.tserver.PgFetchSequenceTupleResponsePB
	92,  // 282: yb.tserver.PgClientService.ReadSequenceTuple:output_type -> yb.tserver.PgReadSequenceTupleResponsePB
	94,  // 283: yb.tserver.PgClientService.DeleteSequenceTuple:output_type -> yb.tserver.PgDeleteSequenceTupleResponsePB
	96,  // 284: yb.tserver.PgClientService.DeleteDBSequences:output_type -> yb.tserver.PgDeleteDBSequencesResponsePB
	100, // 285: yb.tserver.PgClientService.CheckIfPitrActive:output_type -> yb.tserver.PgCheckIfPitrActiveResponsePB
	102, // 286: yb.tserver.PgClientService.IsObjectPartOfXRepl:output_type -> yb.tserver.PgIsObjectPartOfXReplResponsePB
	104, // 287: yb.tserver.PgClientService.GetTserverCatalogVersionInfo:output_type -> yb.tserver.PgGetTserverCatalogVersionInfoResponsePB
	108, // 288: yb.tserver.PgClientService.CancelTransaction:output_type -> yb.tserver.PgCancelTransactionResponsePB
	111, // 289: yb.tserver.PgClientService.ActiveSessionHistory:output_type -> yb.tserver.PgActiveSessionHistoryResponsePB
	113, // 290: yb.tserver.PgClientService.GetActiveTransactionList:output_type -> yb.tserver.PgGetActiveTransactionListResponsePB
	115, // 291: yb.tserver.PgClientService.GetTableKeyRanges:output_type -> yb.tserver.PgGetTableKeyRangesResponsePB
	117, // 292: yb.tserver.PgClientService.GetNewObjectId:output_type -> yb.tserver.PgGetNewObjectIdResponsePB
	124, // 293: yb.tserver.PgClientService.TabletsMetadata:output_type -> yb.tserver.PgTabletsMetadataResponsePB
	127, // 294: yb.tserver.PgClientService.ServersMetrics:output_type -> yb.tserver.PgServersMetricsResponsePB
	133, // 295: yb.tserver.PgClientService.ListClones:output_type -> yb.tserver.PgListClonesResponsePB
	54,  // 296: yb.tserver.PgClientService.GetReplicationSlotStatus:output_type -> yb.tserver.PgGetReplicationSlotStatusResponsePB
	77,  // 297: yb.tserver.PgClientService.SetActiveSubTransaction:output_type -> yb.tserver.PgSetActiveSubTransactionResponsePB
	119, // 298: yb.tserver.PgClientService.FetchData:output_type -> yb.tserver.PgFetchDataResponsePB
	121, // 299: yb.tserver.PgClientService.YCQLStatementStats:output_type -> yb.tserver.PgYCQLStatementStatsResponsePB
	129, // 300: yb.tserver.PgClientService.CronSetLastMinute:output_type -> yb.tserver.PgCronSetLastMinuteResponsePB
	131, // 301: yb.tserver.PgClientService.CronGetLastMinute:output_type -> yb.tserver.PgCronGetLastMinuteResponsePB
	136, // 302: yb.tserver.PgClientService.ExportTxnSnapshot:output_type -> yb.tserver.PgExportTxnSnapshotResponsePB
	138, // 303: yb.tserver.PgClientService.SetTxnSnapshot:output_type -> yb.tserver.PgSetTxnSnapshotResponsePB
	140, // 304: yb.tserver.PgClientService.ClearExportedTxnSnapshots:output_type -> yb.tserver.PgClearExportedTxnSnapshotsResponsePB
	247, // [247:305] is the sub-list for method output_type
	189, // [189:247] is the sub-list for method input_type
	189, // [189:189] is the sub-list for extension type_name
	189, // [189:189] is the sub-list for extension extendee
	0,   // [0:189] is the sub-list for field type_name
}

func init() { file_yb_tserver_pg_client_proto_init() }
func file_yb_tserver_pg_client_proto_init() {
	if File_yb_tserver_pg_client_proto != nil {
		return
	}
	file_yb_tserver_pg_client_proto_msgTypes[23].OneofWrappers = []any{
		(*PgCreateTableRequestPB_ColocationId)(nil),
	}
	file_yb_tserver_pg_client_proto_msgTypes[62].OneofWrappers = []any{
		(*PgPerformOpPB_Write)(nil),
		(*PgPerformOpPB_Read)(nil),
	}
	file_yb_tserver_pg_client_proto_msgTypes[131].OneofWrappers = []any{
		(*PgSetTxnSnapshotRequestPB_SnapshotId)(nil),
		(*PgSetTxnSnapshotRequestPB_ExplicitReadTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yb_tserver_pg_client_proto_rawDesc), len(file_yb_tserver_pg_client_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   142,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_tserver_pg_client_proto_goTypes,
		DependencyIndexes: file_yb_tserver_pg_client_proto_depIdxs,
		EnumInfos:         file_yb_tserver_pg_client_proto_enumTypes,
		MessageInfos:      file_yb_tserver_pg_client_proto_msgTypes,
	}.Build()
	File_yb_tserver_pg_client_proto = out.File
	file_yb_tserver_pg_client_proto_goTypes = nil
	file_yb_tserver_pg_client_proto_depIdxs = nil
}
